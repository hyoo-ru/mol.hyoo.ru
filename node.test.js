"use strict";
"use strict";
Error.stackTraceLimit = 50;
var $;
(function ($) {
})($ || ($ = {}));
module.exports = $;

;
"use strict"

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	else for (var i = decorators.length - 1; i >= 0; i--) if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var $ = ( typeof module === 'object' ) ? ( module['export'+'s'] = globalThis ) : globalThis
$.$$ = $

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $.$mol_ambient_ref = Symbol('$mol_ambient_ref');
    function $mol_ambient(overrides) {
        return Object.setPrototypeOf(overrides, this || $);
    }
    $.$mol_ambient = $mol_ambient;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const instances = new WeakSet();
    function $mol_delegate(proto, target) {
        const proxy = new Proxy(proto, {
            get: (_, field) => {
                const obj = target();
                let val = Reflect.get(obj, field);
                if (typeof val === 'function') {
                    val = val.bind(obj);
                }
                return val;
            },
            has: (_, field) => Reflect.has(target(), field),
            set: (_, field, value) => Reflect.set(target(), field, value),
            getOwnPropertyDescriptor: (_, field) => Reflect.getOwnPropertyDescriptor(target(), field),
            ownKeys: () => Reflect.ownKeys(target()),
            getPrototypeOf: () => Reflect.getPrototypeOf(target()),
            setPrototypeOf: (_, donor) => Reflect.setPrototypeOf(target(), donor),
            isExtensible: () => Reflect.isExtensible(target()),
            preventExtensions: () => Reflect.preventExtensions(target()),
            apply: (_, self, args) => Reflect.apply(target(), self, args),
            construct: (_, args, retarget) => Reflect.construct(target(), args, retarget),
            defineProperty: (_, field, descr) => Reflect.defineProperty(target(), field, descr),
            deleteProperty: (_, field) => Reflect.deleteProperty(target(), field),
        });
        instances.add(proxy);
        return proxy;
    }
    $.$mol_delegate = $mol_delegate;
    Reflect.defineProperty($mol_delegate, Symbol.hasInstance, {
        value: (obj) => instances.has(obj),
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_owning_map = new WeakMap();
    function $mol_owning_allow(having) {
        try {
            if (!having)
                return false;
            if (typeof having !== 'object' && typeof having !== 'function')
                return false;
            if (having instanceof $mol_delegate)
                return false;
            if (typeof having['destructor'] !== 'function')
                return false;
            return true;
        }
        catch {
            return false;
        }
    }
    $.$mol_owning_allow = $mol_owning_allow;
    function $mol_owning_get(having, Owner) {
        if (!$mol_owning_allow(having))
            return null;
        while (true) {
            const owner = $.$mol_owning_map.get(having);
            if (!owner)
                return owner;
            if (!Owner)
                return owner;
            if (owner instanceof Owner)
                return owner;
            having = owner;
        }
    }
    $.$mol_owning_get = $mol_owning_get;
    function $mol_owning_check(owner, having) {
        if (!$mol_owning_allow(having))
            return false;
        if ($.$mol_owning_map.get(having) !== owner)
            return false;
        return true;
    }
    $.$mol_owning_check = $mol_owning_check;
    function $mol_owning_catch(owner, having) {
        if (!$mol_owning_allow(having))
            return false;
        if ($.$mol_owning_map.get(having))
            return false;
        $.$mol_owning_map.set(having, owner);
        return true;
    }
    $.$mol_owning_catch = $mol_owning_catch;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_fail(error) {
        throw error;
    }
    $.$mol_fail = $mol_fail;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_fail_hidden(error) {
        throw error;
    }
    $.$mol_fail_hidden = $mol_fail_hidden;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    const named = new WeakSet();
    function $mol_func_name(func) {
        let name = func.name;
        if (name?.length > 1)
            return name;
        if (named.has(func))
            return name;
        for (let key in this) {
            try {
                if (this[key] !== func)
                    continue;
                name = key;
                Object.defineProperty(func, 'name', { value: name });
                break;
            }
            catch { }
        }
        named.add(func);
        return name;
    }
    $.$mol_func_name = $mol_func_name;
    function $mol_func_name_from(target, source) {
        Object.defineProperty(target, 'name', { value: source.name });
        return target;
    }
    $.$mol_func_name_from = $mol_func_name_from;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_object2 {
        static $ = $;
        [Symbol.toStringTag];
        [$mol_ambient_ref] = null;
        get $() {
            if (this[$mol_ambient_ref])
                return this[$mol_ambient_ref];
            const owner = $mol_owning_get(this);
            return this[$mol_ambient_ref] = owner?.$ || $mol_object2.$;
        }
        set $(next) {
            if (this[$mol_ambient_ref])
                $mol_fail_hidden(new Error('Context already defined'));
            this[$mol_ambient_ref] = next;
        }
        static create(init) {
            const obj = new this;
            if (init)
                init(obj);
            return obj;
        }
        static [Symbol.toPrimitive]() {
            return this.toString();
        }
        static toString() {
            return this[Symbol.toStringTag] || this.$.$mol_func_name(this);
        }
        static toJSON() {
            return this.toString();
        }
        destructor() { }
        static destructor() { }
        toString() {
            return this[Symbol.toStringTag] || this.constructor.name + '<>';
        }
    }
    $.$mol_object2 = $mol_object2;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    let $$;
    (function ($$) {
        let $;
    })($$ = $_1.$$ || ($_1.$$ = {}));
    $_1.$mol_object_field = Symbol('$mol_object_field');
    class $mol_object extends $mol_object2 {
        static make(config) {
            return super.create(obj => {
                for (let key in config)
                    obj[key] = config[key];
            });
        }
    }
    $_1.$mol_object = $mol_object;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_window extends $mol_object {
        static size() {
            return {
                width: 1024,
                height: 768,
            };
        }
    }
    $.$mol_window = $mol_window;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $mol_wire_cursor;
    (function ($mol_wire_cursor) {
        $mol_wire_cursor[$mol_wire_cursor["stale"] = -1] = "stale";
        $mol_wire_cursor[$mol_wire_cursor["doubt"] = -2] = "doubt";
        $mol_wire_cursor[$mol_wire_cursor["fresh"] = -3] = "fresh";
        $mol_wire_cursor[$mol_wire_cursor["final"] = -4] = "final";
    })($mol_wire_cursor = $.$mol_wire_cursor || ($.$mol_wire_cursor = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_pub extends Object {
        data = [];
        static get [Symbol.species]() {
            return Array;
        }
        sub_from = 0;
        get sub_list() {
            const res = [];
            for (let i = this.sub_from; i < this.data.length; i += 2) {
                res.push(this.data[i]);
            }
            return res;
        }
        get sub_empty() {
            return this.sub_from === this.data.length;
        }
        sub_on(sub, pub_pos) {
            const pos = this.data.length;
            this.data.push(sub, pub_pos);
            return pos;
        }
        sub_off(sub_pos) {
            if (!(sub_pos < this.data.length)) {
                $mol_fail(new Error(`Wrong pos ${sub_pos}`));
            }
            const end = this.data.length - 2;
            if (sub_pos !== end) {
                this.peer_move(end, sub_pos);
            }
            this.data.length = end;
            if (end === this.sub_from)
                this.reap();
        }
        reap() { }
        promote() {
            $mol_wire_auto()?.track_next(this);
        }
        fresh() { }
        complete() { }
        get incompleted() {
            return false;
        }
        emit(quant = $mol_wire_cursor.stale) {
            for (let i = this.sub_from; i < this.data.length; i += 2) {
                ;
                this.data[i].absorb(quant);
            }
        }
        peer_move(from_pos, to_pos) {
            const peer = this.data[from_pos];
            const self_pos = this.data[from_pos + 1];
            this.data[to_pos] = peer;
            this.data[to_pos + 1] = self_pos;
            peer.peer_repos(self_pos, to_pos);
        }
        peer_repos(peer_pos, self_pos) {
            this.data[peer_pos + 1] = self_pos;
        }
    }
    $.$mol_wire_pub = $mol_wire_pub;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $.$mol_wire_auto_sub = null;
    function $mol_wire_auto(next = $.$mol_wire_auto_sub) {
        return $.$mol_wire_auto_sub = next;
    }
    $.$mol_wire_auto = $mol_wire_auto;
    $.$mol_wire_affected = [];
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $['devtoolsFormatters'] ||= [];
    function $mol_dev_format_register(config) {
        $['devtoolsFormatters'].push(config);
    }
    $.$mol_dev_format_register = $mol_dev_format_register;
    $.$mol_dev_format_head = Symbol('$mol_dev_format_head');
    $.$mol_dev_format_body = Symbol('$mol_dev_format_body');
    $mol_dev_format_register({
        header: (val, config = false) => {
            if (config)
                return null;
            if (!val)
                return null;
            if ($.$mol_dev_format_head in val) {
                try {
                    return val[$.$mol_dev_format_head]();
                }
                catch (error) {
                    return $.$mol_dev_format_accent($mol_dev_format_native(val), '💨', $mol_dev_format_native(error), '');
                }
            }
            if (typeof val === 'function') {
                return $mol_dev_format_native(val);
            }
            if (Symbol.toStringTag in val) {
                return $mol_dev_format_native(val);
            }
            return null;
        },
        hasBody: val => val[$.$mol_dev_format_body],
        body: val => val[$.$mol_dev_format_body](),
    });
    function $mol_dev_format_native(obj) {
        if (typeof obj === 'undefined')
            return $.$mol_dev_format_shade('undefined');
        return [
            'object',
            {
                object: obj,
                config: true,
            },
        ];
    }
    $.$mol_dev_format_native = $mol_dev_format_native;
    function $mol_dev_format_auto(obj) {
        if (obj == null)
            return $.$mol_dev_format_shade(String(obj));
        return [
            'object',
            {
                object: obj,
                config: false,
            },
        ];
    }
    $.$mol_dev_format_auto = $mol_dev_format_auto;
    function $mol_dev_format_element(element, style, ...content) {
        const styles = [];
        for (let key in style)
            styles.push(`${key} : ${style[key]}`);
        return [
            element,
            {
                style: styles.join(' ; '),
            },
            ...content,
        ];
    }
    $.$mol_dev_format_element = $mol_dev_format_element;
    function $mol_dev_format_span(style, ...content) {
        return $mol_dev_format_element('span', {
            ...style,
        }, ...content);
    }
    $.$mol_dev_format_span = $mol_dev_format_span;
    $.$mol_dev_format_div = $mol_dev_format_element.bind(null, 'div');
    $.$mol_dev_format_ol = $mol_dev_format_element.bind(null, 'ol');
    $.$mol_dev_format_li = $mol_dev_format_element.bind(null, 'li');
    $.$mol_dev_format_table = $mol_dev_format_element.bind(null, 'table');
    $.$mol_dev_format_tr = $mol_dev_format_element.bind(null, 'tr');
    $.$mol_dev_format_td = $mol_dev_format_element.bind(null, 'td');
    $.$mol_dev_format_accent = $mol_dev_format_span.bind(null, {
        'color': 'magenta',
    });
    $.$mol_dev_format_strong = $mol_dev_format_span.bind(null, {
        'font-weight': 'bold',
    });
    $.$mol_dev_format_string = $mol_dev_format_span.bind(null, {
        'color': 'green',
    });
    $.$mol_dev_format_shade = $mol_dev_format_span.bind(null, {
        'color': 'gray',
    });
    $.$mol_dev_format_indent = $.$mol_dev_format_div.bind(null, {
        'margin-left': '13px'
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_pub_sub extends $mol_wire_pub {
        pub_from = 0;
        cursor = $mol_wire_cursor.stale;
        get temp() {
            return false;
        }
        get pub_list() {
            const res = [];
            const max = this.cursor >= 0 ? this.cursor : this.sub_from;
            for (let i = this.pub_from; i < max; i += 2) {
                if (this.data[i])
                    res.push(this.data[i]);
            }
            return res;
        }
        track_on() {
            this.cursor = this.pub_from;
            const sub = $mol_wire_auto();
            $mol_wire_auto(this);
            return sub;
        }
        promote() {
            if (this.cursor >= this.pub_from) {
                $mol_fail(new Error('Circular subscription'));
            }
            super.promote();
        }
        track_next(pub) {
            if (this.cursor < 0)
                $mol_fail(new Error('Promo to non begun sub'));
            if (this.cursor < this.sub_from) {
                const next = this.data[this.cursor];
                if (pub === undefined)
                    return next ?? null;
                if (next === pub) {
                    this.cursor += 2;
                    return next;
                }
                if (next) {
                    if (this.sub_from < this.data.length) {
                        this.peer_move(this.sub_from, this.data.length);
                    }
                    this.peer_move(this.cursor, this.sub_from);
                    this.sub_from += 2;
                }
            }
            else {
                if (pub === undefined)
                    return null;
                if (this.sub_from < this.data.length) {
                    this.peer_move(this.sub_from, this.data.length);
                }
                this.sub_from += 2;
            }
            this.data[this.cursor] = pub;
            this.data[this.cursor + 1] = pub.sub_on(this, this.cursor);
            this.cursor += 2;
            return pub;
        }
        track_off(sub) {
            $mol_wire_auto(sub);
            if (this.cursor < 0) {
                $mol_fail(new Error('End of non begun sub'));
            }
            for (let cursor = this.pub_from; cursor < this.cursor; cursor += 2) {
                const pub = this.data[cursor];
                pub.fresh();
            }
            this.cursor = $mol_wire_cursor.fresh;
        }
        pub_off(sub_pos) {
            this.data[sub_pos] = undefined;
            this.data[sub_pos + 1] = undefined;
        }
        destructor() {
            for (let cursor = this.data.length - 2; cursor >= this.sub_from; cursor -= 2) {
                const sub = this.data[cursor];
                const pos = this.data[cursor + 1];
                sub.pub_off(pos);
            }
            this.data.length = this.sub_from;
            this.cursor = this.pub_from;
            this.track_cut();
            this.cursor = $mol_wire_cursor.final;
        }
        track_cut() {
            if (this.cursor < this.pub_from) {
                $mol_fail(new Error('Cut of non begun sub'));
            }
            let end = this.data.length;
            for (let cursor = this.cursor; cursor < this.sub_from; cursor += 2) {
                const pub = this.data[cursor];
                pub?.sub_off(this.data[cursor + 1]);
                end -= 2;
                if (this.sub_from <= end)
                    this.peer_move(end, cursor);
            }
            this.data.length = end;
            this.sub_from = this.cursor;
        }
        complete() { }
        complete_pubs() {
            const limit = this.cursor < 0 ? this.sub_from : this.cursor;
            for (let cursor = this.pub_from; cursor < limit; cursor += 2) {
                const pub = this.data[cursor];
                if (pub?.incompleted)
                    return;
            }
            for (let cursor = this.pub_from; cursor < limit; cursor += 2) {
                const pub = this.data[cursor];
                pub?.complete();
            }
        }
        absorb(quant = $mol_wire_cursor.stale) {
            if (this.cursor === $mol_wire_cursor.final)
                return;
            if (this.cursor >= quant)
                return;
            this.cursor = quant;
            this.emit($mol_wire_cursor.doubt);
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_native(this);
        }
        get pub_empty() {
            return this.sub_from === this.pub_from;
        }
    }
    $.$mol_wire_pub_sub = $mol_wire_pub_sub;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_after_tick extends $mol_object2 {
        task;
        static promise = null;
        cancelled = false;
        constructor(task) {
            super();
            this.task = task;
            if (!$mol_after_tick.promise)
                $mol_after_tick.promise = Promise.resolve().then(() => {
                    $mol_after_tick.promise = null;
                });
            $mol_after_tick.promise.then(() => {
                if (this.cancelled)
                    return;
                task();
            });
        }
        destructor() {
            this.cancelled = true;
        }
    }
    $.$mol_after_tick = $mol_after_tick;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_promise_like(val) {
        try {
            return val && typeof val === 'object' && 'then' in val && typeof val.then === 'function';
        }
        catch {
            return false;
        }
    }
    $.$mol_promise_like = $mol_promise_like;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const wrappers = new WeakMap();
    class $mol_wire_fiber extends $mol_wire_pub_sub {
        task;
        host;
        static warm = true;
        static planning = new Set();
        static reaping = new Set();
        static plan_task = null;
        static plan() {
            if (this.plan_task)
                return;
            this.plan_task = new $mol_after_tick(() => {
                try {
                    this.sync();
                }
                finally {
                    $mol_wire_fiber.plan_task = null;
                }
            });
        }
        static sync() {
            while (this.planning.size) {
                for (const fiber of this.planning) {
                    this.planning.delete(fiber);
                    if (fiber.cursor >= 0)
                        continue;
                    if (fiber.cursor === $mol_wire_cursor.final)
                        continue;
                    fiber.fresh();
                }
            }
            while (this.reaping.size) {
                const fibers = this.reaping;
                this.reaping = new Set;
                for (const fiber of fibers) {
                    if (!fiber.sub_empty)
                        continue;
                    fiber.destructor();
                }
            }
        }
        [Symbol.toStringTag];
        cache = undefined;
        get args() {
            return this.data.slice(0, this.pub_from);
        }
        result() {
            if ($mol_promise_like(this.cache))
                return;
            if (this.cache instanceof Error)
                return;
            return this.cache;
        }
        get incompleted() {
            return $mol_promise_like(this.cache);
        }
        field() {
            return this.task.name + '<>';
        }
        constructor(id, task, host, args) {
            super();
            this.task = task;
            this.host = host;
            if (args)
                this.data.push(...args);
            this.pub_from = this.sub_from = args?.length ?? 0;
            this[Symbol.toStringTag] = id;
        }
        plan() {
            $mol_wire_fiber.planning.add(this);
            $mol_wire_fiber.plan();
            return this;
        }
        reap() {
            $mol_wire_fiber.reaping.add(this);
            $mol_wire_fiber.plan();
        }
        toString() {
            return this[Symbol.toStringTag];
        }
        toJSON() {
            return this[Symbol.toStringTag];
        }
        [$mol_dev_format_head]() {
            const cursor = {
                [$mol_wire_cursor.stale]: '🔴',
                [$mol_wire_cursor.doubt]: '🟡',
                [$mol_wire_cursor.fresh]: '🟢',
                [$mol_wire_cursor.final]: '🔵',
            }[this.cursor] ?? this.cursor.toString();
            return $mol_dev_format_div({}, $mol_owning_check(this, this.cache)
                ? $mol_dev_format_auto({
                    [$mol_dev_format_head]: () => $mol_dev_format_shade(cursor),
                    [$mol_dev_format_body]: () => $mol_dev_format_native(this),
                })
                : $mol_dev_format_shade($mol_dev_format_native(this), cursor), $mol_dev_format_auto(this.cache));
        }
        get $() {
            return (this.host ?? this.task)['$'];
        }
        emit(quant = $mol_wire_cursor.stale) {
            if (this.sub_empty)
                this.plan();
            else
                super.emit(quant);
        }
        fresh() {
            if (this.cursor === $mol_wire_cursor.fresh)
                return;
            if (this.cursor === $mol_wire_cursor.final)
                return;
            check: if (this.cursor === $mol_wire_cursor.doubt) {
                for (let i = this.pub_from; i < this.sub_from; i += 2) {
                    ;
                    this.data[i]?.fresh();
                    if (this.cursor !== $mol_wire_cursor.doubt)
                        break check;
                }
                this.cursor = $mol_wire_cursor.fresh;
                return;
            }
            const bu = this.track_on();
            let result;
            try {
                switch (this.pub_from) {
                    case 0:
                        result = this.task.call(this.host);
                        break;
                    case 1:
                        result = this.task.call(this.host, this.data[0]);
                        break;
                    default:
                        result = this.task.call(this.host, ...this.args);
                        break;
                }
                if ($mol_promise_like(result)) {
                    if (wrappers.has(result)) {
                        result = wrappers.get(result).then(a => a);
                    }
                    else {
                        const put = (res) => {
                            if (this.cache === result)
                                this.put(res);
                            return res;
                        };
                        wrappers.set(result, result = Object.assign(result.then(put, put), { destructor: result.destructor || (() => { }) }));
                        wrappers.set(result, result);
                        const error = new Error(`Promise in ${this}`);
                        Object.defineProperty(result, 'stack', { get: () => error.stack });
                    }
                }
            }
            catch (error) {
                if (error instanceof Error || $mol_promise_like(error)) {
                    result = error;
                }
                else {
                    result = new Error(String(error), { cause: error });
                }
                if ($mol_promise_like(result)) {
                    if (wrappers.has(result)) {
                        result = wrappers.get(result);
                    }
                    else {
                        wrappers.set(result, result = Object.assign(result.finally(() => {
                            if (this.cache === result)
                                this.absorb();
                        }), { destructor: result.destructor || (() => { }) }));
                        const error = new Error(`Promise in ${this}`);
                        Object.defineProperty(result, 'stack', { get: () => error.stack });
                    }
                }
            }
            if (!$mol_promise_like(result)) {
                this.track_cut();
            }
            this.track_off(bu);
            this.put(result);
            return this;
        }
        refresh() {
            this.cursor = $mol_wire_cursor.stale;
            this.fresh();
        }
        sync() {
            if (!$mol_wire_fiber.warm) {
                return this.result();
            }
            this.promote();
            this.fresh();
            if (this.cache instanceof Error) {
                return $mol_fail_hidden(this.cache);
            }
            if ($mol_promise_like(this.cache)) {
                return $mol_fail_hidden(this.cache);
            }
            return this.cache;
        }
        async async_raw() {
            while (true) {
                this.fresh();
                if (this.cache instanceof Error) {
                    $mol_fail_hidden(this.cache);
                }
                if (!$mol_promise_like(this.cache))
                    return this.cache;
                await Promise.race([this.cache, this.step()]);
                if (!$mol_promise_like(this.cache))
                    return this.cache;
                if (this.cursor === $mol_wire_cursor.final) {
                    await new Promise(() => { });
                }
            }
        }
        async() {
            const promise = this.async_raw();
            if (!promise.destructor)
                promise.destructor = () => this.destructor();
            return promise;
        }
        step() {
            return new Promise(done => {
                const sub = new $mol_wire_pub_sub;
                const prev = sub.track_on();
                sub.track_next(this);
                sub.track_off(prev);
                sub.absorb = () => {
                    done(null);
                    setTimeout(() => sub.destructor());
                };
            });
        }
        destructor() {
            super.destructor();
            if ($mol_owning_check(this, this.cache)) {
                this.cache.destructor();
            }
        }
    }
    $.$mol_wire_fiber = $mol_wire_fiber;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_guid(length = 8, exists = () => false) {
        for (;;) {
            let id = Math.random().toString(36).substring(2, length + 2).toUpperCase();
            if (exists(id))
                continue;
            return id;
        }
    }
    $.$mol_guid = $mol_guid;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_key_store = new WeakMap();
    const TypedArray = Object.getPrototypeOf(Uint8Array);
    function $mol_key(value) {
        if (typeof value === 'bigint')
            return value.toString() + 'n';
        if (typeof value === 'symbol')
            return value.description;
        if (!value)
            return JSON.stringify(value);
        if (typeof value !== 'object' && typeof value !== 'function')
            return JSON.stringify(value);
        return JSON.stringify(value, (field, value) => {
            if (typeof value === 'bigint')
                return value.toString() + 'n';
            if (typeof value === 'symbol')
                return value.description;
            if (!value)
                return value;
            if (typeof value !== 'object' && typeof value !== 'function')
                return value;
            if (Array.isArray(value))
                return value;
            const proto = Reflect.getPrototypeOf(value);
            if (!proto)
                return value;
            if (Reflect.getPrototypeOf(proto) === null)
                return value;
            if ('toJSON' in value)
                return value;
            if (value instanceof RegExp)
                return value.toString();
            if (value instanceof TypedArray)
                return [...value];
            let key = $.$mol_key_store.get(value);
            if (key)
                return key;
            key = $mol_guid();
            $.$mol_key_store.set(value, key);
            return key;
        });
    }
    $.$mol_key = $mol_key;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_after_timeout extends $mol_object2 {
        delay;
        task;
        id;
        constructor(delay, task) {
            super();
            this.delay = delay;
            this.task = task;
            this.id = setTimeout(task, delay);
        }
        destructor() {
            clearTimeout(this.id);
        }
    }
    $.$mol_after_timeout = $mol_after_timeout;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_after_frame extends $mol_after_timeout {
        task;
        constructor(task) {
            super(16, task);
            this.task = task;
        }
    }
    $.$mol_after_frame = $mol_after_frame;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_compare_deep_cache = new WeakMap();
    function $mol_compare_deep(left, right) {
        if (Object.is(left, right))
            return true;
        if (left === null)
            return false;
        if (right === null)
            return false;
        if (typeof left !== 'object')
            return false;
        if (typeof right !== 'object')
            return false;
        const left_proto = Reflect.getPrototypeOf(left);
        const right_proto = Reflect.getPrototypeOf(right);
        if (left_proto !== right_proto)
            return false;
        if (left instanceof Boolean)
            return Object.is(left.valueOf(), right['valueOf']());
        if (left instanceof Number)
            return Object.is(left.valueOf(), right['valueOf']());
        if (left instanceof String)
            return Object.is(left.valueOf(), right['valueOf']());
        if (left instanceof Date)
            return Object.is(left.valueOf(), right['valueOf']());
        if (left instanceof RegExp)
            return left.source === right.source && left.flags === right.flags;
        if (left instanceof Error)
            return left.message === right.message && left.stack === right.stack;
        let left_cache = $.$mol_compare_deep_cache.get(left);
        if (left_cache) {
            const right_cache = left_cache.get(right);
            if (typeof right_cache === 'boolean')
                return right_cache;
        }
        else {
            left_cache = new WeakMap();
            $.$mol_compare_deep_cache.set(left, left_cache);
        }
        left_cache.set(right, true);
        let result;
        try {
            if (!left_proto)
                result = compare_pojo(left, right);
            else if (!Reflect.getPrototypeOf(left_proto))
                result = compare_pojo(left, right);
            else if (Symbol.toPrimitive in left)
                result = compare_primitive(left, right);
            else if (Array.isArray(left))
                result = compare_array(left, right);
            else if (left instanceof Set)
                result = compare_set(left, right);
            else if (left instanceof Map)
                result = compare_map(left, right);
            else if (ArrayBuffer.isView(left))
                result = compare_buffer(left, right);
            else if (Symbol.iterator in left)
                result = compare_iterator(left[Symbol.iterator](), right[Symbol.iterator]());
            else
                result = false;
        }
        finally {
            left_cache.set(right, result);
        }
        return result;
    }
    $.$mol_compare_deep = $mol_compare_deep;
    function compare_array(left, right) {
        const len = left.length;
        if (len !== right.length)
            return false;
        for (let i = 0; i < len; ++i) {
            if (!$mol_compare_deep(left[i], right[i]))
                return false;
        }
        return true;
    }
    function compare_buffer(left, right) {
        const len = left.byteLength;
        if (len !== right.byteLength)
            return false;
        if (left instanceof DataView)
            return compare_buffer(new Uint8Array(left.buffer, left.byteOffset, left.byteLength), new Uint8Array(right.buffer, left.byteOffset, left.byteLength));
        for (let i = 0; i < len; ++i) {
            if (left[i] !== right[i])
                return false;
        }
        return true;
    }
    function compare_iterator(left, right) {
        while (true) {
            const left_next = left.next();
            const right_next = right.next();
            if (left_next.done !== right_next.done)
                return false;
            if (left_next.done)
                break;
            if (!$mol_compare_deep(left_next.value, right_next.value))
                return false;
        }
        return true;
    }
    function compare_set(left, right) {
        if (left.size !== right.size)
            return false;
        return compare_iterator(left.values(), right.values());
    }
    function compare_map(left, right) {
        if (left.size !== right.size)
            return false;
        return compare_iterator(left.keys(), right.keys())
            && compare_iterator(left.values(), right.values());
    }
    function compare_pojo(left, right) {
        const left_keys = Object.getOwnPropertyNames(left);
        const right_keys = Object.getOwnPropertyNames(right);
        if (!compare_array(left_keys, right_keys))
            return false;
        for (let key of left_keys) {
            if (!$mol_compare_deep(left[key], right[key]))
                return false;
        }
        const left_syms = Object.getOwnPropertySymbols(left);
        const right_syms = Object.getOwnPropertySymbols(right);
        if (!compare_array(left_syms, right_syms))
            return false;
        for (let key of left_syms) {
            if (!$mol_compare_deep(left[key], right[key]))
                return false;
        }
        return true;
    }
    function compare_primitive(left, right) {
        return Object.is(left[Symbol.toPrimitive]('default'), right[Symbol.toPrimitive]('default'));
    }
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_log3_area_lazy(event) {
        const self = this;
        const stack = self.$mol_log3_stack;
        const deep = stack.length;
        let logged = false;
        stack.push(() => {
            logged = true;
            self.$mol_log3_area.call(self, event);
        });
        return () => {
            if (logged)
                self.console.groupEnd();
            if (stack.length > deep)
                stack.length = deep;
        };
    }
    $.$mol_log3_area_lazy = $mol_log3_area_lazy;
    $.$mol_log3_stack = [];
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_span extends $mol_object2 {
        uri;
        source;
        row;
        col;
        length;
        constructor(uri, source, row, col, length) {
            super();
            this.uri = uri;
            this.source = source;
            this.row = row;
            this.col = col;
            this.length = length;
            this[Symbol.toStringTag] = this.uri + ('#' + this.row + ':' + this.col + '/' + this.length);
        }
        static unknown = $mol_span.begin('?');
        static begin(uri, source = '') {
            return new $mol_span(uri, source, 1, 1, 0);
        }
        static end(uri, source) {
            return new $mol_span(uri, source, 1, source.length + 1, 0);
        }
        static entire(uri, source) {
            return new $mol_span(uri, source, 1, 1, source.length);
        }
        toString() {
            return this[Symbol.toStringTag];
        }
        toJSON() {
            return {
                uri: this.uri,
                row: this.row,
                col: this.col,
                length: this.length
            };
        }
        error(message, Class = Error) {
            return new Class(`${message} (${this})`);
        }
        span(row, col, length) {
            return new $mol_span(this.uri, this.source, row, col, length);
        }
        after(length = 0) {
            return new $mol_span(this.uri, this.source, this.row, this.col + this.length, length);
        }
        slice(begin, end = -1) {
            let len = this.length;
            if (begin < 0)
                begin += len;
            if (end < 0)
                end += len;
            if (begin < 0 || begin > len)
                this.$.$mol_fail(this.error(`Begin value '${begin}' out of range`, RangeError));
            if (end < 0 || end > len)
                this.$.$mol_fail(this.error(`End value '${end}' out of range`, RangeError));
            if (end < begin)
                this.$.$mol_fail(this.error(`End value '${end}' can't be less than begin value`, RangeError));
            return this.span(this.row, this.col + begin, end - begin);
        }
    }
    $.$mol_span = $mol_span;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_to_string(tree) {
        let output = [];
        function dump(tree, prefix = '') {
            if (tree.type.length) {
                if (!prefix.length) {
                    prefix = "\t";
                }
                output.push(tree.type);
                if (tree.kids.length == 1) {
                    output.push(' ');
                    dump(tree.kids[0], prefix);
                    return;
                }
                output.push("\n");
            }
            else if (tree.value.length || prefix.length) {
                output.push("\\" + tree.value + "\n");
            }
            for (const kid of tree.kids) {
                output.push(prefix);
                dump(kid, prefix + "\t");
            }
        }
        dump(tree);
        return output.join('');
    }
    $.$mol_tree2_to_string = $mol_tree2_to_string;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_tree2 extends Object {
        type;
        value;
        kids;
        span;
        constructor(type, value, kids, span) {
            super();
            this.type = type;
            this.value = value;
            this.kids = kids;
            this.span = span;
            this[Symbol.toStringTag] = type || '\\' + value;
        }
        static list(kids, span = $mol_span.unknown) {
            return new $mol_tree2('', '', kids, span);
        }
        list(kids) {
            return $mol_tree2.list(kids, this.span);
        }
        static data(value, kids = [], span = $mol_span.unknown) {
            const chunks = value.split('\n');
            if (chunks.length > 1) {
                let kid_span = span.span(span.row, span.col, 0);
                const data = chunks.map(chunk => {
                    kid_span = kid_span.after(chunk.length);
                    return new $mol_tree2('', chunk, [], kid_span);
                });
                kids = [...data, ...kids];
                value = '';
            }
            return new $mol_tree2('', value, kids, span);
        }
        data(value, kids = []) {
            return $mol_tree2.data(value, kids, this.span);
        }
        static struct(type, kids = [], span = $mol_span.unknown) {
            if (/[ \n\t\\]/.test(type)) {
                $$.$mol_fail(span.error(`Wrong type ${JSON.stringify(type)}`));
            }
            return new $mol_tree2(type, '', kids, span);
        }
        struct(type, kids = []) {
            return $mol_tree2.struct(type, kids, this.span);
        }
        clone(kids, span = this.span) {
            return new $mol_tree2(this.type, this.value, kids, span);
        }
        text() {
            var values = [];
            for (var kid of this.kids) {
                if (kid.type)
                    continue;
                values.push(kid.value);
            }
            return this.value + values.join('\n');
        }
        static fromString(str, uri = 'unknown') {
            return $$.$mol_tree2_from_string(str, uri);
        }
        toString() {
            return $$.$mol_tree2_to_string(this);
        }
        insert(value, ...path) {
            if (path.length === 0)
                return value;
            const type = path[0];
            if (typeof type === 'string') {
                let replaced = false;
                const sub = this.kids.map((item, index) => {
                    if (item.type !== type)
                        return item;
                    replaced = true;
                    return item.insert(value, ...path.slice(1));
                }).filter(Boolean);
                if (!replaced && value) {
                    sub.push(this.struct(type, []).insert(value, ...path.slice(1)));
                }
                return this.clone(sub);
            }
            else if (typeof type === 'number') {
                const sub = this.kids.slice();
                sub[type] = (sub[type] || this.list([]))
                    .insert(value, ...path.slice(1));
                return this.clone(sub.filter(Boolean));
            }
            else {
                const kids = ((this.kids.length === 0) ? [this.list([])] : this.kids)
                    .map(item => item.insert(value, ...path.slice(1)))
                    .filter(Boolean);
                return this.clone(kids);
            }
        }
        select(...path) {
            let next = [this];
            for (const type of path) {
                if (!next.length)
                    break;
                const prev = next;
                next = [];
                for (var item of prev) {
                    switch (typeof (type)) {
                        case 'string':
                            for (var child of item.kids) {
                                if (child.type == type) {
                                    next.push(child);
                                }
                            }
                            break;
                        case 'number':
                            if (type < item.kids.length)
                                next.push(item.kids[type]);
                            break;
                        default: next.push(...item.kids);
                    }
                }
            }
            return this.list(next);
        }
        filter(path, value) {
            const sub = this.kids.filter(item => {
                var found = item.select(...path);
                if (value === undefined) {
                    return Boolean(found.kids.length);
                }
                else {
                    return found.kids.some(child => child.value == value);
                }
            });
            return this.clone(sub);
        }
        hack_self(belt, context = {}) {
            let handle = belt[this.type] || belt[''];
            if (!handle || handle === Object.prototype[this.type]) {
                handle = (input, belt, context) => [
                    input.clone(input.hack(belt, context), context.span)
                ];
            }
            try {
                return handle(this, belt, context);
            }
            catch (error) {
                error.message += `\n${this.clone([])}${this.span}`;
                $mol_fail_hidden(error);
            }
        }
        hack(belt, context = {}) {
            return [].concat(...this.kids.map(child => child.hack_self(belt, context)));
        }
        error(message, Class = Error) {
            return this.span.error(`${message}\n${this.clone([])}`, Class);
        }
    }
    $.$mol_tree2 = $mol_tree2;
    class $mol_tree2_empty extends $mol_tree2 {
        constructor() {
            super('', '', [], $mol_span.unknown);
        }
    }
    $.$mol_tree2_empty = $mol_tree2_empty;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_error_syntax extends SyntaxError {
        reason;
        line;
        span;
        constructor(reason, line, span) {
            super(`${reason}\n${span}\n${line.substring(0, span.col - 1).replace(/\S/g, ' ')}${''.padEnd(span.length, '!')}\n${line}`);
            this.reason = reason;
            this.line = line;
            this.span = span;
        }
    }
    $.$mol_error_syntax = $mol_error_syntax;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_from_string(str, uri = '?') {
        const span = $mol_span.entire(uri, str);
        var root = $mol_tree2.list([], span);
        var stack = [root];
        var pos = 0, row = 0, min_indent = 0;
        while (str.length > pos) {
            var indent = 0;
            var line_start = pos;
            row++;
            while (str.length > pos && str[pos] == '\t') {
                indent++;
                pos++;
            }
            if (!root.kids.length) {
                min_indent = indent;
            }
            indent -= min_indent;
            if (indent < 0 || indent >= stack.length) {
                const sp = span.span(row, 1, pos - line_start);
                while (str.length > pos && str[pos] != '\n') {
                    pos++;
                }
                if (indent < 0) {
                    if (str.length > pos) {
                        this.$mol_fail(new this.$mol_error_syntax(`Too few tabs`, str.substring(line_start, pos), sp));
                    }
                }
                else {
                    this.$mol_fail(new this.$mol_error_syntax(`Too many tabs`, str.substring(line_start, pos), sp));
                }
            }
            stack.length = indent + 1;
            var parent = stack[indent];
            while (str.length > pos && str[pos] != '\\' && str[pos] != '\n') {
                var error_start = pos;
                while (str.length > pos && (str[pos] == ' ' || str[pos] == '\t')) {
                    pos++;
                }
                if (pos > error_start) {
                    let line_end = str.indexOf('\n', pos);
                    if (line_end === -1)
                        line_end = str.length;
                    const sp = span.span(row, error_start - line_start + 1, pos - error_start);
                    this.$mol_fail(new this.$mol_error_syntax(`Wrong nodes separator`, str.substring(line_start, line_end), sp));
                }
                var type_start = pos;
                while (str.length > pos &&
                    str[pos] != '\\' &&
                    str[pos] != ' ' &&
                    str[pos] != '\t' &&
                    str[pos] != '\n') {
                    pos++;
                }
                if (pos > type_start) {
                    let next = new $mol_tree2(str.slice(type_start, pos), '', [], span.span(row, type_start - line_start + 1, pos - type_start));
                    const parent_kids = parent.kids;
                    parent_kids.push(next);
                    parent = next;
                }
                if (str.length > pos && str[pos] == ' ') {
                    pos++;
                }
            }
            if (str.length > pos && str[pos] == '\\') {
                var data_start = pos;
                while (str.length > pos && str[pos] != '\n') {
                    pos++;
                }
                let next = new $mol_tree2('', str.slice(data_start + 1, pos), [], span.span(row, data_start - line_start + 2, pos - data_start - 1));
                const parent_kids = parent.kids;
                parent_kids.push(next);
                parent = next;
            }
            if (str.length === pos && stack.length > 0) {
                const sp = span.span(row, pos - line_start + 1, 1);
                this.$mol_fail(new this.$mol_error_syntax(`Unexpected EOF, LF required`, str.substring(line_start, str.length), sp));
            }
            stack.push(parent);
            pos++;
        }
        return root;
    }
    $.$mol_tree2_from_string = $mol_tree2_from_string;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_from_json(json, span = $mol_span.unknown) {
        if (typeof json === 'boolean' || typeof json === 'number' || json === null) {
            return new $mol_tree2(String(json), '', [], span);
        }
        if (typeof json === 'string') {
            return $mol_tree2.data(json, [], span);
        }
        if (typeof json.toJSON === 'function') {
            return $mol_tree2_from_json(json.toJSON());
        }
        if (Array.isArray(json)) {
            const sub = json.map(json => $mol_tree2_from_json(json, span));
            return new $mol_tree2('/', '', sub, span);
        }
        if (ArrayBuffer.isView(json)) {
            const buf = new Uint8Array(json.buffer, json.byteOffset, json.byteLength);
            return $mol_tree2.data(String.fromCharCode(...buf), [], span);
        }
        if (json instanceof Date) {
            return new $mol_tree2('', json.toISOString(), [], span);
        }
        if (json.toString !== Object.prototype.toString) {
            return $mol_tree2.data(json.toString(), [], span);
        }
        if (json instanceof Error) {
            const { name, message, stack } = json;
            json = { ...json, name, message, stack };
        }
        const sub = [];
        for (var key in json) {
            const val = json[key];
            if (val === undefined)
                continue;
            const subsub = $mol_tree2_from_json(val, span);
            if (/^[^\n\t\\ ]+$/.test(key)) {
                sub.push(new $mol_tree2(key, '', [subsub], span));
            }
            else {
                sub.push($mol_tree2.data(key, [subsub], span));
            }
        }
        return new $mol_tree2('*', '', sub, span);
    }
    $.$mol_tree2_from_json = $mol_tree2_from_json;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_term_color {
        static reset = this.ansi(0, 0);
        static bold = this.ansi(1, 22);
        static italic = this.ansi(3, 23);
        static underline = this.ansi(4, 24);
        static inverse = this.ansi(7, 27);
        static hidden = this.ansi(8, 28);
        static strike = this.ansi(9, 29);
        static gray = this.ansi(90, 39);
        static red = this.ansi(91, 39);
        static green = this.ansi(92, 39);
        static yellow = this.ansi(93, 39);
        static blue = this.ansi(94, 39);
        static magenta = this.ansi(95, 39);
        static cyan = this.ansi(96, 39);
        static Gray = (str) => this.inverse(this.gray(str));
        static Red = (str) => this.inverse(this.red(str));
        static Green = (str) => this.inverse(this.green(str));
        static Yellow = (str) => this.inverse(this.yellow(str));
        static Blue = (str) => this.inverse(this.blue(str));
        static Magenta = (str) => this.inverse(this.magenta(str));
        static Cyan = (str) => this.inverse(this.cyan(str));
        static ansi(open, close) {
            if (typeof process === 'undefined')
                return String;
            if (!process.stdout.isTTY)
                return String;
            const prefix = `\x1b[${open}m`;
            const postfix = `\x1b[${close}m`;
            const suffix_regexp = new RegExp(postfix.replace('[', '\\['), 'g');
            return function colorer(str) {
                str = String(str);
                if (str === '')
                    return str;
                const suffix = str.replace(suffix_regexp, prefix);
                return prefix + suffix + postfix;
            };
        }
    }
    $.$mol_term_color = $mol_term_color;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_log3_node_make(level, output, type, color) {
        return function $mol_log3_logger(event) {
            if (!event.time)
                event = { time: new Date().toISOString(), ...event };
            let tree = this.$mol_tree2_from_json(event);
            tree = tree.struct(type, tree.kids);
            let str = color(tree.toString());
            this.console[level](str);
            const self = this;
            return () => self.console.groupEnd();
        };
    }
    $.$mol_log3_node_make = $mol_log3_node_make;
    $.$mol_log3_come = $mol_log3_node_make('info', 'stdout', 'come', $mol_term_color.blue);
    $.$mol_log3_done = $mol_log3_node_make('info', 'stdout', 'done', $mol_term_color.green);
    $.$mol_log3_fail = $mol_log3_node_make('error', 'stderr', 'fail', $mol_term_color.red);
    $.$mol_log3_warn = $mol_log3_node_make('warn', 'stderr', 'warn', $mol_term_color.yellow);
    $.$mol_log3_rise = $mol_log3_node_make('log', 'stdout', 'rise', $mol_term_color.magenta);
    $.$mol_log3_area = $mol_log3_node_make('log', 'stdout', 'area', $mol_term_color.cyan);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_task extends $mol_wire_fiber {
        static getter(task) {
            return function $mol_wire_task_get(host, args) {
                const sub = $mol_wire_auto();
                const existen = sub?.track_next();
                reuse: if (existen) {
                    if (!existen.temp)
                        break reuse;
                    if (existen.host !== host)
                        break reuse;
                    if (existen.task !== task)
                        break reuse;
                    if (!$mol_compare_deep(existen.args, args))
                        break reuse;
                    return existen;
                }
                const key = (host?.[Symbol.toStringTag] ?? host) + ('.' + task.name + '<#>');
                const next = new $mol_wire_task(key, task, host, args);
                if (existen?.temp) {
                    $$.$mol_log3_warn({
                        place: '$mol_wire_task',
                        message: `Non idempotency`,
                        sub,
                        pubs: [...sub?.pub_list ?? [], existen],
                        next,
                        hint: 'Ignore it',
                    });
                }
                return next;
            };
        }
        get temp() {
            return true;
        }
        complete() {
            if ($mol_promise_like(this.cache))
                return;
            this.destructor();
        }
        put(next) {
            const prev = this.cache;
            this.cache = next;
            if ($mol_promise_like(next)) {
                this.cursor = $mol_wire_cursor.fresh;
                if (next !== prev)
                    this.emit();
                if ($mol_owning_catch(this, next)) {
                    try {
                        next[Symbol.toStringTag] = this[Symbol.toStringTag];
                    }
                    catch {
                        Object.defineProperty(next, Symbol.toStringTag, { value: this[Symbol.toStringTag] });
                    }
                }
                return next;
            }
            this.cursor = $mol_wire_cursor.final;
            if (this.sub_empty)
                this.destructor();
            else if (next !== prev)
                this.emit();
            return next;
        }
    }
    $.$mol_wire_task = $mol_wire_task;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_method(host, field, descr) {
        if (!descr)
            descr = Reflect.getOwnPropertyDescriptor(host, field);
        const orig = descr?.value ?? host[field];
        const sup = Reflect.getPrototypeOf(host);
        if (typeof sup[field] === 'function') {
            Object.defineProperty(orig, 'name', { value: sup[field].name });
        }
        const temp = $mol_wire_task.getter(orig);
        const value = function (...args) {
            const fiber = temp(this ?? null, args);
            return fiber.sync();
        };
        Object.defineProperty(value, 'name', { value: orig.name + ' ' });
        Object.assign(value, { orig });
        const descr2 = { ...descr, value };
        Reflect.defineProperty(host, field, descr2);
        return descr2;
    }
    $.$mol_wire_method = $mol_wire_method;
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    const catched = new WeakMap();
    function $mol_fail_catch(error) {
        if (typeof error !== 'object')
            return false;
        if ($mol_promise_like(error))
            $mol_fail_hidden(error);
        if (catched.get(error))
            return false;
        catched.set(error, true);
        return true;
    }
    $.$mol_fail_catch = $mol_fail_catch;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_fail_log(error) {
        if ($mol_promise_like(error))
            return false;
        if (!$mol_fail_catch(error))
            return false;
        console.error(error);
        return true;
    }
    $.$mol_fail_log = $mol_fail_log;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_atom extends $mol_wire_fiber {
        static solo(host, task) {
            const field = task.name + '<>';
            const existen = Object.getOwnPropertyDescriptor(host ?? task, field)?.value;
            if (existen)
                return existen;
            const prefix = host?.[Symbol.toStringTag] ?? (host instanceof Function ? $$.$mol_func_name(host) : host);
            const key = prefix + ('.' + field);
            const fiber = new $mol_wire_atom(key, task, host, []);
            (host ?? task)[field] = fiber;
            return fiber;
        }
        static plex(host, task, key) {
            const field = task.name + '<>';
            let dict = Object.getOwnPropertyDescriptor(host ?? task, field)?.value;
            const prefix = host?.[Symbol.toStringTag] ?? (host instanceof Function ? $$.$mol_func_name(host) : host);
            const key_str = $mol_key(key);
            if (dict) {
                const existen = dict.get(key_str);
                if (existen)
                    return existen;
            }
            else {
                dict = (host ?? task)[field] = new Map();
            }
            const id = prefix + ('.' + task.name) + ('<' + key_str.replace(/^"|"$/g, "'") + '>');
            const fiber = new $mol_wire_atom(id, task, host, [key]);
            dict.set(key_str, fiber);
            return fiber;
        }
        static watching = new Set();
        static watcher = null;
        static watch() {
            $mol_wire_atom.watcher = new $mol_after_frame($mol_wire_atom.watch);
            for (const atom of $mol_wire_atom.watching) {
                if (atom.cursor === $mol_wire_cursor.final) {
                    $mol_wire_atom.watching.delete(atom);
                }
                else {
                    atom.cursor = $mol_wire_cursor.stale;
                    atom.fresh();
                }
            }
        }
        watch() {
            if (!$mol_wire_atom.watcher) {
                $mol_wire_atom.watcher = new $mol_after_frame($mol_wire_atom.watch);
            }
            $mol_wire_atom.watching.add(this);
        }
        resync(args) {
            return this.put(this.task.call(this.host, ...args));
        }
        once() {
            return this.sync();
        }
        channel() {
            return Object.assign((next) => {
                if (next !== undefined)
                    return this.resync([...this.args, next]);
                if (!$mol_wire_fiber.warm)
                    return this.result();
                if ($mol_wire_auto()?.temp) {
                    return this.once();
                }
                else {
                    return this.sync();
                }
            }, { atom: this });
        }
        destructor() {
            super.destructor();
            if (this.pub_from === 0) {
                ;
                (this.host ?? this.task)[this.field()] = null;
            }
            else {
                ;
                (this.host ?? this.task)[this.field()].delete($mol_key(this.args[0]));
            }
        }
        put(next) {
            const prev = this.cache;
            update: if (next !== prev) {
                try {
                    if ($mol_compare_deep(prev, next))
                        break update;
                }
                catch (error) {
                    $mol_fail_log(error);
                }
                if ($mol_owning_check(this, prev)) {
                    prev.destructor();
                }
                if ($mol_owning_catch(this, next)) {
                    try {
                        next[Symbol.toStringTag] = this[Symbol.toStringTag];
                    }
                    catch {
                        Object.defineProperty(next, Symbol.toStringTag, { value: this[Symbol.toStringTag] });
                    }
                }
                if (!this.sub_empty)
                    this.emit();
            }
            this.cache = next;
            this.cursor = $mol_wire_cursor.fresh;
            if ($mol_promise_like(next))
                return next;
            this.complete_pubs();
            return next;
        }
    }
    __decorate([
        $mol_wire_method
    ], $mol_wire_atom.prototype, "resync", null);
    __decorate([
        $mol_wire_method
    ], $mol_wire_atom.prototype, "once", null);
    $.$mol_wire_atom = $mol_wire_atom;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_solo(host, field, descr) {
        if (!descr)
            descr = Reflect.getOwnPropertyDescriptor(host, field);
        const orig = descr?.value ?? host[field];
        const sup = Reflect.getPrototypeOf(host);
        if (typeof sup[field] === 'function') {
            Object.defineProperty(orig, 'name', { value: sup[field].name });
        }
        const descr2 = {
            ...descr,
            value: function (...args) {
                let atom = $mol_wire_atom.solo(this, orig);
                if ((args.length === 0) || (args[0] === undefined)) {
                    if (!$mol_wire_fiber.warm)
                        return atom.result();
                    if ($mol_wire_auto()?.temp) {
                        return atom.once();
                    }
                    else {
                        return atom.sync();
                    }
                }
                return atom.resync(args);
            }
        };
        Reflect.defineProperty(descr2.value, 'name', { value: orig.name + ' ' });
        Reflect.defineProperty(descr2.value, 'length', { value: orig.length });
        Object.assign(descr2.value, { orig });
        Reflect.defineProperty(host, field, descr2);
        return descr2;
    }
    $.$mol_wire_solo = $mol_wire_solo;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_plex(host, field, descr) {
        if (!descr)
            descr = Reflect.getOwnPropertyDescriptor(host, field);
        const orig = descr?.value ?? host[field];
        const sup = Reflect.getPrototypeOf(host);
        if (typeof sup[field] === 'function') {
            Object.defineProperty(orig, 'name', { value: sup[field].name });
        }
        const descr2 = {
            ...descr,
            value: function (...args) {
                let atom = $mol_wire_atom.plex(this, orig, args[0]);
                if ((args.length === 1) || (args[1] === undefined)) {
                    if (!$mol_wire_fiber.warm)
                        return atom.result();
                    if ($mol_wire_auto()?.temp) {
                        return atom.once();
                    }
                    else {
                        return atom.sync();
                    }
                }
                return atom.resync(args);
            }
        };
        Reflect.defineProperty(descr2.value, 'name', { value: orig.name + ' ' });
        Reflect.defineProperty(descr2.value, 'length', { value: orig.length });
        Object.assign(descr2.value, { orig });
        Reflect.defineProperty(host, field, descr2);
        return descr2;
    }
    $.$mol_wire_plex = $mol_wire_plex;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_mem = $mol_wire_solo;
    $.$mol_mem_key = $mol_wire_plex;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $node = new Proxy({ require }, {
    get(target, name, wrapper) {
        if (target[name])
            return target[name];
        const mod = target.require('module');
        if (mod.builtinModules.indexOf(name) >= 0)
            return target.require(name);
        if (name[0] === '.')
            return target.require(name);
        try {
            target.require.resolve(name);
        }
        catch {
            const $$ = $;
            $$.$mol_exec('.', 'npm', 'install', '--omit=dev', name);
            try {
                $$.$mol_exec('.', 'npm', 'install', '--omit=dev', '@types/' + name);
            }
            catch (e) {
                if ($$.$mol_fail_catch(e)) {
                    $$.$mol_fail_log(e);
                }
            }
        }
        try {
            return target.require(name);
        }
        catch (error) {
            if ($.$mol_fail_catch(error) && error.code === 'ERR_REQUIRE_ESM') {
                const module = cache.get(name);
                if (module)
                    return module;
                throw import(name).then(module => cache.set(name, module));
            }
            $.$mol_fail_log(error);
            return null;
        }
    },
    set(target, name, value) {
        target[name] = value;
        return true;
    },
});
const cache = new Map();
require = (req => Object.assign(function require(name) {
    return $node[name];
}, req))(require);

;
"use strict";
var $;
(function ($) {
    class $mol_error_mix extends AggregateError {
        cause;
        name = $$.$mol_func_name(this.constructor).replace(/^\$/, '') + '_Error';
        constructor(message, cause = {}, ...errors) {
            super(errors, message, { cause });
            this.cause = cause;
            const stack_get = Object.getOwnPropertyDescriptor(this, 'stack')?.get ?? (() => super.stack);
            Object.defineProperty(this, 'stack', {
                get: () => (stack_get.call(this) ?? this.message) + '\n' + [JSON.stringify(this.cause, null, '  ') ?? 'no cause', ...this.errors.map(e => e.stack)].map(e => e.trim()
                    .replace(/at /gm, '   at ')
                    .replace(/^(?!    +at )(.*)/gm, '    at | $1 (#)')).join('\n')
            });
        }
        static [Symbol.toPrimitive]() {
            return this.toString();
        }
        static toString() {
            return $$.$mol_func_name(this);
        }
        static make(...params) {
            return new this(...params);
        }
    }
    $.$mol_error_mix = $mol_error_mix;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_env() {
        return {};
    }
    $.$mol_env = $mol_env;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_env = function $mol_env() {
        return this.process.env;
    };
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const factories = new WeakMap();
    function factory(val) {
        let make = factories.get(val);
        if (make)
            return make;
        make = $mol_func_name_from((...args) => new val(...args), val);
        factories.set(val, make);
        return make;
    }
    function $mol_wire_sync(obj) {
        return new Proxy(obj, {
            get(obj, field) {
                let val = obj[field];
                if (typeof val !== 'function')
                    return val;
                const temp = $mol_wire_task.getter(val);
                return function $mol_wire_sync(...args) {
                    const fiber = temp(obj, args);
                    return fiber.sync();
                };
            },
            construct(obj, args) {
                const temp = $mol_wire_task.getter(factory(obj));
                return temp(obj, args).sync();
            },
            apply(obj, self, args) {
                const temp = $mol_wire_task.getter(obj);
                return temp(self, args).sync();
            },
        });
    }
    $.$mol_wire_sync = $mol_wire_sync;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_run_error extends $mol_error_mix {
    }
    $.$mol_run_error = $mol_run_error;
    $.$mol_run_spawn = (...args) => $node['child_process'].spawn(...args);
    $.$mol_run_spawn_sync = (...args) => $node['child_process'].spawnSync(...args);
    class $mol_run extends $mol_object {
        static async_enabled() {
            return Boolean(this.$.$mol_env()['MOL_RUN_ASYNC']);
        }
        static spawn(options) {
            const sync = !this.async_enabled() || !Boolean($mol_wire_auto());
            const env = options.env ?? this.$.$mol_env();
            return $mol_wire_sync(this).spawn_async({ ...options, sync, env });
        }
        static spawn_async({ dir, sync, timeout, command, env }) {
            const args_raw = typeof command === 'string' ? command.split(' ') : command;
            const [app, ...args] = args_raw;
            const opts = { shell: true, cwd: dir, env };
            const log_object = {
                place: `${this}.spawn()`,
                message: 'Run',
                command: args_raw.join(' '),
                dir: $node.path.relative('', dir),
            };
            if (sync) {
                this.$.$mol_log3_come({
                    hint: 'Run inside fiber',
                    ...log_object
                });
                let error;
                let res;
                try {
                    res = this.$.$mol_run_spawn_sync(app, args, opts);
                    error = res.error;
                }
                catch (err) {
                    error = err;
                }
                if (!res || error || res.status) {
                    throw new $mol_run_error(this.error_message(res), { ...log_object, status: res?.status, signal: res?.signal }, ...(error ? [error] : []));
                }
                return res;
            }
            let sub;
            try {
                sub = this.$.$mol_run_spawn(app, args, {
                    ...opts,
                    stdio: ['pipe', 'inherit', 'inherit'],
                });
            }
            catch (error) {
                throw new $mol_run_error(this.error_message(undefined), log_object, error);
            }
            const pid = sub.pid ?? 0;
            this.$.$mol_log3_come({
                ...log_object,
                pid,
            });
            let timeout_kill = false;
            let timer;
            const std_data = [];
            const error_data = [];
            const add = (std_chunk, error_chunk) => {
                if (std_chunk)
                    std_data.push(std_chunk);
                if (error_chunk)
                    error_data.push(error_chunk);
                if (!timeout)
                    return;
                clearTimeout(timer);
                timer = setTimeout(() => {
                    const signal = timeout_kill ? 'SIGKILL' : 'SIGTERM';
                    timeout_kill = true;
                    add();
                    sub.kill(signal);
                }, timeout);
            };
            add();
            sub.stdout?.on('data', data => add(data));
            sub.stderr?.on('data', data => add(undefined, data));
            const result_promise = new Promise((done, fail) => {
                const close = (error, status = null, signal = null) => {
                    if (!timer && timeout)
                        return;
                    clearTimeout(timer);
                    timer = undefined;
                    const res = {
                        pid,
                        signal,
                        get stdout() { return Buffer.concat(std_data); },
                        get stderr() { return Buffer.concat(error_data); }
                    };
                    if (error || status || timeout_kill)
                        return fail(new $mol_run_error(this.error_message(res) + (timeout_kill ? ', timeout' : ''), { ...log_object, pid, status, signal, timeout_kill }, ...error ? [error] : []));
                    this.$.$mol_log3_done({
                        ...log_object,
                        pid,
                    });
                    done(res);
                };
                sub.on('disconnect', () => close(new Error('Disconnected')));
                sub.on('error', err => close(err));
                sub.on('exit', (status, signal) => close(null, status, signal));
            });
            return Object.assign(result_promise, { destructor: () => {
                    clearTimeout(timer);
                    sub.kill('SIGKILL');
                } });
        }
        static error_message(res) {
            return res?.stderr.toString() || res?.stdout.toString() || 'Run error';
        }
    }
    $.$mol_run = $mol_run;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_exec(dir, command, ...args) {
        return this.$mol_run.spawn({ command: [command, ...args], dir });
    }
    $.$mol_exec = $mol_exec;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_dom_context = new $node.jsdom.JSDOM('', { url: 'https://localhost/' }).window;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_view_selection extends $mol_object {
        static focused(next, notify) {
            const parents = [];
            let element = next?.[0] ?? $mol_dom_context.document.activeElement;
            while (element) {
                parents.push(element);
                element = element.parentNode;
            }
            if (!next || notify)
                return parents;
            new $mol_after_tick(() => {
                const element = this.focused()[0];
                if (element)
                    element.focus();
                else
                    $mol_dom_context.blur();
            });
            return parents;
        }
    }
    __decorate([
        $mol_mem
    ], $mol_view_selection, "focused", null);
    $.$mol_view_selection = $mol_view_selection;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wrapper extends $mol_object2 {
        static wrap;
        static run(task) {
            return this.func(task)();
        }
        static func(func) {
            return this.wrap(func);
        }
        static get class() {
            return (Class) => {
                const construct = (target, args) => new Class(...args);
                const handler = {
                    construct: this.func(construct)
                };
                handler[Symbol.toStringTag] = Class.name + '#';
                return new Proxy(Class, handler);
            };
        }
        static get method() {
            return (obj, name, descr) => {
                descr.value = this.func(descr.value);
                return descr;
            };
        }
        static get field() {
            return (obj, name, descr) => {
                descr.get = descr.set = this.func(descr.get);
                return descr;
            };
        }
    }
    $.$mol_wrapper = $mol_wrapper;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_memo extends $mol_wrapper {
        static wrap(task) {
            const store = new WeakMap();
            const fun = function (next) {
                if (next === undefined && store.has(this))
                    return store.get(this);
                const val = task.call(this, next) ?? next;
                store.set(this, val);
                return val;
            };
            Reflect.defineProperty(fun, 'name', { value: task.name + ' ' });
            return fun;
        }
    }
    $.$mol_memo = $mol_memo;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_dom = $mol_dom_context;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_qname(name) {
        return name.replace(/\W/g, '').replace(/^(?=\d+)/, '_');
    }
    $.$mol_dom_qname = $mol_dom_qname;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_probe(task, def) {
        const warm = $mol_wire_fiber.warm;
        try {
            $mol_wire_fiber.warm = false;
            const res = task();
            if (res === undefined)
                return def;
            return res;
        }
        finally {
            $mol_wire_fiber.warm = warm;
        }
    }
    $.$mol_wire_probe = $mol_wire_probe;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_watch() {
        const atom = $mol_wire_auto();
        if (atom instanceof $mol_wire_atom) {
            atom.watch();
        }
        else {
            $mol_fail(new Error('Atom is required for watching'));
        }
    }
    $.$mol_wire_watch = $mol_wire_watch;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_const(value) {
        const getter = (() => value);
        getter['()'] = value;
        getter[Symbol.toStringTag] = value;
        getter[$mol_dev_format_head] = () => $mol_dev_format_span({}, '()=> ', $mol_dev_format_auto(value));
        return getter;
    }
    $.$mol_const = $mol_const;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_solid() {
        let current = $mol_wire_auto();
        if (current.temp)
            current = current.host;
        if (current.reap !== nothing) {
            current?.sub_on(sub, sub.data.length);
        }
        current.reap = nothing;
    }
    $.$mol_wire_solid = $mol_wire_solid;
    const nothing = () => { };
    const sub = new $mol_wire_pub_sub;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_render_attributes(el, attrs) {
        for (let name in attrs) {
            let val = attrs[name];
            if (val === undefined) {
                continue;
            }
            else if (val === null || val === false) {
                if (!el.hasAttribute(name))
                    continue;
                el.removeAttribute(name);
            }
            else {
                const str = String(val);
                if (el.getAttribute(name) === str)
                    continue;
                el.setAttribute(name, str);
            }
        }
    }
    $.$mol_dom_render_attributes = $mol_dom_render_attributes;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_render_events(el, events, passive = false) {
        for (let name in events) {
            el.addEventListener(name, events[name], { passive });
        }
    }
    $.$mol_dom_render_events = $mol_dom_render_events;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_render_styles(el, styles) {
        for (let name in styles) {
            let val = styles[name];
            const style = el.style;
            const kebab = (name) => name.replace(/[A-Z]/g, letter => '-' + letter.toLowerCase());
            if (typeof val === 'number') {
                style.setProperty(kebab(name), `${val}px`);
            }
            else {
                style.setProperty(kebab(name), val);
            }
        }
    }
    $.$mol_dom_render_styles = $mol_dom_render_styles;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_render_children(el, childNodes) {
        const node_set = new Set(childNodes);
        let nextNode = el.firstChild;
        for (let view of childNodes) {
            if (view == null)
                continue;
            if (view instanceof $mol_dom_context.Node) {
                while (true) {
                    if (!nextNode) {
                        el.appendChild(view);
                        break;
                    }
                    if (nextNode == view) {
                        nextNode = nextNode.nextSibling;
                        break;
                    }
                    else {
                        if (node_set.has(nextNode)) {
                            el.insertBefore(view, nextNode);
                            break;
                        }
                        else {
                            const nn = nextNode.nextSibling;
                            el.removeChild(nextNode);
                            nextNode = nn;
                        }
                    }
                }
            }
            else {
                if (nextNode && nextNode.nodeName === '#text') {
                    const str = String(view);
                    if (nextNode.nodeValue !== str)
                        nextNode.nodeValue = str;
                    nextNode = nextNode.nextSibling;
                }
                else {
                    const textNode = $mol_dom_context.document.createTextNode(String(view));
                    el.insertBefore(textNode, nextNode);
                }
            }
        }
        while (nextNode) {
            const currNode = nextNode;
            nextNode = currNode.nextSibling;
            el.removeChild(currNode);
        }
    }
    $.$mol_dom_render_children = $mol_dom_render_children;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_render_fields(el, fields) {
        for (let key in fields) {
            const val = fields[key];
            if (val === undefined)
                continue;
            if (val === el[key])
                continue;
            el[key] = val;
        }
    }
    $.$mol_dom_render_fields = $mol_dom_render_fields;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_async(obj) {
        let fiber;
        const temp = $mol_wire_task.getter(obj);
        return new Proxy(obj, {
            get(obj, field) {
                const val = obj[field];
                if (typeof val !== 'function')
                    return val;
                let fiber;
                const temp = $mol_wire_task.getter(val);
                return function $mol_wire_async(...args) {
                    fiber?.destructor();
                    fiber = temp(obj, args);
                    return fiber.async();
                };
            },
            apply(obj, self, args) {
                fiber?.destructor();
                fiber = temp(self, args);
                return fiber.async();
            },
        });
    }
    $.$mol_wire_async = $mol_wire_async;
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_style_attach(id, text) {
        const doc = $mol_dom_context.document;
        if (!doc)
            return null;
        const elid = `$mol_style_attach:${id}`;
        let el = doc.getElementById(elid);
        if (!el) {
            el = doc.createElement('style');
            el.id = elid;
            doc.head.appendChild(el);
        }
        if (el.innerHTML != text)
            el.innerHTML = text;
        return el;
    }
    $.$mol_style_attach = $mol_style_attach;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_decor {
        value;
        constructor(value) {
            this.value = value;
        }
        prefix() { return ''; }
        valueOf() { return this.value; }
        postfix() { return ''; }
        toString() {
            return `${this.prefix()}${this.valueOf()}${this.postfix()}`;
        }
    }
    $.$mol_decor = $mol_decor;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_style_unit extends $mol_decor {
        literal;
        constructor(value, literal) {
            super(value);
            this.literal = literal;
        }
        postfix() {
            return this.literal;
        }
        static per(value) { return `${value}%`; }
        static px(value) { return `${value}px`; }
        static mm(value) { return `${value}mm`; }
        static cm(value) { return `${value}cm`; }
        static Q(value) { return `${value}Q`; }
        static in(value) { return `${value}in`; }
        static pc(value) { return `${value}pc`; }
        static pt(value) { return `${value}pt`; }
        static cap(value) { return `${value}cap`; }
        static ch(value) { return `${value}ch`; }
        static em(value) { return `${value}em`; }
        static rem(value) { return `${value}rem`; }
        static ex(value) { return `${value}ex`; }
        static ic(value) { return `${value}ic`; }
        static lh(value) { return `${value}lh`; }
        static rlh(value) { return `${value}rlh`; }
        static vh(value) { return `${value}vh`; }
        static vw(value) { return `${value}vw`; }
        static vi(value) { return `${value}vi`; }
        static vb(value) { return `${value}vb`; }
        static vmin(value) { return `${value}vmin`; }
        static vmax(value) { return `${value}vmax`; }
        static deg(value) { return `${value}deg`; }
        static rad(value) { return `${value}rad`; }
        static grad(value) { return `${value}grad`; }
        static turn(value) { return `${value}turn`; }
        static s(value) { return `${value}s`; }
        static ms(value) { return `${value}ms`; }
    }
    $.$mol_style_unit = $mol_style_unit;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { per } = $mol_style_unit;
    class $mol_style_func extends $mol_decor {
        name;
        constructor(name, value) {
            super(value);
            this.name = name;
        }
        prefix() { return this.name + '('; }
        postfix() { return ')'; }
        static linear_gradient(value) {
            return new $mol_style_func('linear-gradient', value);
        }
        static calc(value) {
            return new $mol_style_func('calc', value);
        }
        static vary(name, defaultValue) {
            return new $mol_style_func('var', defaultValue ? [name, defaultValue] : name);
        }
        static url(href) {
            return new $mol_style_func('url', JSON.stringify(href));
        }
        static hsla(hue, saturation, lightness, alpha) {
            return new $mol_style_func('hsla', [hue, per(saturation), per(lightness), alpha]);
        }
        static clamp(min, mid, max) {
            return new $mol_style_func('clamp', [min, mid, max]);
        }
        static rgba(red, green, blue, alpha) {
            return new $mol_style_func('rgba', [red, green, blue, alpha]);
        }
        static scale(zoom) {
            return new $mol_style_func('scale', [zoom]);
        }
        static linear(...breakpoints) {
            return new $mol_style_func("linear", breakpoints.map((e) => Array.isArray(e)
                ? String(e[0]) +
                    " " +
                    (typeof e[1] === "number" ? e[1] + "%" : e[1].toString())
                : String(e)));
        }
        static cubic_bezier(x1, y1, x2, y2) {
            return new $mol_style_func('cubic-bezier', [x1, y1, x2, y2]);
        }
        static steps(value, step_position) {
            return new $mol_style_func('steps', [value, step_position]);
        }
        static blur(value) {
            return new $mol_style_func('blur', value ?? "");
        }
        static brightness(value) {
            return new $mol_style_func('brightness', value ?? "");
        }
        static contrast(value) {
            return new $mol_style_func('contrast', value ?? "");
        }
        static drop_shadow(color, x_offset, y_offset, blur_radius) {
            return new $mol_style_func("drop-shadow", blur_radius
                ? [color, x_offset, y_offset, blur_radius]
                : [color, x_offset, y_offset]);
        }
        static grayscale(value) {
            return new $mol_style_func('grayscale', value ?? "");
        }
        static hue_rotate(value) {
            return new $mol_style_func('hue-rotate', value ?? "");
        }
        static invert(value) {
            return new $mol_style_func('invert', value ?? "");
        }
        static opacity(value) {
            return new $mol_style_func('opacity', value ?? "");
        }
        static sepia(value) {
            return new $mol_style_func('sepia', value ?? "");
        }
        static saturate(value) {
            return new $mol_style_func('saturate', value ?? "");
        }
    }
    $.$mol_style_func = $mol_style_func;
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_style_prop(prefix, keys) {
        const record = keys.reduce((rec, key) => {
            rec[key] = $mol_style_func.vary(`--${prefix}_${key}`);
            return rec;
        }, {});
        return record;
    }
    $.$mol_style_prop = $mol_style_prop;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_theme = $mol_style_prop('mol_theme', [
        'back',
        'hover',
        'card',
        'current',
        'special',
        'text',
        'control',
        'shade',
        'line',
        'focus',
        'field',
        'image',
    ]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/theme/theme.css", ":root {\n\t--mol_theme_hue: 240deg;\n\t--mol_theme_hue_spread: 90deg;\n}\n\n:where([mol_theme]) {\n\tcolor: var(--mol_theme_text);\n\tfill: var(--mol_theme_text);\n\tbackground-color: var(--mol_theme_back);\n}\n\t\n:root, [mol_theme=\"$mol_theme_dark\"], :where([mol_theme=\"$mol_theme_dark\"]) [mol_theme]  {\n\n\t--mol_theme_luma: -1;\n\t--mol_theme_image: invert(1) hue-rotate( 180deg );\n\n\t--mol_theme_back: hsl( var(--mol_theme_hue), 20%, 10% );\n\t--mol_theme_card: hsl( var(--mol_theme_hue), 50%, 20%, .25 );\n\t--mol_theme_field: hsl( var(--mol_theme_hue), 50%, 8%, .25 );\n\t--mol_theme_hover: hsl( var(--mol_theme_hue), 0%, 50%, .1 );\n\t\n\t--mol_theme_text: hsl( var(--mol_theme_hue), 0%, 80% );\n\t--mol_theme_shade: hsl( var(--mol_theme_hue), 0%, 60%, 1 );\n\t--mol_theme_line: hsl( var(--mol_theme_hue), 0%, 50%, .25 );\n\t--mol_theme_focus: hsl( calc( var(--mol_theme_hue) + 180deg ), 100%, 65% );\n\t\n\t--mol_theme_control: hsl( var(--mol_theme_hue), 60%, 65% );\n\t--mol_theme_current: hsl( calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ), 60%, 65% );\n\t--mol_theme_special: hsl( calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ), 60%, 65% );\n\n\t--mol_theme_back: oklch( 20% .03 var(--mol_theme_hue) );\n\t--mol_theme_card: oklch( 30% .05 var(--mol_theme_hue) / .25 );\n\t--mol_theme_field: oklch( 10% 0 var(--mol_theme_hue) / .25 );\n\t--mol_theme_hover: oklch( 70% 0 var(--mol_theme_hue) / .1 );\n\t\n\t--mol_theme_text: oklch( 80% 0 var(--mol_theme_hue) );\n\t--mol_theme_shade: oklch( 60% 0 var(--mol_theme_hue) );\n\t--mol_theme_line: oklch( 60% 0 var(--mol_theme_hue) / .25 );\n\t--mol_theme_focus: oklch( 80% .2 calc( var(--mol_theme_hue) + 180deg ) );\n\t\n\t--mol_theme_control: oklch( 70% .1 var(--mol_theme_hue) );\n\t--mol_theme_current: oklch( 80% .2 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) );\n\t--mol_theme_special: oklch( 80% .3 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) );\n\n}\n\n[mol_theme=\"$mol_theme_light\"], :where([mol_theme=\"$mol_theme_light\"]) [mol_theme] {\n\t\n\t--mol_theme_luma: 1;\n\t--mol_theme_image: none;\n\t\n\t--mol_theme_back: hsl( var(--mol_theme_hue), 20%, 92% );\n\t--mol_theme_card: hsl( var(--mol_theme_hue), 50%, 100%, .5 );\n\t--mol_theme_field: hsl( var(--mol_theme_hue), 50%, 100%, .75 );\n\t--mol_theme_hover: hsl( var(--mol_theme_hue), 0%, 50%, .1 );\n\t\n\t--mol_theme_text: hsl( var(--mol_theme_hue), 0%, 0% );\n\t--mol_theme_shade: hsl( var(--mol_theme_hue), 0%, 40%, 1 );\n\t--mol_theme_line: hsl( var(--mol_theme_hue), 0%, 50%, .25 );\n\t--mol_theme_focus: hsl( calc( var(--mol_theme_hue) + 180deg ), 100%, 40% );\n\t\n\t--mol_theme_control: hsl( var(--mol_theme_hue), 80%, 30% );\n\t--mol_theme_current: hsl( calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ), 80%, 30% );\n\t--mol_theme_special: hsl( calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ), 80%, 30% );\n\t\n\t--mol_theme_back: oklch( 99% .01 var(--mol_theme_hue) );\n\t--mol_theme_card: oklch( 90% .02 var(--mol_theme_hue) / .25 );\n\t--mol_theme_field: oklch( 100% 0 var(--mol_theme_hue) / .5 );\n\t--mol_theme_hover: oklch( 70% 0 var(--mol_theme_hue) / .1 );\n\t\n\t--mol_theme_text: oklch( 20% 0 var(--mol_theme_hue) );\n\t--mol_theme_shade: oklch( 60% 0 var(--mol_theme_hue) );\n\t--mol_theme_line: oklch( 50% 0 var(--mol_theme_hue) / .25 );\n\t--mol_theme_focus: oklch( 20% .8 calc( var(--mol_theme_hue) + 180deg ) );\n\t\n\t--mol_theme_control: oklch( 35% .2 var(--mol_theme_hue) );\n\t--mol_theme_current: oklch( 45% .3 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) );\n\t--mol_theme_special: oklch( 45% .3 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) );\n\n}\n\n:where( :root, [mol_theme=\"$mol_theme_dark\"] ) [mol_theme=\"$mol_theme_base\"] {\n\t--mol_theme_back: oklch( 25% .05 var(--mol_theme_hue) );\n\t--mol_theme_card: oklch( 35% .1 var(--mol_theme_hue) / .25 );\n}\n:where( [mol_theme=\"$mol_theme_light\"] ) [mol_theme=\"$mol_theme_base\"] {\n\t--mol_theme_back: oklch( 95% .02 var(--mol_theme_hue) );\n\t--mol_theme_card: oklch( 80% .05 var(--mol_theme_hue) / .25 );\n}\n\n:where( :root, [mol_theme=\"$mol_theme_dark\"] ) [mol_theme=\"$mol_theme_current\"] {\n\t--mol_theme_back: oklch( 25% .05 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) );\n\t--mol_theme_card: oklch( 35% .1 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) / .25 );\n}\n:where( [mol_theme=\"$mol_theme_light\"] ) [mol_theme=\"$mol_theme_current\"] {\n\t--mol_theme_back: oklch( 95% .02 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) );\n\t--mol_theme_card: oklch( 80% .05 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) / .25 );\n}\n\n:where( :root, [mol_theme=\"$mol_theme_dark\"] ) [mol_theme=\"$mol_theme_special\"] {\n\t--mol_theme_back: oklch( 25% .05 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) );\n\t--mol_theme_card: oklch( 35% .1 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) / .25 );\n}\n:where( [mol_theme=\"$mol_theme_light\"] ) [mol_theme=\"$mol_theme_special\"] {\n\t--mol_theme_back: oklch( 95% .02 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) );\n\t--mol_theme_card: oklch( 80% .05 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) / .25 );\n}\n\n:where( :root, [mol_theme=\"$mol_theme_dark\"] ) [mol_theme=\"$mol_theme_accent\"] {\n\t--mol_theme_back: oklch( 35% .1 calc( var(--mol_theme_hue) + 180deg ) );\n\t--mol_theme_card: oklch( 45% .15 calc( var(--mol_theme_hue) + 180deg ) / .25 );\n}\n:where( [mol_theme=\"$mol_theme_light\"] ) [mol_theme=\"$mol_theme_accent\"] {\n\t--mol_theme_back: oklch( 93% .1 calc( var(--mol_theme_hue) + 180deg ) );\n\t--mol_theme_card: oklch( 83% .15 calc( var(--mol_theme_hue) + 180deg ) / .25 );\n}\n\n");
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_gap = $mol_style_prop('mol_gap', [
        'block',
        'text',
        'round',
        'space',
        'blur',
    ]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/gap/gap.css", ":root {\n\t--mol_gap_block: .75rem;\n\t--mol_gap_text: .5rem .75rem;\n\t--mol_gap_round: .25rem;\n\t--mol_gap_space: .25rem;\n\t--mol_gap_blur: .5rem;\n}\n");
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_view_visible_width() {
        return $mol_window.size().width;
    }
    $.$mol_view_visible_width = $mol_view_visible_width;
    function $mol_view_visible_height() {
        return $mol_window.size().height;
    }
    $.$mol_view_visible_height = $mol_view_visible_height;
    function $mol_view_state_key(suffix) {
        return suffix;
    }
    $.$mol_view_state_key = $mol_view_state_key;
    class $mol_view extends $mol_object {
        static Root(id) {
            return new this;
        }
        autorun() {
            try {
                this.dom_tree();
                document.title = this.title();
            }
            catch (error) {
                $mol_fail_log(error);
            }
        }
        static autobind() {
            const nodes = $mol_dom_context.document.querySelectorAll('[mol_view_root]:not([mol_view_root=""])');
            for (let i = nodes.length - 1; i >= 0; --i) {
                const name = nodes.item(i).getAttribute('mol_view_root');
                const View = $[name];
                if (!View) {
                    console.error(`Can not attach view. Class not found: ${name}`);
                    continue;
                }
                const view = View.Root(i);
                view.dom_node(nodes.item(i));
                view.autorun();
            }
        }
        title() {
            return this.toString().match(/.*\.(\w+)/)?.[1] ?? this.toString();
        }
        focused(next) {
            let node = this.dom_node();
            const value = $mol_view_selection.focused(next === undefined ? undefined : (next ? [node] : []));
            return value.indexOf(node) !== -1;
        }
        state_key(suffix = '') {
            return this.$.$mol_view_state_key(suffix);
        }
        dom_name() {
            return $mol_dom_qname(this.constructor.toString()) || 'div';
        }
        dom_name_space() { return 'http://www.w3.org/1999/xhtml'; }
        sub() {
            return [];
        }
        sub_visible() {
            return this.sub();
        }
        minimal_width() {
            let min = 0;
            try {
                const sub = this.sub();
                if (!sub)
                    return 0;
                sub.forEach(view => {
                    if (view instanceof $mol_view) {
                        min = Math.max(min, view.minimal_width());
                    }
                });
            }
            catch (error) {
                $mol_fail_log(error);
                return 24;
            }
            return min;
        }
        maximal_width() {
            return this.minimal_width();
        }
        minimal_height() {
            let min = 0;
            try {
                for (const view of this.sub() ?? []) {
                    if (view instanceof $mol_view) {
                        min = Math.max(min, view.minimal_height());
                    }
                }
            }
            catch (error) {
                $mol_fail_log(error);
                return 24;
            }
            return min;
        }
        static watchers = new Set();
        view_rect() {
            if ($mol_wire_probe(() => this.view_rect()) === undefined) {
                $mol_wire_watch();
                return null;
            }
            else {
                const { width, height, left, right, top, bottom } = this.dom_node().getBoundingClientRect();
                return { width, height, left, right, top, bottom };
            }
        }
        dom_id() {
            return this.toString().replace(/</g, '(').replace(/>/g, ')').replaceAll(/"/g, "'");
        }
        dom_node_external(next) {
            const node = next ?? $mol_dom_context.document.createElementNS(this.dom_name_space(), this.dom_name());
            const id = this.dom_id();
            node.setAttribute('id', id);
            node.toString = $mol_const('<#' + id + '>');
            return node;
        }
        dom_node(next) {
            $mol_wire_solid();
            const node = this.dom_node_external(next);
            $mol_dom_render_attributes(node, this.attr_static());
            const events = this.event_async();
            $mol_dom_render_events(node, events);
            return node;
        }
        dom_final() {
            this.render();
            const sub = this.sub_visible();
            if (!sub)
                return;
            for (const el of sub) {
                if (el && typeof el === 'object' && 'dom_final' in el) {
                    el['dom_final']();
                }
            }
            return this.dom_node();
        }
        dom_tree(next) {
            const node = this.dom_node(next);
            render: try {
                $mol_dom_render_attributes(node, { mol_view_error: null });
                try {
                    this.render();
                }
                finally {
                    for (let plugin of this.plugins()) {
                        if (plugin instanceof $mol_plugin) {
                            plugin.dom_tree();
                        }
                    }
                }
            }
            catch (error) {
                $mol_fail_log(error);
                const mol_view_error = $mol_promise_like(error) ? 'Promise' : error.name || error.constructor.name;
                $mol_dom_render_attributes(node, { mol_view_error });
                if ($mol_promise_like(error))
                    break render;
                try {
                    const message = error.message || error;
                    node.innerText = message.replace(/^|$/mg, '\xA0\xA0');
                }
                catch { }
            }
            try {
                this.auto();
            }
            catch (error) {
                $mol_fail_log(error);
            }
            return node;
        }
        dom_node_actual() {
            const node = this.dom_node();
            $mol_dom_render_styles(node, this.style_size());
            const attr = this.attr();
            const style = this.style();
            $mol_dom_render_attributes(node, attr);
            $mol_dom_render_styles(node, style);
            return node;
        }
        auto() {
            return null;
        }
        render() {
            const node = this.dom_node_actual();
            const sub = this.sub_visible();
            if (!sub)
                return;
            const nodes = sub.map(child => {
                if (child == null)
                    return null;
                return (child instanceof $mol_view)
                    ? child.dom_node()
                    : child instanceof $mol_dom_context.Node
                        ? child
                        : String(child);
            });
            $mol_dom_render_children(node, nodes);
            for (const el of sub)
                if (el && typeof el === 'object' && 'dom_tree' in el)
                    el['dom_tree']();
            $mol_dom_render_fields(node, this.field());
        }
        static view_classes() {
            const proto = this.prototype;
            let current = proto;
            const classes = [];
            while (current) {
                if (current.constructor.name !== classes.at(-1)?.name) {
                    classes.push(current.constructor);
                }
                if (!(current instanceof $mol_view))
                    break;
                current = Object.getPrototypeOf(current);
            }
            return classes;
        }
        static _view_names;
        static view_names(suffix) {
            let cache = Reflect.getOwnPropertyDescriptor(this, '_view_names')?.value;
            if (!cache)
                cache = this._view_names = new Map;
            const cached = cache.get(suffix);
            if (cached)
                return cached;
            const names = [];
            const suffix2 = '_' + suffix[0].toLowerCase() + suffix.substring(1);
            for (const Class of this.view_classes()) {
                if (suffix in Class.prototype)
                    names.push(this.$.$mol_func_name(Class) + suffix2);
                else
                    break;
            }
            cache.set(suffix, names);
            return names;
        }
        view_names_owned() {
            const names = [];
            let owner = $mol_owning_get(this);
            if (!(owner?.host instanceof $mol_view))
                return names;
            const suffix = owner.task.name.trim();
            const suffix2 = '_' + suffix[0].toLowerCase() + suffix.substring(1);
            names.push(...owner.host.constructor.view_names(suffix));
            for (let prefix of owner.host.view_names_owned()) {
                names.push(prefix + suffix2);
            }
            return names;
        }
        view_names() {
            const names = new Set();
            for (let name of this.view_names_owned())
                names.add(name);
            for (let Class of this.constructor.view_classes()) {
                const name = this.$.$mol_func_name(Class);
                if (name)
                    names.add(name);
            }
            return names;
        }
        theme(next = null) {
            return next;
        }
        attr_static() {
            let attrs = {};
            for (let name of this.view_names())
                attrs[name.replace(/\$/g, '').replace(/^(?=\d)/, '_').toLowerCase()] = '';
            return attrs;
        }
        attr() {
            return {
                mol_theme: this.theme() ?? undefined,
            };
        }
        style_size() {
            return {
                minHeight: this.minimal_height(),
                minWidth: this.minimal_width(),
            };
        }
        style() {
            return {};
        }
        field() {
            return {};
        }
        event() {
            return {};
        }
        event_async() {
            return { ...$mol_wire_async(this.event()) };
        }
        plugins() {
            return [];
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this));
        }
        *view_find(check, path = []) {
            if (check(this))
                return yield [...path, this];
            try {
                for (const item of this.sub()) {
                    if (item instanceof $mol_view) {
                        yield* item.view_find(check, [...path, this]);
                    }
                }
            }
            catch (error) {
                if ($mol_promise_like(error))
                    $mol_fail_hidden(error);
                $mol_fail_log(error);
            }
        }
        force_render(path) {
            const kids = this.sub();
            const index = kids.findIndex(item => {
                if (item instanceof $mol_view) {
                    return path.has(item);
                }
                else {
                    return false;
                }
            });
            if (index >= 0) {
                kids[index].force_render(path);
            }
        }
        ensure_visible(view, align = "start") {
            const path = this.view_find(v => v === view).next().value;
            this.force_render(new Set(path));
            try {
                this.dom_final();
            }
            catch (err) {
                $mol_fail_log(err);
            }
            view.dom_node().scrollIntoView({ block: align });
        }
        bring() {
            const win = this.$.$mol_dom_context;
            if (win.parent !== win.self && !win.document.hasFocus())
                return;
            new this.$.$mol_after_timeout(0, () => {
                this.focused(true);
            });
        }
        destructor() {
            const node = $mol_wire_probe(() => this.dom_node());
            if (!node)
                return;
            const events = $mol_wire_probe(() => this.event_async());
            if (!events)
                return;
            for (let event_name in events) {
                node.removeEventListener(event_name, events[event_name]);
            }
        }
    }
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "autorun", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "title", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "focused", null);
    __decorate([
        $mol_memo.method
    ], $mol_view.prototype, "dom_name", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "minimal_width", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "minimal_height", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "view_rect", null);
    __decorate([
        $mol_memo.method
    ], $mol_view.prototype, "dom_id", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "dom_node", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "dom_final", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "dom_tree", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "dom_node_actual", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "render", null);
    __decorate([
        $mol_memo.method
    ], $mol_view.prototype, "view_names_owned", null);
    __decorate([
        $mol_memo.method
    ], $mol_view.prototype, "view_names", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "theme", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "event_async", null);
    __decorate([
        $mol_mem_key
    ], $mol_view, "Root", null);
    __decorate([
        $mol_mem
    ], $mol_view, "autobind", null);
    __decorate([
        $mol_memo.method
    ], $mol_view, "view_classes", null);
    $.$mol_view = $mol_view;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/view/view/view.css", "[mol_view] {\n\ttransition-property: height, width, min-height, min-width, max-width, max-height, transform;\n\ttransition-duration: .2s;\n\ttransition-timing-function: ease-out;\n\t-webkit-appearance: none;\n\tbox-sizing: border-box;\n\tdisplay: flex;\n\tflex-shrink: 0;\n\tcontain: style;\n\tscrollbar-color: var(--mol_theme_line) transparent;\n\tscrollbar-width: thin;\n}\t\n\n[mol_view]::selection {\n\tbackground: var(--mol_theme_line);\n}\t\n\n[mol_view]::-webkit-scrollbar {\n\twidth: .25rem;\n\theight: .25rem;\n}\n\n[mol_view]::-webkit-scrollbar-corner {\n\tbackground-color: var(--mol_theme_line);\n}\n\n[mol_view]::-webkit-scrollbar-track {\n\tbackground-color: transparent;\n}\n\n[mol_view]::-webkit-scrollbar-thumb {\n\tbackground-color: var(--mol_theme_line);\n\tborder-radius: var(--mol_gap_round);\n}\n\n[mol_view] > * {\n\tword-break: inherit;\n}\n\n[mol_view_root] {\n\tmargin: 0;\n\tpadding: 0;\n\twidth: 100%;\n\theight: 100%;\n\tbox-sizing: border-box;\n\tfont-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n\tfont-size: 1rem;\n\tline-height: 1.5rem;\n\tbackground: var(--mol_theme_back);\n\tcolor: var(--mol_theme_text);\n\tcontain: unset; /** Fixes bg ignoring when applied to body on Chrome */\n\ttab-size: 4;\n\toverscroll-behavior: contain; /** Disable navigation gestures **/\n}\n\n@media print {\n\t[mol_view_root] {\n\t\theight: auto;\n\t}\n}\n\n[mol_view][mol_view_error]:not([mol_view_error=\"Promise\"]) {\n\tbackground-image: repeating-linear-gradient(\n\t\t-45deg,\n\t\t#f92323,\n\t\t#f92323 .5rem,\n\t\t#ff3d3d .5rem,\n\t\t#ff3d3d 1.5rem\n\t);\n\tcolor: black;\n\talign-items: center;\n\tjustify-content: center;\n}\n\n@keyframes mol_view_wait {\n\tfrom {\n\t\topacity: .25;\n\t}\n\t20% {\n\t\topacity: .75;\n\t}\n\tto {\n\t\topacity: .25;\n\t}\n}\n\n:where([mol_view][mol_view_error=\"Promise\"]) {\n\tbackground: var(--mol_theme_hover);\n}\n\n[mol_view][mol_view_error=\"Promise\"] {\n\tanimation: mol_view_wait 1s steps(20,end) infinite;\n}\n");
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_plugin extends $mol_view {
        dom_node_external(next) {
            return next ?? $mol_owning_get(this).host.dom_node();
        }
        render() {
            this.dom_node_actual();
        }
    }
    $.$mol_plugin = $mol_plugin;
})($ || ($ = {}));

;
	($.$mol_scroll) = class $mol_scroll extends ($.$mol_view) {
		tabindex(){
			return -1;
		}
		event_scroll(next){
			if(next !== undefined) return next;
			return null;
		}
		scroll_top(next){
			if(next !== undefined) return next;
			return 0;
		}
		scroll_left(next){
			if(next !== undefined) return next;
			return 0;
		}
		field(){
			return {...(super.field()), "tabIndex": (this.tabindex())};
		}
		event(){
			return {...(super.event()), "scroll": (next) => (this.event_scroll(next))};
		}
	};
	($mol_mem(($.$mol_scroll.prototype), "event_scroll"));
	($mol_mem(($.$mol_scroll.prototype), "scroll_top"));
	($mol_mem(($.$mol_scroll.prototype), "scroll_left"));


;
"use strict";
var $;
(function ($) {
    class $mol_dom_listener extends $mol_object {
        _node;
        _event;
        _handler;
        _config;
        constructor(_node, _event, _handler, _config = { passive: true }) {
            super();
            this._node = _node;
            this._event = _event;
            this._handler = _handler;
            this._config = _config;
            this._node.addEventListener(this._event, this._handler, this._config);
        }
        destructor() {
            this._node.removeEventListener(this._event, this._handler, this._config);
            super.destructor();
        }
    }
    $.$mol_dom_listener = $mol_dom_listener;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_print extends $mol_object {
        static before() {
            return new $mol_dom_listener(this.$.$mol_dom_context, 'beforeprint', () => {
                this.active(true);
            });
        }
        static after() {
            return new $mol_dom_listener(this.$.$mol_dom_context, 'afterprint', () => {
                this.active(false);
            });
        }
        static active(next) {
            this.before();
            this.after();
            return next || false;
        }
    }
    __decorate([
        $mol_mem
    ], $mol_print, "before", null);
    __decorate([
        $mol_mem
    ], $mol_print, "after", null);
    __decorate([
        $mol_mem
    ], $mol_print, "active", null);
    $.$mol_print = $mol_print;
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_style_sheet(Component, config0) {
        let rules = [];
        const block = $mol_dom_qname($mol_ambient({}).$mol_func_name(Component));
        const kebab = (name) => name.replace(/[A-Z]/g, letter => '-' + letter.toLowerCase());
        const make_class = (prefix, path, config) => {
            const props = [];
            const selector = (prefix, path) => {
                if (path.length === 0)
                    return prefix || `[${block}]`;
                let res = `[${block}_${path.join('_')}]`;
                if (prefix)
                    res = prefix + ' :where(' + res + ')';
                return res;
            };
            for (const key of Object.keys(config).reverse()) {
                if (/^(--)?[a-z]/.test(key)) {
                    const addProp = (keys, val) => {
                        if (Array.isArray(val)) {
                            if (val[0] && [Array, Object].includes(val[0].constructor)) {
                                val = val.map(v => {
                                    return Object.entries(v).map(([n, a]) => {
                                        if (a === true)
                                            return kebab(n);
                                        if (a === false)
                                            return null;
                                        return String(a);
                                    }).filter(Boolean).join(' ');
                                }).join(',');
                            }
                            else {
                                val = val.join(' ');
                            }
                            props.push(`\t${keys.join('-')}: ${val};\n`);
                        }
                        else if (val.constructor === Object) {
                            for (let suffix in val) {
                                addProp([...keys, kebab(suffix)], val[suffix]);
                            }
                        }
                        else {
                            props.push(`\t${keys.join('-')}: ${val};\n`);
                        }
                    };
                    addProp([kebab(key)], config[key]);
                }
                else if (/^[A-Z]/.test(key)) {
                    make_class(prefix, [...path, key.toLowerCase()], config[key]);
                }
                else if (key[0] === '$') {
                    make_class(selector(prefix, path) + ' :where([' + $mol_dom_qname(key) + '])', [], config[key]);
                }
                else if (key === '>') {
                    const types = config[key];
                    for (let type in types) {
                        make_class(selector(prefix, path) + ' > :where([' + $mol_dom_qname(type) + '])', [], types[type]);
                    }
                }
                else if (key === '@') {
                    const attrs = config[key];
                    for (let name in attrs) {
                        for (let val in attrs[name]) {
                            make_class(selector(prefix, path) + ':where([' + name + '=' + JSON.stringify(val) + '])', [], attrs[name][val]);
                        }
                    }
                }
                else if (key === '@media') {
                    const media = config[key];
                    for (let query in media) {
                        rules.push('}\n');
                        make_class(prefix, path, media[query]);
                        rules.push(`${key} ${query} {\n`);
                    }
                }
                else if (key[0] === '[' && key[key.length - 1] === ']') {
                    const attr = key.slice(1, -1);
                    const vals = config[key];
                    for (let val in vals) {
                        make_class(selector(prefix, path) + ':where([' + attr + '=' + JSON.stringify(val) + '])', [], vals[val]);
                    }
                }
                else {
                    make_class(selector(prefix, path) + key, [], config[key]);
                }
            }
            if (props.length) {
                rules.push(`${selector(prefix, path)} {\n${props.reverse().join('')}}\n`);
            }
        };
        make_class('', [], config0);
        return rules.reverse().join('');
    }
    $.$mol_style_sheet = $mol_style_sheet;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_style_define(Component, config) {
        return $mol_style_attach(Component.name, $mol_style_sheet(Component, config));
    }
    $.$mol_style_define = $mol_style_define;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_scroll extends $.$mol_scroll {
            scroll_top(next, cache) {
                const el = this.dom_node();
                if (next !== undefined && !cache)
                    el.scrollTop = next;
                return el.scrollTop;
            }
            scroll_left(next, cache) {
                const el = this.dom_node();
                if (next !== undefined && !cache)
                    el.scrollLeft = next;
                return el.scrollLeft;
            }
            event_scroll(next) {
                const el = this.dom_node();
                this.scroll_left(el.scrollLeft, 'cache');
                this.scroll_top(el.scrollTop, 'cache');
            }
            minimal_height() {
                return this.$.$mol_print.active() ? null : 0;
            }
            minimal_width() {
                return this.$.$mol_print.active() ? null : 0;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_scroll.prototype, "scroll_top", null);
        __decorate([
            $mol_mem
        ], $mol_scroll.prototype, "scroll_left", null);
        $$.$mol_scroll = $mol_scroll;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { per, rem, px } = $mol_style_unit;
        $mol_style_define($mol_scroll, {
            display: 'grid',
            overflow: 'auto',
            flex: {
                direction: 'column',
                grow: 1,
                shrink: 1,
            },
            outline: 'none',
            align: {
                self: 'stretch',
                items: 'flex-start',
            },
            boxSizing: 'border-box',
            willChange: 'scroll-position',
            scroll: {
                padding: [rem(.75), 0],
            },
            maxHeight: per(100),
            maxWidth: per(100),
            webkitOverflowScrolling: 'touch',
            contain: 'content',
            '>': {
                $mol_view: {
                    gridArea: '1/1',
                },
            },
            '::before': {
                display: 'none',
            },
            '::after': {
                display: 'none',
            },
            '::-webkit-scrollbar': {
                width: rem(.25),
                height: rem(.25),
            },
            '@media': {
                'print': {
                    overflow: 'hidden',
                    contain: 'none',
                    maxHeight: 'unset',
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_book2) = class $mol_book2 extends ($.$mol_scroll) {
		pages(){
			return [];
		}
		menu_title(){
			return "";
		}
		sub(){
			return (this.pages());
		}
		minimal_width(){
			return 0;
		}
		Placeholder(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Gap(id){
			const obj = new this.$.$mol_view();
			(obj.title) = () => ("");
			return obj;
		}
	};
	($mol_mem(($.$mol_book2.prototype), "Placeholder"));
	($mol_mem_key(($.$mol_book2.prototype), "Gap"));


;
"use strict";
var $;
(function ($) {
    $.$mol_mem_cached = $mol_wire_probe;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_layer = $mol_style_prop('mol_layer', [
        'hover',
        'focus',
        'speck',
        'float',
        'popup',
    ]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/layer/layer.css", ":root {\n\t--mol_layer_hover: 1;\n\t--mol_layer_focus: 2;\n\t--mol_layer_speck: 3;\n\t--mol_layer_float: 4;\n\t--mol_layer_popup: 5;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_book2 extends $.$mol_book2 {
            title() {
                return this.pages().map(page => {
                    try {
                        return page?.title();
                    }
                    catch (error) {
                        $mol_fail_log(error);
                    }
                }).reverse().filter(Boolean).join(' | ');
            }
            menu_title() {
                return this.pages()[0]?.title() || this.title();
            }
            sub() {
                const placeholder = this.Placeholder();
                const next = [...this.pages(), placeholder];
                const prev = $mol_mem_cached(() => this.sub()) ?? [];
                for (let i = 1; i++;) {
                    const p = prev[prev.length - i];
                    const n = next[next.length - i];
                    if (!n)
                        break;
                    if (p === n)
                        continue;
                    if (n === placeholder)
                        continue;
                    new this.$.$mol_after_tick(() => {
                        const b = this.dom_node();
                        const p = n.dom_node();
                        b.scroll({
                            left: p.offsetLeft + p.offsetWidth - b.offsetWidth,
                            behavior: 'smooth',
                        });
                    });
                    break;
                }
                return next;
            }
            bring() {
                const pages = this.pages();
                if (pages.length)
                    pages[pages.length - 1].bring();
                else
                    super.bring();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_book2.prototype, "sub", null);
        $$.$mol_book2 = $mol_book2;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/book2/book2.view.css", "[mol_book2] {\n\tdisplay: flex;\n\tflex-flow: row nowrap;\n\talign-items: stretch;\n\tflex: 1 1 auto;\n\talign-self: stretch;\n\tmargin: 0;\n\t/* box-shadow: 0 0 0 1px var(--mol_theme_line); */\n\t/* transform: translateZ(0); */\n\ttransition: none;\n\tscroll-snap-type: x mandatory;\n\t/* padding: 0 1px;\n\tscroll-padding: 0 1px;\n\tgap: 1px; */\n}\n\n[mol_book2] > * {\n/* \tflex: none; */\n\tscroll-snap-stop: always;\n\tscroll-snap-align: end;\n\tposition: relative;\n\tmin-height: 100%;\n\tmax-height: 100%;\n\tmax-width: 100%;\n\tflex-shrink: 0;\n\tbox-shadow: inset 0 0 0 1px var(--mol_theme_field);\n}\n\n[mol_book2] > *:not(:first-of-type):before,\n[mol_book2] > *:not(:last-of-type)::after {\n\tcontent: '';\n\tposition: absolute;\n\ttop: 1.5rem;\n\twidth: 3px;\n\theight: 1rem;\n\tbackground: linear-gradient(\n\t\tto bottom,\n\t\tvar(--mol_theme_focus) 0%,\n\t\tvar(--mol_theme_focus) 14%,\n\t\ttransparent 15%,\n\t\ttransparent 42%,\n\t\tvar(--mol_theme_focus) 43%,\n\t\tvar(--mol_theme_focus) 57%,\n\t\ttransparent 58%,\n\t\ttransparent 85%,\n\t\tvar(--mol_theme_focus) 86%,\n\t\tvar(--mol_theme_focus) 100%\n\t);\n\topacity: .5;\n\tz-index: var(--mol_layer_speck);\n}\n[mol_book2] > *:not(:first-of-type):before {\n\tleft: -1px;\n}\n[mol_book2] > *:not(:last-of-type)::after {\n\tright: -1px;\n}\n\n:where([mol_book2]) > * {\n\tbackground-color: var(--mol_theme_card);\n\t/* box-shadow: 0 0 0 1px var(--mol_theme_back); */\n}\n\n[mol_book2] > [mol_book2] {\n\tdisplay: contents;\n}\n\n[mol_book2] > *:first-child {\n\tscroll-snap-align: start;\n}\n\n[mol_book2] > [mol_view] {\n\ttransform: none; /* prevent content clipping */\n}\n\n[mol_book2_placeholder] {\n\tflex: 1 1 0;\n\tbackground: none;\n}\n\n[mol_book2_gap] {\n\tbackground: none;\n\tflex-grow: 1;\n\tscroll-snap-align: none;\n\tmargin-right: -1px;\n\tbox-shadow: none;\n}\n\n[mol_book2_gap]::before,\n[mol_book2_gap]::after {\n\tdisplay: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_pop) = class $mol_pop extends ($.$mol_view) {
		Anchor(){
			return null;
		}
		align(){
			return "bottom_center";
		}
		bubble_content(){
			return [];
		}
		height_max(){
			return 9999;
		}
		Bubble(){
			const obj = new this.$.$mol_pop_bubble();
			(obj.align) = () => ((this.align()));
			(obj.content) = () => ((this.bubble_content()));
			(obj.height_max) = () => ((this.height_max()));
			return obj;
		}
		showed(next){
			if(next !== undefined) return next;
			return false;
		}
		align_vert(){
			return "";
		}
		align_hor(){
			return "";
		}
		prefer(){
			return "vert";
		}
		sub(){
			return [(this.Anchor())];
		}
		sub_visible(){
			return [(this.Anchor()), (this.Bubble())];
		}
	};
	($mol_mem(($.$mol_pop.prototype), "Bubble"));
	($mol_mem(($.$mol_pop.prototype), "showed"));
	($.$mol_pop_bubble) = class $mol_pop_bubble extends ($.$mol_view) {
		content(){
			return [];
		}
		height_max(){
			return 9999;
		}
		align(){
			return "";
		}
		sub(){
			return (this.content());
		}
		style(){
			return {...(super.style()), "maxHeight": (this.height_max())};
		}
		attr(){
			return {
				...(super.attr()), 
				"mol_pop_align": (this.align()), 
				"tabindex": 0
			};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_pop extends $.$mol_pop {
            showed(next = false) {
                this.focused();
                return next;
            }
            sub_visible() {
                return [
                    this.Anchor(),
                    ...this.showed() ? [this.Bubble()] : [],
                ];
            }
            height_max() {
                const viewport = this.$.$mol_window.size();
                const rect_bubble = this.view_rect();
                const align = this.align_vert();
                if (align === 'bottom')
                    return (viewport.height - rect_bubble.bottom) * .66;
                if (align === 'top')
                    return rect_bubble.top * .66;
                return 0;
            }
            align() {
                switch (this.prefer()) {
                    case 'hor': return `${this.align_hor()}_${this.align_vert()}`;
                    case 'vert': return `${this.align_vert()}_${this.align_hor()}`;
                    default: return this.prefer();
                }
            }
            align_vert() {
                const viewport = this.view_port();
                const rect_pop = this.view_rect();
                if (!rect_pop)
                    return 'suspense';
                return rect_pop.top > (viewport.top + viewport.height / 2) ? 'top' : 'bottom';
            }
            align_hor() {
                const viewport = this.view_port();
                const rect_pop = this.view_rect();
                if (!rect_pop)
                    return 'suspense';
                return rect_pop.left > (viewport.left + viewport.width / 2) ? 'left' : 'right';
            }
            View_port() {
                const view = new $mol_view;
                view.dom_node = () => {
                    let node = this.dom_node();
                    while (node = node.offsetParent) {
                        if (this.$.$mol_dom_context.getComputedStyle(node).overflow !== 'visible')
                            return node;
                    }
                    return this.$.$mol_dom_context.document.documentElement;
                };
                return view;
            }
            view_port() {
                return this.View_port().view_rect() ?? { ...this.$.$mol_window.size(), left: 0, top: 0 };
            }
        }
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "showed", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "sub_visible", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "height_max", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "align", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "align_vert", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "align_hor", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "View_port", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "view_port", null);
        $$.$mol_pop = $mol_pop;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/pop/pop.view.css", "[mol_pop] {\n\tposition: relative;\n\tdisplay: inline-flex;\n}\n\n[mol_pop_bubble] {\n\tbox-shadow: 0 0 1rem hsla(0,0%,0%,.5);\n\tborder-radius: var(--mol_gap_round);\n\tposition: absolute;\n\tz-index: var(--mol_layer_popup);\n\tbackground: var(--mol_theme_back);\n\tmax-width: none;\n\tmax-height: none;\n\t/* overflow: hidden;\n\toverflow-y: scroll;\n\toverflow-y: overlay; */\n\tword-break: normal;\n\twidth: max-content;\n\t/* height: max-content; */\n\tflex-direction: column;\n\tmax-width: 80vw;\n\tmax-height: 80vw;\n\tcontain: paint;\n\ttransition-property: opacity;\n}\n\n:where( [mol_pop_bubble] > * ) {\n\tbackground: var(--mol_theme_card);\n}\n\n[mol_pop_bubble][mol_scroll] {\n\tbackground: var(--mol_theme_back);\n}\n\n[mol_pop_bubble]:focus {\n\toutline: none;\n}\n\n[mol_pop_align=\"suspense_suspense\"] {\n\topacity: 0;\n}\n\n[mol_pop_align=\"left_top\"] {\n\ttransform: translate(-100%);\n\tleft: 0;\n\tbottom: 0;\n}\n\n[mol_pop_align=\"left_center\"] {\n\ttransform: translate(-100%, -50%);\n\tleft: 0;\n\ttop: 50%;\n}\n\n[mol_pop_align=\"left_bottom\"] {\n\ttransform: translate(-100%);\n\tleft: 0;\n\ttop: 0;\n}\n\n[mol_pop_align=\"right_top\"] {\n\ttransform: translate(100%);\n\tright: 0;\n\tbottom: 0;\n}\n\n[mol_pop_align=\"right_center\"] {\n\ttransform: translate(100%, -50%);\n\tright: 0;\n\ttop: 50%;\n}\n\n[mol_pop_align=\"right_bottom\"] {\n\ttransform: translate(100%);\n\tright: 0;\n\ttop: 0;\n}\n\n[mol_pop_align=\"center\"] {\n\tleft: 50%;\n\ttop: 50%;\n\ttransform: translate(-50%, -50%);\n}\n\n[mol_pop_align=\"top_left\"] {\n\tright: 0;\n\tbottom: 100%;\n}\n\n[mol_pop_align=\"top_center\"] {\n\ttransform: translate(-50%);\n\tleft: 50%;\n\tbottom: 100%;\n}\n\n[mol_pop_align=\"top_right\"] {\n\tleft: 0;\n\tbottom: 100%;\n}\n\n[mol_pop_align=\"bottom_left\"] {\n\tright: 0;\n\ttop: 100%;\n}\n\n[mol_pop_align=\"bottom_center\"] {\n\ttransform: translate(-50%);\n\tleft: 50%;\n\ttop: 100%;\n}\n\n[mol_pop_align=\"bottom_right\"] {\n\tleft: 0;\n\ttop: 100%;\n}\n");
})($ || ($ = {}));

;
	($.$mol_hotkey) = class $mol_hotkey extends ($.$mol_plugin) {
		keydown(next){
			if(next !== undefined) return next;
			return null;
		}
		event(){
			return {...(super.event()), "keydown": (next) => (this.keydown(next))};
		}
		key(){
			return {};
		}
		mod_ctrl(){
			return false;
		}
		mod_alt(){
			return false;
		}
		mod_shift(){
			return false;
		}
	};
	($mol_mem(($.$mol_hotkey.prototype), "keydown"));


;
"use strict";
var $;
(function ($) {
    let $mol_keyboard_code;
    (function ($mol_keyboard_code) {
        $mol_keyboard_code[$mol_keyboard_code["backspace"] = 8] = "backspace";
        $mol_keyboard_code[$mol_keyboard_code["tab"] = 9] = "tab";
        $mol_keyboard_code[$mol_keyboard_code["enter"] = 13] = "enter";
        $mol_keyboard_code[$mol_keyboard_code["shift"] = 16] = "shift";
        $mol_keyboard_code[$mol_keyboard_code["ctrl"] = 17] = "ctrl";
        $mol_keyboard_code[$mol_keyboard_code["alt"] = 18] = "alt";
        $mol_keyboard_code[$mol_keyboard_code["pause"] = 19] = "pause";
        $mol_keyboard_code[$mol_keyboard_code["capsLock"] = 20] = "capsLock";
        $mol_keyboard_code[$mol_keyboard_code["escape"] = 27] = "escape";
        $mol_keyboard_code[$mol_keyboard_code["space"] = 32] = "space";
        $mol_keyboard_code[$mol_keyboard_code["pageUp"] = 33] = "pageUp";
        $mol_keyboard_code[$mol_keyboard_code["pageDown"] = 34] = "pageDown";
        $mol_keyboard_code[$mol_keyboard_code["end"] = 35] = "end";
        $mol_keyboard_code[$mol_keyboard_code["home"] = 36] = "home";
        $mol_keyboard_code[$mol_keyboard_code["left"] = 37] = "left";
        $mol_keyboard_code[$mol_keyboard_code["up"] = 38] = "up";
        $mol_keyboard_code[$mol_keyboard_code["right"] = 39] = "right";
        $mol_keyboard_code[$mol_keyboard_code["down"] = 40] = "down";
        $mol_keyboard_code[$mol_keyboard_code["insert"] = 45] = "insert";
        $mol_keyboard_code[$mol_keyboard_code["delete"] = 46] = "delete";
        $mol_keyboard_code[$mol_keyboard_code["key0"] = 48] = "key0";
        $mol_keyboard_code[$mol_keyboard_code["key1"] = 49] = "key1";
        $mol_keyboard_code[$mol_keyboard_code["key2"] = 50] = "key2";
        $mol_keyboard_code[$mol_keyboard_code["key3"] = 51] = "key3";
        $mol_keyboard_code[$mol_keyboard_code["key4"] = 52] = "key4";
        $mol_keyboard_code[$mol_keyboard_code["key5"] = 53] = "key5";
        $mol_keyboard_code[$mol_keyboard_code["key6"] = 54] = "key6";
        $mol_keyboard_code[$mol_keyboard_code["key7"] = 55] = "key7";
        $mol_keyboard_code[$mol_keyboard_code["key8"] = 56] = "key8";
        $mol_keyboard_code[$mol_keyboard_code["key9"] = 57] = "key9";
        $mol_keyboard_code[$mol_keyboard_code["A"] = 65] = "A";
        $mol_keyboard_code[$mol_keyboard_code["B"] = 66] = "B";
        $mol_keyboard_code[$mol_keyboard_code["C"] = 67] = "C";
        $mol_keyboard_code[$mol_keyboard_code["D"] = 68] = "D";
        $mol_keyboard_code[$mol_keyboard_code["E"] = 69] = "E";
        $mol_keyboard_code[$mol_keyboard_code["F"] = 70] = "F";
        $mol_keyboard_code[$mol_keyboard_code["G"] = 71] = "G";
        $mol_keyboard_code[$mol_keyboard_code["H"] = 72] = "H";
        $mol_keyboard_code[$mol_keyboard_code["I"] = 73] = "I";
        $mol_keyboard_code[$mol_keyboard_code["J"] = 74] = "J";
        $mol_keyboard_code[$mol_keyboard_code["K"] = 75] = "K";
        $mol_keyboard_code[$mol_keyboard_code["L"] = 76] = "L";
        $mol_keyboard_code[$mol_keyboard_code["M"] = 77] = "M";
        $mol_keyboard_code[$mol_keyboard_code["N"] = 78] = "N";
        $mol_keyboard_code[$mol_keyboard_code["O"] = 79] = "O";
        $mol_keyboard_code[$mol_keyboard_code["P"] = 80] = "P";
        $mol_keyboard_code[$mol_keyboard_code["Q"] = 81] = "Q";
        $mol_keyboard_code[$mol_keyboard_code["R"] = 82] = "R";
        $mol_keyboard_code[$mol_keyboard_code["S"] = 83] = "S";
        $mol_keyboard_code[$mol_keyboard_code["T"] = 84] = "T";
        $mol_keyboard_code[$mol_keyboard_code["U"] = 85] = "U";
        $mol_keyboard_code[$mol_keyboard_code["V"] = 86] = "V";
        $mol_keyboard_code[$mol_keyboard_code["W"] = 87] = "W";
        $mol_keyboard_code[$mol_keyboard_code["X"] = 88] = "X";
        $mol_keyboard_code[$mol_keyboard_code["Y"] = 89] = "Y";
        $mol_keyboard_code[$mol_keyboard_code["Z"] = 90] = "Z";
        $mol_keyboard_code[$mol_keyboard_code["metaLeft"] = 91] = "metaLeft";
        $mol_keyboard_code[$mol_keyboard_code["metaRight"] = 92] = "metaRight";
        $mol_keyboard_code[$mol_keyboard_code["select"] = 93] = "select";
        $mol_keyboard_code[$mol_keyboard_code["numpad0"] = 96] = "numpad0";
        $mol_keyboard_code[$mol_keyboard_code["numpad1"] = 97] = "numpad1";
        $mol_keyboard_code[$mol_keyboard_code["numpad2"] = 98] = "numpad2";
        $mol_keyboard_code[$mol_keyboard_code["numpad3"] = 99] = "numpad3";
        $mol_keyboard_code[$mol_keyboard_code["numpad4"] = 100] = "numpad4";
        $mol_keyboard_code[$mol_keyboard_code["numpad5"] = 101] = "numpad5";
        $mol_keyboard_code[$mol_keyboard_code["numpad6"] = 102] = "numpad6";
        $mol_keyboard_code[$mol_keyboard_code["numpad7"] = 103] = "numpad7";
        $mol_keyboard_code[$mol_keyboard_code["numpad8"] = 104] = "numpad8";
        $mol_keyboard_code[$mol_keyboard_code["numpad9"] = 105] = "numpad9";
        $mol_keyboard_code[$mol_keyboard_code["multiply"] = 106] = "multiply";
        $mol_keyboard_code[$mol_keyboard_code["add"] = 107] = "add";
        $mol_keyboard_code[$mol_keyboard_code["subtract"] = 109] = "subtract";
        $mol_keyboard_code[$mol_keyboard_code["decimal"] = 110] = "decimal";
        $mol_keyboard_code[$mol_keyboard_code["divide"] = 111] = "divide";
        $mol_keyboard_code[$mol_keyboard_code["F1"] = 112] = "F1";
        $mol_keyboard_code[$mol_keyboard_code["F2"] = 113] = "F2";
        $mol_keyboard_code[$mol_keyboard_code["F3"] = 114] = "F3";
        $mol_keyboard_code[$mol_keyboard_code["F4"] = 115] = "F4";
        $mol_keyboard_code[$mol_keyboard_code["F5"] = 116] = "F5";
        $mol_keyboard_code[$mol_keyboard_code["F6"] = 117] = "F6";
        $mol_keyboard_code[$mol_keyboard_code["F7"] = 118] = "F7";
        $mol_keyboard_code[$mol_keyboard_code["F8"] = 119] = "F8";
        $mol_keyboard_code[$mol_keyboard_code["F9"] = 120] = "F9";
        $mol_keyboard_code[$mol_keyboard_code["F10"] = 121] = "F10";
        $mol_keyboard_code[$mol_keyboard_code["F11"] = 122] = "F11";
        $mol_keyboard_code[$mol_keyboard_code["F12"] = 123] = "F12";
        $mol_keyboard_code[$mol_keyboard_code["numLock"] = 144] = "numLock";
        $mol_keyboard_code[$mol_keyboard_code["scrollLock"] = 145] = "scrollLock";
        $mol_keyboard_code[$mol_keyboard_code["semicolon"] = 186] = "semicolon";
        $mol_keyboard_code[$mol_keyboard_code["equals"] = 187] = "equals";
        $mol_keyboard_code[$mol_keyboard_code["comma"] = 188] = "comma";
        $mol_keyboard_code[$mol_keyboard_code["dash"] = 189] = "dash";
        $mol_keyboard_code[$mol_keyboard_code["period"] = 190] = "period";
        $mol_keyboard_code[$mol_keyboard_code["forwardSlash"] = 191] = "forwardSlash";
        $mol_keyboard_code[$mol_keyboard_code["graveAccent"] = 192] = "graveAccent";
        $mol_keyboard_code[$mol_keyboard_code["bracketOpen"] = 219] = "bracketOpen";
        $mol_keyboard_code[$mol_keyboard_code["slashBack"] = 220] = "slashBack";
        $mol_keyboard_code[$mol_keyboard_code["slashBackLeft"] = 226] = "slashBackLeft";
        $mol_keyboard_code[$mol_keyboard_code["bracketClose"] = 221] = "bracketClose";
        $mol_keyboard_code[$mol_keyboard_code["quoteSingle"] = 222] = "quoteSingle";
    })($mol_keyboard_code = $.$mol_keyboard_code || ($.$mol_keyboard_code = {}));
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_hotkey extends $.$mol_hotkey {
            key() {
                return super.key();
            }
            keydown(event) {
                if (!event)
                    return;
                if (event.defaultPrevented)
                    return;
                let name = $mol_keyboard_code[event.keyCode];
                if (this.mod_ctrl() !== (event.ctrlKey || event.metaKey))
                    return;
                if (this.mod_alt() !== event.altKey)
                    return;
                if (this.mod_shift() !== event.shiftKey)
                    return;
                const handle = this.key()[name];
                if (handle)
                    handle(event);
            }
        }
        $$.$mol_hotkey = $mol_hotkey;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_nav) = class $mol_nav extends ($.$mol_plugin) {
		event_key(next){
			if(next !== undefined) return next;
			return null;
		}
		cycle(next){
			if(next !== undefined) return next;
			return false;
		}
		mod_ctrl(){
			return false;
		}
		mod_shift(){
			return false;
		}
		mod_alt(){
			return false;
		}
		keys_x(next){
			if(next !== undefined) return next;
			return [];
		}
		keys_y(next){
			if(next !== undefined) return next;
			return [];
		}
		current_x(next){
			if(next !== undefined) return next;
			return null;
		}
		current_y(next){
			if(next !== undefined) return next;
			return null;
		}
		event_up(next){
			if(next !== undefined) return next;
			return null;
		}
		event_down(next){
			if(next !== undefined) return next;
			return null;
		}
		event_left(next){
			if(next !== undefined) return next;
			return null;
		}
		event_right(next){
			if(next !== undefined) return next;
			return null;
		}
		event(){
			return {...(super.event()), "keydown": (next) => (this.event_key(next))};
		}
	};
	($mol_mem(($.$mol_nav.prototype), "event_key"));
	($mol_mem(($.$mol_nav.prototype), "cycle"));
	($mol_mem(($.$mol_nav.prototype), "keys_x"));
	($mol_mem(($.$mol_nav.prototype), "keys_y"));
	($mol_mem(($.$mol_nav.prototype), "current_x"));
	($mol_mem(($.$mol_nav.prototype), "current_y"));
	($mol_mem(($.$mol_nav.prototype), "event_up"));
	($mol_mem(($.$mol_nav.prototype), "event_down"));
	($mol_mem(($.$mol_nav.prototype), "event_left"));
	($mol_mem(($.$mol_nav.prototype), "event_right"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_nav extends $.$mol_nav {
            event_key(event) {
                if (!event)
                    return event;
                if (event.defaultPrevented)
                    return;
                if (this.mod_ctrl() && !event.ctrlKey)
                    return;
                if (this.mod_shift() && !event.shiftKey)
                    return;
                if (this.mod_alt() && !event.altKey)
                    return;
                switch (event.keyCode) {
                    case $mol_keyboard_code.up: return this.event_up(event);
                    case $mol_keyboard_code.down: return this.event_down(event);
                    case $mol_keyboard_code.left: return this.event_left(event);
                    case $mol_keyboard_code.right: return this.event_right(event);
                    case $mol_keyboard_code.pageUp: return this.event_up(event);
                    case $mol_keyboard_code.pageDown: return this.event_down(event);
                }
            }
            event_up(event) {
                if (!event)
                    return event;
                const keys = this.keys_y();
                if (keys.length < 1)
                    return;
                const index_y = this.index_y();
                const index_old = index_y === null ? 0 : index_y;
                const index_new = (index_old + keys.length - 1) % keys.length;
                event.preventDefault();
                if (index_old === 0 && !this.cycle())
                    return;
                this.current_y(this.keys_y()[index_new]);
            }
            event_down(event) {
                if (!event)
                    return event;
                const keys = this.keys_y();
                if (keys.length < 1)
                    return;
                const index_y = this.index_y();
                const index_old = index_y === null ? keys.length - 1 : index_y;
                const index_new = (index_old + 1) % keys.length;
                event.preventDefault();
                if (index_new === 0 && !this.cycle())
                    return;
                this.current_y(this.keys_y()[index_new]);
            }
            event_left(event) {
                if (!event)
                    return event;
                const keys = this.keys_x();
                if (keys.length < 1)
                    return;
                const index_x = this.index_x();
                const index_old = index_x === null ? 0 : index_x;
                const index_new = (index_old + keys.length - 1) % keys.length;
                event.preventDefault();
                if (index_old === 0 && !this.cycle())
                    return;
                this.current_x(this.keys_x()[index_new]);
            }
            event_right(event) {
                if (!event)
                    return event;
                const keys = this.keys_x();
                if (keys.length < 1)
                    return;
                const index_x = this.index_x();
                const index_old = index_x === null ? keys.length - 1 : index_x;
                const index_new = (index_old + 1) % keys.length;
                event.preventDefault();
                if (index_new === 0 && !this.cycle())
                    return;
                this.current_x(this.keys_x()[index_new]);
            }
            index_y() {
                let index = this.keys_y().indexOf(this.current_y());
                if (index < 0)
                    return null;
                return index;
            }
            index_x() {
                let index = this.keys_x().indexOf(this.current_x());
                if (index < 0)
                    return null;
                return index;
            }
        }
        $$.$mol_nav = $mol_nav;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_mem_persist = $mol_wire_solid;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_storage extends $mol_object2 {
        static native() {
            return this.$.$mol_dom_context.navigator.storage ?? {
                persisted: async () => false,
                persist: async () => false,
                estimate: async () => ({}),
                getDirectory: async () => null,
            };
        }
        static persisted(next, cache) {
            $mol_mem_persist();
            if (cache)
                return Boolean(next);
            const native = this.native();
            if (next && !$mol_mem_cached(() => this.persisted())) {
                native.persist().then(actual => {
                    setTimeout(() => this.persisted(actual, 'cache'), 5000);
                    if (actual)
                        this.$.$mol_log3_done({ place: `$mol_storage`, message: `Persist: Yes` });
                    else
                        this.$.$mol_log3_fail({ place: `$mol_storage`, message: `Persist: No` });
                });
            }
            return next ?? $mol_wire_sync(native).persisted();
        }
        static estimate() {
            return $mol_wire_sync(this.native() ?? {}).estimate();
        }
        static dir() {
            return $mol_wire_sync(this.native()).getDirectory();
        }
    }
    __decorate([
        $mol_mem
    ], $mol_storage, "native", null);
    __decorate([
        $mol_mem
    ], $mol_storage, "persisted", null);
    $.$mol_storage = $mol_storage;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_state_local extends $mol_object {
        static 'native()';
        static native() {
            if (this['native()'])
                return this['native()'];
            check: try {
                const native = $mol_dom_context.localStorage;
                if (!native)
                    break check;
                native.setItem('', '');
                native.removeItem('');
                return this['native()'] = native;
            }
            catch (error) {
                console.warn(error);
            }
            return this['native()'] = {
                getItem(key) {
                    return this[':' + key];
                },
                setItem(key, value) {
                    this[':' + key] = value;
                },
                removeItem(key) {
                    this[':' + key] = void 0;
                }
            };
        }
        static changes(next) { return next; }
        static value(key, next) {
            this.changes();
            if (next === void 0)
                return JSON.parse(this.native().getItem(key) || 'null');
            if (next === null) {
                this.native().removeItem(key);
            }
            else {
                this.native().setItem(key, JSON.stringify(next));
                this.$.$mol_storage.persisted(true);
            }
            return next;
        }
        prefix() { return ''; }
        value(key, next) {
            return $mol_state_local.value(this.prefix() + '.' + key, next);
        }
    }
    __decorate([
        $mol_mem
    ], $mol_state_local, "changes", null);
    __decorate([
        $mol_mem_key
    ], $mol_state_local, "value", null);
    $.$mol_state_local = $mol_state_local;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_action = $mol_wire_method;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_lock extends $mol_object {
        promise = null;
        async wait() {
            let next = () => { };
            let destructed = false;
            const task = $mol_wire_auto();
            if (!task)
                return next;
            const destructor = task.destructor.bind(task);
            task.destructor = () => {
                destructor();
                destructed = true;
                next();
            };
            let promise;
            do {
                promise = this.promise;
                await promise;
                if (destructed)
                    return next;
            } while (promise !== this.promise);
            this.promise = new Promise(done => { next = done; });
            return next;
        }
        grab() { return $mol_wire_sync(this).wait(); }
    }
    $.$mol_lock = $mol_lock;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_compare_array(a, b) {
        if (a === b)
            return true;
        if (Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
            return false;
        if (a.length !== b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] !== b[i])
                return false;
        return true;
    }
    $.$mol_compare_array = $mol_compare_array;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    const decoders = {};
    function $mol_charset_decode(buffer, encoding = 'utf8') {
        let decoder = decoders[encoding];
        if (!decoder)
            decoder = decoders[encoding] = new TextDecoder(encoding);
        return decoder.decode(buffer);
    }
    $.$mol_charset_decode = $mol_charset_decode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const TextEncoder = globalThis.TextEncoder ?? $node.util.TextEncoder;
    const encoder = new TextEncoder();
    function $mol_charset_encode(value) {
        return encoder.encode(value);
    }
    $.$mol_charset_encode = $mol_charset_encode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_file_transaction extends $mol_object {
        path() { return ''; }
        modes() { return []; }
        write(options) {
            return 0;
        }
        read() {
            return new Uint8Array();
        }
        truncate(size) { }
        close() { }
        destructor() {
            this.close();
        }
    }
    $.$mol_file_transaction = $mol_file_transaction;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let file_modes;
    (function (file_modes) {
        file_modes[file_modes["create"] = $node.fs.constants.O_CREAT] = "create";
        file_modes[file_modes["exists_truncate"] = $node.fs.constants.O_TRUNC] = "exists_truncate";
        file_modes[file_modes["exists_fail"] = $node.fs.constants.O_EXCL] = "exists_fail";
        file_modes[file_modes["read_only"] = $node.fs.constants.O_RDONLY] = "read_only";
        file_modes[file_modes["write_only"] = $node.fs.constants.O_WRONLY] = "write_only";
        file_modes[file_modes["read_write"] = $node.fs.constants.O_RDWR] = "read_write";
        file_modes[file_modes["append"] = $node.fs.constants.O_APPEND] = "append";
    })(file_modes || (file_modes = {}));
    function mode_mask(modes) {
        return modes.reduce((res, mode) => res | file_modes[mode], 0);
    }
    class $mol_file_transaction_node extends $mol_file_transaction {
        descr() {
            $mol_wire_solid();
            return $node.fs.openSync(this.path(), mode_mask(this.modes()));
        }
        write({ buffer, offset = 0, length, position = null }) {
            if (Array.isArray(buffer)) {
                return $node.fs.writevSync(this.descr(), buffer, position ?? undefined);
            }
            if (typeof buffer === 'string') {
                return $node.fs.writeSync(this.descr(), buffer, position);
            }
            length = length ?? buffer.byteLength;
            return $node.fs.writeSync(this.descr(), buffer, offset, length, position);
        }
        truncate(size) {
            $node.fs.ftruncateSync(this.descr());
        }
        read() {
            return $mol_file_node_buffer_normalize($node.fs.readFileSync(this.descr()));
        }
        close() {
            $node.fs.closeSync(this.descr());
        }
    }
    __decorate([
        $mol_mem
    ], $mol_file_transaction_node.prototype, "descr", null);
    $.$mol_file_transaction_node = $mol_file_transaction_node;
    $.$mol_file_transaction = $mol_file_transaction_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_file_base extends $mol_object {
        static absolute(path) {
            return this.make({
                path: $mol_const(path)
            });
        }
        static relative(path) {
            throw new Error('Not implemented yet');
        }
        static base = '';
        path() {
            return '.';
        }
        parent() {
            return this.resolve('..');
        }
        exists_cut() { return this.exists(); }
        root() {
            const path = this.path();
            const base = this.constructor.base;
            return base.startsWith(path) || this == this.parent();
        }
        stat(next, virt) {
            const path = this.path();
            const parent = this.parent();
            if (!this.root()) {
                parent.version();
            }
            parent.watcher();
            if (virt)
                return next ?? null;
            return next ?? this.info(path);
        }
        static changed = new Set;
        static frame = null;
        static changed_add(type, path) {
            if (/([\/\\]\.|___$)/.test(path))
                return;
            const file = this.relative(path.at(-1) === '/' ? path.slice(0, -1) : path);
            this.changed.add(file);
            if (!this.watching)
                return;
            this.frame?.destructor();
            this.frame = new this.$.$mol_after_timeout(this.watch_debounce(), () => {
                if (!this.watching)
                    return;
                this.watching = false;
                $mol_wire_async(this).flush();
            });
        }
        static watch_debounce() { return 500; }
        static flush() {
            for (const file of this.changed) {
                const parent = file.parent();
                try {
                    if ($mol_wire_probe(() => parent.sub()))
                        parent.sub(null);
                    file.reset();
                }
                catch (error) {
                    if ($mol_fail_catch(error))
                        $mol_fail_log(error);
                }
            }
            this.changed.clear();
            this.watching = true;
        }
        static watching = true;
        static lock = new $mol_lock;
        static watch_off(path) {
            this.watching = false;
            this.flush();
            this.watching = false;
            this.changed.add(this.absolute(path));
        }
        static unwatched(side_effect, affected_dir) {
            const unlock = this.lock.grab();
            this.watch_off(affected_dir);
            try {
                const result = side_effect();
                this.flush();
                unlock();
                return result;
            }
            catch (e) {
                if (!$mol_promise_like(e)) {
                    this.flush();
                    unlock();
                }
                $mol_fail_hidden(e);
            }
        }
        reset() {
            this.stat(null);
        }
        modified() { return this.stat()?.mtime ?? null; }
        version() {
            const next = this.stat()?.mtime.getTime().toString(36).toUpperCase() ?? '';
            return next;
        }
        info(path) { return null; }
        ensure() { }
        drop() { }
        copy(to) { }
        read() { return new Uint8Array; }
        write(buffer) { }
        kids() {
            return [];
        }
        readable(opts) {
            return new ReadableStream;
        }
        writable(opts) {
            return new WritableStream;
        }
        buffer(next) {
            let readed = new Uint8Array();
            if (next === undefined) {
                if (this.version())
                    readed = this.read();
            }
            const prev = $mol_mem_cached(() => this.buffer());
            const changed = prev === undefined || !$mol_compare_array(prev, next ?? readed);
            if (prev !== undefined && changed) {
                this.$.$mol_log3_rise({
                    place: `$mol_file_node.buffer()`,
                    message: 'Changed',
                    path: this.relate(),
                });
            }
            if (next === undefined)
                return changed ? readed : prev;
            if (!changed && this.exists())
                return prev;
            this.parent().exists(true);
            this.stat(this.stat_make(next.length), 'virt');
            this.write(next);
            return next;
        }
        stat_make(size) {
            const now = new Date();
            return {
                type: 'file',
                size,
                atime: now,
                mtime: now,
                ctime: now,
            };
        }
        clone(to) {
            if (!this.exists())
                return null;
            const target = this.constructor.absolute(to);
            try {
                this.version();
                target.parent().exists(true);
                this.copy(to);
                target.reset();
                return target;
            }
            catch (error) {
                if ($mol_fail_catch(error)) {
                    console.error(error);
                }
            }
            return null;
        }
        watcher() {
            return {
                destructor() { }
            };
        }
        exists(next) {
            const exists = Boolean(this.stat());
            if (next === undefined)
                return exists;
            if (next === exists)
                return exists;
            if (next) {
                this.parent().exists(true);
                this.ensure();
            }
            else {
                this.drop();
            }
            this.reset();
            return next;
        }
        type() {
            return this.stat()?.type ?? '';
        }
        name() {
            return this.path().replace(/^.*\//, '');
        }
        ext() {
            const match = /((?:\.\w+)+)$/.exec(this.path());
            return match ? match[1].substring(1) : '';
        }
        text(next, virt) {
            if (next !== undefined)
                this.exists();
            return this.text_int(next, virt);
        }
        text_int(next, virt) {
            if (virt) {
                this.stat(this.stat_make(0), 'virt');
                return next;
            }
            if (next === undefined) {
                return $mol_charset_decode(this.buffer());
            }
            else {
                const buffer = $mol_charset_encode(next);
                this.buffer(buffer);
                return next;
            }
        }
        sub(reset) {
            if (!this.exists())
                return [];
            if (this.type() !== 'dir')
                return [];
            this.version();
            return this.kids().filter(file => file.exists());
        }
        resolve(path) {
            throw new Error('implement');
        }
        relate(base = this.constructor.relative('.')) {
            const base_path = base.path();
            const path = this.path();
            return path.startsWith(base_path) ? path.slice(base_path.length) : path;
        }
        find(include, exclude) {
            const found = [];
            const sub = this.sub();
            for (const child of sub) {
                const child_path = child.path();
                if (exclude && child_path.match(exclude))
                    continue;
                if (!include || child_path.match(include))
                    found.push(child);
                if (child.type() === 'dir') {
                    const sub_child = child.find(include, exclude);
                    for (const child of sub_child)
                        found.push(child);
                }
            }
            return found;
        }
        size() {
            switch (this.type()) {
                case 'file': return this.stat()?.size ?? 0;
                default: return 0;
            }
        }
        toJSON() {
            return this.path();
        }
        open(...modes) {
            return this.$.$mol_file_transaction.make({
                path: () => this.path(),
                modes: () => modes
            });
        }
    }
    __decorate([
        $mol_action
    ], $mol_file_base.prototype, "exists_cut", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "stat", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "modified", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "version", null);
    __decorate([
        $mol_mem_key
    ], $mol_file_base.prototype, "readable", null);
    __decorate([
        $mol_mem_key
    ], $mol_file_base.prototype, "writable", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "buffer", null);
    __decorate([
        $mol_action
    ], $mol_file_base.prototype, "stat_make", null);
    __decorate([
        $mol_mem_key
    ], $mol_file_base.prototype, "clone", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "exists", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "type", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "text_int", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "sub", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "size", null);
    __decorate([
        $mol_action
    ], $mol_file_base.prototype, "open", null);
    __decorate([
        $mol_mem_key
    ], $mol_file_base, "absolute", null);
    __decorate([
        $mol_action
    ], $mol_file_base, "flush", null);
    __decorate([
        $mol_action
    ], $mol_file_base, "watch_off", null);
    $.$mol_file_base = $mol_file_base;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_file extends $mol_file_base {
    }
    $.$mol_file = $mol_file;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function stat_convert(stat) {
        if (!stat)
            return null;
        let type;
        if (stat.isDirectory())
            type = 'dir';
        if (stat.isFile())
            type = 'file';
        if (stat.isSymbolicLink())
            type = 'link';
        if (!type)
            return $mol_fail(new Error(`Unsupported file type`));
        return {
            type,
            size: Number(stat.size),
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime
        };
    }
    function $mol_file_node_buffer_normalize(buf) {
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    }
    $.$mol_file_node_buffer_normalize = $mol_file_node_buffer_normalize;
    class $mol_file_node extends $mol_file {
        static relative(path) {
            return this.absolute($node.path.resolve(this.base, path).replace(/\\/g, '/'));
        }
        watcher(reset) {
            const path = this.path();
            const root = this.root();
            if (!root && !this.exists())
                return super.watcher();
            let watcher;
            try {
                watcher = $node.fs.watch(path);
            }
            catch (error) {
                if (!(error instanceof Error))
                    error = new Error('Unknown watch error', { cause: error });
                error.message += '\n' + path;
                if (root || error.code !== 'ENOENT') {
                    this.$.$mol_fail_log(error);
                }
                return super.watcher();
            }
            watcher.on('change', (type, name) => {
                if (!name)
                    return;
                const path = $node.path.join(this.path(), name.toString());
                this.constructor.changed_add(type, path);
            });
            watcher.on('error', e => this.$.$mol_fail_log(e));
            let destructed = false;
            watcher.on('close', () => {
                if (!destructed)
                    setTimeout(() => $mol_wire_async(this).watcher(null), 500);
            });
            return {
                destructor() {
                    destructed = true;
                    watcher.close();
                }
            };
        }
        info(path) {
            try {
                return stat_convert($node.fs.statSync(path));
            }
            catch (error) {
                if (this.$.$mol_fail_catch(error)) {
                    if (error.code === 'ENOENT')
                        return null;
                    error.message += '\n' + path;
                    this.$.$mol_fail_hidden(error);
                }
            }
            return null;
        }
        ensure() {
            const path = this.path();
            try {
                $node.fs.mkdirSync(path, { recursive: true });
                return null;
            }
            catch (e) {
                if (this.$.$mol_fail_catch(e)) {
                    if (e.code === 'EEXIST')
                        return null;
                    e.message += '\n' + path;
                    this.$.$mol_fail_hidden(e);
                }
            }
        }
        copy(to) {
            $node.fs.copyFileSync(this.path(), to);
        }
        drop() {
            $node.fs.unlinkSync(this.path());
        }
        read() {
            const path = this.path();
            try {
                return $mol_file_node_buffer_normalize($node.fs.readFileSync(path));
            }
            catch (error) {
                if (!$mol_promise_like(error)) {
                    error.message += '\n' + path;
                }
                $mol_fail_hidden(error);
            }
        }
        write(buffer) {
            const path = this.path();
            try {
                $node.fs.writeFileSync(path, buffer);
            }
            catch (error) {
                if (this.$.$mol_fail_catch(error)) {
                    error.message += '\n' + path;
                }
                return this.$.$mol_fail_hidden(error);
            }
        }
        kids() {
            const path = this.path();
            try {
                const kids = $node.fs.readdirSync(path)
                    .filter(name => !/^\.+$/.test(name))
                    .map(name => this.resolve(name));
                return kids;
            }
            catch (e) {
                if (this.$.$mol_fail_catch(e)) {
                    if (e.code === 'ENOENT')
                        return [];
                    e.message += '\n' + path;
                }
                $mol_fail_hidden(e);
            }
        }
        resolve(path) {
            return this.constructor
                .relative($node.path.join(this.path(), path));
        }
        relate(base = this.constructor.relative('.')) {
            return $node.path.relative(base.path(), this.path()).replace(/\\/g, '/');
        }
        readable(opts) {
            const { Readable } = $node['node:stream'];
            const stream = $node.fs.createReadStream(this.path(), {
                flags: 'r',
                autoClose: true,
                start: opts?.start,
                end: opts?.end,
                encoding: 'binary',
            });
            return Readable.toWeb(stream);
        }
        writable(opts) {
            const { Writable } = $node['node:stream'];
            const stream = $node.fs.createWriteStream(this.path(), {
                flags: 'w+',
                autoClose: true,
                start: opts?.start,
                encoding: 'binary',
            });
            return Writable.toWeb(stream);
        }
    }
    __decorate([
        $mol_mem
    ], $mol_file_node.prototype, "watcher", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "info", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "ensure", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "copy", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "drop", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "read", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "write", null);
    __decorate([
        $mol_mem_key
    ], $mol_file_node.prototype, "readable", null);
    __decorate([
        $mol_mem
    ], $mol_file_node.prototype, "writable", null);
    $.$mol_file_node = $mol_file_node;
    $.$mol_file = $mol_file_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_state_local_node extends $mol_state_local {
        static dir() {
            const base = process.env.XDG_DATA_HOME || ($node.os.homedir() + '/.local/share');
            return $mol_file.absolute(base).resolve('./mol_state_local');
        }
        static value(key, next) {
            const file = this.dir().resolve(encodeURIComponent(key) + '.json');
            if (next === null) {
                file.exists(false);
                return null;
            }
            const arg = next === undefined ? undefined : JSON.stringify(next);
            return JSON.parse(file.text(arg) || 'null');
        }
    }
    __decorate([
        $mol_mem
    ], $mol_state_local_node, "dir", null);
    __decorate([
        $mol_mem_key
    ], $mol_state_local_node, "value", null);
    $.$mol_state_local_node = $mol_state_local_node;
    $.$mol_state_local = $mol_state_local_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_locale extends $mol_object {
        static lang_default() {
            return 'en';
        }
        static lang(next) {
            return this.$.$mol_state_local.value('locale', next) || $mol_dom_context.navigator.language.replace(/-.*/, '') || this.lang_default();
        }
        static source(lang) {
            return JSON.parse(this.$.$mol_file.relative(`web.locale=${lang}.json`).text().toString());
        }
        static texts(lang, next) {
            if (next)
                return next;
            try {
                return this.source(lang).valueOf();
            }
            catch (error) {
                if ($mol_fail_catch(error)) {
                    const def = this.lang_default();
                    if (lang === def)
                        throw error;
                }
            }
            return {};
        }
        static text(key) {
            const lang = this.lang();
            const target = this.texts(lang)[key];
            if (target)
                return target;
            this.warn(key);
            const en = this.texts('en')[key];
            if (!en)
                return key;
            return en;
        }
        static warn(key) {
            console.warn(`Not translated to "${this.lang()}": ${key}`);
            return null;
        }
    }
    __decorate([
        $mol_mem
    ], $mol_locale, "lang_default", null);
    __decorate([
        $mol_mem
    ], $mol_locale, "lang", null);
    __decorate([
        $mol_mem_key
    ], $mol_locale, "source", null);
    __decorate([
        $mol_mem_key
    ], $mol_locale, "texts", null);
    __decorate([
        $mol_mem_key
    ], $mol_locale, "text", null);
    __decorate([
        $mol_mem_key
    ], $mol_locale, "warn", null);
    $.$mol_locale = $mol_locale;
})($ || ($ = {}));

;
	($.$mol_string) = class $mol_string extends ($.$mol_view) {
		selection_watcher(){
			return null;
		}
		error_report(){
			return null;
		}
		disabled(){
			return false;
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		value_changed(next){
			return (this.value(next));
		}
		hint(){
			return "";
		}
		hint_visible(){
			return (this.hint());
		}
		spellcheck(){
			return true;
		}
		autocomplete_native(){
			return "";
		}
		selection_end(){
			return 0;
		}
		selection_start(){
			return 0;
		}
		keyboard(){
			return "text";
		}
		enter(){
			return "go";
		}
		length_max(){
			return +Infinity;
		}
		type(next){
			if(next !== undefined) return next;
			return "text";
		}
		event_change(next){
			if(next !== undefined) return next;
			return null;
		}
		submit_with_ctrl(){
			return false;
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		Submit(){
			const obj = new this.$.$mol_hotkey();
			(obj.mod_ctrl) = () => ((this.submit_with_ctrl()));
			(obj.key) = () => ({"enter": (next) => (this.submit(next))});
			return obj;
		}
		dom_name(){
			return "input";
		}
		enabled(){
			return true;
		}
		minimal_height(){
			return 40;
		}
		autocomplete(){
			return false;
		}
		selection(next){
			if(next !== undefined) return next;
			return [0, 0];
		}
		auto(){
			return [(this.selection_watcher()), (this.error_report())];
		}
		field(){
			return {
				...(super.field()), 
				"disabled": (this.disabled()), 
				"value": (this.value_changed()), 
				"placeholder": (this.hint_visible()), 
				"spellcheck": (this.spellcheck()), 
				"autocomplete": (this.autocomplete_native()), 
				"selectionEnd": (this.selection_end()), 
				"selectionStart": (this.selection_start()), 
				"inputMode": (this.keyboard()), 
				"enterkeyhint": (this.enter())
			};
		}
		attr(){
			return {
				...(super.attr()), 
				"maxlength": (this.length_max()), 
				"type": (this.type())
			};
		}
		event(){
			return {...(super.event()), "input": (next) => (this.event_change(next))};
		}
		plugins(){
			return [(this.Submit())];
		}
	};
	($mol_mem(($.$mol_string.prototype), "value"));
	($mol_mem(($.$mol_string.prototype), "type"));
	($mol_mem(($.$mol_string.prototype), "event_change"));
	($mol_mem(($.$mol_string.prototype), "submit"));
	($mol_mem(($.$mol_string.prototype), "Submit"));
	($mol_mem(($.$mol_string.prototype), "selection"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_string extends $.$mol_string {
            event_change(next) {
                if (!next)
                    return;
                const el = next.target;
                const from = el.selectionStart;
                const to = el.selectionEnd;
                try {
                    el.value = this.value_changed(el.value);
                }
                catch (error) {
                    const el = this.dom_node();
                    if (error instanceof Error) {
                        el.setCustomValidity(error.message);
                        el.reportValidity();
                    }
                    $mol_fail_hidden(error);
                }
                if (to === null)
                    return;
                el.selectionEnd = to;
                el.selectionStart = from;
                this.selection_change(next);
            }
            error_report() {
                try {
                    if (this.focused())
                        this.value();
                }
                catch (error) {
                    const el = this.dom_node();
                    if (error instanceof Error) {
                        el.setCustomValidity(error.message);
                        el.reportValidity();
                    }
                }
            }
            hint_visible() {
                return (this.enabled() ? this.hint() : '') || ' ';
            }
            disabled() {
                return !this.enabled();
            }
            autocomplete_native() {
                return this.autocomplete() ? 'on' : 'off';
            }
            selection_watcher() {
                return new $mol_dom_listener(this.$.$mol_dom_context.document, 'selectionchange', $mol_wire_async(event => this.selection_change(event)));
            }
            selection_change(event) {
                const el = this.dom_node();
                if (el !== this.$.$mol_dom_context.document.activeElement)
                    return;
                const [from, to] = this.selection([
                    el.selectionStart,
                    el.selectionEnd,
                ]);
                el.selectionEnd = to;
                el.selectionStart = from;
                if (to !== from && el.selectionEnd === el.selectionStart) {
                    el.selectionEnd = to;
                }
            }
            selection_start() {
                const el = this.dom_node();
                if (el.selectionStart === null)
                    return undefined;
                return this.selection()[0];
            }
            selection_end() {
                const el = this.dom_node();
                if (el.selectionEnd === null)
                    return undefined;
                return this.selection()[1];
            }
        }
        __decorate([
            $mol_action
        ], $mol_string.prototype, "event_change", null);
        __decorate([
            $mol_mem
        ], $mol_string.prototype, "error_report", null);
        __decorate([
            $mol_mem
        ], $mol_string.prototype, "selection_watcher", null);
        $$.$mol_string = $mol_string;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/string/string.view.css", "[mol_string] {\n\tbox-sizing: border-box;\n\toutline-offset: 0;\n\tborder: none;\n\tborder-radius: var(--mol_gap_round);\n\twhite-space: pre-line;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n\tpadding: var(--mol_gap_text);\n\ttext-align: left;\n\tposition: relative;\n\tfont: inherit;\n\tflex: 1 1 auto;\n\tbackground: transparent;\n\tmin-width: 0;\n\tcolor: inherit;\n\tbackground: var(--mol_theme_field);\n}\n\n[mol_string]:disabled:not(:placeholder-shown) {\n\tbackground-color: transparent;\n\tcolor: var(--mol_theme_text);\n}\n\n[mol_string]:where(:not(:disabled)) {\n\tbox-shadow: inset 0 0 0 1px var(--mol_theme_line);\n}\n\n[mol_string]:where(:not(:disabled)):hover {\n\tbox-shadow: inset 0 0 0 2px var(--mol_theme_line);\n\tz-index: var(--mol_layer_hover);\n}\n\n[mol_string]:focus {\n\toutline: none;\n\tz-index: var(--mol_layer_focus);\n\tcolor: var(--mol_theme_text);\n\tbox-shadow: inset 0 0 0 1px var(--mol_theme_focus);\n}\n\n[mol_string]::placeholder {\n\tcolor: var(--mol_theme_shade);\n}\n\n[mol_string]::-ms-clear {\n\tdisplay: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_svg) = class $mol_svg extends ($.$mol_view) {
		dom_name(){
			return "svg";
		}
		dom_name_space(){
			return "http://www.w3.org/2000/svg";
		}
		font_size(){
			return 16;
		}
		font_family(){
			return "";
		}
		style_size(){
			return {};
		}
	};


;
"use strict";
var $;
(function ($) {
    class $mol_state_time extends $mol_object {
        static task(precision, reset) {
            if (precision) {
                return new $mol_after_timeout(precision, () => this.task(precision, null));
            }
            else {
                return new $mol_after_frame(() => this.task(precision, null));
            }
        }
        static now(precision) {
            this.task(precision);
            return Date.now();
        }
    }
    __decorate([
        $mol_mem_key
    ], $mol_state_time, "task", null);
    __decorate([
        $mol_mem_key
    ], $mol_state_time, "now", null);
    $.$mol_state_time = $mol_state_time;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_svg extends $.$mol_svg {
            computed_style() {
                const win = this.$.$mol_dom_context;
                const style = win.getComputedStyle(this.dom_node());
                if (!style['font-size'])
                    $mol_state_time.now(0);
                return style;
            }
            font_size() {
                return parseInt(this.computed_style()['font-size']) || 16;
            }
            font_family() {
                return this.computed_style()['font-family'];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_svg.prototype, "computed_style", null);
        __decorate([
            $mol_mem
        ], $mol_svg.prototype, "font_size", null);
        __decorate([
            $mol_mem
        ], $mol_svg.prototype, "font_family", null);
        $$.$mol_svg = $mol_svg;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_svg_root) = class $mol_svg_root extends ($.$mol_svg) {
		view_box(){
			return "0 0 100 100";
		}
		aspect(){
			return "xMidYMid";
		}
		dom_name(){
			return "svg";
		}
		attr(){
			return {
				...(super.attr()), 
				"viewBox": (this.view_box()), 
				"preserveAspectRatio": (this.aspect())
			};
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/svg/root/root.view.css", "[mol_svg_root] {\n\toverflow: hidden;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_svg_path) = class $mol_svg_path extends ($.$mol_svg) {
		geometry(){
			return "";
		}
		dom_name(){
			return "path";
		}
		attr(){
			return {...(super.attr()), "d": (this.geometry())};
		}
	};


;
"use strict";

;
	($.$mol_icon) = class $mol_icon extends ($.$mol_svg_root) {
		path(){
			return "";
		}
		Path(){
			const obj = new this.$.$mol_svg_path();
			(obj.geometry) = () => ((this.path()));
			return obj;
		}
		view_box(){
			return "0 0 24 24";
		}
		minimal_width(){
			return 16;
		}
		minimal_height(){
			return 16;
		}
		sub(){
			return [(this.Path())];
		}
	};
	($mol_mem(($.$mol_icon.prototype), "Path"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/icon/icon.view.css", "[mol_icon] {\n\tfill: currentColor;\n\tstroke: none;\n\twidth: 1em;\n\theight: 1.5em;\n\tflex: 0 0 auto;\n\tvertical-align: top;\n\tdisplay: inline-block;\n\tfilter: drop-shadow(0px 1px 1px var(--mol_theme_back));\n\ttransform-origin: center;\n}\n\n[mol_icon_path] {\n\ttransform-origin: center;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_icon_close) = class $mol_icon_close extends ($.$mol_icon) {
		path(){
			return "M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z";
		}
	};


;
"use strict";

;
	($.$mol_speck) = class $mol_speck extends ($.$mol_view) {
		theme(){
			return "$mol_theme_accent";
		}
		value(){
			return null;
		}
		attr(){
			return {...(super.attr()), "mol_theme": (this.theme())};
		}
		style(){
			return {...(super.style()), "minHeight": "1em"};
		}
		sub(){
			return [(this.value())];
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/speck/speck.view.css", "[mol_speck] {\n\tfont-size: .625rem;\n\tborder-radius: 1rem;\n\tmargin: -0.5rem -0.25rem;\n\talign-self: flex-start;\n\tmin-height: 1em;\n\tmin-width: .5em;\n\tvertical-align: sub;\n\tpadding: .25em .5em;\n\tposition: absolute;\n\tz-index: var(--mol_layer_speck);\n\ttext-align: center;\n\tline-height: 1;\n\tdisplay: inline-block;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n\tuser-select: none;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_button) = class $mol_button extends ($.$mol_view) {
		event_activate(next){
			if(next !== undefined) return next;
			return null;
		}
		clicks(next){
			if(next !== undefined) return next;
			return null;
		}
		event_key_press(next){
			if(next !== undefined) return next;
			return null;
		}
		disabled(){
			return false;
		}
		tab_index(){
			return 0;
		}
		hint(){
			return "";
		}
		hint_safe(){
			return (this.hint());
		}
		error(){
			return "";
		}
		enabled(){
			return true;
		}
		click(next){
			if(next !== undefined) return next;
			return null;
		}
		event_click(next){
			if(next !== undefined) return next;
			return null;
		}
		event(){
			return {
				...(super.event()), 
				"click": (next) => (this.event_activate(next)), 
				"dblclick": (next) => (this.clicks(next)), 
				"keydown": (next) => (this.event_key_press(next))
			};
		}
		attr(){
			return {
				...(super.attr()), 
				"disabled": (this.disabled()), 
				"role": "button", 
				"tabindex": (this.tab_index()), 
				"title": (this.hint_safe())
			};
		}
		sub(){
			return [(this.title())];
		}
		Speck(){
			const obj = new this.$.$mol_speck();
			(obj.value) = () => ((this.error()));
			return obj;
		}
	};
	($mol_mem(($.$mol_button.prototype), "event_activate"));
	($mol_mem(($.$mol_button.prototype), "clicks"));
	($mol_mem(($.$mol_button.prototype), "event_key_press"));
	($mol_mem(($.$mol_button.prototype), "click"));
	($mol_mem(($.$mol_button.prototype), "event_click"));
	($mol_mem(($.$mol_button.prototype), "Speck"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_button extends $.$mol_button {
            status(next = [null]) { return next; }
            disabled() {
                return !this.enabled();
            }
            event_activate(next) {
                if (!next)
                    return;
                if (!this.enabled())
                    return;
                try {
                    this.event_click(next);
                    this.click(next);
                    this.status([null]);
                }
                catch (error) {
                    Promise.resolve().then(() => this.status([error]));
                    $mol_fail_hidden(error);
                }
            }
            event_key_press(event) {
                if (event.keyCode === $mol_keyboard_code.enter) {
                    return this.event_activate(event);
                }
            }
            tab_index() {
                return this.enabled() ? super.tab_index() : -1;
            }
            error() {
                const [error] = this.status();
                if (!error)
                    return '';
                if (error instanceof Promise) {
                    return $mol_fail_hidden(error);
                }
                return String(error.message ?? error);
            }
            hint_safe() {
                try {
                    return this.hint();
                }
                catch (error) {
                    $mol_fail_log(error);
                    return '';
                }
            }
            sub_visible() {
                return [
                    ...this.error() ? [this.Speck()] : [],
                    ...this.sub(),
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_button.prototype, "status", null);
        $$.$mol_button = $mol_button;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/button/button.view.css", "[mol_button] {\n\tborder: none;\n\tfont: inherit;\n\tdisplay: inline-flex;\n\tflex-shrink: 0;\n\ttext-decoration: inherit;\n\tcursor: inherit;\n\tposition: relative;\n\tbox-sizing: border-box;\n\tword-break: normal;\n\tcursor: default;\n\tuser-select: none;\n\tborder-radius: var(--mol_gap_round);\n\tbackground: transparent;\n\tcolor: inherit;\n}\n\n[mol_button]:where(:not(:disabled)):hover {\n\tz-index: var(--mol_layer_hover);\n}\n\n[mol_button]:focus-visible {\n\toutline: none;\n\tz-index: var(--mol_layer_focus);\n}\n");
})($ || ($ = {}));

;
	($.$mol_button_typed) = class $mol_button_typed extends ($.$mol_button) {
		minimal_height(){
			return 40;
		}
		minimal_width(){
			return 40;
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/button/typed/typed.view.css", "[mol_button_typed] {\n\talign-content: center;\n\talign-items: center;\n\tpadding: var(--mol_gap_text);\n\tborder-radius: var(--mol_gap_round);\n\tgap: var(--mol_gap_space);\n\tuser-select: none;\n\tcursor: pointer;\n}\n\n[mol_button_typed][disabled] {\n\tpointer-events: none;\n}\n\n[mol_button_typed]:hover ,\n[mol_button_typed]:focus-visible {\n\tbox-shadow: inset 0 0 0 10rem var(--mol_theme_hover);\n}\n\n[mol_button_typed]:active {\n\tcolor: var(--mol_theme_focus);\n}\n\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_button_minor) = class $mol_button_minor extends ($.$mol_button_typed) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/button/minor/minor.view.css", "[mol_button_minor] {\n\tcolor: var(--mol_theme_control);\n}\n\n[mol_button_minor][disabled] {\n\tcolor: var(--mol_theme_shade);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_list) = class $mol_list extends ($.$mol_view) {
		rows(){
			return [];
		}
		gap_before(){
			return 0;
		}
		gap_after(){
			return 0;
		}
		render_visible_only(){
			return true;
		}
		render_over(){
			return 0;
		}
		sub(){
			return (this.rows());
		}
		Empty(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Gap_before(){
			const obj = new this.$.$mol_view();
			(obj.style) = () => ({"paddingTop": (this.gap_before())});
			return obj;
		}
		Gap_after(){
			const obj = new this.$.$mol_view();
			(obj.style) = () => ({"paddingTop": (this.gap_after())});
			return obj;
		}
		view_window(){
			return [0, 0];
		}
	};
	($mol_mem(($.$mol_list.prototype), "Empty"));
	($mol_mem(($.$mol_list.prototype), "Gap_before"));
	($mol_mem(($.$mol_list.prototype), "Gap_after"));


;
"use strict";
var $;
(function ($) {
    let cache = null;
    function $mol_support_css_overflow_anchor() {
        return cache ?? (cache = this.$mol_dom_context.CSS?.supports('overflow-anchor:auto') ?? false);
    }
    $.$mol_support_css_overflow_anchor = $mol_support_css_overflow_anchor;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_list extends $.$mol_list {
            sub() {
                const rows = this.rows();
                return (rows.length === 0) ? [this.Empty()] : rows;
            }
            render_visible_only() {
                return this.$.$mol_support_css_overflow_anchor();
            }
            view_window(next) {
                const kids = this.sub();
                if (kids.length < 3)
                    return [0, kids.length];
                if (this.$.$mol_print.active())
                    return [0, kids.length];
                const rect = this.view_rect();
                if (next)
                    return next;
                let [min, max] = $mol_mem_cached(() => this.view_window()) ?? [0, 0];
                let max2 = max = Math.min(max, kids.length);
                let min2 = min = Math.max(0, Math.min(min, max - 1));
                const anchoring = this.render_visible_only();
                const window_height = this.$.$mol_window.size().height + 40;
                const over = Math.ceil(window_height * this.render_over());
                const limit_top = -over;
                const limit_bottom = window_height + over;
                const gap_before = $mol_mem_cached(() => this.gap_before()) ?? 0;
                const gap_after = $mol_mem_cached(() => this.gap_after()) ?? 0;
                let top = Math.ceil(rect?.top ?? 0) + gap_before;
                let bottom = Math.ceil(rect?.bottom ?? 0) - gap_after;
                if (top <= limit_top && bottom >= limit_bottom) {
                    return [min2, max2];
                }
                if (anchoring && ((bottom < limit_top) || (top > limit_bottom))) {
                    min = 0;
                    top = Math.ceil(rect?.top ?? 0);
                    while (min < (kids.length - 1)) {
                        const height = kids[min].minimal_height();
                        if (top + height >= limit_top)
                            break;
                        top += height;
                        ++min;
                    }
                    min2 = min;
                    max2 = max = min;
                    bottom = top;
                }
                let top2 = top;
                let bottom2 = bottom;
                if (anchoring && (top < limit_top) && (bottom < limit_bottom) && (max < kids.length)) {
                    min2 = max;
                    top2 = bottom;
                }
                if ((bottom > limit_bottom) && (top > limit_top) && (min > 0)) {
                    max2 = min;
                    bottom2 = top;
                }
                while (anchoring && ((top2 > limit_top) && (min2 > 0))) {
                    --min2;
                    top2 -= kids[min2].minimal_height();
                }
                while (bottom2 < limit_bottom && max2 < kids.length) {
                    bottom2 += kids[max2].minimal_height();
                    ++max2;
                }
                return [min2, max2];
            }
            gap_before() {
                const skipped = this.sub().slice(0, this.view_window()[0]);
                return Math.max(0, skipped.reduce((sum, view) => sum + view.minimal_height(), 0));
            }
            gap_after() {
                const skipped = this.sub().slice(this.view_window()[1]);
                return Math.max(0, skipped.reduce((sum, view) => sum + view.minimal_height(), 0));
            }
            sub_visible() {
                return [
                    ...this.gap_before() ? [this.Gap_before()] : [],
                    ...this.sub().slice(...this.view_window()),
                    ...this.gap_after() ? [this.Gap_after()] : [],
                ];
            }
            minimal_height() {
                return this.sub().reduce((sum, view) => {
                    try {
                        return sum + view.minimal_height();
                    }
                    catch (error) {
                        $mol_fail_log(error);
                        return sum;
                    }
                }, 0);
            }
            force_render(path) {
                const kids = this.rows();
                const index = kids.findIndex(item => path.has(item));
                if (index >= 0) {
                    const win = this.view_window();
                    if (index < win[0] || index >= win[1]) {
                        this.view_window([this.render_visible_only() ? index : 0, index + 1]);
                    }
                    kids[index].force_render(path);
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "sub", null);
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "view_window", null);
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "gap_before", null);
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "gap_after", null);
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "sub_visible", null);
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "minimal_height", null);
        $$.$mol_list = $mol_list;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/list/list.view.css", "[mol_list] {\n\twill-change: contents;\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex-shrink: 0;\n\tmax-width: 100%;\n\t/* display: flex;\n\talign-items: stretch;\n\talign-content: stretch; */\n\ttransition: none;\n\tmin-height: 1.5rem;\n}\n\n[mol_list_gap_before] ,\n[mol_list_gap_after] {\n\tdisplay: block !important;\n\tflex: none;\n\ttransition: none;\n\toverflow-anchor: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_paragraph) = class $mol_paragraph extends ($.$mol_view) {
		line_height(){
			return 24;
		}
		letter_width(){
			return 7;
		}
		width_limit(){
			return +Infinity;
		}
		row_width(){
			return 0;
		}
		sub(){
			return [(this.title())];
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_paragraph extends $.$mol_paragraph {
            maximal_width() {
                let width = 0;
                const letter = this.letter_width();
                for (const kid of this.sub()) {
                    if (!kid)
                        continue;
                    if (kid instanceof $mol_view) {
                        width += kid.maximal_width();
                    }
                    else if (typeof kid !== 'object') {
                        width += String(kid).length * letter;
                    }
                }
                return width;
            }
            width_limit() {
                return this.$.$mol_window.size().width;
            }
            minimal_width() {
                return this.letter_width();
            }
            row_width() {
                return Math.max(Math.min(this.width_limit(), this.maximal_width()), this.letter_width());
            }
            minimal_height() {
                return Math.max(1, Math.ceil(this.maximal_width() / this.row_width())) * this.line_height();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_paragraph.prototype, "maximal_width", null);
        __decorate([
            $mol_mem
        ], $mol_paragraph.prototype, "row_width", null);
        __decorate([
            $mol_mem
        ], $mol_paragraph.prototype, "minimal_height", null);
        $$.$mol_paragraph = $mol_paragraph;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/paragraph/paragraph.view.css", ":where([mol_paragraph]) {\n\tmargin: 0;\n\tmax-width: 100%;\n}\n");
})($ || ($ = {}));

;
	($.$mol_dimmer) = class $mol_dimmer extends ($.$mol_paragraph) {
		parts(){
			return [];
		}
		string(id){
			return "";
		}
		haystack(){
			return "";
		}
		needle(){
			return "";
		}
		sub(){
			return (this.parts());
		}
		Low(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ([(this.string(id))]);
			return obj;
		}
		High(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ([(this.string(id))]);
			return obj;
		}
	};
	($mol_mem_key(($.$mol_dimmer.prototype), "Low"));
	($mol_mem_key(($.$mol_dimmer.prototype), "High"));


;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_regexp extends RegExp {
        groups;
        constructor(source, flags = 'gsu', groups = []) {
            super(source, flags);
            this.groups = groups;
        }
        *[Symbol.matchAll](str) {
            const index = this.lastIndex;
            this.lastIndex = 0;
            try {
                while (this.lastIndex < str.length) {
                    const found = this.exec(str);
                    if (!found)
                        break;
                    yield found;
                }
            }
            finally {
                this.lastIndex = index;
            }
        }
        [Symbol.match](str) {
            const res = [...this[Symbol.matchAll](str)].filter(r => r.groups).map(r => r[0]);
            if (!res.length)
                return null;
            return res;
        }
        [Symbol.split](str) {
            const res = [];
            let token_last = null;
            for (let token of this[Symbol.matchAll](str)) {
                if (token.groups && (token_last ? token_last.groups : true))
                    res.push('');
                res.push(token[0]);
                token_last = token;
            }
            if (!res.length)
                res.push('');
            return res;
        }
        test(str) {
            return Boolean(str.match(this));
        }
        exec(str) {
            const from = this.lastIndex;
            if (from >= str.length)
                return null;
            const res = super.exec(str);
            if (res === null) {
                this.lastIndex = str.length;
                if (!str)
                    return null;
                return Object.assign([str.slice(from)], {
                    index: from,
                    input: str,
                });
            }
            if (from === this.lastIndex) {
                $mol_fail(new Error('Captured empty substring'));
            }
            const groups = {};
            const skipped = str.slice(from, this.lastIndex - res[0].length);
            if (skipped) {
                this.lastIndex = this.lastIndex - res[0].length;
                return Object.assign([skipped], {
                    index: from,
                    input: res.input,
                });
            }
            for (let i = 0; i < this.groups.length; ++i) {
                const group = this.groups[i];
                groups[group] = groups[group] || res[i + 1] || '';
            }
            return Object.assign(res, { groups });
        }
        generate(params) {
            return null;
        }
        get native() {
            return new RegExp(this.source, this.flags);
        }
        static repeat(source, min = 0, max = Number.POSITIVE_INFINITY) {
            const regexp = $mol_regexp.from(source);
            const upper = Number.isFinite(max) ? max : '';
            const str = `(?:${regexp.source}){${min},${upper}}?`;
            const regexp2 = new $mol_regexp(str, regexp.flags, regexp.groups);
            regexp2.generate = params => {
                const res = regexp.generate(params);
                if (res)
                    return res;
                if (min > 0)
                    return res;
                return '';
            };
            return regexp2;
        }
        static repeat_greedy(source, min = 0, max = Number.POSITIVE_INFINITY) {
            const regexp = $mol_regexp.from(source);
            const upper = Number.isFinite(max) ? max : '';
            const str = `(?:${regexp.source}){${min},${upper}}`;
            const regexp2 = new $mol_regexp(str, regexp.flags, regexp.groups);
            regexp2.generate = params => {
                const res = regexp.generate(params);
                if (res)
                    return res;
                if (min > 0)
                    return res;
                return '';
            };
            return regexp2;
        }
        static vary(sources) {
            const groups = [];
            const chunks = sources.map(source => {
                const regexp = $mol_regexp.from(source);
                groups.push(...regexp.groups);
                return regexp.source;
            });
            return new $mol_regexp(`(?:${chunks.join('|')})`, '', groups);
        }
        static optional(source) {
            return $mol_regexp.repeat_greedy(source, 0, 1);
        }
        static force_after(source) {
            const regexp = $mol_regexp.from(source);
            return new $mol_regexp(`(?=${regexp.source})`, regexp.flags, regexp.groups);
        }
        static forbid_after(source) {
            const regexp = $mol_regexp.from(source);
            return new $mol_regexp(`(?!${regexp.source})`, regexp.flags, regexp.groups);
        }
        static from(source, { ignoreCase, multiline } = {
            ignoreCase: false,
            multiline: false,
        }) {
            let flags = 'gsu';
            if (multiline)
                flags += 'm';
            if (ignoreCase)
                flags += 'i';
            if (typeof source === 'number') {
                const src = `\\u{${source.toString(16)}}`;
                const regexp = new $mol_regexp(src, flags);
                regexp.generate = () => src;
                return regexp;
            }
            if (typeof source === 'string') {
                const src = source.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                const regexp = new $mol_regexp(src, flags);
                regexp.generate = () => source;
                return regexp;
            }
            else if (source instanceof $mol_regexp) {
                const regexp = new $mol_regexp(source.source, flags, source.groups);
                regexp.generate = params => source.generate(params);
                return regexp;
            }
            if (source instanceof RegExp) {
                const test = new RegExp('|' + source.source);
                const groups = Array.from({ length: test.exec('').length - 1 }, (_, i) => String(i + 1));
                const regexp = new $mol_regexp(source.source, source.flags, groups);
                regexp.generate = () => '';
                return regexp;
            }
            if (Array.isArray(source)) {
                const patterns = source.map(src => Array.isArray(src)
                    ? $mol_regexp.optional(src)
                    : $mol_regexp.from(src));
                const chunks = patterns.map(pattern => pattern.source);
                const groups = [];
                let index = 0;
                for (const pattern of patterns) {
                    for (let group of pattern.groups) {
                        if (Number(group) >= 0) {
                            groups.push(String(index++));
                        }
                        else {
                            groups.push(group);
                        }
                    }
                }
                const regexp = new $mol_regexp(chunks.join(''), flags, groups);
                regexp.generate = params => {
                    let res = '';
                    for (const pattern of patterns) {
                        let sub = pattern.generate(params);
                        if (sub === null)
                            return '';
                        res += sub;
                    }
                    return res;
                };
                return regexp;
            }
            else {
                const groups = [];
                const chunks = Object.keys(source).map(name => {
                    groups.push(name);
                    const regexp = $mol_regexp.from(source[name]);
                    groups.push(...regexp.groups);
                    return `(${regexp.source})`;
                });
                const regexp = new $mol_regexp(`(?:${chunks.join('|')})`, flags, groups);
                const validator = new RegExp('^' + regexp.source + '$', flags);
                regexp.generate = (params) => {
                    for (let option in source) {
                        if (option in params) {
                            if (typeof params[option] === 'boolean') {
                                if (!params[option])
                                    continue;
                            }
                            else {
                                const str = String(params[option]);
                                if (str.match(validator))
                                    return str;
                                $mol_fail(new Error(`Wrong param: ${option}=${str}`));
                            }
                        }
                        else {
                            if (typeof source[option] !== 'object')
                                continue;
                        }
                        const res = $mol_regexp.from(source[option]).generate(params);
                        if (res)
                            return res;
                    }
                    return null;
                };
                return regexp;
            }
        }
        static unicode_only(...category) {
            return new $mol_regexp(`\\p{${category.join('=')}}`);
        }
        static unicode_except(...category) {
            return new $mol_regexp(`\\P{${category.join('=')}}`);
        }
        static char_range(from, to) {
            return new $mol_regexp(`${$mol_regexp.from(from).source}-${$mol_regexp.from(to).source}`);
        }
        static char_only(...allowed) {
            const regexp = allowed.map(f => $mol_regexp.from(f).source).join('');
            return new $mol_regexp(`[${regexp}]`);
        }
        static char_except(...forbidden) {
            const regexp = forbidden.map(f => $mol_regexp.from(f).source).join('');
            return new $mol_regexp(`[^${regexp}]`);
        }
        static decimal_only = $mol_regexp.from(/\d/gsu);
        static decimal_except = $mol_regexp.from(/\D/gsu);
        static latin_only = $mol_regexp.from(/\w/gsu);
        static latin_except = $mol_regexp.from(/\W/gsu);
        static space_only = $mol_regexp.from(/\s/gsu);
        static space_except = $mol_regexp.from(/\S/gsu);
        static word_break_only = $mol_regexp.from(/\b/gsu);
        static word_break_except = $mol_regexp.from(/\B/gsu);
        static tab = $mol_regexp.from(/\t/gsu);
        static slash_back = $mol_regexp.from(/\\/gsu);
        static nul = $mol_regexp.from(/\0/gsu);
        static char_any = $mol_regexp.from(/./gsu);
        static begin = $mol_regexp.from(/^/gsu);
        static end = $mol_regexp.from(/$/gsu);
        static or = $mol_regexp.from(/|/gsu);
        static line_end = $mol_regexp.from({
            win_end: [['\r'], '\n'],
            mac_end: '\r',
        });
    }
    $.$mol_regexp = $mol_regexp;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_dimmer extends $.$mol_dimmer {
            parts() {
                const needle = this.needle();
                if (needle.length < 2)
                    return [this.haystack()];
                let chunks = [];
                let strings = this.strings();
                for (let index = 0; index < strings.length; index++) {
                    if (strings[index] === '')
                        continue;
                    chunks.push((index % 2) ? this.High(index) : this.Low(index));
                }
                return chunks;
            }
            strings() {
                const options = this.needle().split(/\s+/g).filter(Boolean);
                if (!options.length)
                    return [this.haystack()];
                const variants = { ...options };
                const regexp = $mol_regexp.from({ needle: variants }, { ignoreCase: true });
                return this.haystack().split(regexp);
            }
            string(index) {
                return this.strings()[index];
            }
            *view_find(check, path = []) {
                if (check(this, this.haystack())) {
                    yield [...path, this];
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_dimmer.prototype, "strings", null);
        $$.$mol_dimmer = $mol_dimmer;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/dimmer/dimmer.view.css", "[mol_dimmer] {\n\tdisplay: block;\n\tmax-width: 100%;\n}\n\n[mol_dimmer_low] {\n\tdisplay: inline;\n\topacity: 0.8;\n}\n\n[mol_dimmer_high] {\n\tdisplay: inline;\n\tcolor: var(--mol_theme_focus);\n\ttext-shadow: 0 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_search) = class $mol_search extends ($.$mol_pop) {
		clear(next){
			if(next !== undefined) return next;
			return null;
		}
		Hotkey(){
			const obj = new this.$.$mol_hotkey();
			(obj.key) = () => ({"escape": (next) => (this.clear(next))});
			return obj;
		}
		nav_components(){
			return [];
		}
		nav_focused(next){
			if(next !== undefined) return next;
			return null;
		}
		Nav(){
			const obj = new this.$.$mol_nav();
			(obj.keys_y) = () => ((this.nav_components()));
			(obj.current_y) = (next) => ((this.nav_focused(next)));
			return obj;
		}
		suggests_showed(next){
			if(next !== undefined) return next;
			return false;
		}
		query(next){
			if(next !== undefined) return next;
			return "";
		}
		hint(){
			return (this.$.$mol_locale.text("$mol_search_hint"));
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		enabled(){
			return true;
		}
		keyboard(){
			return "search";
		}
		enter(){
			return "search";
		}
		bring(){
			return (this.Query().bring());
		}
		Query(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.query(next)));
			(obj.hint) = () => ((this.hint()));
			(obj.submit) = (next) => ((this.submit(next)));
			(obj.enabled) = () => ((this.enabled()));
			(obj.keyboard) = () => ((this.keyboard()));
			(obj.enter) = () => ((this.enter()));
			return obj;
		}
		Clear_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Clear(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_search_Clear_hint")));
			(obj.click) = (next) => ((this.clear(next)));
			(obj.sub) = () => ([(this.Clear_icon())]);
			return obj;
		}
		anchor_content(){
			return [(this.Query()), (this.Clear())];
		}
		menu_items(){
			return [];
		}
		Menu(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.menu_items()));
			return obj;
		}
		Bubble_pane(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.Menu())]);
			return obj;
		}
		suggest_select(id, next){
			if(next !== undefined) return next;
			return null;
		}
		suggest_label(id){
			return "";
		}
		Suggest_label(id){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ((this.suggest_label(id)));
			(obj.needle) = () => ((this.query()));
			return obj;
		}
		suggest_content(id){
			return [(this.Suggest_label(id))];
		}
		suggests(){
			return [];
		}
		plugins(){
			return [
				...(super.plugins()), 
				(this.Hotkey()), 
				(this.Nav())
			];
		}
		showed(next){
			return (this.suggests_showed(next));
		}
		align_hor(){
			return "right";
		}
		Anchor(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.anchor_content()));
			return obj;
		}
		bubble_content(){
			return [(this.Bubble_pane())];
		}
		Suggest(id){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.suggest_select(id, next)));
			(obj.sub) = () => ((this.suggest_content(id)));
			return obj;
		}
	};
	($mol_mem(($.$mol_search.prototype), "clear"));
	($mol_mem(($.$mol_search.prototype), "Hotkey"));
	($mol_mem(($.$mol_search.prototype), "nav_focused"));
	($mol_mem(($.$mol_search.prototype), "Nav"));
	($mol_mem(($.$mol_search.prototype), "suggests_showed"));
	($mol_mem(($.$mol_search.prototype), "query"));
	($mol_mem(($.$mol_search.prototype), "submit"));
	($mol_mem(($.$mol_search.prototype), "Query"));
	($mol_mem(($.$mol_search.prototype), "Clear_icon"));
	($mol_mem(($.$mol_search.prototype), "Clear"));
	($mol_mem(($.$mol_search.prototype), "Menu"));
	($mol_mem(($.$mol_search.prototype), "Bubble_pane"));
	($mol_mem_key(($.$mol_search.prototype), "suggest_select"));
	($mol_mem_key(($.$mol_search.prototype), "Suggest_label"));
	($mol_mem(($.$mol_search.prototype), "Anchor"));
	($mol_mem_key(($.$mol_search.prototype), "Suggest"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_search extends $.$mol_search {
            anchor_content() {
                return [
                    this.Query(),
                    ...this.query() ? [this.Clear()] : [],
                ];
            }
            suggests_showed(next = true) {
                this.query();
                if (!this.focused())
                    return false;
                return next;
            }
            suggest_selected(next) {
                if (next === undefined)
                    return;
                this.query(next);
                this.Query().focused(true);
            }
            nav_components() {
                return [
                    this.Query(),
                    ...this.menu_items(),
                ];
            }
            nav_focused(component) {
                if (!this.focused())
                    return null;
                if (component == null) {
                    for (let comp of this.nav_components()) {
                        if (comp && comp.focused())
                            return comp;
                    }
                    return null;
                }
                if (this.suggests_showed()) {
                    this.ensure_visible(component, "center");
                    component.focused(true);
                }
                return component;
            }
            suggest_label(key) {
                return key;
            }
            menu_items() {
                return this.suggests().map((suggest) => this.Suggest(suggest));
            }
            suggest_select(id, event) {
                this.query(id);
                this.Query().selection([id.length, id.length]);
                this.Query().focused(true);
            }
            clear(event) {
                this.query('');
            }
        }
        __decorate([
            $mol_mem
        ], $mol_search.prototype, "anchor_content", null);
        __decorate([
            $mol_mem
        ], $mol_search.prototype, "suggests_showed", null);
        __decorate([
            $mol_mem
        ], $mol_search.prototype, "nav_focused", null);
        __decorate([
            $mol_mem
        ], $mol_search.prototype, "menu_items", null);
        $$.$mol_search = $mol_search;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/search/search.view.css", "[mol_search] {\n\talign-self: flex-start;\n\tflex: auto;\n}\n\n[mol_search_anchor] {\n\tflex: 1 1 auto;\n}\n\n[mol_search_query] {\n\tflex-grow: 1;\n}\n\n[mol_search_menu] {\n\tmin-height: .75rem;\n\tdisplay: flex;\n}\n\n[mol_search_suggest] {\n\ttext-align: left;\n}\n\n[mol_search_suggest_label_high] {\n\tcolor: var(--mol_theme_shade);\n\ttext-shadow: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_link) = class $mol_link extends ($.$mol_view) {
		uri_toggle(){
			return "";
		}
		hint(){
			return "";
		}
		hint_safe(){
			return (this.hint());
		}
		target(){
			return "_self";
		}
		file_name(){
			return "";
		}
		current(){
			return false;
		}
		relation(){
			return "";
		}
		event_click(next){
			if(next !== undefined) return next;
			return null;
		}
		click(next){
			return (this.event_click(next));
		}
		uri(){
			return "";
		}
		dom_name(){
			return "a";
		}
		uri_off(){
			return "";
		}
		uri_native(){
			return null;
		}
		external(){
			return false;
		}
		attr(){
			return {
				...(super.attr()), 
				"href": (this.uri_toggle()), 
				"title": (this.hint_safe()), 
				"target": (this.target()), 
				"download": (this.file_name()), 
				"mol_link_current": (this.current()), 
				"rel": (this.relation())
			};
		}
		sub(){
			return [(this.title())];
		}
		arg(){
			return {};
		}
		event(){
			return {...(super.event()), "click": (next) => (this.click(next))};
		}
	};
	($mol_mem(($.$mol_link.prototype), "event_click"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_state_arg extends $mol_object {
        prefix;
        static prolog = '';
        static separator = ' ';
        static href(next) {
            return next || process.argv.slice(2).join(' ');
        }
        static href_normal() {
            return this.link({});
        }
        static dict(next) {
            if (next !== void 0)
                this.href(this.make_link(next));
            var href = this.href();
            var chunks = href.split(' ');
            var params = {};
            chunks.forEach(chunk => {
                if (!chunk)
                    return;
                var vals = chunk.split('=').map(decodeURIComponent);
                params[vals.shift()] = vals.join('=');
            });
            return params;
        }
        static value(key, next) {
            if (next === void 0)
                return this.dict()[key] ?? null;
            this.href(this.link({ [key]: next }));
            return next;
        }
        static link(next) {
            const params = {};
            var prev = this.dict();
            for (var key in prev) {
                params[key] = prev[key];
            }
            for (var key in next) {
                params[key] = next[key];
            }
            return this.make_link(params);
        }
        static make_link(next) {
            const chunks = [];
            for (const key in next) {
                if (next[key] !== null) {
                    chunks.push([key, next[key]].map(encodeURIComponent).join('='));
                }
            }
            return chunks.join(' ');
        }
        static go(next) {
            this.href(this.link(next));
        }
        static commit() { }
        constructor(prefix = '') {
            super();
            this.prefix = prefix;
        }
        value(key, next) {
            return this.constructor.value(this.prefix + key, next);
        }
        sub(postfix) {
            return new this.constructor(this.prefix + postfix + '.');
        }
        link(next) {
            const prefix = this.prefix;
            const dict = {};
            for (var key in next) {
                dict[prefix + key] = next[key];
            }
            return this.constructor.link(dict);
        }
    }
    __decorate([
        $mol_mem
    ], $mol_state_arg, "href", null);
    __decorate([
        $mol_mem
    ], $mol_state_arg, "href_normal", null);
    __decorate([
        $mol_mem
    ], $mol_state_arg, "dict", null);
    __decorate([
        $mol_mem_key
    ], $mol_state_arg, "value", null);
    __decorate([
        $mol_action
    ], $mol_state_arg, "go", null);
    $.$mol_state_arg = $mol_state_arg;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_link extends $.$mol_link {
            uri_toggle() {
                return this.current() ? this.uri_off() : this.uri();
            }
            uri() {
                return new this.$.$mol_state_arg(this.state_key()).link(this.arg());
            }
            uri_off() {
                const arg2 = {};
                for (let i in this.arg())
                    arg2[i] = null;
                return new this.$.$mol_state_arg(this.state_key()).link(arg2);
            }
            uri_native() {
                const base = this.$.$mol_state_arg.href();
                return new URL(this.uri(), base);
            }
            current() {
                const base = this.$.$mol_state_arg.href_normal();
                const target = this.uri_native().toString();
                if (base === target)
                    return true;
                const args = this.arg();
                const keys = Object.keys(args).filter(key => args[key] != null);
                if (keys.length === 0)
                    return false;
                for (const key of keys) {
                    if (this.$.$mol_state_arg.value(key) != args[key])
                        return false;
                }
                return true;
            }
            file_name() {
                return null;
            }
            minimal_height() {
                return Math.max(super.minimal_height(), 24);
            }
            external() {
                return this.uri_native().origin !== $mol_dom_context.location.origin;
            }
            target() {
                return this.external() ? '_blank' : '_self';
            }
            hint_safe() {
                try {
                    return this.hint();
                }
                catch (error) {
                    $mol_fail_log(error);
                    return '';
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_link.prototype, "uri_toggle", null);
        __decorate([
            $mol_mem
        ], $mol_link.prototype, "uri", null);
        __decorate([
            $mol_mem
        ], $mol_link.prototype, "uri_off", null);
        __decorate([
            $mol_mem
        ], $mol_link.prototype, "uri_native", null);
        __decorate([
            $mol_mem
        ], $mol_link.prototype, "current", null);
        $$.$mol_link = $mol_link;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { rem } = $mol_style_unit;
    $mol_style_define($mol_link, {
        textDecoration: 'none',
        color: $mol_theme.control,
        stroke: 'currentcolor',
        cursor: 'pointer',
        padding: $mol_gap.text,
        boxSizing: 'border-box',
        position: 'relative',
        minWidth: rem(2.5),
        gap: $mol_gap.space,
        border: {
            radius: $mol_gap.round,
        },
        ':hover': {
            background: {
                color: $mol_theme.hover,
            },
        },
        ':focus-visible': {
            outline: 'none',
            background: {
                color: $mol_theme.hover,
            },
        },
        ':active': {
            color: $mol_theme.focus,
        },
        '@': {
            mol_link_current: {
                'true': {
                    color: $mol_theme.current,
                    textShadow: '0 0',
                }
            }
        },
    });
})($ || ($ = {}));

;
	($.$mol_page) = class $mol_page extends ($.$mol_view) {
		tabindex(){
			return -1;
		}
		Logo(){
			return null;
		}
		title_content(){
			return [(this.Logo()), (this.title())];
		}
		Title(){
			const obj = new this.$.$mol_view();
			(obj.dom_name) = () => ("h1");
			(obj.sub) = () => ((this.title_content()));
			return obj;
		}
		tools(){
			return [];
		}
		Tools(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.tools()));
			return obj;
		}
		head(){
			return [(this.Title()), (this.Tools())];
		}
		Head(){
			const obj = new this.$.$mol_view();
			(obj.minimal_height) = () => (64);
			(obj.dom_name) = () => ("header");
			(obj.sub) = () => ((this.head()));
			return obj;
		}
		body_scroll_top(next){
			return (this.Body().scroll_top(next));
		}
		body(){
			return [];
		}
		Body_content(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.body()));
			return obj;
		}
		body_content(){
			return [(this.Body_content())];
		}
		Body(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ((this.body_content()));
			return obj;
		}
		foot(){
			return [];
		}
		Foot(){
			const obj = new this.$.$mol_view();
			(obj.dom_name) = () => ("footer");
			(obj.sub) = () => ((this.foot()));
			return obj;
		}
		dom_name(){
			return "article";
		}
		attr(){
			return {...(super.attr()), "tabIndex": (this.tabindex())};
		}
		sub(){
			return [
				(this.Head()), 
				(this.Body()), 
				(this.Foot())
			];
		}
	};
	($mol_mem(($.$mol_page.prototype), "Title"));
	($mol_mem(($.$mol_page.prototype), "Tools"));
	($mol_mem(($.$mol_page.prototype), "Head"));
	($mol_mem(($.$mol_page.prototype), "Body_content"));
	($mol_mem(($.$mol_page.prototype), "Body"));
	($mol_mem(($.$mol_page.prototype), "Foot"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { per, rem } = $mol_style_unit;
        const { hsla, blur } = $mol_style_func;
        $mol_style_define($mol_page, {
            display: 'flex',
            flex: {
                basis: 'auto',
                direction: 'column',
            },
            position: 'relative',
            alignSelf: 'stretch',
            maxWidth: per(100),
            maxHeight: per(100),
            boxSizing: 'border-box',
            color: $mol_theme.text,
            ':focus': {
                outline: 'none',
            },
            Head: {
                display: 'flex',
                flexWrap: 'wrap',
                justifyContent: 'flex-end',
                flex: 'none',
                position: 'relative',
                margin: 0,
                minHeight: rem(4),
                padding: $mol_gap.block,
                background: {
                    color: $mol_theme.card,
                },
                border: {
                    radius: $mol_gap.round,
                },
                box: {
                    shadow: [[0, `0.5rem`, `0.5rem`, `-0.5rem`, hsla(0, 0, 0, .25)]],
                },
                zIndex: 2,
                '@media': {
                    'print': {
                        box: {
                            shadow: [[0, `1px`, 0, 0, hsla(0, 0, 0, .25)]],
                        },
                    },
                },
            },
            Title: {
                minHeight: rem(2),
                margin: 0,
                padding: $mol_gap.text,
                gap: $mol_gap.text,
                wordBreak: 'normal',
                textShadow: '0 0',
                font: {
                    size: 'inherit',
                    weight: 'normal',
                },
                flex: {
                    grow: 1,
                    shrink: 1,
                    basis: 'auto',
                },
            },
            Tools: {
                flex: {
                    basis: 'auto',
                    grow: 0,
                    shrink: 1,
                },
                display: 'flex',
                justifyContent: 'flex-end',
                alignItems: 'flex-start',
                flexWrap: 'wrap',
                '@media': {
                    'print': {
                        display: 'none',
                    },
                },
            },
            Body: {
                flex: {
                    grow: 1000,
                    shrink: 1,
                    basis: per(100),
                },
            },
            Body_content: {
                padding: $mol_gap.block,
                flex: {
                    direction: 'column',
                    shrink: 1,
                    grow: 1,
                },
                justify: {
                    self: 'stretch',
                },
            },
            Foot: {
                display: 'flex',
                justifyContent: 'space-between',
                flex: 'none',
                margin: 0,
                background: {
                    color: $mol_theme.card,
                },
                border: {
                    radius: $mol_gap.round,
                },
                box: {
                    shadow: [[0, `-0.5rem`, `0.5rem`, `-0.5rem`, hsla(0, 0, 0, .25)]],
                },
                zIndex: 1,
                padding: $mol_gap.block,
                ':empty': {
                    display: 'none',
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_book2_catalog) = class $mol_book2_catalog extends ($.$mol_book2) {
		Menu_title(){
			return (this.Menu().Title());
		}
		menu_title(){
			return "";
		}
		Menu_tools(){
			return (this.Menu().Tools());
		}
		Menu_logo(){
			return null;
		}
		menu_head(){
			return [(this.Menu_title()), (this.Menu_tools())];
		}
		menu_filter(next){
			if(next !== undefined) return next;
			return "";
		}
		Menu_filter(){
			const obj = new this.$.$mol_search();
			(obj.query) = (next) => ((this.menu_filter(next)));
			return obj;
		}
		Menu_links_empty(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		arg(id){
			return {};
		}
		menu_link_arg(id){
			return (this.arg(id));
		}
		spread_title(id){
			return "";
		}
		Menu_link_title(id){
			const obj = new this.$.$mol_dimmer();
			(obj.needle) = () => ((this.menu_filter()));
			(obj.haystack) = () => ((this.spread_title(id)));
			return obj;
		}
		menu_link_content(id){
			return [(this.Menu_link_title(id))];
		}
		Menu_link(id){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ((this.menu_link_arg(id)));
			(obj.sub) = () => ((this.menu_link_content(id)));
			return obj;
		}
		menu_links(){
			return [(this.Menu_link("0"))];
		}
		Menu_links(){
			const obj = new this.$.$mol_list();
			(obj.Empty) = () => ((this.Menu_links_empty()));
			(obj.rows) = () => ((this.menu_links()));
			return obj;
		}
		menu_body(){
			return [(this.Menu_filter()), (this.Menu_links())];
		}
		menu_foot(){
			return [];
		}
		Menu(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.menu_title()));
			(obj.Logo) = () => ((this.Menu_logo()));
			(obj.tools) = () => ([...(this.menu_tools()), ...(this.addon_tools())]);
			(obj.head) = () => ((this.menu_head()));
			(obj.body) = () => ((this.menu_body()));
			(obj.foot) = () => ((this.menu_foot()));
			return obj;
		}
		spread_close_arg(){
			return {};
		}
		Spread_close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		param(){
			return "";
		}
		spread(next){
			if(next !== undefined) return next;
			return "";
		}
		spreads(){
			return {};
		}
		Spread(id){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Spread_default(){
			return null;
		}
		spread_ids(){
			return [];
		}
		menu_filter_enabled(){
			return false;
		}
		spread_ids_filtered(){
			return [];
		}
		menu_tools(){
			return [];
		}
		addon_tools(){
			return [];
		}
		pages(){
			return [(this.Menu())];
		}
		Spread_close(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ((this.spread_close_arg()));
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_book2_catalog_Spread_close_hint")));
			(obj.sub) = () => ([(this.Spread_close_icon())]);
			return obj;
		}
	};
	($mol_mem(($.$mol_book2_catalog.prototype), "menu_filter"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Menu_filter"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Menu_links_empty"));
	($mol_mem_key(($.$mol_book2_catalog.prototype), "Menu_link_title"));
	($mol_mem_key(($.$mol_book2_catalog.prototype), "Menu_link"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Menu_links"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Menu"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Spread_close_icon"));
	($mol_mem(($.$mol_book2_catalog.prototype), "spread"));
	($mol_mem_key(($.$mol_book2_catalog.prototype), "Spread"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Spread_close"));


;
"use strict";
var $;
(function ($) {
    function $mol_match_text(query, values) {
        const tags = query.toLowerCase().trim().split(/\s+/).filter(tag => tag);
        if (tags.length === 0)
            return () => true;
        return (variant) => {
            const vals = values(variant);
            return tags.every(tag => vals.some(val => val.toLowerCase().indexOf(tag) >= 0));
        };
    }
    $.$mol_match_text = $mol_match_text;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_book2_catalog extends $.$mol_book2_catalog {
            pages() {
                const spread = this.spread() === '' ? this.Spread_default() : this.Spread(this.spread());
                return [
                    this.Menu(),
                    ...spread
                        ? spread instanceof $mol_book2
                            ? spread.pages()
                            : [spread]
                        : [],
                ];
            }
            spread_ids() {
                return Object.keys(this.spreads());
            }
            menu_body() {
                return [
                    ...this.menu_filter_enabled() ? [this.Menu_filter()] : [],
                    this.Menu_links(),
                ];
            }
            menu_filter_enabled() {
                return this.spread_ids().length >= 10;
            }
            menu_links() {
                return this.spread_ids_filtered()
                    .map(spread => this.Menu_link(spread));
            }
            spread_ids_filtered() {
                return this.spread_ids()
                    .filter($mol_match_text(this.menu_filter(), spread => [this.spread_title(spread)]));
            }
            Spread(id) {
                return this.spreads()[id];
            }
            Spread_default() {
                return this.spreads()[''];
            }
            spread(next) {
                return this.$.$mol_state_arg.value(this.param(), next) ?? '';
            }
            arg(spread) {
                return { [this.param()]: spread || null };
            }
            spread_close_arg() {
                return { [this.param()]: null };
            }
            spread_title(spread) {
                const page = this.Spread(spread);
                return page instanceof $mol_book2
                    && page.menu_title()
                    || page.title()
                    || spread;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "pages", null);
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "spread_ids", null);
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "menu_body", null);
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "menu_links", null);
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "spread_ids_filtered", null);
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "spread", null);
        $$.$mol_book2_catalog = $mol_book2_catalog;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/book2/catalog/catalog.view.css", "[mol_book2_catalog_menu_filter] {\n\tflex-shrink: 0;\n\tflex-grow: 0;\n\talign-self: stretch;\n}\n\n");
})($ || ($ = {}));

;
	($.$mol_theme_auto) = class $mol_theme_auto extends ($.$mol_plugin) {
		theme(){
			return "";
		}
		attr(){
			return {"mol_theme": (this.theme())};
		}
	};


;
"use strict";
var $;
(function ($) {
    class $mol_media extends $mol_object2 {
        static match(query, next) {
            if (next !== undefined)
                return next;
            const res = this.$.$mol_dom_context.matchMedia?.(query) ?? {};
            res.onchange = () => this.match(query, res.matches);
            return res.matches;
        }
    }
    __decorate([
        $mol_mem_key
    ], $mol_media, "match", null);
    $.$mol_media = $mol_media;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function parse(theme) {
        if (theme === 'true')
            return true;
        if (theme === 'false')
            return false;
        return null;
    }
    function $mol_lights(next) {
        const arg = parse(this.$mol_state_arg.value('mol_lights'));
        const base = this.$mol_media.match('(prefers-color-scheme: light)');
        if (next === undefined) {
            return arg ?? this.$mol_state_local.value('$mol_lights') ?? base;
        }
        else {
            if (arg === null) {
                this.$mol_state_local.value('$mol_lights', next === base ? null : next);
            }
            else {
                this.$mol_state_arg.value('mol_lights', String(next));
            }
            return next;
        }
    }
    $.$mol_lights = $mol_lights;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_theme_auto extends $.$mol_theme_auto {
            theme() {
                return this.$.$mol_lights() ? '$mol_theme_light' : '$mol_theme_dark';
            }
        }
        $$.$mol_theme_auto = $mol_theme_auto;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_script) = class $mol_icon_script extends ($.$mol_icon) {
		path(){
			return "M17.8,20C17.4,21.2 16.3,22 15,22H5C3.3,22 2,20.7 2,19V18H5L14.2,18C14.6,19.2 15.7,20 17,20H17.8M19,2H8C6.3,2 5,3.3 5,5V16H16V17C16,17.6 16.4,18 17,18H18V5C18,4.4 18.4,4 19,4C19.6,4 20,4.4 20,5V6H22V5C22,3.3 20.7,2 19,2Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_script_text) = class $mol_icon_script_text extends ($.$mol_icon) {
		path(){
			return "M17.8,20C17.4,21.2 16.3,22 15,22H5C3.3,22 2,20.7 2,19V18H5L14.2,18C14.6,19.2 15.7,20 17,20H17.8M19,2C20.7,2 22,3.3 22,5V6H20V5C20,4.4 19.6,4 19,4C18.4,4 18,4.4 18,5V18H17C16.4,18 16,17.6 16,17V16H5V5C5,3.3 6.3,2 8,2H19M8,6V8H15V6H8M8,10V12H14V10H8Z";
		}
	};


;
"use strict";

;
	($.$mol_link_source) = class $mol_link_source extends ($.$mol_link) {
		Icon(){
			const obj = new this.$.$mol_icon_script_text();
			return obj;
		}
		hint(){
			return (this.$.$mol_locale.text("$mol_link_source_hint"));
		}
		sub(){
			return [(this.Icon())];
		}
	};
	($mol_mem(($.$mol_link_source.prototype), "Icon"));


;
"use strict";

;
	($.$mol_check) = class $mol_check extends ($.$mol_button_minor) {
		checked(next){
			if(next !== undefined) return next;
			return false;
		}
		aria_checked(){
			return "false";
		}
		aria_role(){
			return "checkbox";
		}
		Icon(){
			return null;
		}
		title(){
			return "";
		}
		Title(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.title())]);
			return obj;
		}
		label(){
			return [(this.Title())];
		}
		attr(){
			return {
				...(super.attr()), 
				"mol_check_checked": (this.checked()), 
				"aria-checked": (this.aria_checked()), 
				"role": (this.aria_role())
			};
		}
		sub(){
			return [(this.Icon()), (this.label())];
		}
	};
	($mol_mem(($.$mol_check.prototype), "checked"));
	($mol_mem(($.$mol_check.prototype), "Title"));


;
"use strict";
var $;
(function ($) {
    function $mol_maybe(value) {
        return (value == null) ? [] : [value];
    }
    $.$mol_maybe = $mol_maybe;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/check.css", "[mol_check] {\n\tflex: 0 0 auto;\n\tjustify-content: flex-start;\n\talign-content: center;\n\t/* align-items: flex-start; */\n\tborder: none;\n\tfont-weight: inherit;\n\tbox-shadow: none;\n\ttext-align: left;\n\tdisplay: inline-flex;\n\tflex-wrap: nowrap;\n}\n\n[mol_check_title] {\n\tflex-shrink: 1;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_check extends $.$mol_check {
            click(next) {
                if (next?.defaultPrevented)
                    return;
                this.checked(!this.checked());
                if (next)
                    next.preventDefault();
            }
            sub() {
                return [
                    ...$mol_maybe(this.Icon()),
                    ...this.label(),
                ];
            }
            label() {
                return this.title() ? super.label() : [];
            }
            aria_checked() {
                return String(this.checked());
            }
        }
        $$.$mol_check = $mol_check;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_check_icon) = class $mol_check_icon extends ($.$mol_check) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/icon/icon.view.css", "[mol_check_icon]:where([mol_check_checked]) {\n\tcolor: var(--mol_theme_current);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_icon_brightness_4) = class $mol_icon_brightness_4 extends ($.$mol_icon) {
		path(){
			return "M12,18C11.11,18 10.26,17.8 9.5,17.45C11.56,16.5 13,14.42 13,12C13,9.58 11.56,7.5 9.5,6.55C10.26,6.2 11.11,6 12,6A6,6 0 0,1 18,12A6,6 0 0,1 12,18M20,8.69V4H15.31L12,0.69L8.69,4H4V8.69L0.69,12L4,15.31V20H8.69L12,23.31L15.31,20H20V15.31L23.31,12L20,8.69Z";
		}
	};


;
"use strict";

;
	($.$mol_lights_toggle) = class $mol_lights_toggle extends ($.$mol_check_icon) {
		Lights_icon(){
			const obj = new this.$.$mol_icon_brightness_4();
			return obj;
		}
		lights(next){
			if(next !== undefined) return next;
			return false;
		}
		Icon(){
			return (this.Lights_icon());
		}
		hint(){
			return (this.$.$mol_locale.text("$mol_lights_toggle_hint"));
		}
		checked(next){
			return (this.lights(next));
		}
	};
	($mol_mem(($.$mol_lights_toggle.prototype), "Lights_icon"));
	($mol_mem(($.$mol_lights_toggle.prototype), "lights"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_lights_toggle extends $.$mol_lights_toggle {
            lights(next) {
                return this.$.$mol_lights(next);
            }
        }
        $$.$mol_lights_toggle = $mol_lights_toggle;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_pick) = class $mol_pick extends ($.$mol_pop) {
		keydown(next){
			if(next !== undefined) return next;
			return null;
		}
		trigger_enabled(){
			return true;
		}
		clicks(next){
			if(next !== undefined) return next;
			return null;
		}
		trigger_content(){
			return [(this.title())];
		}
		hint(){
			return "";
		}
		Trigger(){
			const obj = new this.$.$mol_check();
			(obj.minimal_width) = () => (40);
			(obj.minimal_height) = () => (40);
			(obj.enabled) = () => ((this.trigger_enabled()));
			(obj.checked) = (next) => ((this.showed(next)));
			(obj.clicks) = (next) => ((this.clicks(next)));
			(obj.sub) = () => ((this.trigger_content()));
			(obj.hint) = () => ((this.hint()));
			return obj;
		}
		event(){
			return {...(super.event()), "keydown": (next) => (this.keydown(next))};
		}
		Anchor(){
			return (this.Trigger());
		}
	};
	($mol_mem(($.$mol_pick.prototype), "keydown"));
	($mol_mem(($.$mol_pick.prototype), "clicks"));
	($mol_mem(($.$mol_pick.prototype), "Trigger"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_pick extends $.$mol_pick {
            keydown(event) {
                if (!this.trigger_enabled())
                    return;
                if (event.defaultPrevented)
                    return;
                if (event.keyCode === $mol_keyboard_code.escape) {
                    if (!this.showed())
                        return;
                    event.preventDefault();
                    this.showed(false);
                }
            }
        }
        $$.$mol_pick = $mol_pick;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/pick/pick.view.css", "[mol_pick_trigger] {\n\talign-items: center;\n\tflex-grow: 1;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_dots_vertical) = class $mol_icon_dots_vertical extends ($.$mol_icon) {
		path(){
			return "M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z";
		}
	};


;
"use strict";

;
	($.$mol_select) = class $mol_select extends ($.$mol_pick) {
		event_select(id, next){
			if(next !== undefined) return next;
			return null;
		}
		option_label(id){
			return "";
		}
		filter_pattern(next){
			if(next !== undefined) return next;
			return "";
		}
		Option_label(id){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ((this.option_label(id)));
			(obj.needle) = () => ((this.filter_pattern()));
			return obj;
		}
		option_content(id){
			return [(this.Option_label(id))];
		}
		no_options_message(){
			return (this.$.$mol_locale.text("$mol_select_no_options_message"));
		}
		nav_components(){
			return [];
		}
		option_focused(next){
			if(next !== undefined) return next;
			return null;
		}
		nav_cycle(next){
			if(next !== undefined) return next;
			return true;
		}
		Nav(){
			const obj = new this.$.$mol_nav();
			(obj.keys_y) = () => ((this.nav_components()));
			(obj.current_y) = (next) => ((this.option_focused(next)));
			(obj.cycle) = (next) => ((this.nav_cycle(next)));
			return obj;
		}
		menu_content(){
			return [];
		}
		Menu(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.menu_content()));
			return obj;
		}
		Bubble_pane(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.Menu())]);
			return obj;
		}
		filter_hint(){
			return (this.$.$mol_locale.text("$mol_select_filter_hint"));
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		enabled(){
			return true;
		}
		dictionary(next){
			if(next !== undefined) return next;
			return {};
		}
		options(){
			return [];
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		option_label_default(){
			return "";
		}
		Option_row(id){
			const obj = new this.$.$mol_button_minor();
			(obj.event_click) = (next) => ((this.event_select(id, next)));
			(obj.sub) = () => ((this.option_content(id)));
			return obj;
		}
		No_options(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.no_options_message())]);
			return obj;
		}
		plugins(){
			return [...(super.plugins()), (this.Nav())];
		}
		hint(){
			return (this.$.$mol_locale.text("$mol_select_hint"));
		}
		bubble_content(){
			return [(this.Filter()), (this.Bubble_pane())];
		}
		Filter(){
			const obj = new this.$.$mol_search();
			(obj.query) = (next) => ((this.filter_pattern(next)));
			(obj.hint) = () => ((this.filter_hint()));
			(obj.submit) = (next) => ((this.submit(next)));
			(obj.enabled) = () => ((this.enabled()));
			return obj;
		}
		Trigger_icon(){
			const obj = new this.$.$mol_icon_dots_vertical();
			return obj;
		}
	};
	($mol_mem_key(($.$mol_select.prototype), "event_select"));
	($mol_mem(($.$mol_select.prototype), "filter_pattern"));
	($mol_mem_key(($.$mol_select.prototype), "Option_label"));
	($mol_mem(($.$mol_select.prototype), "option_focused"));
	($mol_mem(($.$mol_select.prototype), "nav_cycle"));
	($mol_mem(($.$mol_select.prototype), "Nav"));
	($mol_mem(($.$mol_select.prototype), "Menu"));
	($mol_mem(($.$mol_select.prototype), "Bubble_pane"));
	($mol_mem(($.$mol_select.prototype), "submit"));
	($mol_mem(($.$mol_select.prototype), "dictionary"));
	($mol_mem(($.$mol_select.prototype), "value"));
	($mol_mem_key(($.$mol_select.prototype), "Option_row"));
	($mol_mem(($.$mol_select.prototype), "No_options"));
	($mol_mem(($.$mol_select.prototype), "Filter"));
	($mol_mem(($.$mol_select.prototype), "Trigger_icon"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_select extends $.$mol_select {
            filter_pattern(next) {
                this.focused();
                return next || '';
            }
            open() {
                this.showed(true);
            }
            options() {
                return Object.keys(this.dictionary());
            }
            options_filtered() {
                let options = this.options();
                options = options.filter($mol_match_text(this.filter_pattern(), (id) => [this.option_label(id)]));
                const index = options.indexOf(this.value());
                if (index >= 0)
                    options = [...options.slice(0, index), ...options.slice(index + 1)];
                return options;
            }
            option_label(id) {
                const value = this.dictionary()[id];
                return (value == null ? id : value) || this.option_label_default();
            }
            option_rows() {
                return this.options_filtered().map((option) => this.Option_row(option));
            }
            option_focused(component) {
                if (component == null) {
                    for (let comp of this.nav_components()) {
                        if (comp && comp.focused())
                            return comp;
                    }
                    return null;
                }
                if (this.showed()) {
                    component.focused(true);
                }
                return component;
            }
            event_select(id, event) {
                this.value(id);
                this.showed(false);
                event?.preventDefault();
            }
            nav_components() {
                if (this.options().length > 1 && this.Filter()) {
                    return [this.Filter(), ...this.option_rows()];
                }
                else {
                    return this.option_rows();
                }
            }
            trigger_content() {
                return [
                    ...this.option_content(this.value()),
                    this.Trigger_icon(),
                ];
            }
            menu_content() {
                return [
                    ...this.option_rows(),
                    ...(this.options_filtered().length === 0) ? [this.No_options()] : []
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_select.prototype, "filter_pattern", null);
        __decorate([
            $mol_mem
        ], $mol_select.prototype, "options", null);
        __decorate([
            $mol_mem
        ], $mol_select.prototype, "options_filtered", null);
        __decorate([
            $mol_mem
        ], $mol_select.prototype, "option_focused", null);
        $$.$mol_select = $mol_select;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/select/select.view.css", "[mol_select] {\n\tdisplay: flex;\n\tword-break: normal;\n\talign-self: flex-start;\n}\n\n[mol_select_option_row] {\n\tmin-width: 100%;\n\tpadding: 0;\n\tjustify-content: flex-start;\n}\n\n[mol_select_bubble] {\n\tmin-width: 100%;\n}\n\n[mol_select_filter] {\n\tflex: 1 0 auto;\n\talign-self: stretch;\n}\n\n[mol_select_option_label] {\n\tpadding: var(--mol_gap_text);\n\ttext-align: left;\n\tmin-height: 1.5em;\n\tdisplay: block;\n\twhite-space: nowrap;\n}\n\n[mol_select_clear_option_content] {\n\tpadding: .5em 1rem .5rem 0;\n\ttext-align: left;\n\tbox-shadow: var(--mol_theme_line);\n\tflex: 1 0 auto;\n}\n\n[mol_select_no_options] {\n\tpadding: var(--mol_gap_text);\n\ttext-align: left;\n\tdisplay: block;\n\tcolor: var(--mol_theme_shade);\n}\n\n[mol_select_trigger] {\n\tpadding: 0;\n\tflex: 1 1 auto;\n\tdisplay: flex;\n}\n\n[mol_select_trigger] > * {\n\tmargin-right: -1rem;\n}\n\n[mol_select_trigger] > *:last-child {\n\tmargin-right: 0;\n}\n\n[mol_select_menu] {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n");
})($ || ($ = {}));

;
	($.$mol_locale_select) = class $mol_locale_select extends ($.$mol_select) {};


;
"use strict";
var $;
(function ($) {
    $.$mol_lang_iso639 = {
        ab: "Abkhazian",
        aa: "Afar",
        af: "Afrikaans",
        ak: "Akan",
        sq: "Albanian",
        am: "Amharic",
        ar: "Arabic",
        an: "Aragonese",
        hy: "Armenian",
        as: "Assamese",
        av: "Avaric",
        ae: "Avestan",
        ay: "Aymara",
        az: "Azerbaijani",
        bm: "Bambara",
        ba: "Bashkir",
        eu: "Basque",
        be: "Belarusian",
        bn: "Bengali",
        bi: "Bislama",
        nb: "Bokmål",
        bs: "Bosnian",
        br: "Breton",
        bg: "Bulgarian",
        my: "Burmese",
        ca: "Catalan",
        ch: "Chamorro",
        ce: "Chechen",
        zh: "Chinese",
        cu: "Church Slavonic",
        cv: "Chuvash",
        kw: "Cornish",
        co: "Corsican",
        cr: "Cree",
        hr: "Croatian",
        cs: "Czech",
        da: "Danish",
        dv: "Divehi",
        nl: "Dutch",
        dz: "Dzongkha",
        en: "English",
        eo: "Esperanto",
        et: "Estonian",
        ee: "Ewe",
        fo: "Faroese",
        fj: "Fijian",
        fi: "Finnish",
        fr: "French",
        fy: "Frisian",
        ff: "Fulah",
        gd: "Gaelic",
        gl: "Galician",
        lg: "Ganda",
        ka: "Georgian",
        de: "German",
        el: "Greek",
        gn: "Guarani",
        gu: "Gujarati",
        ht: "Haitian",
        ha: "Hausa",
        he: "Hebrew",
        hz: "Herero",
        hi: "Hindi",
        ho: "Hiri Motu",
        hu: "Hungarian",
        is: "Icelandic",
        io: "Ido",
        ig: "Igbo",
        id: "Indonesian",
        ia: "InterlinguA",
        ie: "InterlinguE",
        iu: "Inuktitut",
        ik: "Inupiaq",
        ga: "Irish",
        it: "Italian",
        ja: "Japanese",
        jv: "Javanese",
        kl: "Kalaallisut",
        kn: "Kannada",
        kr: "Kanuri",
        ks: "Kashmiri",
        kk: "Kazakh",
        km: "Khmer",
        ki: "Kikuyu",
        rw: "Kinyarwanda",
        ky: "Kyrgyz",
        kv: "Komi",
        kg: "Kongo",
        ko: "Korean",
        kj: "Kwanyama",
        ku: "Kurdish",
        lo: "Lao",
        la: "Latin",
        lv: "Latvian",
        li: "Limburgan",
        ln: "Lingala",
        lt: "Lithuanian",
        lu: "Luba-Katanga",
        lb: "Luxembourgish",
        mk: "Macedonian",
        mg: "Malagasy",
        ms: "Malay",
        ml: "Malayalam",
        mt: "Maltese",
        gv: "Manx",
        mi: "Maori",
        mr: "Marathi",
        mh: "Marshallese",
        mn: "Mongolian",
        na: "Nauru",
        nv: "Navaho",
        nd: "North Ndebele",
        ng: "Ndonga",
        ne: "Nepali",
        no: "Norwegian",
        ny: "Nyanja",
        nn: "Nynorsk",
        oc: "Occitan",
        oj: "Ojibwa",
        or: "Oriya",
        om: "Oromo",
        os: "Ossetian",
        pi: "Pali",
        ps: "Pushto",
        fa: "Persian",
        pl: "Polish",
        pt: "Portuguese",
        pa: "Panjabi",
        qu: "Quechua",
        ro: "Romanian",
        rm: "Romansh",
        rn: "Rundi",
        ru: "Russian",
        se: "Sami",
        sm: "Samoan",
        sg: "Sango",
        sa: "Sanskrit",
        sc: "Sardinian",
        sr: "Serbian",
        sn: "Shona",
        ii: "Sichuan Yi",
        sd: "Sindhi",
        si: "Sinhala",
        sk: "Slovak",
        sl: "Slovenian",
        so: "Somali",
        st: "Sotho",
        nr: "South Ndebele",
        es: "Spanish",
        su: "Sundanese",
        sw: "Swahili",
        ss: "Swati",
        sv: "Swedish",
        tl: "Tagalog",
        ty: "Tahitian",
        tg: "Tajik",
        ta: "Tamil",
        tt: "Tatar",
        te: "Telugu",
        th: "Thai",
        bo: "Tibetan",
        ti: "Tigrinya",
        to: "Tonga",
        ts: "Tsonga",
        tn: "Tswana",
        tr: "Turkish",
        tk: "Turkmen",
        tw: "Twi",
        ug: "Uyghur",
        uk: "Ukrainian",
        ur: "Urdu",
        uz: "Uzbek",
        ve: "Venda",
        vi: "Vietnamese",
        vo: "Volapük",
        wa: "Walloon",
        cy: "Welsh",
        wo: "Wolof",
        xh: "Xhosa",
        yi: "Yiddish",
        yo: "Yoruba",
        za: "Zhuang",
        zu: "Zulu",
    };
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_locale_select extends $.$mol_locale_select {
            value(next) {
                return this.$.$mol_locale.lang(next);
            }
            dictionary() {
                return this.$.$mol_lang_iso639;
            }
        }
        $$.$mol_locale_select = $mol_locale_select;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_int62_string_ensure(str) {
        if (typeof str !== 'string')
            return null;
        return $mol_int62_from_string(str) && str;
    }
    $.$mol_int62_string_ensure = $mol_int62_string_ensure;
    $.$mol_int62_max = (2 ** 30) - 1;
    $.$mol_int62_min = -(2 ** 30);
    $.$mol_int62_range = $.$mol_int62_max - $.$mol_int62_min + 1;
    function $mol_int62_to_string({ lo, hi }) {
        lo = (lo + $.$mol_int62_range) % $.$mol_int62_range;
        hi = (hi + $.$mol_int62_range) % $.$mol_int62_range;
        return lo.toString(36) + '_' + hi.toString(36);
    }
    $.$mol_int62_to_string = $mol_int62_to_string;
    function $mol_int62_from_string(str) {
        const [str_lo, str_hi] = str.split('_');
        const int_lo = parseInt(str_lo, 36);
        const int_hi = parseInt(str_hi, 36);
        if (int_lo.toString(36) !== str_lo || int_hi.toString(36) !== str_hi) {
            return null;
        }
        return {
            lo: (int_lo - $.$mol_int62_min) % $.$mol_int62_range + $.$mol_int62_min,
            hi: (int_hi - $.$mol_int62_min) % $.$mol_int62_range + $.$mol_int62_min,
        };
    }
    $.$mol_int62_from_string = $mol_int62_from_string;
    function $mol_int62_compare(left_lo, left_hi, right_lo, right_hi) {
        return (right_hi - left_hi) || (right_lo - left_lo);
    }
    $.$mol_int62_compare = $mol_int62_compare;
    function $mol_int62_inc(lo, hi, max = $.$mol_int62_max) {
        if (lo === max) {
            return { lo: -max, hi: hi + 1 };
        }
        else {
            return { lo: lo + 1, hi };
        }
    }
    $.$mol_int62_inc = $mol_int62_inc;
    function $mol_int62_random() {
        return {
            lo: Math.floor(Math.random() * $.$mol_int62_range + $.$mol_int62_min),
            hi: Math.floor(Math.random() * $.$mol_int62_range + $.$mol_int62_min),
        };
    }
    $.$mol_int62_random = $mol_int62_random;
    function $mol_int62_hash_string(str) {
        return $mol_int62_to_string($mol_int62_hash_buffer($mol_charset_encode(str)));
    }
    $.$mol_int62_hash_string = $mol_int62_hash_string;
    function $mol_int62_hash_buffer(buf, seed = { lo: 0, hi: 0 }) {
        let h1 = 0xdeadbeef ^ seed.lo;
        let h2 = 0x41c6ce57 ^ seed.hi;
        for (const byte of buf) {
            h1 = Math.imul(h1 ^ byte, 2654435761);
            h2 = Math.imul(h2 ^ byte, 1597334677);
        }
        h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);
        h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);
        return { lo: h1 << 1 >> 1, hi: h2 << 1 >> 1 };
    }
    $.$mol_int62_hash_buffer = $mol_int62_hash_buffer;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_setup(value, config) {
        return Object.assign(value, {
            config,
            Value: null
        });
    }
    $.$mol_data_setup = $mol_data_setup;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_data_error extends $mol_error_mix {
    }
    $.$mol_data_error = $mol_data_error;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_data_enum(name, dict) {
        const index = {};
        for (let key in dict) {
            if (Number.isNaN(Number(key))) {
                index[dict[key]] = key;
            }
        }
        return $mol_data_setup((value) => {
            if (typeof index[value] !== 'string') {
                return $mol_fail(new $mol_data_error(`${value} is not value of ${name} enum`));
            }
            return value;
        }, { name, dict });
    }
    $.$mol_data_enum = $mol_data_enum;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_crypto_native = $node.crypto.webcrypto;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_encode(src) {
        throw new Error('Not implemented');
    }
    $.$mol_base64_encode = $mol_base64_encode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_encode_node(str) {
        if (!str)
            return '';
        if (Buffer.isBuffer(str))
            return str.toString('base64');
        return Buffer.from(str).toString('base64');
    }
    $.$mol_base64_encode_node = $mol_base64_encode_node;
    $.$mol_base64_encode = $mol_base64_encode_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_decode(base64) {
        throw new Error('Not implemented');
    }
    $.$mol_base64_decode = $mol_base64_decode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_decode_node(base64Str) {
        base64Str = base64Str.replace(/-/g, '+').replace(/_/g, '/');
        const buffer = Buffer.from(base64Str, 'base64');
        return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    $.$mol_base64_decode_node = $mol_base64_decode_node;
    $.$mol_base64_decode = $mol_base64_decode_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_url_encode(buffer) {
        return $mol_base64_encode(buffer).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
    }
    $.$mol_base64_url_encode = $mol_base64_url_encode;
    function $mol_base64_url_decode(str) {
        return $mol_base64_decode(str.replace(/-/g, '+').replace(/_/g, '/'));
    }
    $.$mol_base64_url_decode = $mol_base64_url_decode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const algorithm = {
        name: 'ECDSA',
        hash: 'SHA-256',
        namedCurve: "P-256",
    };
    async function $mol_crypto_auditor_pair() {
        const pair = await $mol_crypto_native.subtle.generateKey(algorithm, true, ['sign', 'verify']);
        return {
            public: new $mol_crypto_auditor_public(pair.publicKey),
            private: new $mol_crypto_auditor_private(pair.privateKey),
        };
    }
    $.$mol_crypto_auditor_pair = $mol_crypto_auditor_pair;
    class $mol_crypto_auditor_public extends Object {
        native;
        static size_str = 86;
        static size_bin = 64;
        constructor(native) {
            super();
            this.native = native;
        }
        static async from(serial) {
            if (typeof serial !== 'string') {
                serial = $mol_base64_url_encode(serial.subarray(0, 32))
                    + $mol_base64_url_encode(serial.subarray(32, 64));
            }
            return new this(await $mol_crypto_native.subtle.importKey('jwk', {
                crv: "P-256",
                ext: true,
                key_ops: ['verify'],
                kty: "EC",
                x: serial.slice(0, 43),
                y: serial.slice(43, 86),
            }, algorithm, true, ['verify']));
        }
        async serial() {
            const { x, y } = await $mol_crypto_native.subtle.exportKey('jwk', this.native);
            return x + y;
        }
        async toArray() {
            const { x, y, d } = await $mol_crypto_native.subtle.exportKey('jwk', this.native);
            return new Uint8Array([
                ...$mol_base64_url_decode(x),
                ...$mol_base64_url_decode(y),
            ]);
        }
        async verify(data, sign) {
            return await $mol_crypto_native.subtle.verify(algorithm, this.native, sign, data);
        }
    }
    $.$mol_crypto_auditor_public = $mol_crypto_auditor_public;
    class $mol_crypto_auditor_private extends Object {
        native;
        static size_str = 129;
        static size_bin = 96;
        constructor(native) {
            super();
            this.native = native;
        }
        static async from(serial) {
            if (typeof serial !== 'string') {
                serial = $mol_base64_url_encode(serial.subarray(0, 32))
                    + $mol_base64_url_encode(serial.subarray(32, 64))
                    + $mol_base64_url_encode(serial.subarray(64));
            }
            return new this(await $mol_crypto_native.subtle.importKey('jwk', {
                crv: "P-256",
                ext: true,
                key_ops: ['sign'],
                kty: "EC",
                x: serial.slice(0, 43),
                y: serial.slice(43, 86),
                d: serial.slice(86, 129),
            }, algorithm, true, ['sign']));
        }
        async serial() {
            const { x, y, d } = await $mol_crypto_native.subtle.exportKey('jwk', this.native);
            return x + y + d;
        }
        async toArray() {
            const { x, y, d } = await $mol_crypto_native.subtle.exportKey('jwk', this.native);
            return new Uint8Array([
                ...$mol_base64_url_decode(x),
                ...$mol_base64_url_decode(y),
                ...$mol_base64_url_decode(d),
            ]);
        }
        async sign(data) {
            return await $mol_crypto_native.subtle.sign(algorithm, this.native, data);
        }
        async public() {
            return await $mol_crypto_auditor_public.from($mol_crypto_auditor_private_to_public(await this.serial()));
        }
    }
    $.$mol_crypto_auditor_private = $mol_crypto_auditor_private;
    $.$mol_crypto_auditor_sign_size = 64;
    function $mol_crypto_auditor_private_to_public(serial) {
        return serial.slice(0, 86);
    }
    $.$mol_crypto_auditor_private_to_public = $mol_crypto_auditor_private_to_public;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $hyoo_crowd_peer_level;
    (function ($hyoo_crowd_peer_level) {
        $hyoo_crowd_peer_level[$hyoo_crowd_peer_level["get"] = 0] = "get";
        $hyoo_crowd_peer_level[$hyoo_crowd_peer_level["add"] = 1] = "add";
        $hyoo_crowd_peer_level[$hyoo_crowd_peer_level["mod"] = 2] = "mod";
        $hyoo_crowd_peer_level[$hyoo_crowd_peer_level["law"] = 3] = "law";
    })($hyoo_crowd_peer_level = $.$hyoo_crowd_peer_level || ($.$hyoo_crowd_peer_level = {}));
    class $hyoo_crowd_peer extends Object {
        key_public;
        key_public_serial;
        key_private;
        key_private_serial;
        id;
        constructor(key_public, key_public_serial, key_private, key_private_serial) {
            super();
            this.key_public = key_public;
            this.key_public_serial = key_public_serial;
            this.key_private = key_private;
            this.key_private_serial = key_private_serial;
            this.id = $mol_int62_hash_string(this.key_public_serial);
        }
        static async generate() {
            const pair = await $$.$mol_crypto_auditor_pair();
            const serial = await pair.private.serial();
            return new this(pair.public, $mol_crypto_auditor_private_to_public(serial), pair.private, serial);
        }
        static async restore(serial) {
            return new this(await $$.$mol_crypto_auditor_public.from(serial), $mol_crypto_auditor_private_to_public(serial), await $$.$mol_crypto_auditor_private.from(serial), serial);
        }
    }
    $.$hyoo_crowd_peer = $hyoo_crowd_peer;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const level = $mol_data_enum('level', $hyoo_crowd_peer_level);
    let $hyoo_crowd_unit_kind;
    (function ($hyoo_crowd_unit_kind) {
        $hyoo_crowd_unit_kind[$hyoo_crowd_unit_kind["grab"] = 0] = "grab";
        $hyoo_crowd_unit_kind[$hyoo_crowd_unit_kind["join"] = 1] = "join";
        $hyoo_crowd_unit_kind[$hyoo_crowd_unit_kind["give"] = 2] = "give";
        $hyoo_crowd_unit_kind[$hyoo_crowd_unit_kind["data"] = 3] = "data";
    })($hyoo_crowd_unit_kind = $.$hyoo_crowd_unit_kind || ($.$hyoo_crowd_unit_kind = {}));
    let $hyoo_crowd_unit_group;
    (function ($hyoo_crowd_unit_group) {
        $hyoo_crowd_unit_group[$hyoo_crowd_unit_group["auth"] = 0] = "auth";
        $hyoo_crowd_unit_group[$hyoo_crowd_unit_group["data"] = 1] = "data";
    })($hyoo_crowd_unit_group = $.$hyoo_crowd_unit_group || ($.$hyoo_crowd_unit_group = {}));
    class $hyoo_crowd_unit extends Object {
        land;
        auth;
        head;
        self;
        next;
        prev;
        time;
        data;
        bin;
        constructor(land, auth, head, self, next, prev, time, data, bin) {
            super();
            this.land = land;
            this.auth = auth;
            this.head = head;
            this.self = self;
            this.next = next;
            this.prev = prev;
            this.time = time;
            this.data = data;
            this.bin = bin;
        }
        kind() {
            if (this.head === this.self && this.auth === this.self) {
                if (this.head === this.land) {
                    return $hyoo_crowd_unit_kind.grab;
                }
                else {
                    return $hyoo_crowd_unit_kind.join;
                }
            }
            if (this.head === this.land) {
                return $hyoo_crowd_unit_kind.give;
            }
            return $hyoo_crowd_unit_kind.data;
        }
        group() {
            return this.kind() === $hyoo_crowd_unit_kind.data
                ? $hyoo_crowd_unit_group.data
                : $hyoo_crowd_unit_group.auth;
        }
        level() {
            switch (this.kind()) {
                case $hyoo_crowd_unit_kind.grab: return $hyoo_crowd_peer_level.law;
                case $hyoo_crowd_unit_kind.give: return level(this.data);
                default: $mol_fail(new Error(`Wrong unit kind for getting level: ${this.kind()}`));
            }
        }
        [Symbol.toPrimitive]() {
            return JSON.stringify(this);
        }
        [$mol_dev_format_head]() {
            switch (this.kind()) {
                case $hyoo_crowd_unit_kind.grab:
                    return $mol_dev_format_div({}, $mol_dev_format_native(this), ' 👑');
                case $hyoo_crowd_unit_kind.join:
                    return $mol_dev_format_div({}, $mol_dev_format_native(this), $mol_dev_format_shade(' 🔑 ', this.self));
                case $hyoo_crowd_unit_kind.give:
                    return $mol_dev_format_div({}, $mol_dev_format_native(this), $mol_dev_format_shade(' 🏅 ', this.self, ' '), $mol_dev_format_native($hyoo_crowd_peer_level[this.data] ?? this.data));
                case $hyoo_crowd_unit_kind.data:
                    return $mol_dev_format_div({}, $mol_dev_format_native(this), $mol_dev_format_shade(' 📦 ', this.head, '!', this.self, ' '), $mol_dev_format_native(this.data));
            }
        }
    }
    $.$hyoo_crowd_unit = $hyoo_crowd_unit;
    const offset = {
        land_lo: 0,
        land_hi: 4,
        auth_lo: 8,
        auth_hi: 12,
        head_lo: 16,
        head_hi: 20,
        self_lo: 24,
        self_hi: 28,
        next_lo: 32,
        next_hi: 36,
        prev_lo: 40,
        prev_hi: 44,
        time: 48,
        size: 54,
        data: 56,
    };
    class $hyoo_crowd_unit_bin extends DataView {
        static from_buffer(buffer) {
            const size = Math.ceil(Math.abs(buffer[offset.size / 2]) / 8) * 8 + offset.data + $mol_crypto_auditor_sign_size;
            return new this(buffer.slice(0, size / 2).buffer);
        }
        static from_unit(unit) {
            if (unit.bin)
                return unit.bin;
            const type = unit.data === null
                ? 0
                : unit.data instanceof Uint8Array
                    ? -1
                    : 1;
            const buff = type === 0 ? null
                : type > 0 ? $mol_charset_encode(JSON.stringify(unit.data))
                    : unit.data;
            const size = buff?.byteLength ?? 0;
            if (type > 0 && size > 2 ** 15 - 1)
                throw new Error(`Too large json data: ${size} > ${2 ** 15 - 1}`);
            if (type < 0 && size > 2 ** 15)
                throw new Error(`Too large binary data: ${size} > ${2 ** 15}`);
            const total = offset.data + Math.ceil(size / 8) * 8 + $mol_crypto_auditor_sign_size;
            const mem = new Uint8Array(total);
            const bin = new $hyoo_crowd_unit_bin(mem.buffer);
            const land = $mol_int62_from_string(unit.land);
            bin.setInt32(offset.land_lo, land.lo, true);
            bin.setInt32(offset.land_hi, land.hi, true);
            const auth = $mol_int62_from_string(unit.auth);
            bin.setInt32(offset.auth_lo, auth.lo, true);
            bin.setInt32(offset.auth_hi, auth.hi, true);
            const head = $mol_int62_from_string(unit.head);
            bin.setInt32(offset.head_lo, head.lo, true);
            bin.setInt32(offset.head_hi, head.hi, true);
            const self = $mol_int62_from_string(unit.self);
            bin.setInt32(offset.self_lo, self.lo, true);
            bin.setInt32(offset.self_hi, self.hi, true);
            const next = $mol_int62_from_string(unit.next);
            bin.setInt32(offset.next_lo, next.lo, true);
            bin.setInt32(offset.next_hi, next.hi, true);
            const prev = $mol_int62_from_string(unit.prev);
            bin.setInt32(offset.prev_lo, prev.lo, true);
            bin.setInt32(offset.prev_hi, prev.hi, true);
            bin.setInt32(offset.time, unit.time, true);
            bin.setInt16(offset.size, type * size, true);
            if (buff)
                mem.set(buff, offset.data);
            return bin;
        }
        sign(next) {
            const sign_offset = this.byteOffset + this.byteLength - $mol_crypto_auditor_sign_size;
            const buff = new Uint8Array(this.buffer, sign_offset, $mol_crypto_auditor_sign_size);
            if (!next)
                return buff;
            buff.set(next);
            return buff;
        }
        size() {
            return Math.ceil(Math.abs(this.getInt16(offset.size, true)) / 8) * 8 + offset.data + $mol_crypto_auditor_sign_size;
        }
        sens() {
            return new Uint8Array(this.buffer, this.byteOffset, this.size() - $mol_crypto_auditor_sign_size);
        }
        unit() {
            const land = $mol_int62_to_string({
                lo: this.getInt32(offset.land_lo, true) << 1 >> 1,
                hi: this.getInt32(offset.land_hi, true) << 1 >> 1,
            });
            const auth = $mol_int62_to_string({
                lo: this.getInt32(offset.auth_lo, true) << 1 >> 1,
                hi: this.getInt32(offset.auth_hi, true) << 1 >> 1,
            });
            const head = $mol_int62_to_string({
                lo: this.getInt32(offset.head_lo, true) << 1 >> 1,
                hi: this.getInt32(offset.head_hi, true) << 1 >> 1,
            });
            const self = $mol_int62_to_string({
                lo: this.getInt32(offset.self_lo, true) << 1 >> 1,
                hi: this.getInt32(offset.self_hi, true) << 1 >> 1,
            });
            const next = $mol_int62_to_string({
                lo: this.getInt32(offset.next_lo, true) << 1 >> 1,
                hi: this.getInt32(offset.next_hi, true) << 1 >> 1,
            });
            const prev = $mol_int62_to_string({
                lo: this.getInt32(offset.prev_lo, true) << 1 >> 1,
                hi: this.getInt32(offset.prev_hi, true) << 1 >> 1,
            });
            const time = this.getInt32(offset.time, true) << 1 >> 1;
            const type_size = this.getInt16(offset.size, true);
            let data = null;
            if (type_size) {
                try {
                    var buff = new Uint8Array(this.buffer, this.byteOffset + offset.data, Math.abs(type_size));
                }
                catch (error) {
                    error['message'] += `\nhead=${head};self=${self}`;
                    $mol_fail_hidden(error);
                }
                if (type_size < 0)
                    data = buff;
                else
                    data = JSON.parse($mol_charset_decode(buff));
            }
            return new $hyoo_crowd_unit(land, auth, head, self, next, prev, time, data, this);
        }
    }
    $.$hyoo_crowd_unit_bin = $hyoo_crowd_unit_bin;
    function $hyoo_crowd_unit_compare(left, right) {
        return (left.group() - right.group())
            || (left.time - right.time)
            || ((left.auth > right.auth) ? 1 : (left.auth < right.auth) ? -1 : 0)
            || ((left.self > right.self) ? 1 : (left.self < right.self) ? -1 : 0)
            || ((left.head > right.head) ? 1 : (left.head < right.head) ? -1 : 0)
            || ((left.prev > right.prev) ? 1 : (left.prev < right.prev) ? -1 : 0)
            || ((left.next > right.next) ? 1 : (left.next < right.next) ? -1 : 0)
            || ((left.land > right.land) ? 1 : (left.land < right.land) ? -1 : 0);
    }
    $.$hyoo_crowd_unit_compare = $hyoo_crowd_unit_compare;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_node extends $mol_object2 {
        land;
        head;
        constructor(land = new $hyoo_crowd_land, head = '0_0') {
            super();
            this.land = land;
            this.head = head;
        }
        static for(land, head) {
            return new this(land, head);
        }
        static toJSON() {
            return this.name;
        }
        id() {
            return this.head === '0_0'
                ? this.land.id()
                : `${this.land.id()}!${this.head}`;
        }
        world() {
            return this.land.world();
        }
        as(Node) {
            return this.world()?.Fund(Node).Item(`${this.land.id()}!${this.head}`) ?? new Node(this.land, this.head);
        }
        units() {
            return this.land.unit_alives(this.head);
        }
        nodes(Node) {
            const fund = this.world()?.Fund(Node);
            return this.units().map(unit => fund?.Item(`${this.land.id()}!${unit.self}`) ?? new Node(this.land, unit.self));
        }
        virgin() {
            return this.land.unit_list(this.head).length === 0;
        }
        [Symbol.toPrimitive]() {
            return `${this.constructor.name}("${this.land.id()}","${this.head}")`;
        }
        toJSON() {
            return this.id();
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), $mol_dev_format_shade(':'), $mol_dev_format_auto(this.land.unit_list(this.head)));
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_crowd_node.prototype, "units", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crowd_node.prototype, "nodes", null);
    $.$hyoo_crowd_node = $hyoo_crowd_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_reg extends $hyoo_crowd_node {
        value(next) {
            const unit = this.units().at(-1);
            if (next === undefined)
                return unit?.data ?? null;
            if ($mol_compare_deep(unit?.data, next))
                return next;
            this.land.put(this.head, unit?.self ?? this.land.id_new(), '0_0', next);
            return next;
        }
        str(next) {
            return String(this.value(next) ?? '');
        }
        numb(next) {
            return Number(this.value(next));
        }
        bool(next) {
            return Boolean(this.value(next));
        }
        yoke(law = [''], mod = [], add = []) {
            const world = this.world();
            let land_id = $mol_int62_string_ensure(this.value());
            if (land_id)
                return world.land_sync(land_id);
            if (!this.land.allowed_add())
                return null;
            const land = $mol_wire_sync(world).grab(law, mod, add);
            this.value(land.id());
            world.land_init(land);
            return land;
        }
    }
    $.$hyoo_crowd_reg = $hyoo_crowd_reg;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_struct extends $hyoo_crowd_node {
        sub(key, Node) {
            const head = $mol_int62_hash_string(key + '\n' + this.head);
            return this.world()?.Fund(Node).Item(`${this.land.id()}!${head}`) ?? new Node(this.land, head);
        }
        yoke(key, Node, law = [''], mod = [], add = []) {
            const land = this.sub(key, $hyoo_crowd_reg).yoke(law, mod, add);
            return land?.chief.sub(key, Node) ?? null;
        }
    }
    $.$hyoo_crowd_struct = $hyoo_crowd_struct;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_reconcile({ prev, from, to, next, equal, drop, insert, update, replace, }) {
        if (!update)
            update = (next, prev, lead) => prev;
        if (!replace)
            replace = (next, prev, lead) => insert(next, drop(prev, lead));
        if (to > prev.length)
            to = prev.length;
        if (from > to)
            from = to;
        let p = from;
        let n = 0;
        let lead = p ? prev[p - 1] : null;
        while (p < to || n < next.length) {
            if (p < to && n < next.length && equal(next[n], prev[p])) {
                lead = update(next[n], prev[p], lead);
                ++p;
                ++n;
            }
            else if (next.length - n > to - p) {
                lead = insert(next[n], lead);
                ++n;
            }
            else if (next.length - n < to - p) {
                lead = drop(prev[p], lead);
                ++p;
            }
            else {
                lead = replace(next[n], prev[p], lead);
                ++p;
                ++n;
            }
        }
    }
    $.$mol_reconcile = $mol_reconcile;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { unicode_only, line_end, tab, repeat_greedy, optional, forbid_after, force_after, char_only, char_except } = $mol_regexp;
    $.$hyoo_crowd_tokenizer = $mol_regexp.from({
        token: {
            'line-break': line_end,
            'indents': repeat_greedy(tab, 1),
            'emoji': [
                unicode_only('Extended_Pictographic'),
                optional(unicode_only('Emoji_Modifier')),
                repeat_greedy([
                    unicode_only('Emoji_Component'),
                    unicode_only('Extended_Pictographic'),
                    optional(unicode_only('Emoji_Modifier')),
                ]),
            ],
            'link': /\b(https?:\/\/[^\s,.;:!?")]+(?:[,.;:!?")][^\s,.;:!?")]+)+)/,
            'Word': [
                [
                    forbid_after(line_end),
                    unicode_only('White_Space'),
                ],
                repeat_greedy(char_only([
                    unicode_only('General_Category', 'Uppercase_Letter'),
                    unicode_only('Diacritic'),
                    unicode_only('General_Category', 'Number'),
                ]), 1),
                repeat_greedy(char_only([
                    unicode_only('General_Category', 'Lowercase_Letter'),
                    unicode_only('Diacritic'),
                    unicode_only('General_Category', 'Number'),
                ])),
            ],
            'word': [
                [
                    forbid_after(line_end),
                    unicode_only('White_Space'),
                ],
                repeat_greedy(char_only([
                    unicode_only('General_Category', 'Lowercase_Letter'),
                    unicode_only('Diacritic'),
                    unicode_only('General_Category', 'Number'),
                ]), 1),
            ],
            'spaces': [
                forbid_after(line_end),
                repeat_greedy(unicode_only('White_Space'), 1),
                force_after(unicode_only('White_Space')),
            ],
            'space': [
                forbid_after(line_end),
                unicode_only('White_Space'),
                forbid_after([
                    unicode_only('White_Space'),
                    unicode_only('General_Category', 'Uppercase_Letter'),
                    unicode_only('General_Category', 'Lowercase_Letter'),
                    unicode_only('Diacritic'),
                    unicode_only('General_Category', 'Number'),
                ]),
            ],
            'others': [
                repeat_greedy(char_except([
                    unicode_only('General_Category', 'Uppercase_Letter'),
                    unicode_only('General_Category', 'Lowercase_Letter'),
                    unicode_only('Diacritic'),
                    unicode_only('General_Category', 'Number'),
                    unicode_only('White_Space'),
                ]), 1),
            ],
        },
    }).native;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_list extends $hyoo_crowd_node {
        list(next) {
            const units = this.units();
            if (next === undefined) {
                return units.map(unit => unit.data);
            }
            else {
                this.insert(next, 0, units.length);
                return next;
            }
        }
        set(next) {
            return new Set(this.list(next && [...next]));
        }
        insert(next, from = this.units().length, to = from) {
            $mol_reconcile({
                prev: this.units(),
                from,
                to,
                next,
                equal: (next, prev) => $mol_compare_deep(prev.data, next),
                drop: (prev, lead) => this.land.wipe(prev),
                insert: (next, lead) => this.land.put(this.head, this.land.id_new(), lead?.self ?? '0_0', next),
                replace: (next, prev, lead) => this.land.put(prev.head, prev.self, lead?.self ?? '0_0', next),
            });
        }
        move(from, to) {
            const units = this.units();
            const lead = to ? units[to - 1] : null;
            this.land.move(units[from], this.head, lead?.self ?? '0_0');
        }
        cut(seat) {
            return this.land.wipe(this.units()[seat]);
        }
        has(val, next) {
            if (next === undefined) {
                for (const unit of this.units()) {
                    if (unit.data === val)
                        return true;
                }
                return false;
            }
            if (next)
                this.add(val);
            else
                this.drop(val);
            return next;
        }
        add(val) {
            if (this.has(val))
                return;
            this.insert([val]);
        }
        drop(val) {
            for (const unit of this.units()) {
                if (unit.data !== val)
                    continue;
                this.land.wipe(unit);
            }
        }
        node_make(val, Node) {
            this.insert([val]);
            const unit = this.units().at(-1);
            return this.land.node(unit.self, Node);
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_crowd_list.prototype, "set", null);
    $.$hyoo_crowd_list = $hyoo_crowd_list;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_text extends $hyoo_crowd_node {
        text(next) {
            if (next === undefined) {
                return this.str();
            }
            else {
                const prev = this.units();
                const lines = next.match(/.*\n|.+$/g) ?? [];
                $mol_reconcile({
                    prev,
                    from: 0,
                    to: prev.length,
                    next: lines,
                    equal: (next, prev) => {
                        if (typeof prev.data === 'string')
                            return false;
                        return this.land.node(prev.self, $hyoo_crowd_text).str() === next;
                    },
                    drop: (prev, lead) => this.land.wipe(prev),
                    insert: (next, lead) => {
                        const unit = this.land.put(this.head, this.land.id_new(), lead?.self ?? '0_0', []);
                        this.land.node(unit.self, $hyoo_crowd_text).str(next);
                        return unit;
                    },
                    replace: (next, prev, lead) => {
                        this.land.node(prev.self, $hyoo_crowd_text).str(next);
                        return prev;
                    },
                });
                return next;
            }
        }
        str(next) {
            if (next === undefined) {
                let str = '';
                for (const unit of this.units()) {
                    if (typeof unit.data === 'string')
                        str += unit.data;
                    else
                        str += this.land.node(unit.self, $hyoo_crowd_text).str();
                }
                return str;
            }
            else {
                this.write(next, 0, -1);
                return next;
            }
        }
        write(next, str_from = -1, str_to = str_from) {
            const list = this.units();
            let from = str_from < 0 ? list.length : 0;
            let word = '';
            while (from < list.length) {
                word = String(list[from].data);
                if (str_from <= word.length) {
                    next = word.slice(0, str_from) + next;
                    break;
                }
                str_from -= word.length;
                if (str_to > 0)
                    str_to -= word.length;
                from++;
            }
            let to = str_to < 0 ? list.length : from;
            while (to < list.length) {
                word = String(list[to].data);
                to++;
                if (str_to < word.length) {
                    next = next + word.slice(str_to);
                    break;
                }
                str_to -= word.length;
            }
            if (from && from === list.length) {
                --from;
                next = String(list[from].data) + next;
            }
            const words = next.match($hyoo_crowd_tokenizer) ?? [];
            this.as($hyoo_crowd_list).insert(words, from, to);
            return this;
        }
        point_by_offset(offset) {
            let off = offset;
            for (const unit of this.units()) {
                if (typeof unit.data === 'string') {
                    const len = String(unit.data).length;
                    if (off <= len)
                        return [unit.self, off];
                    else
                        off -= len;
                }
                else {
                    const found = this.land.node(unit.self, $hyoo_crowd_text).point_by_offset(off);
                    if (found[0] !== '0_0')
                        return found;
                    off = found[1];
                }
            }
            return ['0_0', off];
        }
        offset_by_point([self, offset]) {
            for (const unit of this.units()) {
                if (unit.self === self)
                    return [self, offset];
                if (typeof unit.data === 'string') {
                    offset += unit.data.length;
                }
                else {
                    const found = this.land.node(unit.self, $hyoo_crowd_text).offset_by_point([self, offset]);
                    if (found[0] !== '0_0')
                        return [self, found[1]];
                    offset = found[1];
                }
            }
            return ['0_0', offset];
        }
        selection(peer, next) {
            const reg = this.land.selection(peer);
            if (next) {
                reg.value(next.map(offset => this.point_by_offset(offset)));
                return next;
            }
            else {
                this.units();
                return reg.value()
                    ?.map(point => this.offset_by_point(point)[1]) ?? [0, 0];
            }
        }
    }
    $.$hyoo_crowd_text = $hyoo_crowd_text;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_fund extends $mol_object {
        world;
        node_class;
        constructor(world, node_class) {
            super();
            this.world = world;
            this.node_class = node_class;
        }
        Item(id) {
            const [land, head] = id.split('!');
            if (!head)
                return this.Item(`${land}!0_0`);
            return this.world.land_sync(land).node(head, this.node_class);
        }
        make(law = [''], mod = [], add = []) {
            const land = $mol_wire_sync(this.world).grab(law, mod, add);
            return this.Item(land.id());
        }
    }
    __decorate([
        $mol_mem_key
    ], $hyoo_crowd_fund.prototype, "Item", null);
    __decorate([
        $mol_action
    ], $hyoo_crowd_fund.prototype, "make", null);
    $.$hyoo_crowd_fund = $hyoo_crowd_fund;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_dict_key = $mol_key;
    class $mol_dict extends Map {
        get(key) {
            return super.get($mol_key(key));
        }
        has(key) {
            return super.has($mol_key(key));
        }
        set(key, value) {
            return super.set($mol_key(key), value);
        }
        delete(key) {
            return super.delete($mol_key(key));
        }
        forEach(back, context) {
            return super.forEach((val, key, dict) => {
                if (typeof key === 'string')
                    key = JSON.parse(key);
                return back.call(this, val, key, dict);
            }, context);
        }
        keys() {
            const iterator = super.keys();
            return {
                [Symbol.iterator]() {
                    return this;
                },
                next() {
                    const iteration = iterator.next();
                    if (iteration.done)
                        return iteration;
                    iteration.value = JSON.parse(iteration.value);
                    return iteration;
                }
            };
        }
        entries() {
            const iterator = super.entries();
            return {
                [Symbol.iterator]() {
                    return this;
                },
                next() {
                    const iteration = iterator.next();
                    if (iteration.done)
                        return iteration;
                    iteration.value = [JSON.parse(iteration.value[0]), iteration.value[1]];
                    return iteration;
                }
            };
        }
        [Symbol.iterator]() {
            return this.entries();
        }
    }
    $.$mol_dict = $mol_dict;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $hyoo_crowd_time_now() {
        return Math.floor(Date.now() / 100) - 1767e7;
    }
    $.$hyoo_crowd_time_now = $hyoo_crowd_time_now;
    function $hyoo_crowd_time_stamp(time) {
        return 1767e9 + time * 100;
    }
    $.$hyoo_crowd_time_stamp = $hyoo_crowd_time_stamp;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_clock extends Map {
        static begin = -1 * 2 ** 30;
        last_time = $hyoo_crowd_clock.begin;
        constructor(entries) {
            super(entries);
            if (!entries)
                return;
            for (const [peer, time] of entries) {
                this.see_time(time);
            }
        }
        sync(right) {
            for (const [peer, time] of right) {
                this.see_peer(peer, time);
            }
        }
        see_time(time) {
            if (time < this.last_time)
                return;
            this.last_time = time;
        }
        see_peer(peer, time) {
            if (!this.fresh(peer, time))
                return;
            this.set(peer, time);
            this.see_time(time);
        }
        see_bin(bin, group) {
            for (let cursor = offset.clocks; cursor < bin.byteLength; cursor += 16) {
                this.see_peer($mol_int62_to_string({
                    lo: bin.getInt32(cursor + 0, true) << 1 >> 1,
                    hi: bin.getInt32(cursor + 4, true) << 1 >> 1,
                }), bin.getInt32(cursor + 8 + 4 * group, true));
            }
        }
        fresh(peer, time) {
            return time > this.time(peer);
        }
        ahead(clock) {
            for (const [peer, time] of this) {
                if (clock.fresh(peer, time))
                    return true;
            }
            return false;
        }
        time(peer) {
            return this.get(peer) ?? $hyoo_crowd_clock.begin;
        }
        now() {
            return $hyoo_crowd_time_now();
        }
        last_stamp() {
            return $hyoo_crowd_time_stamp(this.last_time);
        }
        tick(peer) {
            let time = this.now();
            if (time <= this.last_time) {
                time = this.last_time + 1;
            }
            this.see_peer(peer, time);
            return time;
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), $mol_dev_format_shade(' ' + new Date(this.last_stamp()).toISOString().replace('T', ' ')));
        }
    }
    $.$hyoo_crowd_clock = $hyoo_crowd_clock;
    const offset = {
        land_lo: 0,
        land_hi: 4,
        count: 8,
        clocks: 16,
    };
    class $hyoo_crowd_clock_bin extends DataView {
        static from(land_id, clocks, count) {
            const size = offset.clocks + clocks[0].size * 16;
            const mem = new Uint8Array(size);
            const bin = new $hyoo_crowd_clock_bin(mem.buffer);
            const land = $mol_int62_from_string(land_id);
            bin.setInt32(offset.land_lo, land.lo ^ (1 << 31), true);
            bin.setInt32(offset.land_hi, land.hi, true);
            bin.setInt32(offset.count, count, true);
            let cursor = offset.clocks;
            for (const [peer_id, time] of clocks[0]) {
                const peer = $mol_int62_from_string(peer_id);
                bin.setInt32(cursor + 0, peer.lo, true);
                bin.setInt32(cursor + 4, peer.hi, true);
                bin.setInt32(cursor + 8, time, true);
                bin.setInt32(cursor + 12, clocks[1].get(peer_id) ?? $hyoo_crowd_clock.begin, true);
                cursor += 16;
            }
            return bin;
        }
        land() {
            return $mol_int62_to_string({
                lo: this.getInt32(offset.land_lo, true) << 1 >> 1,
                hi: this.getInt32(offset.land_hi, true) << 1 >> 1,
            });
        }
        count() {
            return this.getInt32(offset.count, true);
        }
    }
    $.$hyoo_crowd_clock_bin = $hyoo_crowd_clock_bin;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_world extends $mol_object {
        peer;
        constructor(peer) {
            super();
            this.peer = peer;
            if (peer)
                this._knights.set(peer.id, peer);
        }
        lands_pub = new $mol_wire_pub;
        _lands = new Map();
        get lands() {
            this.lands_pub.promote();
            return this._lands;
        }
        land_init(id) { }
        land(id) {
            const exists = this._lands.get(id);
            if (exists)
                return exists;
            const land = $hyoo_crowd_land.make({
                id: $mol_const(id),
                world: $mol_const(this),
            });
            this._lands.set(id, land);
            this.lands_pub.emit();
            return land;
        }
        land_sync(id) {
            const land = this.land(id);
            this.land_init(land);
            return land;
        }
        Fund(Item) {
            return new $hyoo_crowd_fund(this, Item);
        }
        home() {
            return this.land_sync(this.peer.id);
        }
        _knights = new $mol_dict();
        _signs = new WeakMap();
        async grab(law = [''], mod = [], add = []) {
            const knight = await $hyoo_crowd_peer.generate();
            this._knights.set(knight.id, knight);
            const land_inner = this.land(knight.id);
            const land_outer = $hyoo_crowd_land.make({
                id: $mol_const(knight.id),
                peer: $mol_const(knight),
            });
            land_outer.join();
            for (const peer of law)
                land_outer.level(peer || this.peer.id, $hyoo_crowd_peer_level.law);
            for (const peer of mod)
                land_outer.level(peer || this.peer.id, $hyoo_crowd_peer_level.mod);
            for (const peer of add)
                land_outer.level(peer || this.peer.id, $hyoo_crowd_peer_level.add);
            land_inner.apply(land_outer.delta());
            return land_inner;
        }
        sign_units(units) {
            return Promise.all(units.map(async (unit) => {
                if (unit.bin)
                    return unit;
                const bin = $hyoo_crowd_unit_bin.from_unit(unit);
                let sign = this._signs.get(unit);
                if (!sign) {
                    const knight = this._knights.get(unit.auth);
                    sign = new Uint8Array(await knight.key_private.sign(bin.sens()));
                }
                bin.sign(sign);
                unit.bin = bin;
                this._signs.set(unit, sign);
                return unit;
            }));
        }
        delta_land(land, clocks = [new $hyoo_crowd_clock, new $hyoo_crowd_clock]) {
            return this.sign_units(land.delta(clocks));
        }
        async delta_batch(land, clocks = [new $hyoo_crowd_clock, new $hyoo_crowd_clock]) {
            const units = await this.delta_land(land, clocks);
            let size = 0;
            const bins = [];
            for (const unit of units) {
                const bin = unit.bin;
                bins.push(bin);
                size += bin.byteLength;
            }
            const batch = new Uint8Array(size);
            let offset = 0;
            for (const bin of bins) {
                batch.set(new Uint8Array(bin.buffer, bin.byteOffset, bin.byteLength), offset);
                offset += bin.byteLength;
            }
            return batch;
        }
        async *delta(clocks = new Map()) {
            for (const land of this.lands.values()) {
                const batch = await this.delta_batch(land, clocks.get(land.id()));
                if (batch.length)
                    yield batch;
            }
        }
        async merge(donor) {
            for await (const batch of donor.delta())
                await this.apply(batch);
        }
        async apply(delta) {
            const units = [];
            let bin_offset = 0;
            while (bin_offset < delta.byteLength) {
                const buf = new Int16Array(delta.buffer, delta.byteOffset + bin_offset);
                const bin = $hyoo_crowd_unit_bin.from_buffer(buf);
                units.push(bin.unit());
                bin_offset += bin.size();
            }
            const land = this.land(units[0].land);
            const report = await this.audit_delta(land, units);
            land.apply(report.allow);
            return report;
        }
        async audit_delta(land, delta) {
            const all = new Map();
            const desync = 60 * 60 * 10;
            const deadline = land.clock_data.now() + desync;
            const get_unit = (id) => {
                return all.get(id) ?? land._unit_all.get(id);
            };
            const get_level = (head, self) => {
                return get_unit(`${head}!${self}`)?.level()
                    ?? get_unit(`${head}!0_0`)?.level()
                    ?? $hyoo_crowd_peer_level.get;
            };
            const check_unit = async (unit) => {
                const bin = unit.bin;
                if (unit.time > deadline)
                    return 'Far future';
                const auth_unit = get_unit(`${unit.auth}!${unit.auth}`);
                const kind = unit.kind();
                switch (kind) {
                    case $hyoo_crowd_unit_kind.grab:
                    case $hyoo_crowd_unit_kind.join: {
                        const key_str = auth_unit?.data ?? unit.data;
                        if (typeof key_str !== 'string')
                            return 'No join key';
                        const self = $mol_int62_hash_string(key_str);
                        if (unit.self !== self)
                            return 'Alien join key';
                        const key = await $mol_crypto_auditor_public.from(key_str);
                        const sign = bin.sign();
                        const valid = await key.verify(bin.sens(), sign);
                        if (!valid)
                            return 'Wrong join sign';
                        all.set(`${unit.head}!${unit.auth}`, unit);
                        this._signs.set(unit, sign);
                        return '';
                    }
                    case $hyoo_crowd_unit_kind.give: {
                        const lord_level = get_level(land.id(), unit.auth);
                        if (lord_level < $hyoo_crowd_peer_level.law)
                            return `Level too low`;
                        const peer_level = get_level(land.id(), unit.self);
                        if (peer_level > unit.level())
                            return `Cancel unsupported`;
                        break;
                    }
                    case $hyoo_crowd_unit_kind.data: {
                        const level = get_level(land.id(), unit.auth);
                        if (level >= $hyoo_crowd_peer_level.mod)
                            break;
                        if (level === $hyoo_crowd_peer_level.add) {
                            const exists = get_unit(`${unit.head}!${unit.self}`);
                            if (!exists)
                                break;
                            if (exists.auth === unit.auth)
                                break;
                        }
                        return `Level too low`;
                    }
                }
                const key_str = auth_unit?.data;
                if (typeof key_str !== 'string')
                    return 'No auth key';
                const key = await $mol_crypto_auditor_public.from(key_str);
                const sign = bin.sign();
                const valid = await key.verify(bin.sens(), sign);
                if (!valid)
                    return 'Wrong auth sign';
                all.set(`${unit.head}!${unit.self}`, unit);
                this._signs.set(unit, sign);
                return '';
            };
            const allow = [];
            const forbid = new Map();
            const proceed_unit = async (unit) => {
                const error = await check_unit(unit);
                if (error)
                    forbid.set(unit, error);
                else
                    allow.push(unit);
            };
            const tasks = [];
            for (const unit of delta) {
                const task = proceed_unit(unit);
                tasks.push(task);
                if (unit.group() === $hyoo_crowd_unit_group.auth)
                    await task;
            }
            await Promise.all(tasks);
            return { allow, forbid };
        }
    }
    __decorate([
        $mol_mem_key
    ], $hyoo_crowd_world.prototype, "Fund", null);
    $.$hyoo_crowd_world = $hyoo_crowd_world;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_land extends $mol_object {
        id() {
            return $mol_int62_to_string($mol_int62_random());
        }
        toJSON() {
            return this.id();
        }
        peer() {
            return this.world()?.peer;
        }
        peer_id() {
            return this.peer()?.id ?? '0_0';
        }
        world() {
            return null;
        }
        get clock_auth() {
            this.pub.promote();
            return this._clocks[$hyoo_crowd_unit_group.auth];
        }
        get clock_data() {
            this.pub.promote();
            return this._clocks[$hyoo_crowd_unit_group.data];
        }
        get clocks() {
            this.pub.promote();
            return this._clocks;
        }
        get clocks_bin() {
            return new Uint8Array($hyoo_crowd_clock_bin.from(this.id(), this._clocks, this._unit_all.size).buffer);
        }
        pub = new $mol_wire_pub;
        _clocks = [new $hyoo_crowd_clock, new $hyoo_crowd_clock];
        _unit_all = new Map();
        unit(head, self) {
            return this._unit_all.get(`${head}!${self}`);
        }
        _unit_lists = new Map();
        _unit_alives = new Map();
        size() {
            return this._unit_all.size;
        }
        unit_list(head) {
            let kids = this._unit_lists.get(head);
            if (!kids)
                this._unit_lists.set(head, kids = Object.assign([], { dirty: false }));
            return kids;
        }
        unit_alives(head) {
            this.pub.promote();
            let kids = this._unit_alives.get(head);
            if (!kids) {
                const all = this.unit_list(head);
                if (all.dirty)
                    this.resort(head);
                kids = all.filter(kid => kid.data !== null);
                this._unit_alives.set(head, kids);
            }
            return kids;
        }
        node(head, Node) {
            return new Node(this, head);
        }
        chief = this.node('0_0', $hyoo_crowd_struct);
        id_new() {
            for (let i = 0; i < 1000; ++i) {
                const id = $mol_int62_to_string($mol_int62_random());
                if (id === '0_0')
                    continue;
                if (id === this.id())
                    continue;
                if (this._unit_lists.has(id))
                    continue;
                return id;
            }
            throw new Error(`Can't generate ID after 1000 times`);
        }
        fork(auth) {
            const fork = $hyoo_crowd_land.make({
                id: $mol_const(this.id()),
                peer: $mol_const(auth),
            });
            return fork.apply(this.delta());
        }
        delta(clocks = [new $hyoo_crowd_clock, new $hyoo_crowd_clock]) {
            this.pub.promote();
            const delta = [];
            for (const unit of this._unit_all.values()) {
                const time = clocks[unit.group()].time(unit.auth);
                if (unit.time <= time)
                    continue;
                delta.push(unit);
            }
            delta.sort($hyoo_crowd_unit_compare);
            return delta;
        }
        resort(head) {
            const kids = this._unit_lists.get(head);
            if (!kids.dirty)
                return kids;
            if (kids.length < 2) {
                kids.dirty = true;
                return kids;
            }
            const queue = kids.splice(0).sort((left, right) => -$hyoo_crowd_unit_compare(left, right));
            const locate = (self) => {
                for (let i = kids.length - 1; i >= 0; --i) {
                    if (kids[i].self === self)
                        return i;
                }
                return -1;
            };
            while (queue.length) {
                kids.push(queue.pop());
                for (let cursor = queue.length - 1; cursor >= 0; --cursor) {
                    const kid = queue[cursor];
                    let index = 0;
                    if (kid.prev !== '0_0') {
                        index = locate(kid.prev) + 1;
                        if (!index)
                            continue;
                    }
                    while (kids[index] && ($hyoo_crowd_unit_compare(kids[index], kid) > 0))
                        ++index;
                    const exists = locate(kid.self);
                    if (index === exists) {
                        if (cursor === queue.length - 1)
                            queue.pop();
                        continue;
                    }
                    if (exists >= 0) {
                        kids.splice(exists, 1);
                        if (exists < index)
                            --index;
                    }
                    kids.splice(index, 0, kid);
                    if (cursor === queue.length - 1)
                        queue.pop();
                    cursor = queue.length;
                }
            }
            kids.dirty = false;
            return kids;
        }
        apply(delta) {
            for (const next of delta) {
                this._clocks[next.group()].see_peer(next.auth, next.time);
                const kids = this.unit_list(next.head);
                const next_id = `${next.head}!${next.self}`;
                let prev = this._unit_all.get(next_id);
                if (prev) {
                    if ($hyoo_crowd_unit_compare(prev, next) > 0)
                        continue;
                    kids[kids.indexOf(prev)] = next;
                }
                else {
                    kids.push(next);
                }
                this._unit_all.set(next_id, next);
                if (kids.length > 1)
                    kids.dirty = true;
                this._unit_alives.set(next.head, undefined);
            }
            this.pub.emit();
            return this;
        }
        _joined = false;
        join() {
            if (this._joined)
                return;
            const auth = this.peer();
            if (!auth)
                return;
            if (!auth.key_public_serial)
                return;
            const auth_id = `${auth.id}!${auth.id}`;
            const auth_unit = this._unit_all.get(auth_id);
            if (auth_unit?.data)
                return this._joined = true;
            const time = this._clocks[$hyoo_crowd_unit_group.auth].tick(auth.id);
            const join_unit = new $hyoo_crowd_unit(this.id(), auth.id, auth.id, auth.id, '0_0', '0_0', time, auth.key_public_serial, null);
            this._unit_all.set(auth_id, join_unit);
            this._joined = true;
            this.pub.emit();
        }
        leave() {
            const auth = this.peer();
            if (!auth)
                return;
            if (!auth.key_public_serial)
                return;
            const auth_id = `${auth.id}!${auth.id}`;
            const auth_unit = this._unit_all.get(auth_id);
            if (!auth_unit || !auth_unit.data)
                return this._joined = false;
            const time = this._clocks[$hyoo_crowd_unit_group.auth].tick(auth.id);
            const join_unit = new $hyoo_crowd_unit(this.id(), auth.id, auth.id, auth.id, '0_0', '0_0', time, null, null);
            this._unit_all.set(auth_id, join_unit);
            this._joined = false;
            this.pub.emit();
        }
        allowed_add(peer = this.peer().id) {
            return this.level(peer) >= $hyoo_crowd_peer_level.add;
        }
        allowed_mod(peer = this.peer().id) {
            return this.level(peer) >= $hyoo_crowd_peer_level.mod;
        }
        allowed_law(peer = this.peer().id) {
            return this.level(peer) >= $hyoo_crowd_peer_level.law;
        }
        level_base(next) {
            this.level('0_0', next);
        }
        level(peer, next) {
            if (next)
                this.join();
            else
                this.pub.promote();
            if (!peer)
                peer = this.peer_id();
            const level_id = `${this.id()}!${peer}`;
            const prev = this._unit_all.get(level_id)?.level()
                ?? this._unit_all.get(`${this.id()}!0_0`)?.level()
                ?? (this.id() === peer ? $hyoo_crowd_peer_level.law : $hyoo_crowd_peer_level.get);
            if (next === undefined)
                return prev;
            if (next <= prev)
                return prev;
            if (!this.allowed_law())
                return prev;
            const time = this._clocks[$hyoo_crowd_unit_group.auth].tick(peer);
            const auth = this.peer_id();
            const level_unit = new $hyoo_crowd_unit(this.id(), auth, this.id(), peer, '0_0', '0_0', time, next, null);
            this._unit_all.set(level_id, level_unit);
            this.pub.emit();
            return next;
        }
        grabbed() {
            if (this.id() === this.peer_id())
                return true;
            this.pub.promote();
            return this._unit_all.size > 0;
        }
        peers() {
            this.pub.promote();
            const lords = [];
            for (const unit of this._unit_all.values()) {
                switch (unit.kind()) {
                    case $hyoo_crowd_unit_kind.data: continue;
                    case $hyoo_crowd_unit_kind.join: continue;
                    default: lords.push(unit.self);
                }
            }
            return lords;
        }
        residents() {
            this.pub.promote();
            const lords = [];
            for (const unit of this._unit_all.values()) {
                if (unit.data === null)
                    continue;
                if (unit.kind() !== $hyoo_crowd_unit_kind.join)
                    continue;
                lords.push(unit.self);
            }
            return lords;
        }
        authors() {
            this.pub.promote();
            const authors = new Set();
            for (const unit of this._unit_all.values()) {
                if (unit.kind() !== $hyoo_crowd_unit_kind.data)
                    continue;
                if (unit.data === null)
                    continue;
                authors.add(unit.auth);
            }
            return authors;
        }
        steal_rights(donor) {
            if (!this.allowed_law())
                return;
            for (const peer of donor.peers()) {
                this.level(peer, donor.level(peer));
            }
        }
        first_stamp() {
            this.pub.promote();
            const grab_unit = this._unit_all.get(`${this.id()}!${this.id()}`);
            return (grab_unit && $hyoo_crowd_time_stamp(grab_unit.time)) ?? null;
        }
        last_stamp() {
            this.pub.promote();
            return this.clock_data.last_stamp();
        }
        selection(peer) {
            return this.world().land_sync(peer).chief.sub('$hyoo_crowd_land..selection', $hyoo_crowd_reg);
        }
        put(head, self, prev, data) {
            this.join();
            const old_id = `${head}!${self}`;
            let unit_old = this._unit_all.get(old_id);
            let unit_prev = prev !== '0_0'
                ? this._unit_all.get(`${head}!${prev}`)
                : null;
            const unit_list = this.unit_list(head);
            if (unit_old)
                unit_list.splice(unit_list.indexOf(unit_old), 1);
            const seat = unit_prev ? unit_list.indexOf(unit_prev) + 1 : 0;
            const next = unit_list[seat]?.self ?? '0_0';
            const auth = this.peer_id();
            const time = this._clocks[$hyoo_crowd_unit_group.data].tick(auth);
            const unit_new = new $hyoo_crowd_unit(this.id(), auth, head, self, next, prev, time, data, null);
            this._unit_all.set(old_id, unit_new);
            unit_list.splice(seat, 0, unit_new);
            this._unit_alives.set(head, undefined);
            this.pub.emit();
            return unit_new;
        }
        wipe(unit) {
            if (unit.data === null)
                return unit;
            const unit_list = this.unit_list(unit.head);
            const seat = unit_list.indexOf(unit);
            const prev = seat > 0 ? unit_list[seat - 1].self : seat < 0 ? unit.prev : '0_0';
            return this.put(unit.head, unit.self, prev, null);
        }
        move(unit, head, prev) {
            const unit_list = this.unit_list(unit.head);
            const seat = unit_list.indexOf(unit);
            const next = unit_list[seat + 1];
            this.wipe(unit);
            if (next)
                this.put(next.head, next.self, unit_list[unit_list.indexOf(next) - 2]?.self ?? '0_0', next.data);
            this.put(head, unit.self, prev, unit.data);
        }
        insert(unit, head, seat) {
            const list = this.unit_list(head);
            const prev = seat ? list[seat - 1].self : '0_0';
            return this.move(unit, head, prev);
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_native(this);
        }
    }
    __decorate([
        $mol_memo.method
    ], $hyoo_crowd_land.prototype, "id", null);
    $.$hyoo_crowd_land = $hyoo_crowd_land;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_meta_model extends $hyoo_crowd_struct {
        editable() {
            return this.land.allowed_mod();
        }
        editors() {
            return this.land.peers();
        }
        title_node() {
            return this.sub('title', $hyoo_crowd_text);
        }
        title(next) {
            return this.title_node().str(next);
        }
        title_selection(next) {
            return this.title_node().selection(this.land.peer().id, next);
        }
        steal_rights(node) {
            this.land.steal_rights(node.land);
        }
        whole(next) {
            const reg = this.sub('$hyoo_meta_whole', $hyoo_crowd_reg);
            const id = $mol_int62_string_ensure(reg.str(next?.id()));
            return id ? this.world().Fund($hyoo_meta_model).Item(id) : this;
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_meta_model.prototype, "editable", null);
    __decorate([
        $mol_mem
    ], $hyoo_meta_model.prototype, "editors", null);
    __decorate([
        $mol_mem
    ], $hyoo_meta_model.prototype, "title_node", null);
    __decorate([
        $mol_mem
    ], $hyoo_meta_model.prototype, "title", null);
    __decorate([
        $mol_mem
    ], $hyoo_meta_model.prototype, "title_selection", null);
    __decorate([
        $mol_action
    ], $hyoo_meta_model.prototype, "steal_rights", null);
    __decorate([
        $mol_mem
    ], $hyoo_meta_model.prototype, "whole", null);
    $.$hyoo_meta_model = $hyoo_meta_model;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_dict extends $hyoo_crowd_node {
        keys(next) {
            const prev = this.units();
            if (!next)
                return prev.map(unit => String(unit.data));
            $mol_reconcile({
                prev,
                from: 0,
                to: prev.length,
                next,
                equal: (next, prev) => prev.data === next,
                drop: (prev, lead) => this.land.wipe(prev),
                insert: (next, lead) => this.land.put(this.head, $mol_int62_hash_string(next + '\n' + this.head), lead?.self ?? '0_0', next),
            });
            return next;
        }
        sub(key, Node) {
            this.add(key);
            return new Node(this.land, $mol_int62_hash_string(key + '\n' + this.head));
        }
        has(key) {
            for (const unit of this.units()) {
                if (unit.data === key)
                    return true;
            }
            return false;
        }
        add(key) {
            if (this.has(key))
                return;
            this.keys([...this.keys(), key]);
        }
        drop(key) {
            for (const unit of this.units()) {
                if (unit.data !== key)
                    continue;
                this.land.wipe(unit);
            }
        }
    }
    $.$hyoo_crowd_dict = $hyoo_crowd_dict;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_blob = ($node.buffer?.Blob ?? $mol_dom_context.Blob);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crowd_blob extends $hyoo_crowd_list {
        uri() {
            return URL.createObjectURL(this.blob());
        }
        type(next) {
            return this.as($hyoo_crowd_struct).sub('type', $hyoo_crowd_reg).str(next);
        }
        blob(next) {
            if (next) {
                this.buffer(new Uint8Array($mol_wire_sync(next).arrayBuffer()), next.type);
                return next;
            }
            return new $mol_blob(this.list(), {
                type: this.type(),
            });
        }
        buffer(next, type = 'application/octet-stream') {
            if (next) {
                const chunks = [];
                let offset = 0;
                while (offset < next.byteLength) {
                    const cut = offset + 2 ** 15;
                    chunks.push(next.slice(offset, cut));
                    offset = cut;
                }
                this.list(chunks);
                this.type(type);
                return next;
            }
            else {
                const chunks = this.list();
                const size = chunks.reduce((sum, chunk) => sum + chunk.byteLength, 0);
                const res = new Uint8Array(size);
                let offset = 0;
                for (const chunk of chunks) {
                    res.set(chunk, offset);
                    offset += chunk.byteLength;
                }
                return res;
            }
        }
        str(next, type = 'text/plain') {
            if (next === undefined) {
                return $mol_charset_decode(this.buffer());
            }
            else {
                this.buffer($mol_charset_encode(next));
                this.type(type);
                return next;
            }
        }
        json(next, type = 'application/json') {
            if (next === undefined) {
                return JSON.parse(this.str());
            }
            else {
                this.str(JSON.stringify(next), type);
                return next;
            }
        }
    }
    $.$hyoo_crowd_blob = $hyoo_crowd_blob;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_time_base {
        static patterns = {};
        static formatter(pattern) {
            if (this.patterns[pattern])
                return this.patterns[pattern];
            var tokens = Object.keys(this.patterns)
                .sort()
                .reverse()
                .map((token) => token.replace(/([-+*.\[\]()\^])/g, '\\$1'));
            var lexer = RegExp('(.*?)(' + tokens.join('|') + '|$)', 'g');
            var funcs = [];
            pattern.replace(lexer, (str, text, token) => {
                if (text)
                    funcs.push(() => text);
                if (token)
                    funcs.push(this.patterns[token]);
                return str;
            });
            return this.patterns[pattern] = (arg) => {
                return funcs.reduce((res, func) => res + func(arg), '');
            };
        }
        toString(pattern) {
            const Base = this.constructor;
            const formatter = Base.formatter(pattern);
            return formatter(this);
        }
    }
    $.$mol_time_base = $mol_time_base;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_time_duration extends $mol_time_base {
        constructor(config = 0) {
            super();
            if (typeof config === 'number') {
                if (!Number.isFinite(config))
                    throw new RangeError(`Wrong ms count`);
                this.second = config / 1000;
                return;
            }
            if (typeof config === 'string') {
                if (config === 'Z') {
                    this.hour = 0;
                    this.minute = 0;
                    return;
                }
                duration: {
                    const parser = /^P(?:([+-]?\d+(?:\.\d+)?)Y)?(?:([+-]?\d+(?:\.\d+)?)M)?(?:([+-]?\d+(?:\.\d+)?)D)?(?:T(?:([+-]?\d+(?:\.\d+)?)h)?(?:([+-]?\d+(?:\.\d+)?)m)?(?:([+-]?\d+(?:\.\d+)?)s)?)?$/i;
                    const found = parser.exec(config);
                    if (!found)
                        break duration;
                    if (found[1])
                        this.year = Number(found[1]);
                    if (found[2])
                        this.month = Number(found[2]);
                    if (found[3])
                        this.day = Number(found[3]);
                    if (found[4])
                        this.hour = Number(found[4]);
                    if (found[5])
                        this.minute = Number(found[5]);
                    if (found[6])
                        this.second = Number(found[6]);
                    return;
                }
                offset: {
                    var parser = /^[+-](\d\d)(?::?(\d\d))?$/i;
                    var found = parser.exec(config);
                    if (!found)
                        break offset;
                    if (found[1])
                        this.hour = Number(found[1]);
                    if (found[2])
                        this.minute = Number(found[2]);
                    return;
                }
                throw new Error(`Can not parse time duration (${config})`);
            }
            this.year = config.year || 0;
            this.month = config.month || 0;
            this.day = config.day || 0;
            this.hour = config.hour || 0;
            this.minute = config.minute || 0;
            this.second = config.second || 0;
        }
        year = 0;
        month = 0;
        day = 0;
        hour = 0;
        minute = 0;
        second = 0;
        get normal() {
            let second = this.second ?? 0;
            let minute = this.minute ?? 0;
            let hour = this.hour ?? 0;
            let day = this.day ?? 0;
            minute += Math.floor(second / 60);
            second = second % 60;
            hour += Math.floor(minute / 60);
            minute = minute % 60;
            day += Math.floor(hour / 24);
            hour = hour % 24;
            return new $mol_time_duration({
                year: this.year,
                month: this.month,
                day: day,
                hour: hour,
                minute: minute,
                second: second,
            });
        }
        summ(config) {
            const duration = new $mol_time_duration(config);
            return new $mol_time_duration({
                year: this.year + duration.year,
                month: this.month + duration.month,
                day: this.day + duration.day,
                hour: this.hour + duration.hour,
                minute: this.minute + duration.minute,
                second: this.second + duration.second,
            });
        }
        mult(numb) {
            return new $mol_time_duration({
                year: this.year && this.year * numb,
                month: this.month && this.month * numb,
                day: this.day && this.day * numb,
                hour: this.hour && this.hour * numb,
                minute: this.minute && this.minute * numb,
                second: this.second && this.second * numb,
            });
        }
        count(config) {
            const duration = new $mol_time_duration(config);
            return this.valueOf() / duration.valueOf();
        }
        valueOf() {
            var day = this.year * 365 + this.month * 30.4 + this.day;
            var second = ((day * 24 + this.hour) * 60 + this.minute) * 60 + this.second;
            return second * 1000;
        }
        toJSON() { return this.toString(); }
        toString(pattern = 'P#Y#M#DT#h#m#s') {
            return super.toString(pattern);
        }
        [Symbol.toPrimitive](mode) {
            return mode === 'number' ? this.valueOf() : this.toString();
        }
        static patterns = {
            '#Y': (duration) => {
                if (!duration.year)
                    return '';
                return duration.year + 'Y';
            },
            '#M': (duration) => {
                if (!duration.month)
                    return '';
                return duration.month + 'M';
            },
            '#D': (duration) => {
                if (!duration.day)
                    return '';
                return duration.day + 'D';
            },
            '#h': (duration) => {
                if (!duration.hour)
                    return '';
                return duration.hour + 'H';
            },
            '#m': (duration) => {
                if (!duration.minute)
                    return '';
                return duration.minute + 'M';
            },
            '#s': (duration) => {
                if (!duration.second)
                    return '';
                return duration.second + 'S';
            },
            'hh': (moment) => {
                if (moment.hour == null)
                    return '';
                return String(100 + moment.hour).slice(1);
            },
            'h': (moment) => {
                if (moment.hour == null)
                    return '';
                return String(moment.hour);
            },
            ':mm': (moment) => {
                if (moment.minute == null)
                    return '';
                return ':' + $mol_time_moment.patterns['mm'](moment);
            },
            'mm': (moment) => {
                if (moment.minute == null)
                    return '';
                return String(100 + moment.minute).slice(1);
            },
            'm': (moment) => {
                if (moment.minute == null)
                    return '';
                return String(moment.minute);
            },
            ':ss': (moment) => {
                if (moment.second == null)
                    return '';
                return ':' + $mol_time_moment.patterns['ss'](moment);
            },
            'ss': (moment) => {
                if (moment.second == null)
                    return '';
                return String(100 + moment.second | 0).slice(1);
            },
            's': (moment) => {
                if (moment.second == null)
                    return '';
                return String(moment.second | 0);
            },
            '.sss': (moment) => {
                if (moment.second == null)
                    return '';
                return '.' + $mol_time_moment.patterns['sss'](moment);
            },
            'sss': (moment) => {
                if (moment.second == null)
                    return '';
                const millisecond = (moment.second - Math.trunc(moment.second)).toFixed(3);
                return millisecond.slice(2);
            },
        };
    }
    $.$mol_time_duration = $mol_time_duration;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $mol_time_moment_weekdays;
    (function ($mol_time_moment_weekdays) {
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["monday"] = 0] = "monday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["tuesday"] = 1] = "tuesday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["wednesday"] = 2] = "wednesday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["thursday"] = 3] = "thursday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["friday"] = 4] = "friday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["saturday"] = 5] = "saturday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["sunday"] = 6] = "sunday";
    })($mol_time_moment_weekdays = $.$mol_time_moment_weekdays || ($.$mol_time_moment_weekdays = {}));
    function numb(str, max) {
        const numb = Number(str);
        if (numb < max)
            return numb;
        $mol_fail(new Error(`Wrong time component ${str}`));
    }
    class $mol_time_moment extends $mol_time_base {
        constructor(config = new Date) {
            super();
            if (typeof config === 'number') {
                config = new Date(config);
                if (Number.isNaN(config.valueOf()))
                    throw new RangeError(`Wrong ms count`);
            }
            if (typeof config === 'string') {
                const parsed = /^(?:(\d\d?\d?\d?)(?:-?(\d\d?)(?:-?(\d\d?))?)?)?(?:[T ](?:(\d\d?)(?::?(\d\d?)(?::?(\d\d?(?:\.\d+)?))?)?)?(Z|[\+\-]\d\d?(?::?(?:\d\d?)?)?)?)?$/.exec(config);
                if (!parsed)
                    throw new Error(`Can not parse time moment (${config})`);
                if (parsed[1])
                    this.year = numb(parsed[1], 9999);
                if (parsed[2])
                    this.month = numb(parsed[2], 13) - 1;
                if (parsed[3])
                    this.day = numb(parsed[3], 32) - 1;
                if (parsed[4])
                    this.hour = numb(parsed[4], 60);
                if (parsed[5])
                    this.minute = numb(parsed[5], 60);
                if (parsed[6])
                    this.second = numb(parsed[6], 60);
                if (parsed[7])
                    this.offset = new $mol_time_duration(parsed[7]);
                return;
            }
            if (config instanceof Date) {
                this.year = config.getFullYear();
                this.month = config.getMonth();
                this.day = config.getDate() - 1;
                this.hour = config.getHours();
                this.minute = config.getMinutes();
                this.second = config.getSeconds() + config.getMilliseconds() / 1000;
                const offset = -config.getTimezoneOffset();
                this.offset = new $mol_time_duration({
                    hour: (offset < 0) ? Math.ceil(offset / 60) : Math.floor(offset / 60),
                    minute: offset % 60
                });
                return;
            }
            this.year = config.year;
            this.month = config.month;
            this.day = config.day;
            this.hour = config.hour;
            this.minute = config.minute;
            this.second = config.second;
            this.offset = config.offset == null ? config.offset : new $mol_time_duration(config.offset);
        }
        year;
        month;
        day;
        hour;
        minute;
        second;
        offset;
        get weekday() {
            return (this.native.getDay() + 6) % 7;
        }
        _native;
        get native() {
            if (this._native)
                return this._native;
            const second = Math.floor(this.second ?? 0);
            const native = new Date(this.year ?? 0, this.month ?? 0, (this.day ?? 0) + 1, this.hour ?? 0, this.minute ?? 0, second, Math.floor(((this.second ?? 0) - second) * 1000));
            const offset = -native.getTimezoneOffset();
            shift: if (this.offset) {
                const target = this.offset.count('PT1m');
                if (target === offset)
                    break shift;
                native.setMinutes(native.getMinutes() + offset - target);
            }
            return this._native = native;
        }
        _normal;
        get normal() {
            if (this._normal)
                return this._normal;
            const moment = new $mol_time_moment(this.native).toOffset(this.offset);
            return this._normal = new $mol_time_moment({
                year: this.year === undefined ? undefined : moment.year,
                month: this.month === undefined ? undefined : moment.month,
                day: this.day === undefined ? undefined : moment.day,
                hour: this.hour === undefined ? undefined : moment.hour,
                minute: this.minute === undefined ? undefined : moment.minute,
                second: this.second === undefined ? undefined : moment.second,
                offset: this.offset === undefined ? undefined : moment.offset,
            });
        }
        merge(config) {
            const moment = new $mol_time_moment(config);
            return new $mol_time_moment({
                year: moment.year === undefined ? this.year : moment.year,
                month: moment.month === undefined ? this.month : moment.month,
                day: moment.day === undefined ? this.day : moment.day,
                hour: moment.hour === undefined ? this.hour : moment.hour,
                minute: moment.minute === undefined ? this.minute : moment.minute,
                second: moment.second === undefined ? this.second : moment.second,
                offset: moment.offset === undefined ? this.offset : moment.offset,
            });
        }
        shift(config) {
            const duration = new $mol_time_duration(config);
            const moment = new $mol_time_moment().merge({
                year: this.year ?? 0,
                month: this.month ?? 0,
                day: this.day ?? 0,
                hour: this.hour ?? 0,
                minute: this.minute ?? 0,
                second: this.second ?? 0,
                offset: this.offset ?? 0
            });
            const second = moment.second + (duration.second ?? 0);
            const native = new Date(moment.year + (duration.year ?? 0), moment.month + (duration.month ?? 0), moment.day + 1 + (duration.day ?? 0), moment.hour + (duration.hour ?? 0), moment.minute + (duration.minute ?? 0), Math.floor(second), (second - Math.floor(second)) * 1000);
            if (isNaN(native.valueOf()))
                throw new Error('Wrong time');
            return new $mol_time_moment({
                year: this.year === undefined ? undefined : native.getFullYear(),
                month: this.month === undefined ? undefined : native.getMonth(),
                day: this.day === undefined ? undefined : native.getDate() - 1,
                hour: this.hour === undefined ? undefined : native.getHours(),
                minute: this.minute === undefined ? undefined : native.getMinutes(),
                second: this.second === undefined ? undefined : native.getSeconds() + native.getMilliseconds() / 1000,
                offset: this.offset,
            });
        }
        mask(config) {
            const mask = new $mol_time_moment(config);
            return new $mol_time_moment({
                year: mask.year === undefined ? undefined : this.year,
                month: mask.month === undefined ? undefined : this.month,
                day: mask.day === undefined ? undefined : this.day,
                hour: mask.hour === undefined ? undefined : this.hour,
                minute: mask.minute === undefined ? undefined : this.minute,
                second: mask.second === undefined ? undefined : this.second,
                offset: mask.offset === undefined ? undefined : this.offset,
            });
        }
        toOffset(config = new $mol_time_moment().offset) {
            const duration = new $mol_time_duration(config);
            const offset = this.offset || new $mol_time_moment().offset;
            let with_time = new $mol_time_moment('0001-01-01T00:00:00').merge(this);
            const moment = with_time.shift(duration.summ(offset.mult(-1)));
            return moment.merge({ offset: duration });
        }
        valueOf() { return this.native.getTime(); }
        toJSON() { return this.toString(); }
        toString(pattern = 'YYYY-MM-DDThh:mm:ss.sssZ') {
            return super.toString(pattern);
        }
        [Symbol.toPrimitive](mode) {
            return mode === 'number' ? this.valueOf() : this.toString();
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), ' ', $mol_dev_format_accent(this.toString('YYYY-MM-DD hh:mm:ss.sss Z')));
        }
        static patterns = {
            'YYYY': (moment) => {
                if (moment.year == null)
                    return '';
                return String(moment.year);
            },
            'AD': (moment) => {
                if (moment.year == null)
                    return '';
                return String(Math.floor(moment.year / 100) + 1);
            },
            'YY': (moment) => {
                if (moment.year == null)
                    return '';
                return String(moment.year % 100);
            },
            'Month': (pattern => (moment) => {
                if (moment.month == null)
                    return '';
                return pattern.format(moment.native);
            })(new Intl.DateTimeFormat(undefined, { month: 'long' })),
            'DD Month': (pattern => (moment) => {
                if (moment.month == null) {
                    if (moment.day == null) {
                        return '';
                    }
                    else {
                        return $mol_time_moment.patterns['DD'](moment);
                    }
                }
                else {
                    if (moment.day == null) {
                        return $mol_time_moment.patterns['Month'](moment);
                    }
                    else {
                        return pattern.format(moment.native);
                    }
                }
            })(new Intl.DateTimeFormat(undefined, { day: '2-digit', month: 'long' })),
            'D Month': (pattern => (moment) => {
                if (moment.month == null) {
                    if (moment.day == null) {
                        return '';
                    }
                    else {
                        return $mol_time_moment.patterns['D'](moment);
                    }
                }
                else {
                    if (moment.day == null) {
                        return $mol_time_moment.patterns['Month'](moment);
                    }
                    else {
                        return pattern.format(moment.native);
                    }
                }
            })(new Intl.DateTimeFormat(undefined, { day: 'numeric', month: 'long' })),
            'Mon': (pattern => (moment) => {
                if (moment.month == null)
                    return '';
                return pattern.format(moment.native);
            })(new Intl.DateTimeFormat(undefined, { month: 'short' })),
            'DD Mon': (pattern => (moment) => {
                if (moment.month == null) {
                    if (moment.day == null) {
                        return '';
                    }
                    else {
                        return $mol_time_moment.patterns['DD'](moment);
                    }
                }
                else {
                    if (moment.day == null) {
                        return $mol_time_moment.patterns['Mon'](moment);
                    }
                    else {
                        return pattern.format(moment.native);
                    }
                }
            })(new Intl.DateTimeFormat(undefined, { day: '2-digit', month: 'short' })),
            'D Mon': (pattern => (moment) => {
                if (moment.month == null) {
                    if (moment.day == null) {
                        return '';
                    }
                    else {
                        return $mol_time_moment.patterns['D'](moment);
                    }
                }
                else {
                    if (moment.day == null) {
                        return $mol_time_moment.patterns['Mon'](moment);
                    }
                    else {
                        return pattern.format(moment.native);
                    }
                }
            })(new Intl.DateTimeFormat(undefined, { day: 'numeric', month: 'short' })),
            '-MM': (moment) => {
                if (moment.month == null)
                    return '';
                return '-' + $mol_time_moment.patterns['MM'](moment);
            },
            'MM': (moment) => {
                if (moment.month == null)
                    return '';
                return String(100 + moment.month + 1).slice(1);
            },
            'M': (moment) => {
                if (moment.month == null)
                    return '';
                return String(moment.month + 1);
            },
            'WeekDay': (pattern => (moment) => {
                if (moment.day == null)
                    return '';
                if (moment.month == null)
                    return '';
                if (moment.year == null)
                    return '';
                return pattern.format(moment.native);
            })(new Intl.DateTimeFormat(undefined, { weekday: 'long' })),
            'WD': (pattern => (moment) => {
                if (moment.day == null)
                    return '';
                if (moment.month == null)
                    return '';
                if (moment.year == null)
                    return '';
                return pattern.format(moment.native);
            })(new Intl.DateTimeFormat(undefined, { weekday: 'short' })),
            '-DD': (moment) => {
                if (moment.day == null)
                    return '';
                return '-' + $mol_time_moment.patterns['DD'](moment);
            },
            'DD': (moment) => {
                if (moment.day == null)
                    return '';
                return String(100 + moment.day + 1).slice(1);
            },
            'D': (moment) => {
                if (moment.day == null)
                    return '';
                return String(moment.day + 1);
            },
            'Thh': (moment) => {
                if (moment.hour == null)
                    return '';
                return 'T' + $mol_time_moment.patterns['hh'](moment);
            },
            'hh': (moment) => {
                if (moment.hour == null)
                    return '';
                return String(100 + moment.hour).slice(1);
            },
            'h': (moment) => {
                if (moment.hour == null)
                    return '';
                return String(moment.hour);
            },
            ':mm': (moment) => {
                if (moment.minute == null)
                    return '';
                return ':' + $mol_time_moment.patterns['mm'](moment);
            },
            'mm': (moment) => {
                if (moment.minute == null)
                    return '';
                return String(100 + moment.minute).slice(1);
            },
            'm': (moment) => {
                if (moment.minute == null)
                    return '';
                return String(moment.minute);
            },
            ':ss': (moment) => {
                if (moment.second == null)
                    return '';
                return ':' + $mol_time_moment.patterns['ss'](moment);
            },
            'ss': (moment) => {
                if (moment.second == null)
                    return '';
                return String(100 + moment.second | 0).slice(1);
            },
            's': (moment) => {
                if (moment.second == null)
                    return '';
                return String(moment.second | 0);
            },
            '.sss': (moment) => {
                if (moment.second == null)
                    return '';
                if (moment.second === (moment.second | 0))
                    return '';
                return '.' + $mol_time_moment.patterns['sss'](moment);
            },
            'sss': (moment) => {
                if (moment.second == null)
                    return '';
                const millisecond = (moment.second - Math.trunc(moment.second)).toFixed(3);
                return millisecond.slice(2);
            },
            'Z': (moment) => {
                const offset = moment.offset;
                if (!offset)
                    return '';
                let hour = offset.hour;
                let sign = '+';
                if (hour < 0) {
                    sign = '-';
                    hour = -hour;
                }
                return sign + String(100 + hour).slice(1) + ':' + String(100 + offset.minute).slice(1);
            }
        };
    }
    $.$mol_time_moment = $mol_time_moment;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_page_side extends $hyoo_meta_model {
        referrers_node() {
            return this.yoke('referrers', $hyoo_crowd_dict, [''], [], ['0_0']);
        }
        referrers_list() {
            return this.referrers_node()?.keys() ?? [];
        }
        referrers_stat(uri) {
            return this.referrers_node()?.sub(uri, $hyoo_crowd_list).list().length ?? 0;
        }
        referrers_track(uri) {
            return this.referrers_node()?.sub(uri, $hyoo_crowd_list).add(this.land.peer().id);
        }
        details_node() {
            const details = this.yoke('details', $hyoo_crowd_text);
            if (!details)
                return details;
            const land = details.land;
            const meta = this.world().Fund($hyoo_meta_model).Item(land.id());
            if (land.allowed_mod())
                meta.whole(this);
            meta.steal_rights(this);
            return details;
        }
        details(next) {
            return this.details_node()?.text(next) ?? '';
        }
        details_selection(next) {
            return this.details_node()?.selection(this.land.peer().id, next) ?? [0, 0];
        }
        release_node() {
            const release = this.yoke('release', $hyoo_crowd_blob);
            release?.land.steal_rights(this.land);
            return release;
        }
        release(next) {
            return this.release_node()?.str(next) ?? '';
        }
        released() {
            const book = this.book();
            if (book && !book.pages_node().has(this.id()))
                return false;
            return this.release_node() && (this.release() === this.details()) || false;
        }
        publish() {
            this.release(this.details());
            this.book()?.pages_node().add(this.id());
        }
        content() {
            return this.release() || this.details();
        }
        content_full() {
            let details = `= ${this.title()}\n\n${this.content()}\n`;
            const visit = (book) => {
                details += '--\n\n';
                details += '= ' + book.title() + '\n\n';
                details += book.details().replace(/^(=+) /gm, '=$1 ') + '\n';
                for (const page of book.pages().slice().reverse())
                    visit(page);
            };
            for (const page of this.pages().slice().reverse())
                visit(page);
            return details;
        }
        changed_moment() {
            return new $mol_time_moment((this.release_node() ?? this.details_node())?.land.last_stamp());
        }
        book(next) {
            const book_node = this.sub('book', $hyoo_crowd_reg);
            const id = $mol_int62_string_ensure(book_node.str(next?.id() ?? (next === null ? '' : undefined)));
            if (id === this.id())
                return null;
            return id ? this.world().Fund($hyoo_page_side).Item(id) : null;
        }
        books() {
            const books = [];
            let book = this.book();
            while (book) {
                books.push(book);
                book = book.book();
            }
            return books;
        }
        bookmarks_node(next) {
            const fresh = this.yoke('$hyoo_page_side:bookmarks', $hyoo_crowd_list);
            if (!fresh)
                return fresh;
            const old = this.sub('bookmarks', $hyoo_crowd_list);
            for (const mark of old.list()) {
                const id = $mol_int62_string_ensure(mark);
                if (id)
                    fresh.add(id);
                old.drop(id);
            }
            if (fresh.virgin())
                fresh.add('iy8wtn_tky6pc');
            return fresh;
        }
        bookmarks(next) {
            const node = this.bookmarks_node();
            if (!node)
                return [];
            const ids = node.list(next?.map(side => side.id()));
            const Fund = this.world().Fund($hyoo_page_side);
            return ids.map(id => Fund.Item(id));
        }
        pages_node() {
            const pages = this.sub('pages', $hyoo_crowd_list);
            return pages;
        }
        pages(next) {
            const node = this.pages_node();
            const ids = node.list(next?.map(side => side.id()));
            const Fund = this.world().Fund($hyoo_page_side);
            return ids.map(id => Fund.Item(id));
        }
        following() {
            return this.following_in() ?? this.following_out();
        }
        following_in() {
            return this.pages().at(-1) ?? null;
        }
        following_out() {
            const book = this.book();
            if (!book)
                return null;
            const pages = book.pages();
            return pages[pages.indexOf(this) - 1] ?? book.following_out();
        }
        bookmarked(id, next) {
            const node = this.bookmarks_node();
            if (!node)
                return false;
            if (next === undefined)
                return node.list().includes(id);
            if (next)
                node.add(id);
            else
                node.drop(id);
            return next;
        }
        authors() {
            return [...(this.release_node() ?? this.details_node())?.land.authors() ?? []];
        }
        aura(next) {
            return this.sub('aura', $hyoo_crowd_reg).str(next);
        }
        aura_effective() {
            return this.aura() || (this.book()?.aura_effective() ?? '');
        }
        history_node() {
            return this.yoke('$hyoo_page_side:history', $hyoo_crowd_list);
        }
        history() {
            return this.history_node().set();
        }
        history_add(id) {
            this.history_node().add(id);
        }
        news() {
            const history = this.history();
            const visited = new Set();
            const found = [];
            const pages = [];
            const users = [this];
            while (found.length < 10 && (pages.length || users.length)) {
                while (users.length) {
                    const user = users.shift();
                    if (visited.has(user))
                        continue;
                    visited.add(user);
                    for (const page of user.pages().slice().reverse()) {
                        if (visited.has(page))
                            continue;
                        pages.push(page);
                    }
                    for (const mark of user.bookmarks().slice().reverse()) {
                        if (visited.has(mark))
                            continue;
                        pages.push(mark);
                    }
                    break;
                }
                while (pages.length) {
                    const side = pages.shift();
                    if (visited.has(side))
                        continue;
                    if (!side.title())
                        continue;
                    if (!side.release())
                        continue;
                    if (history.has(side.id())) {
                        for (const page of side.pages().slice().reverse()) {
                            if (visited.has(page))
                                continue;
                            pages.push(page);
                        }
                    }
                    else {
                        visited.add(side);
                        found.push(side);
                        break;
                    }
                }
            }
            return found;
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "referrers_node", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "referrers_list", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_page_side.prototype, "referrers_stat", null);
    __decorate([
        $mol_action
    ], $hyoo_page_side.prototype, "referrers_track", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "details_node", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "details", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "details_selection", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "release_node", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "release", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "released", null);
    __decorate([
        $mol_action
    ], $hyoo_page_side.prototype, "publish", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "content", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "content_full", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "changed_moment", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "book", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "books", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "bookmarks_node", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "bookmarks", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "pages_node", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "pages", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "following_in", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "following_out", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_page_side.prototype, "bookmarked", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "authors", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "aura", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "aura_effective", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "history_node", null);
    __decorate([
        $mol_mem
    ], $hyoo_page_side.prototype, "news", null);
    $.$hyoo_page_side = $hyoo_page_side;
})($ || ($ = {}));

;
	($.$mol_avatar) = class $mol_avatar extends ($.$mol_icon) {
		view_box(){
			return "0 0 24 24";
		}
		id(){
			return "";
		}
		path(){
			return "M 12 12 l 0 0 M 0 0 l 0 0 M 24 24 l 0 0 M 0 24 l 0 0 M 24 0 l 0 0";
		}
	};


;
"use strict";
var $;
(function ($) {
    function $mol_hash_string(str, seed = 0) {
        let h1 = 0xdeadbeef ^ seed;
        let h2 = 0x41c6ce57 ^ seed;
        for (let i = 0; i < str.length; i++) {
            const ch = str.charCodeAt(i);
            h1 = Math.imul(h1 ^ ch, 2654435761);
            h2 = Math.imul(h2 ^ ch, 1597334677);
        }
        h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);
        h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);
        return 4294967296 * (((1 << 16) - 1) & h2) + (h1 >>> 0);
    }
    $.$mol_hash_string = $mol_hash_string;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_avatar extends $.$mol_avatar {
            path() {
                const id = $mol_hash_string(this.id());
                const p = 2.1;
                const m = 2.7;
                let path = '';
                for (let x = 0; x < 4; ++x) {
                    for (let y = 0; y < 8; ++y) {
                        if ((id >> (x + y * 7)) & 1) {
                            const mxp = Math.ceil(m * x + p);
                            const myp = Math.ceil(m * y + p);
                            path += `M ${mxp} ${myp} l 0 0 ` + `M ${24 - mxp} ${myp} l 0 0 `;
                        }
                    }
                }
                return path;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_avatar.prototype, "path", null);
        $$.$mol_avatar = $mol_avatar;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/avatar/avatar.view.css", "[mol_avatar] {\n\tstroke-linecap: round;\n\tstroke-width: 3.5px;\n\tfill: none;\n\tstroke: currentColor;\n\t/* width: 1.5rem;\n\theight: 1.5rem;\n\tmargin: 0 -.25rem; */\n\t/* box-shadow: 0 0 0 1px var(--mol_theme_line); */\n}\n");
})($ || ($ = {}));

;
	($.$hyoo_meta_link) = class $hyoo_meta_link extends ($.$mol_link) {
		id(){
			return (this.meta().id());
		}
		title(){
			return (this.meta().title());
		}
		Avatar(){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.id()));
			return obj;
		}
		highlight(){
			return "";
		}
		Title(){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ((this.title()));
			(obj.needle) = () => ((this.highlight()));
			return obj;
		}
		minimal_height(){
			return 40;
		}
		meta(){
			const obj = new this.$.$hyoo_meta_model();
			return obj;
		}
		param(){
			return "";
		}
		all_title(){
			return (this.$.$mol_locale.text("$hyoo_meta_link_all_title"));
		}
		sub(){
			return [(this.Avatar()), (this.Title())];
		}
	};
	($mol_mem(($.$hyoo_meta_link.prototype), "Avatar"));
	($mol_mem(($.$hyoo_meta_link.prototype), "Title"));
	($mol_mem(($.$hyoo_meta_link.prototype), "meta"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_meta_link extends $.$hyoo_meta_link {
            title() {
                return (this.id() === '0_0' ? this.all_title() : super.title()) || (this.Avatar() ? '' : '...');
            }
            uri() {
                return this.$.$mol_state_arg.link({
                    [this.param()]: this.id(),
                });
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_meta_link.prototype, "title", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_link.prototype, "uri", null);
        $$.$hyoo_meta_link = $hyoo_meta_link;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_define($hyoo_meta_link, {
        Title: {
            flex: {
                shrink: 1,
            },
        },
    });
})($ || ($ = {}));

;
	($.$hyoo_page_side_news) = class $hyoo_page_side_news extends ($.$mol_page) {
		news(){
			return (this.side().news());
		}
		item(id){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		item_title(id){
			return "";
		}
		Item(id){
			const obj = new this.$.$hyoo_meta_link();
			(obj.meta) = () => ((this.item(id)));
			(obj.title) = () => ((this.item_title(id)));
			(obj.Avatar) = () => (null);
			return obj;
		}
		items(){
			return [(this.Item("0"))];
		}
		Section_list(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.items()));
			return obj;
		}
		side(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		title(){
			return (this.$.$mol_locale.text("$hyoo_page_side_news_title"));
		}
		attr(){
			return {...(super.attr()), "mol_theme": "$mol_theme_special"};
		}
		body(){
			return [(this.Section_list())];
		}
	};
	($mol_mem_key(($.$hyoo_page_side_news.prototype), "item"));
	($mol_mem_key(($.$hyoo_page_side_news.prototype), "Item"));
	($mol_mem(($.$hyoo_page_side_news.prototype), "Section_list"));
	($mol_mem(($.$hyoo_page_side_news.prototype), "side"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_page_side_news extends $.$hyoo_page_side_news {
            items() {
                return this.news().map(item => this.Item(item));
            }
            item(side) {
                return side;
            }
            item_title(side) {
                return [side, ...side.books()].reverse().map(side => side.title()).join(' / ');
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_page_side_news.prototype, "items", null);
        $$.$hyoo_page_side_news = $hyoo_page_side_news;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { rem } = $mol_style_unit;
    $mol_style_define($hyoo_page_side_news, {
        flex: {
            basis: rem(20),
            grow: 0,
        },
    });
})($ || ($ = {}));

;
	($.$mol_icon_magnify) = class $mol_icon_magnify extends ($.$mol_icon) {
		path(){
			return "M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_pencil) = class $mol_icon_pencil extends ($.$mol_icon) {
		path(){
			return "M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_pencil_outline) = class $mol_icon_pencil_outline extends ($.$mol_icon) {
		path(){
			return "M14.06,9L15,9.94L5.92,19H5V18.08L14.06,9M17.66,3C17.41,3 17.15,3.1 16.96,3.29L15.13,5.12L18.88,8.87L20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18.17,3.09 17.92,3 17.66,3M14.06,6.19L3,17.25V21H6.75L17.81,9.94L14.06,6.19Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_plus) = class $mol_icon_plus extends ($.$mol_icon) {
		path(){
			return "M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_chevron) = class $mol_icon_chevron extends ($.$mol_icon) {
		path(){
			return "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z";
		}
	};


;
"use strict";

;
	($.$mol_check_expand) = class $mol_check_expand extends ($.$mol_check) {
		level_style(){
			return "0px";
		}
		expanded(next){
			if(next !== undefined) return next;
			return false;
		}
		expandable(){
			return false;
		}
		Icon(){
			const obj = new this.$.$mol_icon_chevron();
			return obj;
		}
		level(){
			return 0;
		}
		style(){
			return {...(super.style()), "paddingLeft": (this.level_style())};
		}
		checked(next){
			return (this.expanded(next));
		}
		enabled(){
			return (this.expandable());
		}
	};
	($mol_mem(($.$mol_check_expand.prototype), "expanded"));
	($mol_mem(($.$mol_check_expand.prototype), "Icon"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_check_expand extends $.$mol_check_expand {
            level_style() {
                return `${this.level() * 1 - 1}rem`;
            }
            expandable() {
                return this.expanded() !== null;
            }
        }
        $$.$mol_check_expand = $mol_check_expand;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/expand/expand.view.css", "[mol_check_expand] {\n\tmin-width: 20px;\n}\n\n:where([mol_check_expand][disabled]) [mol_check_expand_icon] {\n\tvisibility: hidden;\n}\n\n[mol_check_expand_icon] {\n\tbox-shadow: none;\n\tmargin-left: -0.375rem;\n}\n[mol_check_expand_icon] {\n\ttransform: rotateZ(0deg);\n}\n\n:where([mol_check_checked]) [mol_check_expand_icon] {\n\ttransform: rotateZ(90deg);\n}\n\n[mol_check_expand_icon] {\n\tvertical-align: text-top;\n}\n\n[mol_check_expand_label] {\n\tmargin-left: 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_ghost) = class $mol_ghost extends ($.$mol_view) {
		Sub(){
			const obj = new this.$.$mol_view();
			return obj;
		}
	};
	($mol_mem(($.$mol_ghost.prototype), "Sub"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_ghost extends $.$mol_ghost {
            dom_node_external(next) {
                return this.Sub().dom_node(next);
            }
            dom_node_actual() {
                this.dom_node();
                const node = this.Sub().dom_node_actual();
                const attr = this.attr();
                const style = this.style();
                const fields = this.field();
                $mol_dom_render_attributes(node, attr);
                $mol_dom_render_styles(node, style);
                $mol_dom_render_fields(node, fields);
                return node;
            }
            dom_tree() {
                const Sub = this.Sub();
                const node = Sub.dom_tree();
                try {
                    this.dom_node_actual();
                    this.auto();
                }
                catch (error) {
                    $mol_fail_log(error);
                }
                return node;
            }
            title() {
                return this.Sub().title();
            }
            minimal_width() {
                return this.Sub().minimal_width();
            }
            minimal_height() {
                return this.Sub().minimal_height();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_ghost.prototype, "dom_node_actual", null);
        $$.$mol_ghost = $mol_ghost;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_drag) = class $mol_drag extends ($.$mol_ghost) {
		start(next){
			if(next !== undefined) return next;
			return null;
		}
		drag_start(next){
			return (this.start(next));
		}
		move(next){
			if(next !== undefined) return next;
			return null;
		}
		drag_move(next){
			return (this.move(next));
		}
		end(next){
			if(next !== undefined) return next;
			return null;
		}
		drag_end(next){
			return (this.end(next));
		}
		status(next){
			if(next !== undefined) return next;
			return "ready";
		}
		event(){
			return {
				"dragstart": (next) => (this.drag_start(next)), 
				"drag": (next) => (this.drag_move(next)), 
				"dragend": (next) => (this.drag_end(next))
			};
		}
		attr(){
			return {"draggable": true, "mol_drag_status": (this.status())};
		}
		transfer(){
			return {
				"text/plain": "", 
				"text/html": "", 
				"text/uri-list": ""
			};
		}
		allow_copy(){
			return true;
		}
		allow_link(){
			return true;
		}
		allow_move(){
			return true;
		}
		image(){
			return (this.dom_node());
		}
	};
	($mol_mem(($.$mol_drag.prototype), "start"));
	($mol_mem(($.$mol_drag.prototype), "move"));
	($mol_mem(($.$mol_drag.prototype), "end"));
	($mol_mem(($.$mol_drag.prototype), "status"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_drag extends $.$mol_drag {
            status(next = 'ready') { return next; }
            drag_start(event) {
                setTimeout(() => this.status('drag'));
                const transfer = this.transfer();
                for (let type in transfer) {
                    event.dataTransfer.setData(type, transfer[type]);
                }
                event.dataTransfer.setDragImage(this.image(), 0, -32);
                const effects = [];
                if (this.allow_copy())
                    effects.push('Copy');
                if (this.allow_link())
                    effects.push('Link');
                if (this.allow_move())
                    effects.push('Move');
                let effectAllowed = effects[0].toLowerCase() + effects.slice(1).join('');
                if (effectAllowed === 'copyLinkMove')
                    effectAllowed = 'all';
                event.dataTransfer.effectAllowed = effectAllowed;
                this.start(event);
            }
            drag_end(event) {
                setTimeout(() => this.status('ready'));
                this.end(event);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_drag.prototype, "status", null);
        $$.$mol_drag = $mol_drag;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_drop) = class $mol_drop extends ($.$mol_ghost) {
		enter(next){
			if(next !== undefined) return next;
			return null;
		}
		move(next){
			if(next !== undefined) return next;
			return null;
		}
		leave(next){
			if(next !== undefined) return next;
			return null;
		}
		drop(next){
			if(next !== undefined) return next;
			return null;
		}
		status(next){
			if(next !== undefined) return next;
			return "ready";
		}
		enabled(next){
			if(next !== undefined) return next;
			return true;
		}
		event(){
			return {
				"dragenter": (next) => (this.enter(next)), 
				"dragover": (next) => (this.move(next)), 
				"dragleave": (next) => (this.leave(next)), 
				"drop": (next) => (this.drop(next))
			};
		}
		attr(){
			return {"mol_drop_status": (this.status())};
		}
		adopt(next){
			if(next !== undefined) return next;
			return {};
		}
		receive(next){
			if(next !== undefined) return next;
			return null;
		}
		allow(){
			return [
				"copy", 
				"move", 
				"link"
			];
		}
	};
	($mol_mem(($.$mol_drop.prototype), "enter"));
	($mol_mem(($.$mol_drop.prototype), "move"));
	($mol_mem(($.$mol_drop.prototype), "leave"));
	($mol_mem(($.$mol_drop.prototype), "drop"));
	($mol_mem(($.$mol_drop.prototype), "status"));
	($mol_mem(($.$mol_drop.prototype), "enabled"));
	($mol_mem(($.$mol_drop.prototype), "adopt"));
	($mol_mem(($.$mol_drop.prototype), "receive"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_drop extends $.$mol_drop {
            status(next = 'ready') { return next; }
            _target = null;
            enter(event) {
                if (event.defaultPrevented)
                    return;
                if (!this.enabled())
                    return;
                const action = this.decide_action(event);
                event.dataTransfer.dropEffect = action;
                if (action !== 'none')
                    this.status('drag');
                this._target = event.target;
                event.preventDefault();
            }
            move(event) {
                if (event.defaultPrevented)
                    return;
                if (!this.enabled())
                    return;
                event.dataTransfer.dropEffect = this.decide_action(event);
                event.preventDefault();
            }
            decide_action(event) {
                const allow = this.allow();
                if (allow.includes('move') && event.shiftKey)
                    return 'move';
                else if (allow.includes('copy') && event.ctrlKey)
                    return 'copy';
                else if (allow.includes('link') && event.altKey)
                    return 'link';
                else
                    return allow[0];
            }
            leave(event) {
                if (this._target === event.target) {
                    this.status('ready');
                }
            }
            receive(transfer) {
                return transfer;
            }
            drop(event) {
                if (event.defaultPrevented)
                    return;
                event.preventDefault();
                setTimeout(() => this.status('ready'));
                const obj = this.adopt(event.dataTransfer);
                if (!obj)
                    return;
                this.receive(obj);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_drop.prototype, "status", null);
        $$.$mol_drop = $mol_drop;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_pin) = class $mol_icon_pin extends ($.$mol_icon) {
		path(){
			return "M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_pin_outline) = class $mol_icon_pin_outline extends ($.$mol_icon) {
		path(){
			return "M16,12V4H17V2H7V4H8V12L6,14V16H11.2V22H12.8V16H18V14L16,12M8.8,14L10,12.8V4H14V12.8L15.2,14H8.8Z";
		}
	};


;
"use strict";

;
	($.$hyoo_meta_menu_items) = class $hyoo_meta_menu_items extends ($.$mol_list) {
		ids(){
			return (this.list().list());
		}
		item_title(id){
			return (this.item(id).title());
		}
		item_expandable(id){
			return false;
		}
		item_expanded(id, next){
			if(next !== undefined) return next;
			return true;
		}
		Item_expand(id){
			const obj = new this.$.$mol_check_expand();
			(obj.expandable) = () => ((this.item_expandable(id)));
			(obj.expanded) = (next) => ((this.item_expanded(id, next)));
			return obj;
		}
		editable(){
			return false;
		}
		transfer_adopt(next){
			if(next !== undefined) return next;
			return null;
		}
		receive_after(id, next){
			if(next !== undefined) return next;
			return null;
		}
		item_drag_end(id, next){
			if(next !== undefined) return next;
			return null;
		}
		item_text(id){
			return "";
		}
		item_html(id){
			return "";
		}
		item_uri(id){
			return "";
		}
		param(){
			return "";
		}
		highlight(){
			return "";
		}
		Item_link(id){
			const obj = new this.$.$hyoo_meta_link();
			(obj.meta) = () => ((this.item(id)));
			(obj.param) = () => ((this.param()));
			(obj.highlight) = () => ((this.highlight()));
			(obj.Avatar) = () => (null);
			return obj;
		}
		Item_drag(id){
			const obj = new this.$.$mol_drag();
			(obj.end) = (next) => ((this.item_drag_end(id, next)));
			(obj.transfer) = () => ({
				"text/plain": (this.item_text(id)), 
				"text/html": (this.item_html(id)), 
				"text/uri-list": (this.item_uri(id))
			});
			(obj.Sub) = () => ((this.Item_link(id)));
			return obj;
		}
		Item_drop_after(id){
			const obj = new this.$.$mol_drop();
			(obj.enabled) = () => ((this.editable()));
			(obj.adopt) = (next) => ((this.transfer_adopt(next)));
			(obj.receive) = (next) => ((this.receive_after(id, next)));
			(obj.allow) = () => ((this.drop_allow()));
			(obj.Sub) = () => ((this.Item_drag(id)));
			return obj;
		}
		item_remove(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Item_remove_icon(id){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Item_remove(id){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_meta_menu_items_Item_remove_hint")));
			(obj.click) = (next) => ((this.item_remove(id, next)));
			(obj.sub) = () => ([(this.Item_remove_icon(id))]);
			return obj;
		}
		item_pin(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Item_pin_icon(id){
			const obj = new this.$.$mol_icon_pin_outline();
			return obj;
		}
		Item_pin(id){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_meta_menu_items_Item_pin_hint")));
			(obj.click) = (next) => ((this.item_pin(id, next)));
			(obj.sub) = () => ([(this.Item_pin_icon(id))]);
			return obj;
		}
		receive_inside(id, next){
			if(next !== undefined) return next;
			return null;
		}
		item_add(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Item_add_icon(id){
			const obj = new this.$.$mol_icon_plus();
			return obj;
		}
		Item_add(id){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_meta_menu_items_Item_add_hint")));
			(obj.click) = (next) => ((this.item_add(id, next)));
			(obj.sub) = () => ([(this.Item_add_icon(id))]);
			return obj;
		}
		Item_drop_inside(id){
			const obj = new this.$.$mol_drop();
			(obj.enabled) = () => ((this.editable()));
			(obj.adopt) = (next) => ((this.transfer_adopt(next)));
			(obj.receive) = (next) => ((this.receive_inside(id, next)));
			(obj.allow) = () => ((this.drop_allow()));
			(obj.Sub) = () => ((this.Item_add(id)));
			return obj;
		}
		item_row(id){
			return [
				(this.Item_expand(id)), 
				(this.Item_drop_after(id)), 
				(this.Item_remove(id)), 
				(this.Item_pin(id)), 
				(this.Item_drop_inside(id))
			];
		}
		Item_row(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.item_row(id)));
			return obj;
		}
		Item_items(id){
			const obj = new this.$.$hyoo_meta_menu_items();
			(obj.editing) = () => ((this.editing()));
			(obj.list) = () => ((this.item_list(id)));
			(obj.item) = (id) => ((this.item(id)));
			(obj.item_moved) = (id, next) => ((this.item_moved(id, next)));
			(obj.item_expanded) = (id, next) => ((this.item_expanded(id, next)));
			(obj.item_list) = (id) => ((this.item_list(id)));
			(obj.item_uri) = (id) => ((this.item_uri(id)));
			(obj.highlight) = () => ((this.highlight()));
			(obj.item_add) = (id, next) => ((this.item_add(id, next)));
			return obj;
		}
		item_content(id){
			return [(this.Item_row(id)), (this.Item_items(id))];
		}
		Item(id){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.item_content(id)));
			return obj;
		}
		items(){
			return [(this.Item("0_0"))];
		}
		id(){
			return "";
		}
		editing(){
			return false;
		}
		drop_allow(){
			return ["move", "link"];
		}
		list(){
			const obj = new this.$.$hyoo_crowd_list();
			return obj;
		}
		item(id){
			const obj = new this.$.$hyoo_meta_model();
			return obj;
		}
		item_list(id){
			const obj = new this.$.$hyoo_crowd_list();
			return obj;
		}
		item_moved(id, next){
			if(next !== undefined) return next;
			return null;
		}
		rows(){
			return (this.items());
		}
	};
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "item_expanded"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_expand"));
	($mol_mem(($.$hyoo_meta_menu_items.prototype), "transfer_adopt"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "receive_after"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "item_drag_end"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_link"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_drag"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_drop_after"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "item_remove"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_remove_icon"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_remove"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "item_pin"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_pin_icon"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_pin"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "receive_inside"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "item_add"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_add_icon"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_add"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_drop_inside"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_row"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item_items"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "Item"));
	($mol_mem(($.$hyoo_meta_menu_items.prototype), "list"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "item"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "item_list"));
	($mol_mem_key(($.$hyoo_meta_menu_items.prototype), "item_moved"));


;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_meta_menu_items extends $.$hyoo_meta_menu_items {
            id() {
                return this.list().land.id();
            }
            editable() {
                return this.list().land.allowed_mod();
            }
            item_editable(id) {
                return this.item(id).land.allowed_mod();
            }
            ids() {
                const self = this.id();
                return super.ids().filter(id => id !== self).reverse();
            }
            items() {
                return this.ids().map(id => this.Item(id));
            }
            item(id) {
                return this.list().world().Fund($hyoo_meta_model).Item(id);
            }
            item_expandable(id) {
                return this.item_list(id).list().length > 0;
            }
            item_content(id) {
                return [
                    this.Item_row(id),
                    ...this.item_expanded(id)
                        ? [this.Item_items(id)]
                        : []
                ];
            }
            item_row(id) {
                return [
                    this.Item_expand(id),
                    this.Item_drop_after(id),
                    ...this.editable()
                        ? this.list().has(id)
                            ? this.editing()
                                ? [this.Item_remove(id)]
                                : this.item_editable(id)
                                    ? [this.Item_drop_inside(id)]
                                    : []
                            : [this.Item_pin(id)]
                        : [],
                ];
            }
            item_remove(id) {
                this.list().drop(id);
            }
            item_pin(id) {
                this.list().add(id);
                this.item_moved(id, this.id());
            }
            add() {
                return this.item_add(this.id());
            }
            item_html(id) {
                return ($mol_jsx("a", { href: this.item_uri(id) }, this.item_title(id))).outerHTML;
            }
            item_text(id) {
                return `\\\\${this.item_title(id)}\\${this.item_uri(id)}\\\\`;
            }
            transfer_adopt(transfer) {
                const uri = transfer.getData("text/uri-list");
                if (!uri)
                    return;
                return $mol_int62_string_ensure(uri.match(/[0-9a-z]+_[0-9a-z]+/)?.[0] ?? '');
            }
            receive_after(anchor, dropped) {
                if (anchor === dropped)
                    return;
                const list = this.list();
                const exists = list.has(dropped);
                list.drop(dropped);
                const index = list.list().indexOf(anchor);
                list.insert([dropped], Math.min(list.list().length, index + 1));
                if (!exists)
                    this.item_moved(dropped, list.land.id());
            }
            receive_inside(anchor, dropped) {
                if (anchor === dropped)
                    return;
                const list = this.item_list(anchor);
                const exists = list.has(dropped);
                list.drop(dropped);
                list.insert([dropped], 0);
                if (!exists)
                    this.item_moved(dropped, list.land.id());
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_meta_menu_items.prototype, "items", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_meta_menu_items.prototype, "item", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_meta_menu_items.prototype, "item_content", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_meta_menu_items.prototype, "item_row", null);
        __decorate([
            $mol_action
        ], $hyoo_meta_menu_items.prototype, "item_remove", null);
        __decorate([
            $mol_action
        ], $hyoo_meta_menu_items.prototype, "item_pin", null);
        __decorate([
            $mol_action
        ], $hyoo_meta_menu_items.prototype, "add", null);
        __decorate([
            $mol_action
        ], $hyoo_meta_menu_items.prototype, "receive_after", null);
        __decorate([
            $mol_action
        ], $hyoo_meta_menu_items.prototype, "receive_inside", null);
        $$.$hyoo_meta_menu_items = $hyoo_meta_menu_items;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    const { rem, px } = $mol_style_unit;
    $mol_style_define($hyoo_meta_menu_items, {
        Item_expand: {
            position: 'absolute',
            zIndex: $mol_layer.float,
            margin: {
                left: rem(-.75),
            },
        },
        Item_drop_after: {
            '@': {
                'mol_drop_status': {
                    'drag': {
                        box: {
                            shadow: [{
                                    inset: false,
                                    x: 0,
                                    y: px(-1),
                                    blur: 0,
                                    spread: 0,
                                    color: $mol_theme.focus,
                                }]
                        },
                    },
                },
            },
        },
        Item_add: {
            opacity: 0.5,
            ':hover': {
                opacity: 1,
            },
        },
        Item_drop_inside: {
            '@': {
                'mol_drop_status': {
                    'drag': {
                        box: {
                            shadow: [{
                                    inset: false,
                                    x: px(1),
                                    y: px(1),
                                    blur: 0,
                                    spread: 0,
                                    color: $mol_theme.focus,
                                }]
                        },
                        opacity: 1,
                    },
                },
            },
        },
        Item_row: {
            justifyContent: 'space-between',
            alignItems: 'flex-start',
        },
        Item_link: {
            flex: {
                grow: 1,
                shrink: 1,
            },
        },
        Item_items: {
            margin: {
                left: rem(.75),
                bottom: rem(.75),
            },
            padding: {
                left: rem(.75),
            },
            box: {
                shadow: [{
                        inset: true,
                        x: px(1),
                        y: 0,
                        blur: 0,
                        spread: 0,
                        color: $mol_theme.line,
                    }],
            },
        },
    });
})($ || ($ = {}));

;
"use strict";
let $hyoo_sync_revision = "echo";

;
"use strict";
var $;
(function ($) {
    async function $hyoo_sync_peer(path, next) {
        let serial = $mol_state_local.value('$hyoo_sync_peer', next);
        if (typeof serial === 'string') {
            return await $hyoo_crowd_peer.restore(serial);
        }
        const peer = await $hyoo_crowd_peer.generate();
        $mol_state_local.value('$hyoo_sync_peer', peer.key_private_serial);
        return peer;
    }
    $.$hyoo_sync_peer = $hyoo_sync_peer;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_promise() {
        let done;
        let fail;
        const promise = new Promise((d, f) => {
            done = d;
            fail = f;
        });
        return Object.assign(promise, {
            done,
            fail,
        });
    }
    $.$mol_promise = $mol_promise;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wait_timeout_async(timeout) {
        const promise = $mol_promise();
        const task = new this.$mol_after_timeout(timeout, () => promise.done());
        return Object.assign(promise, {
            destructor: () => task.destructor()
        });
    }
    $.$mol_wait_timeout_async = $mol_wait_timeout_async;
    function $mol_wait_timeout(timeout) {
        return this.$mol_wire_sync(this).$mol_wait_timeout_async(timeout);
    }
    $.$mol_wait_timeout = $mol_wait_timeout;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_race(...tasks) {
        const results = tasks.map(task => {
            try {
                return task();
            }
            catch (error) {
                return error;
            }
        });
        const promises = results.filter(res => $mol_promise_like(res));
        if (promises.length)
            $mol_fail(Promise.race(promises));
        const error = results.find(res => res instanceof Error);
        if (error)
            $mol_fail(error);
        return results;
    }
    $.$mol_wire_race = $mol_wire_race;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_sync_masters = [
        `sync.hyoo.ru`,
        `sync-pmzz.onrender.com`,
    ];
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_sync_yard extends $mol_object2 {
        db_unit_persisted = new WeakSet();
        log_pack(data) {
            return data;
        }
        peer(next) {
            return $mol_wire_sync($hyoo_sync_peer)(this + '.peer()', next);
        }
        world() {
            $mol_wire_solid();
            const world = new this.$.$hyoo_crowd_world(this.peer());
            world.land_init = land => this.land_init(land);
            return world;
        }
        land_init(land) {
            this.db_land_init(land);
            try {
                this.land_sync(land);
            }
            catch (error) {
                $mol_fail_log(error);
            }
            if (!land.grabbed())
                this.$.$mol_wait_timeout(10_000);
        }
        land(id) {
            return this.world().land_sync(id);
        }
        land_grab(law = [''], mod = [], add = []) {
            return $mol_wire_sync(this.world()).grab(law, mod, add);
        }
        home() {
            return this.land(this.peer().id);
        }
        land_search(query) {
            const stat = new Map();
            for (const prefix of query.match(/\p{Letter}{2,}/gu) ?? []) {
                const caps = prefix.slice(0, 1).toUpperCase() + prefix.slice(1);
                const prefs = new Set([
                    caps, ' ' + caps,
                    prefix, ' ' + prefix,
                ]);
                const lands = new Set();
                const founds = $mol_wire_race(...[...prefs].map(pref => () => $mol_wire_sync(this).db_land_search(pref)));
                for (const found of founds) {
                    for (const land of [...found].reverse())
                        lands.add(land);
                }
                for (const land of lands) {
                    stat.set(land, (stat.get(land) ?? 0) + 1);
                }
            }
            return [...stat].sort((left, right) => right[1] - left[1]).map(pair => pair[0]);
        }
        sync() {
            this.server();
            for (const land of this.world().lands.values()) {
                this.db_land_sync(land);
            }
            $mol_wire_race(...this.slaves().map(line => () => this.line_sync(line)));
            try {
                const master = this.master();
                if (master)
                    $mol_wire_race(...[...this.world().lands.values()].map(land => () => this.line_land_sync({ line: master, land })));
            }
            catch (error) {
                $mol_fail_log(error);
            }
        }
        land_sync(land) {
            this.db_land_init(land);
            try {
                this.db_land_sync(land);
            }
            catch (error) {
                $mol_fail_log(error);
            }
            try {
                const master = this.master();
                if (master)
                    this.line_land_sync({ line: master, land });
            }
            catch (error) {
                $mol_fail_log(error);
            }
            try {
                $mol_wire_race(...this.slaves()
                    .filter(line => this.line_lands(line).includes(land))
                    .map(line => () => this.line_land_sync({ line, land })));
            }
            catch (error) {
                $mol_fail_log(error);
            }
        }
        db_land_clocks(land, next) {
            $mol_wire_solid();
            return next;
        }
        db_land_sync(land) {
            this.db_land_init(land);
            land.clocks;
            const units = [];
            for (const unit of land._unit_all.values()) {
                if (this.db_unit_persisted.has(unit))
                    continue;
                units.push(unit);
            }
            if (!units.length)
                return;
            $mol_wire_sync(this.world()).sign_units(units);
            $mol_wire_sync(this).db_land_save(land, units);
            for (const unit of units)
                this.db_unit_persisted.add(unit);
        }
        db_land_init(land) {
            try {
                var units = $mol_wire_sync(this).db_land_load(land);
            }
            catch (error) {
                if (!(error instanceof Error))
                    $mol_fail_hidden(error);
                this.$.$mol_log3_fail({
                    place: this,
                    land: land.id(),
                    message: error.message,
                });
                units = [];
            }
            for (const unit of units)
                this.db_unit_persisted.add(unit);
            units.sort($hyoo_crowd_unit_compare);
            land.apply(units);
        }
        async db_land_load(land) {
            return [];
        }
        async db_land_search(from, to = from) {
            return new Set();
        }
        async db_land_save(land, units) { }
        master_cursor(next = 0) {
            return next;
        }
        master_list() {
            const scheme = this.$.$mol_dom_context.document.location.protocol.replace(/^http/, 'ws');
            return this.$.$hyoo_sync_masters.map(host => `${scheme}//${host}`);
        }
        master_link() {
            return this.master_list()[this.master_cursor()];
        }
        master() {
            return null;
        }
        server() {
            return null;
        }
        slaves(next = []) {
            return next;
        }
        line_lands(line, next = []) {
            return next;
        }
        line_land_clocks({ line, land }, next) {
            $mol_wire_solid();
            return next;
        }
        line_sync(line) {
            $mol_wire_race(...this.line_lands(line).map(land => () => this.line_land_sync({ line, land })));
        }
        line_land_sync({ line, land }) {
            this.line_land_init({ line, land });
            let clocks = this.line_land_clocks({ line, land });
            if (!clocks)
                return;
            const units = land.delta(clocks);
            if (!units.length)
                return;
            this.line_send_units(line, units);
            for (const unit of units) {
                clocks[unit.group()].see_peer(unit.auth, unit.time);
            }
        }
        line_land_init({ line, land }) {
            this.db_land_init(land);
            this.line_send_clocks(line, land);
        }
        line_land_neck({ line, land }, next = []) {
            return next;
        }
        async line_receive(line, message) {
            if (!message.byteLength)
                return;
            const view = new DataView(message.buffer, message.byteOffset, message.byteLength);
            const int0 = view.getInt32(0, true);
            const int1 = view.getInt32(4, true);
            const land_id = $mol_int62_to_string({
                lo: int0 << 1 >> 1,
                hi: int1 << 1 >> 1,
            });
            const handle = async (prev) => {
                if (prev)
                    await prev;
                const world = this.world();
                const land = await $mol_wire_async(world).land(land_id);
                let clocks = this.line_land_clocks({ line, land });
                if (!clocks)
                    this.line_land_clocks({ line, land }, clocks = [new $hyoo_crowd_clock, new $hyoo_crowd_clock]);
                if (int0 << 1 >> 1 ^ int0) {
                    const bin = new $hyoo_crowd_clock_bin(message.buffer, message.byteOffset, message.byteLength);
                    for (let group = 0; group < clocks.length; ++group) {
                        clocks[group].see_bin(bin, group);
                    }
                    if (bin.count() + land.delta(clocks).length < land._unit_all.size) {
                        this.line_land_clocks({ line, land }, clocks = [new $hyoo_crowd_clock, new $hyoo_crowd_clock]);
                    }
                    const lands = this.line_lands(line);
                    if (lands.includes(land)) {
                        this.$.$mol_log3_warn({
                            place: this,
                            land: land.id(),
                            message: 'Already syncing',
                            hint: 'Bug at $hyoo_sync_yard',
                            line: $mol_key(line),
                            clocks,
                        });
                    }
                    else {
                        this.line_lands(line, [...lands, land]);
                    }
                    return;
                }
                const { allow, forbid } = await world.apply(message);
                for (const [{ bin, ...unit }, error] of forbid) {
                    this.$.$mol_log3_fail({
                        place: this,
                        land: land.id(),
                        message: error,
                        line: $mol_key(line),
                        unit,
                    });
                }
                if (!allow.length)
                    return;
                for (const unit of allow) {
                    clocks[unit.group()].see_peer(unit.auth, unit.time);
                }
                this.$.$mol_log3_rise({
                    place: this,
                    land: land.id(),
                    message: 'Sync Gain',
                    line: $mol_key(line),
                    units: this.log_pack(allow),
                });
            };
            this.line_land_neck({ line, land: land_id }, [
                handle(this.line_land_neck({ line, land: land_id })[0])
                    .catch(error => {
                    this.$.$mol_log3_fail({
                        place: this,
                        land: land_id,
                        message: String(error?.message ?? error),
                    });
                })
            ]);
        }
        line_send_clocks(line, land) { }
        async line_send_units(line, units) { }
        [$mol_dev_format_head]() {
            return $mol_dev_format_native(this);
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_sync_yard.prototype, "peer", null);
    __decorate([
        $mol_mem
    ], $hyoo_sync_yard.prototype, "world", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "land_init", null);
    __decorate([
        $mol_action
    ], $hyoo_sync_yard.prototype, "land_search", null);
    __decorate([
        $mol_mem
    ], $hyoo_sync_yard.prototype, "sync", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "land_sync", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "db_land_clocks", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "db_land_sync", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "db_land_init", null);
    __decorate([
        $mol_mem
    ], $hyoo_sync_yard.prototype, "master_cursor", null);
    __decorate([
        $mol_mem
    ], $hyoo_sync_yard.prototype, "master_link", null);
    __decorate([
        $mol_mem
    ], $hyoo_sync_yard.prototype, "slaves", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "line_lands", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "line_land_clocks", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "line_sync", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "line_land_sync", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "line_land_init", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_sync_yard.prototype, "line_land_neck", null);
    $.$hyoo_sync_yard = $hyoo_sync_yard;
})($ || ($ = {}));

;
	($.$hyoo_meta_menu) = class $hyoo_meta_menu extends ($.$mol_page) {
		item_title(id){
			return (this.item(id).title());
		}
		ids(){
			return (this.list().list());
		}
		world(){
			return (this.list().world());
		}
		id(){
			return "";
		}
		search(next){
			if(next !== undefined) return next;
			return "";
		}
		Search(){
			const obj = new this.$.$mol_search();
			(obj.query) = (next) => ((this.search(next)));
			return obj;
		}
		search_show(next){
			if(next !== undefined) return next;
			return false;
		}
		Search_icon(){
			const obj = new this.$.$mol_icon_magnify();
			return obj;
		}
		Search_toggle(){
			const obj = new this.$.$mol_check_icon();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_meta_menu_Search_toggle_hint")));
			(obj.checked) = (next) => ((this.search_show(next)));
			(obj.Icon) = () => ((this.Search_icon()));
			return obj;
		}
		editing(next){
			if(next !== undefined) return next;
			return false;
		}
		Editing_icon(){
			const obj = new this.$.$mol_icon_pencil_outline();
			return obj;
		}
		Editing(){
			const obj = new this.$.$mol_check_icon();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_meta_menu_Editing_hint")));
			(obj.checked) = (next) => ((this.editing(next)));
			(obj.Icon) = () => ((this.Editing_icon()));
			return obj;
		}
		add(next){
			if(next !== undefined) return next;
			return null;
		}
		Add_icon(){
			const obj = new this.$.$mol_icon_plus();
			return obj;
		}
		Add(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_meta_menu_Add_hint")));
			(obj.click) = (next) => ((this.add(next)));
			(obj.sub) = () => ([(this.Add_icon())]);
			return obj;
		}
		found(){
			return [];
		}
		item_uri(id){
			return "";
		}
		item_add(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Found(){
			const obj = new this.$.$hyoo_meta_menu_items();
			(obj.editing) = () => ((this.editing()));
			(obj.drop_allow) = () => ([]);
			(obj.list) = () => ((this.list()));
			(obj.ids) = () => ((this.found()));
			(obj.highlight) = () => ((this.search()));
			(obj.item_uri) = (id) => ((this.item_uri(id)));
			(obj.item_moved) = (id, next) => ((this.item_moved(id, next)));
			(obj.item_add) = (id, next) => ((this.item_add(id, next)));
			return obj;
		}
		item_expanded(id, next){
			if(next !== undefined) return next;
			return false;
		}
		Content(){
			const obj = new this.$.$hyoo_meta_menu_items();
			(obj.editing) = () => ((this.editing()));
			(obj.drop_allow) = () => ((this.drop_allow()));
			(obj.list) = () => ((this.list()));
			(obj.item_uri) = (id) => ((this.item_uri(id)));
			(obj.item_expanded) = (id, next) => ((this.item_expanded(id, next)));
			(obj.item_moved) = (id, next) => ((this.item_moved(id, next)));
			(obj.item_list) = (id) => ((this.item_list(id)));
			(obj.item_add) = (id, next) => ((this.item_add(id, next)));
			return obj;
		}
		transfer_adopt(next){
			if(next !== undefined) return next;
			return null;
		}
		receive_end(next){
			if(next !== undefined) return next;
			return null;
		}
		Drop_zone(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Drop_end(){
			const obj = new this.$.$mol_drop();
			(obj.enabled) = () => ((this.editable()));
			(obj.adopt) = (next) => ((this.transfer_adopt(next)));
			(obj.receive) = (next) => ((this.receive_end(next)));
			(obj.Sub) = () => ((this.Drop_zone()));
			(obj.allow) = () => ((this.drop_allow()));
			return obj;
		}
		editable(){
			return true;
		}
		item_moved(id, next){
			if(next !== undefined) return next;
			return null;
		}
		yard(){
			const obj = new this.$.$hyoo_sync_yard();
			return obj;
		}
		item(id){
			const obj = new this.$.$hyoo_meta_model();
			return obj;
		}
		list(){
			const obj = new this.$.$hyoo_crowd_list();
			return obj;
		}
		item_list(id){
			const obj = new this.$.$hyoo_crowd_list();
			return obj;
		}
		drop_allow(){
			return ["move", "link"];
		}
		Logo(){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.id()));
			return obj;
		}
		tools_ext(){
			return [];
		}
		head(){
			return [
				(this.Title()), 
				(this.Tools()), 
				(this.Search())
			];
		}
		tools(){
			return [
				(this.Search_toggle()), 
				(this.Editing()), 
				(this.Add()), 
				...(this.tools_ext())
			];
		}
		body(){
			return [
				(this.Found()), 
				(this.Content()), 
				(this.Drop_end())
			];
		}
	};
	($mol_mem(($.$hyoo_meta_menu.prototype), "search"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Search"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "search_show"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Search_icon"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Search_toggle"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "editing"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Editing_icon"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Editing"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "add"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Add_icon"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Add"));
	($mol_mem_key(($.$hyoo_meta_menu.prototype), "item_add"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Found"));
	($mol_mem_key(($.$hyoo_meta_menu.prototype), "item_expanded"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Content"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "transfer_adopt"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "receive_end"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Drop_zone"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Drop_end"));
	($mol_mem_key(($.$hyoo_meta_menu.prototype), "item_moved"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "yard"));
	($mol_mem_key(($.$hyoo_meta_menu.prototype), "item"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "list"));
	($mol_mem_key(($.$hyoo_meta_menu.prototype), "item_list"));
	($mol_mem(($.$hyoo_meta_menu.prototype), "Logo"));


;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_meta_menu extends $.$hyoo_meta_menu {
            id() {
                return this.list().land.id();
            }
            head() {
                return [
                    this.Title(),
                    this.Tools(),
                    ...this.search_show() ? [this.Search()] : [],
                ];
            }
            editable() {
                return this.list().land.allowed_mod();
            }
            item_editable(id) {
                return this.item(id).land.allowed_mod();
            }
            tools() {
                return this.editable() ? super.tools() : [this.Search_toggle(), ...this.tools_ext()];
            }
            body() {
                return this.search().trim()
                    ? [this.Found()]
                    : [this.Content(), this.Drop_end()];
            }
            search_show(next = false) {
                if (next === true)
                    this.Search().bring();
                if (next === false)
                    this.search('');
                return next;
            }
            item(id) {
                return this.list().world().Fund($hyoo_meta_model).Item(id);
            }
            found() {
                if (!this.search().trim())
                    return [];
                return this.yard()
                    .land_search(this.search())
                    .map(id => this.item(id).whole())
                    .filter(meta => meta.title().trim())
                    .map(meta => meta.id());
            }
            add() {
                return this.item_add(this.id());
            }
            transfer_adopt(transfer) {
                const uri = transfer.getData("text/uri-list");
                if (!uri)
                    return;
                return $mol_int62_string_ensure(uri.match(/[0-9a-z]+_[0-9a-z]+/)?.[0] ?? '');
            }
            receive_end(dropped) {
                const list = this.list();
                const exists = list.has(dropped);
                list.drop(dropped);
                this.list().insert([dropped], 0);
                if (!exists)
                    this.item_moved(dropped, this.id());
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_meta_menu.prototype, "head", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_menu.prototype, "body", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_menu.prototype, "search_show", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_meta_menu.prototype, "item", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_menu.prototype, "found", null);
        __decorate([
            $mol_action
        ], $hyoo_meta_menu.prototype, "add", null);
        __decorate([
            $mol_action
        ], $hyoo_meta_menu.prototype, "receive_end", null);
        $$.$hyoo_meta_menu = $hyoo_meta_menu;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    const { rem, px } = $mol_style_unit;
    $mol_style_define($hyoo_meta_menu, {
        flex: {
            basis: rem(20),
            grow: 0,
        },
        Drop_end: {
            flex: {
                grow: 1,
                basis: rem(1.5),
            },
            '@': {
                'mol_drop_status': {
                    'drag': {
                        box: {
                            shadow: [{
                                    inset: false,
                                    x: 0,
                                    y: px(-1),
                                    blur: 0,
                                    spread: 0,
                                    color: $mol_theme.focus,
                                }]
                        },
                    },
                },
            },
        },
    });
})($ || ($ = {}));

;
	($.$hyoo_page_side_menu) = class $hyoo_page_side_menu extends ($.$hyoo_meta_menu) {
		title(){
			return (this.side().title());
		}
		side(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		side_current(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		Title(){
			const obj = new this.$.$hyoo_meta_link();
			(obj.meta) = () => ((this.side()));
			return obj;
		}
	};
	($mol_mem(($.$hyoo_page_side_menu.prototype), "side"));
	($mol_mem(($.$hyoo_page_side_menu.prototype), "side_current"));
	($mol_mem(($.$hyoo_page_side_menu.prototype), "Title"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_page_side_menu extends $.$hyoo_page_side_menu {
            item_expanded(id, next) {
                const cur = this.side_current();
                try {
                    if (id === cur.id())
                        return next ?? !!cur.pages().length;
                    const path = [...cur.books()];
                    if (cur.pages().length)
                        path.unshift(cur);
                    if (id === path.at(-1)?.id())
                        return false;
                    return next ?? ($mol_mem_cached(() => this.item_expanded(id)) || path.some(book => book.id() === id));
                }
                catch (error) {
                    if (!$mol_promise_like(error))
                        $mol_fail_hidden(error);
                    if (id === cur.id())
                        return true;
                    return $mol_mem_cached(() => this.item_expanded(id)) ?? false;
                }
            }
            item_moved(what, where) {
                const page = this.item(what).as($hyoo_page_side);
                const book_next = where ? this.item(where).as($hyoo_page_side) : null;
                const book_prev = page.book();
                if (book_prev !== book_next)
                    book_prev?.pages_node().drop(what);
                page.book(book_next);
            }
        }
        __decorate([
            $mol_mem_key
        ], $hyoo_page_side_menu.prototype, "item_expanded", null);
        __decorate([
            $mol_action
        ], $hyoo_page_side_menu.prototype, "item_moved", null);
        $$.$hyoo_page_side_menu = $hyoo_page_side_menu;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_bar) = class $mol_bar extends ($.$mol_view) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/bar/bar.view.css", "[mol_bar] {\n\tdisplay: flex;\n\t/* box-shadow: inset 0 0 0 1px var(--mol_theme_line); */\n\tborder-radius: var(--mol_gap_round);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_icon_chevron_left) = class $mol_icon_chevron_left extends ($.$mol_icon) {
		path(){
			return "M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_chevron_right) = class $mol_icon_chevron_right extends ($.$mol_icon) {
		path(){
			return "M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z";
		}
	};


;
"use strict";

;
	($.$mol_paginator) = class $mol_paginator extends ($.$mol_bar) {
		backward_hint(){
			return (this.$.$mol_locale.text("$mol_paginator_backward_hint"));
		}
		backward(next){
			if(next !== undefined) return next;
			return null;
		}
		Backward_icon(){
			const obj = new this.$.$mol_icon_chevron_left();
			return obj;
		}
		Backward(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.backward_hint()));
			(obj.click) = (next) => ((this.backward(next)));
			(obj.sub) = () => ([(this.Backward_icon())]);
			return obj;
		}
		value(next){
			if(next !== undefined) return next;
			return 0;
		}
		Value(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.value())]);
			return obj;
		}
		forward_hint(){
			return (this.$.$mol_locale.text("$mol_paginator_forward_hint"));
		}
		forward(next){
			if(next !== undefined) return next;
			return null;
		}
		Forward_icon(){
			const obj = new this.$.$mol_icon_chevron_right();
			return obj;
		}
		Forward(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.forward_hint()));
			(obj.click) = (next) => ((this.forward(next)));
			(obj.sub) = () => ([(this.Forward_icon())]);
			return obj;
		}
		sub(){
			return [
				(this.Backward()), 
				(this.Value()), 
				(this.Forward())
			];
		}
	};
	($mol_mem(($.$mol_paginator.prototype), "backward"));
	($mol_mem(($.$mol_paginator.prototype), "Backward_icon"));
	($mol_mem(($.$mol_paginator.prototype), "Backward"));
	($mol_mem(($.$mol_paginator.prototype), "value"));
	($mol_mem(($.$mol_paginator.prototype), "Value"));
	($mol_mem(($.$mol_paginator.prototype), "forward"));
	($mol_mem(($.$mol_paginator.prototype), "Forward_icon"));
	($mol_mem(($.$mol_paginator.prototype), "Forward"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_paginator extends $.$mol_paginator {
            backward(event) {
                if (event.defaultPrevented)
                    return;
                event.preventDefault();
                this.value(this.value() - 1);
            }
            forward(event) {
                if (event.defaultPrevented)
                    return;
                event.preventDefault();
                this.value(this.value() + 1);
            }
        }
        $$.$mol_paginator = $mol_paginator;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/paginator/paginator.view.css", "[mol_paginator] {\n\talign-items: flex-start;\n}\n\n[mol_paginator_value] {\n\tpadding: .5rem 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_search_jumper) = class $mol_search_jumper extends ($.$mol_search) {
		index(next){
			if(next !== undefined) return next;
			return 0;
		}
		forward(next){
			return (this.Index().forward(next));
		}
		backward(next){
			return (this.Index().backward(next));
		}
		Backward(){
			const obj = new this.$.$mol_hotkey();
			(obj.mod_shift) = () => (true);
			(obj.key) = () => ({"enter": (next) => (this.backward(next))});
			return obj;
		}
		escape(next){
			if(next !== undefined) return next;
			return null;
		}
		Forward(){
			const obj = new this.$.$mol_hotkey();
			(obj.key) = () => ({"enter": (next) => (this.forward(next)), "escape": (next) => (this.escape(next))});
			return obj;
		}
		Root(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Index(){
			const obj = new this.$.$mol_paginator();
			(obj.value) = (next) => ((this.index(next)));
			return obj;
		}
		plugins(){
			return [
				...(super.plugins()), 
				(this.Backward()), 
				(this.Forward())
			];
		}
	};
	($mol_mem(($.$mol_search_jumper.prototype), "index"));
	($mol_mem(($.$mol_search_jumper.prototype), "Backward"));
	($mol_mem(($.$mol_search_jumper.prototype), "escape"));
	($mol_mem(($.$mol_search_jumper.prototype), "Forward"));
	($mol_mem(($.$mol_search_jumper.prototype), "Root"));
	($mol_mem(($.$mol_search_jumper.prototype), "Index"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_search_jumper extends $.$mol_search_jumper {
            results() {
                const needle = this.query();
                if (needle.length < 2)
                    return [];
                const root = this.Root();
                if (!root)
                    return [];
                const regexp = $mol_regexp.from({ needle }, { ignoreCase: true });
                try {
                    return [...root.view_find((_, text = '') => regexp.test(text))];
                }
                catch (error) {
                    if (!(error instanceof Promise))
                        $mol_fail_hidden(error);
                    return [];
                }
            }
            index(next) {
                this.query();
                const all = this.results();
                if (all.length == 0)
                    return 0;
                let index = next ?? super.index();
                if (index > all.length)
                    index = 1;
                if (index <= 0)
                    index = all.length;
                if (next !== undefined) {
                    const path = all[index - 1];
                    this.Root().ensure_visible(path[path.length - 1]);
                }
                return index;
            }
            anchor_content() {
                return [
                    this.Query(),
                    ...(this.query().length > 0) ? [
                        this.Clear(),
                        this.Index(),
                    ] : [],
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_search_jumper.prototype, "results", null);
        __decorate([
            $mol_mem
        ], $mol_search_jumper.prototype, "index", null);
        $$.$mol_search_jumper = $mol_search_jumper;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_information) = class $mol_icon_information extends ($.$mol_icon) {
		path(){
			return "M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_information_outline) = class $mol_icon_information_outline extends ($.$mol_icon) {
		path(){
			return "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_bookmark) = class $mol_icon_bookmark extends ($.$mol_icon) {
		path(){
			return "M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_bookmark_outline) = class $mol_icon_bookmark_outline extends ($.$mol_icon) {
		path(){
			return "M17,18L12,15.82L7,18V5H17M17,3H7A2,2 0 0,0 5,5V21L12,18L19,21V5C19,3.89 18.1,3 17,3Z";
		}
	};


;
"use strict";

;
	($.$mol_stack) = class $mol_stack extends ($.$mol_view) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/stack/stack.view.css", "[mol_stack] {\n\tdisplay: grid;\n\t/* width: max-content; */\n\t/* height: max-content; */\n\talign-items: flex-start;\n\tjustify-items: flex-start;\n}\n\n[mol_stack] > * {\n\tgrid-area: 1/1;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_text_code_token) = class $mol_text_code_token extends ($.$mol_dimmer) {
		type(){
			return "";
		}
		attr(){
			return {...(super.attr()), "mol_text_code_token_type": (this.type())};
		}
	};
	($.$mol_text_code_token_link) = class $mol_text_code_token_link extends ($.$mol_text_code_token) {
		uri(){
			return "";
		}
		dom_name(){
			return "a";
		}
		type(){
			return "code-link";
		}
		attr(){
			return {
				...(super.attr()), 
				"href": (this.uri()), 
				"target": "_blank"
			};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { hsla } = $mol_style_func;
        $mol_style_define($mol_text_code_token, {
            display: 'inline',
            textDecoration: 'none',
            '@': {
                mol_text_code_token_type: {
                    'code-keyword': {
                        color: hsla(0, 70, 60, 1),
                    },
                    'code-field': {
                        color: hsla(300, 70, 50, 1),
                    },
                    'code-tag': {
                        color: hsla(330, 70, 50, 1),
                    },
                    'code-global': {
                        color: hsla(30, 80, 50, 1),
                    },
                    'code-decorator': {
                        color: hsla(180, 40, 50, 1),
                    },
                    'code-punctuation': {
                        color: hsla(0, 0, 50, 1),
                    },
                    'code-string': {
                        color: hsla(90, 40, 50, 1),
                    },
                    'code-number': {
                        color: hsla(55, 65, 45, 1),
                    },
                    'code-call': {
                        color: hsla(270, 60, 50, 1),
                    },
                    'code-link': {
                        color: hsla(210, 60, 50, 1),
                    },
                    'code-comment-inline': {
                        opacity: .5,
                    },
                    'code-comment-block': {
                        opacity: .5,
                    },
                    'code-docs': {
                        opacity: .75,
                    },
                },
            }
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_text_code_line) = class $mol_text_code_line extends ($.$mol_paragraph) {
		numb(){
			return 0;
		}
		token_type(id){
			return "";
		}
		token_text(id){
			return "";
		}
		highlight(){
			return "";
		}
		token_uri(id){
			return "";
		}
		text(){
			return "";
		}
		minimal_height(){
			return 24;
		}
		numb_showed(){
			return true;
		}
		syntax(){
			return null;
		}
		uri_resolve(id){
			return "";
		}
		Numb(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.numb())]);
			return obj;
		}
		Token(id){
			const obj = new this.$.$mol_text_code_token();
			(obj.type) = () => ((this.token_type(id)));
			(obj.haystack) = () => ((this.token_text(id)));
			(obj.needle) = () => ((this.highlight()));
			return obj;
		}
		Token_link(id){
			const obj = new this.$.$mol_text_code_token_link();
			(obj.haystack) = () => ((this.token_text(id)));
			(obj.needle) = () => ((this.highlight()));
			(obj.uri) = () => ((this.token_uri(id)));
			return obj;
		}
		find_pos(id){
			return null;
		}
	};
	($mol_mem(($.$mol_text_code_line.prototype), "Numb"));
	($mol_mem_key(($.$mol_text_code_line.prototype), "Token"));
	($mol_mem_key(($.$mol_text_code_line.prototype), "Token_link"));


;
"use strict";
var $;
(function ($) {
    class $mol_syntax2 {
        lexems;
        constructor(lexems) {
            this.lexems = lexems;
            for (let name in lexems) {
                this.rules.push({
                    name: name,
                    regExp: lexems[name],
                    size: RegExp('^$|' + lexems[name].source).exec('').length - 1,
                });
            }
            const parts = '(' + this.rules.map(rule => rule.regExp.source).join(')|(') + ')';
            this.regexp = RegExp(`([\\s\\S]*?)(?:(${parts})|$(?![^]))`, 'gmu');
        }
        rules = [];
        regexp;
        tokenize(text, handle) {
            let end = 0;
            lexing: while (end < text.length) {
                const start = end;
                this.regexp.lastIndex = start;
                var found = this.regexp.exec(text);
                end = this.regexp.lastIndex;
                if (start === end)
                    throw new Error('Empty token');
                var prefix = found[1];
                if (prefix)
                    handle('', prefix, [prefix], start);
                var suffix = found[2];
                if (!suffix)
                    continue;
                let offset = 4;
                for (let rule of this.rules) {
                    if (found[offset - 1]) {
                        handle(rule.name, suffix, found.slice(offset, offset + rule.size), start + prefix.length);
                        continue lexing;
                    }
                    offset += rule.size + 1;
                }
                $mol_fail(new Error('$mol_syntax2 is broken'));
            }
        }
        parse(text, handlers) {
            this.tokenize(text, (name, ...args) => handlers[name](...args));
        }
    }
    $.$mol_syntax2 = $mol_syntax2;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_syntax2_md_flow = new $mol_syntax2({
        'quote': /^((?:(?:[>"] )(?:[^]*?)$(\r?\n?))+)([\n\r]*)/,
        'spoiler': /^((?:(?:[\?] )(?:[^]*?)$(\r?\n?))+)([\n\r]*)/,
        'header': /^([#=]+)(\s+)(.*?)$([\n\r]*)/,
        'list': /^((?:(?: ?([*+-])|(?:\d+[\.\)])+) +(?:[^]*?)$(?:\r?\n?)(?:  (?:[^]*?)$(?:\r?\n?))*)+)((?:\r?\n)*)/,
        'code': /^(```\s*)([\w.-]*)[\r\n]+([^]*?)^(```)$([\n\r]*)/,
        'code-indent': /^((?:(?: |\t)(?:[^]*?)$\r?\n?)+)([\n\r]*)/,
        'table': /((?:^\|.+?$\r?\n?)+)([\n\r]*)/,
        'grid': /((?:^ *! .*?$\r?\n?)+)([\n\r]*)/,
        'cut': /^--+$((?:\r?\n)*)/,
        'block': /^(.*?)$((?:\r?\n)*)/,
    });
    $.$mol_syntax2_md_line = new $mol_syntax2({
        'strong': /\*\*(.+?)\*\*/,
        'emphasis': /\*(?!\s)(.+?)\*|\/\/(?!\s)(.+?)\/\//,
        'code': /```(.+?)```|;;(.+?);;|`(.+?)`/,
        'insert': /\+\+(.+?)\+\+/,
        'delete': /~~(.+?)~~|--(.+?)--/,
        'embed': /""(?:(.*?)\\)?(.*?)""/,
        'link': /\\\\(?:(.*?)\\)?(.*?)\\\\/,
        'image-link': /!\[([^\[\]]*?)\]\((.*?)\)/,
        'text-link': /\[(.*?(?:\[[^\[\]]*?\][^\[\]]*?)*)\]\((.*?)\)/,
        'text-link-http': /\b(https?:\/\/[^\s,.;:!?")]+(?:[,.;:!?")][^\s,.;:!?")]+)+)/,
    });
    $.$mol_syntax2_md_code = new $mol_syntax2({
        'code-indent': /\t+/,
        'code-docs': /\/\/\/.*?$/,
        'code-comment-block': /(?:\/\*[^]*?\*\/|\/\+[^]*?\+\/|<![^]*?>)/,
        'code-link': /(?:\w+:\/\/|#)\S+?(?=\s|\\\\|""|$)/,
        'code-comment-inline': /\/\/.*?(?:$|\/\/)|- \\(?!\\).*|#!? .*/,
        'code-string': /(?:".*?"|'.*?'|`.*?`| ?\\\\.+?\\\\|\/.+?\/[dygimsu]*(?!\p{Letter})|[ \t]*\\[^\n]*)/u,
        'code-number': /[+-]?(?:\d*\.)?\d+\w*/,
        'code-call': /\.?\w+ *(?=\()/,
        'code-sexpr': /\((\w+ )/,
        'code-field': /(?:(?:\.|::|->)\w+|[\w-]+\??\s*:(?!\/\/|:))/,
        'code-keyword': /\b(throw|readonly|unknown|keyof|typeof|never|from|class|struct|interface|type|function|extends|implements|module|namespace|import|export|include|require|var|val|let|const|for|do|while|until|in|out|of|new|if|then|else|switch|case|this|return|async|await|yield|try|catch|break|continue|get|set|public|private|protected|string|boolean|number|null|undefined|true|false|void|int|float|ref)\b/,
        'code-global': /[$]+\w*|\b[A-Z][a-z0-9]+[A-Z]\w*/,
        'code-word': /\w+/,
        'code-decorator': /@.+/,
        'code-tag': /<\/?[\w-]+\/?>?|&\w+;/,
        'code-punctuation': /[\-\[\]\{\}\(\)<=>~!\?@#%&\*_\+\\\/\|;:\.,\^]+?/,
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_text_code_line extends $.$mol_text_code_line {
            maximal_width() {
                return this.text().length * this.letter_width();
            }
            syntax() {
                return this.$.$mol_syntax2_md_code;
            }
            tokens(path) {
                const tokens = [];
                const text = (path.length > 0)
                    ? this.tokens(path.slice(0, path.length - 1))[path[path.length - 1]].found.slice(1, -1)
                    : this.text();
                this.syntax().tokenize(text, (name, found, chunks) => {
                    if (name === 'code-sexpr') {
                        tokens.push({ name: 'code-punctuation', found: '(', chunks: [] });
                        tokens.push({ name: 'code-call', found: chunks[0], chunks: [] });
                    }
                    else {
                        tokens.push({ name, found, chunks });
                    }
                });
                return tokens;
            }
            sub() {
                return [
                    ...this.numb_showed() ? [this.Numb()] : [],
                    ...this.row_content([])
                ];
            }
            row_content(path) {
                return this.tokens(path).map((t, i) => this.Token([...path, i]));
            }
            Token(path) {
                return this.token_type(path) === 'code-link' ? this.Token_link(path) : super.Token(path);
            }
            token_type(path) {
                return this.tokens([...path.slice(0, path.length - 1)])[path[path.length - 1]].name;
            }
            token_content(path) {
                const tokens = this.tokens([...path.slice(0, path.length - 1)]);
                const token = tokens[path[path.length - 1]];
                switch (token.name) {
                    case 'code-string': return [
                        token.found[0],
                        ...this.row_content(path),
                        token.found[token.found.length - 1],
                    ];
                    default: return [token.found];
                }
            }
            token_text(path) {
                const tokens = this.tokens([...path.slice(0, path.length - 1)]);
                const token = tokens[path[path.length - 1]];
                return token.found;
            }
            token_uri(path) {
                const uri = this.token_text(path);
                return this.uri_resolve(uri);
            }
            *view_find(check, path = []) {
                if (check(this, this.text())) {
                    yield [...path, this];
                }
            }
            find_pos(offset) {
                return this.find_token_pos([offset]);
            }
            find_token_pos([offset, ...path]) {
                for (const [index, token] of this.tokens(path).entries()) {
                    if (token.found.length >= offset) {
                        const token = this.Token([...path, index]);
                        return { token, offset };
                    }
                    else {
                        offset -= token.found.length;
                    }
                }
                return null;
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "tokens", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "row_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "token_type", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "token_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "token_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "token_uri", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "find_pos", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "find_token_pos", null);
        $$.$mol_text_code_line = $mol_text_code_line;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem } = $mol_style_unit;
        $mol_style_define($mol_text_code_line, {
            display: 'block',
            position: 'relative',
            font: {
                family: 'monospace',
            },
            Numb: {
                textAlign: 'right',
                color: $mol_theme.shade,
                width: rem(3),
                margin: {
                    left: rem(-4),
                },
                display: 'inline-block',
                whiteSpace: 'nowrap',
                userSelect: 'none',
                position: 'absolute',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_clipboard) = class $mol_icon_clipboard extends ($.$mol_icon) {
		path(){
			return "M19,3H14.82C14.4,1.84 13.3,1 12,1C10.7,1 9.6,1.84 9.18,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M12,3A1,1 0 0,1 13,4A1,1 0 0,1 12,5A1,1 0 0,1 11,4A1,1 0 0,1 12,3";
		}
	};


;
"use strict";

;
	($.$mol_icon_clipboard_outline) = class $mol_icon_clipboard_outline extends ($.$mol_icon) {
		path(){
			return "M19,3H14.82C14.4,1.84 13.3,1 12,1C10.7,1 9.6,1.84 9.18,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M12,3A1,1 0 0,1 13,4A1,1 0 0,1 12,5A1,1 0 0,1 11,4A1,1 0 0,1 12,3M7,7H17V5H19V19H5V5H7V7Z";
		}
	};


;
"use strict";

;
	($.$mol_button_copy) = class $mol_button_copy extends ($.$mol_button_minor) {
		text(){
			return (this.title());
		}
		text_blob(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_blob([(this.text())], {"type": "text/plain"});
			return obj;
		}
		html(){
			return "";
		}
		html_blob(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_blob([(this.html())], {"type": "text/html"});
			return obj;
		}
		Icon(){
			const obj = new this.$.$mol_icon_clipboard_outline();
			return obj;
		}
		title(){
			return "";
		}
		blobs(){
			return [(this.text_blob()), (this.html_blob())];
		}
		data(){
			return {};
		}
		sub(){
			return [(this.Icon()), (this.title())];
		}
	};
	($mol_mem(($.$mol_button_copy.prototype), "text_blob"));
	($mol_mem(($.$mol_button_copy.prototype), "html_blob"));
	($mol_mem(($.$mol_button_copy.prototype), "Icon"));


;
"use strict";
var $;
(function ($) {
    const mapping = {
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '&': '&amp;',
    };
    function $mol_html_encode(text) {
        return text.replace(/[&<">]/gi, str => mapping[str]);
    }
    $.$mol_html_encode = $mol_html_encode;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_button_copy extends $.$mol_button_copy {
            data() {
                return Object.fromEntries(this.blobs().map(blob => [blob.type, blob]));
            }
            html() {
                return $mol_html_encode(this.text());
            }
            attachments() {
                return [new ClipboardItem(this.data())];
            }
            click(event) {
                const cb = $mol_wire_sync(this.$.$mol_dom_context.navigator.clipboard);
                cb.writeText?.(this.text());
                cb.write?.(this.attachments());
                if (cb.writeText === undefined && cb.write === undefined) {
                    throw new Error("doesn't support copy to clipoard");
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_button_copy.prototype, "html", null);
        __decorate([
            $mol_mem
        ], $mol_button_copy.prototype, "attachments", null);
        $$.$mol_button_copy = $mol_button_copy;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_text_code) = class $mol_text_code extends ($.$mol_stack) {
		sidebar_showed(){
			return false;
		}
		render_visible_only(){
			return false;
		}
		row_numb(id){
			return 0;
		}
		row_text(id){
			return "";
		}
		syntax(){
			return null;
		}
		uri_resolve(id){
			return "";
		}
		highlight(){
			return "";
		}
		Row(id){
			const obj = new this.$.$mol_text_code_line();
			(obj.numb_showed) = () => ((this.sidebar_showed()));
			(obj.numb) = () => ((this.row_numb(id)));
			(obj.text) = () => ((this.row_text(id)));
			(obj.syntax) = () => ((this.syntax()));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.highlight) = () => ((this.highlight()));
			return obj;
		}
		rows(){
			return [(this.Row("0"))];
		}
		Rows(){
			const obj = new this.$.$mol_list();
			(obj.render_visible_only) = () => ((this.render_visible_only()));
			(obj.rows) = () => ((this.rows()));
			return obj;
		}
		text_export(){
			return "";
		}
		Copy(){
			const obj = new this.$.$mol_button_copy();
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_text_code_Copy_hint")));
			(obj.text) = () => ((this.text_export()));
			return obj;
		}
		attr(){
			return {...(super.attr()), "mol_text_code_sidebar_showed": (this.sidebar_showed())};
		}
		text(){
			return "";
		}
		text_lines(){
			return [];
		}
		find_pos(id){
			return null;
		}
		uri_base(){
			return "";
		}
		sub(){
			return [(this.Rows()), (this.Copy())];
		}
	};
	($mol_mem_key(($.$mol_text_code.prototype), "Row"));
	($mol_mem(($.$mol_text_code.prototype), "Rows"));
	($mol_mem(($.$mol_text_code.prototype), "Copy"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_text_code extends $.$mol_text_code {
            render_visible_only() {
                return this.$.$mol_support_css_overflow_anchor();
            }
            text_lines() {
                return (this.text() ?? '').split('\n');
            }
            rows() {
                return this.text_lines().map((_, index) => this.Row(index + 1));
            }
            row_text(index) {
                return this.text_lines()[index - 1];
            }
            row_numb(index) {
                return index;
            }
            find_pos(offset) {
                for (const [index, line] of this.text_lines().entries()) {
                    if (line.length >= offset) {
                        return this.Row(index + 1).find_pos(offset);
                    }
                    else {
                        offset -= line.length + 1;
                    }
                }
                return null;
            }
            sub() {
                return [
                    this.Rows(),
                    ...this.sidebar_showed() ? [this.Copy()] : []
                ];
            }
            syntax() {
                return this.$.$mol_syntax2_md_code;
            }
            uri_base() {
                return $mol_dom_context.document.location.href;
            }
            uri_resolve(uri) {
                if (/^(\w+script+:)+/.test(uri))
                    return null;
                try {
                    const url = new URL(uri, this.uri_base());
                    return url.toString();
                }
                catch (error) {
                    $mol_fail_log(error);
                    return null;
                }
            }
            text_export() {
                return this.text() + '\n';
            }
        }
        __decorate([
            $mol_mem
        ], $mol_text_code.prototype, "text_lines", null);
        __decorate([
            $mol_mem
        ], $mol_text_code.prototype, "rows", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code.prototype, "row_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code.prototype, "find_pos", null);
        __decorate([
            $mol_mem
        ], $mol_text_code.prototype, "sub", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code.prototype, "uri_resolve", null);
        $$.$mol_text_code = $mol_text_code;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem, px } = $mol_style_unit;
        $mol_style_define($mol_text_code, {
            whiteSpace: 'pre-wrap',
            font: {
                family: 'monospace',
            },
            Rows: {
                padding: $mol_gap.text,
            },
            Row: {
                font: {
                    family: 'inherit',
                },
            },
            Copy: {
                alignSelf: 'flex-start',
                justifySelf: 'flex-start',
            },
            '@': {
                'mol_text_code_sidebar_showed': {
                    true: {
                        $mol_text_code_line: {
                            margin: {
                                left: rem(1.75),
                            },
                        },
                    },
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_float) = class $mol_float extends ($.$mol_view) {
		style(){
			return {...(super.style()), "minHeight": "auto"};
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/float/float.view.css", "[mol_float] {\n\tposition: sticky;\n\ttop: 0;\n\tleft: 0;\n\tz-index: var(--mol_layer_float);\n\topacity: 1;\n\ttransition: opacity .25s ease-in;\n\tdisplay: block;\n\tbackground: linear-gradient( var(--mol_theme_card), var(--mol_theme_card) ), var(--mol_theme_back);\n\tbox-shadow: 0 0 .5rem hsla(0,0%,0%,.25);\n}\n\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_grid) = class $mol_grid extends ($.$mol_view) {
		rows(){
			return [];
		}
		Table(){
			const obj = new this.$.$mol_grid_table();
			(obj.sub) = () => ((this.rows()));
			return obj;
		}
		head_cells(){
			return [];
		}
		cells(id){
			return [];
		}
		cell_content(id){
			return [];
		}
		cell_content_text(id){
			return (this.cell_content(id));
		}
		cell_content_number(id){
			return (this.cell_content(id));
		}
		col_head_content(id){
			return [];
		}
		cell_level(id){
			return 0;
		}
		cell_expanded(id, next){
			if(next !== undefined) return next;
			return false;
		}
		needle(){
			return "";
		}
		cell_value(id){
			return "";
		}
		Cell_dimmer(id){
			const obj = new this.$.$mol_dimmer();
			(obj.needle) = () => ((this.needle()));
			(obj.haystack) = () => ((this.cell_value(id)));
			return obj;
		}
		row_height(){
			return 32;
		}
		row_ids(){
			return [];
		}
		row_id(id){
			return null;
		}
		col_ids(){
			return [];
		}
		records(){
			return {};
		}
		record(id){
			return null;
		}
		hierarchy(){
			return null;
		}
		hierarchy_col(){
			return "";
		}
		minimal_width(){
			return 0;
		}
		sub(){
			return [(this.Head()), (this.Table())];
		}
		Head(){
			const obj = new this.$.$mol_grid_row();
			(obj.cells) = () => ((this.head_cells()));
			return obj;
		}
		Row(id){
			const obj = new this.$.$mol_grid_row();
			(obj.minimal_height) = () => ((this.row_height()));
			(obj.minimal_width) = () => ((this.minimal_width()));
			(obj.cells) = () => ((this.cells(id)));
			return obj;
		}
		Cell(id){
			const obj = new this.$.$mol_view();
			return obj;
		}
		cell(id){
			return null;
		}
		Cell_text(id){
			const obj = new this.$.$mol_grid_cell();
			(obj.sub) = () => ((this.cell_content_text(id)));
			return obj;
		}
		Cell_number(id){
			const obj = new this.$.$mol_grid_number();
			(obj.sub) = () => ((this.cell_content_number(id)));
			return obj;
		}
		Col_head(id){
			const obj = new this.$.$mol_float();
			(obj.dom_name) = () => ("th");
			(obj.sub) = () => ((this.col_head_content(id)));
			return obj;
		}
		Cell_branch(id){
			const obj = new this.$.$mol_check_expand();
			(obj.level) = () => ((this.cell_level(id)));
			(obj.label) = () => ((this.cell_content(id)));
			(obj.expanded) = (next) => ((this.cell_expanded(id, next)));
			return obj;
		}
		Cell_content(id){
			return [(this.Cell_dimmer(id))];
		}
	};
	($mol_mem(($.$mol_grid.prototype), "Table"));
	($mol_mem_key(($.$mol_grid.prototype), "cell_expanded"));
	($mol_mem_key(($.$mol_grid.prototype), "Cell_dimmer"));
	($mol_mem(($.$mol_grid.prototype), "Head"));
	($mol_mem_key(($.$mol_grid.prototype), "Row"));
	($mol_mem_key(($.$mol_grid.prototype), "Cell"));
	($mol_mem_key(($.$mol_grid.prototype), "Cell_text"));
	($mol_mem_key(($.$mol_grid.prototype), "Cell_number"));
	($mol_mem_key(($.$mol_grid.prototype), "Col_head"));
	($mol_mem_key(($.$mol_grid.prototype), "Cell_branch"));
	($.$mol_grid_table) = class $mol_grid_table extends ($.$mol_list) {};
	($.$mol_grid_row) = class $mol_grid_row extends ($.$mol_view) {
		cells(){
			return [];
		}
		sub(){
			return (this.cells());
		}
	};
	($.$mol_grid_cell) = class $mol_grid_cell extends ($.$mol_view) {
		minimal_height(){
			return 40;
		}
	};
	($.$mol_grid_number) = class $mol_grid_number extends ($.$mol_grid_cell) {};


;
"use strict";
var $;
(function ($) {
    class $mol_state_session extends $mol_object {
        static 'native()';
        static native() {
            if (this['native()'])
                return this['native()'];
            check: try {
                const native = $mol_dom_context.sessionStorage;
                if (!native)
                    break check;
                native.setItem('', '');
                native.removeItem('');
                return this['native()'] = native;
            }
            catch (error) {
                console.warn(error);
            }
            return this['native()'] = {
                getItem(key) {
                    return this[':' + key];
                },
                setItem(key, value) {
                    this[':' + key] = value;
                },
                removeItem(key) {
                    this[':' + key] = void 0;
                }
            };
        }
        static value(key, next) {
            if (next === void 0)
                return JSON.parse(this.native().getItem(key) || 'null');
            if (next === null)
                this.native().removeItem(key);
            else
                this.native().setItem(key, JSON.stringify(next));
            return next;
        }
        prefix() { return ''; }
        value(key, next) {
            return $mol_state_session.value(this.prefix() + '.' + key, next);
        }
    }
    __decorate([
        $mol_mem_key
    ], $mol_state_session, "value", null);
    $.$mol_state_session = $mol_state_session;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_grid extends $.$mol_grid {
            head_cells() {
                return this.col_ids().map(colId => this.Col_head(colId));
            }
            col_head_content(colId) {
                return [colId];
            }
            rows() {
                return this.row_ids().map(id => this.Row(id));
            }
            cells(row_id) {
                return this.col_ids().map(col_id => this.Cell({ row: row_id, col: col_id }));
            }
            col_type(col_id) {
                if (col_id === this.hierarchy_col())
                    return 'branch';
                const rowFirst = this.row_id(0);
                const val = this.record(rowFirst[rowFirst.length - 1])[col_id];
                if (typeof val === 'number')
                    return 'number';
                return 'text';
            }
            Cell(id) {
                switch (this.col_type(id.col).valueOf()) {
                    case 'branch': return this.Cell_branch(id);
                    case 'number': return this.Cell_number(id);
                }
                return this.Cell_text(id);
            }
            cell_content(id) {
                return [this.record(id.row[id.row.length - 1])[id.col]];
            }
            cell_content_text(id) {
                return this.cell_content(id).map(val => typeof val === 'object' ? JSON.stringify(val) : val);
            }
            records() {
                return [];
            }
            record(id) {
                return this.records()[id];
            }
            record_ids() {
                return Object.keys(this.records());
            }
            row_id(index) {
                return this.row_ids().slice(index, index + 1).valueOf()[0];
            }
            col_ids() {
                const rowFirst = this.row_id(0);
                if (rowFirst === void 0)
                    return [];
                const record = this.record(rowFirst[rowFirst.length - 1]);
                if (!record)
                    return [];
                return Object.keys(record);
            }
            hierarchy() {
                const hierarchy = {};
                const root = hierarchy[''] = {
                    id: '',
                    parent: null,
                    sub: [],
                };
                this.record_ids().map(id => {
                    root.sub.push(hierarchy[id] = {
                        id,
                        parent: root,
                        sub: [],
                    });
                });
                return hierarchy;
            }
            row_sub_ids(row) {
                return this.hierarchy()[row[row.length - 1]].sub.map(child => row.concat(child.id));
            }
            row_root_id() {
                return [''];
            }
            cell_level(id) {
                return id.row.length - 1;
            }
            row_ids() {
                const next = [];
                const add = (row) => {
                    next.push(row);
                    if (this.row_expanded(row)) {
                        this.row_sub_ids(row).forEach(child => add(child));
                    }
                };
                this.row_sub_ids(this.row_root_id()).forEach(child => add(child));
                return next;
            }
            row_expanded(row_id, next) {
                if (!this.row_sub_ids(row_id).length)
                    return null;
                const key = `row_expanded(${JSON.stringify(row_id)})`;
                const next2 = $mol_state_session.value(key, next);
                return (next2 == null) ? this.row_expanded_default(row_id) : next2;
            }
            row_expanded_default(row_id) {
                return true;
            }
            cell_expanded(id, next) {
                return this.row_expanded(id.row, next);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_grid.prototype, "head_cells", null);
        __decorate([
            $mol_mem
        ], $mol_grid.prototype, "rows", null);
        __decorate([
            $mol_mem_key
        ], $mol_grid.prototype, "col_type", null);
        __decorate([
            $mol_mem
        ], $mol_grid.prototype, "record_ids", null);
        __decorate([
            $mol_mem
        ], $mol_grid.prototype, "hierarchy", null);
        __decorate([
            $mol_mem
        ], $mol_grid.prototype, "row_ids", null);
        $$.$mol_grid = $mol_grid;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/grid/grid.view.css", "[mol_grid] {\n\tdisplay: block;\n\tflex: 0 1 auto;\n\tposition: relative;\n\toverflow-x: auto;\n}\n\n[mol_grid_gap] {\n\tposition: absolute;\n\tpadding: .1px;\n\ttop: 0;\n\ttransform: translateZ(0);\n}\n\n[mol_grid_table] {\n\tborder-spacing: 0;\n\tdisplay: table-row-group;\n\tposition: relative;\n}\n\n[mol_grid_table] > * {\n\tdisplay: table-row;\n\ttransition: none;\n}\n\n[mol_grid_head] > *,\n[mol_grid_table] > * > * {\n\tdisplay: table-cell;\n\tpadding: var(--mol_gap_text);\n\twhite-space: nowrap;\n\tvertical-align: middle;\n\tbox-shadow: inset 2px 2px 0 -1px var(--mol_theme_line);\n}\n\n[mol_grid_row]:where(:first-child) > * {\n\tbox-shadow: inset 2px 0 0 -1px var(--mol_theme_line);\n}\n\n[mol_grid_table] > * > *:where(:first-child) {\n\tbox-shadow: inset 0px 2px 0 -1px var(--mol_theme_line);\n}\n\n[mol_grid_head] > * {\n\tbox-shadow: inset 2px -2px 0 -1px var(--mol_theme_line);\n}\n\n[mol_grid_head] > *:where(:first-child) {\n\tbox-shadow: inset 0px -2px 0 -1px var(--mol_theme_line);\n}\n\n[mol_grid_table] > [mol_grid_row]:where(:first-child) > *:where(:first-child) {\n\tbox-shadow: none;\n}\t\n\n[mol_grid_head] {\n\tdisplay: table-row;\n\ttransform: none !important;\n}\n\n/* [mol_grid_cell_number] {\n\ttext-align: right;\n} */\n\n[mol_grid_col_head] {\n\tfont-weight: inherit;\n\ttext-align: inherit;\n\tdisplay: table-cell;\n\tcolor: var(--mol_theme_shade);\n}\n\n[mol_grid_cell_dimmer] {\n\tdisplay: inline-block;\n\tvertical-align: inherit;\n}\n");
})($ || ($ = {}));

;
	($.$mol_image) = class $mol_image extends ($.$mol_view) {
		uri(){
			return "";
		}
		loading(){
			return "eager";
		}
		decoding(){
			return "async";
		}
		cors(){
			return null;
		}
		natural_width(){
			return 0;
		}
		natural_height(){
			return 0;
		}
		load(next){
			if(next !== undefined) return next;
			return null;
		}
		dom_name(){
			return "img";
		}
		field(){
			return {
				...(super.field()), 
				"src": (this.uri()), 
				"alt": (this.title()), 
				"loading": (this.loading()), 
				"decoding": (this.decoding()), 
				"crossOrigin": (this.cors())
			};
		}
		attr(){
			return {
				...(super.attr()), 
				"width": (this.natural_width()), 
				"height": (this.natural_height())
			};
		}
		event(){
			return {"load": (next) => (this.load(next))};
		}
		minimal_width(){
			return 16;
		}
		minimal_height(){
			return 16;
		}
	};
	($mol_mem(($.$mol_image.prototype), "load"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_image extends $.$mol_image {
            natural_width(next) {
                const dom = this.dom_node();
                if (dom.naturalWidth)
                    return dom.naturalWidth;
                const found = this.uri().match(/\bwidth=(\d+)/);
                return found ? Number(found[1]) : null;
            }
            natural_height(next) {
                const dom = this.dom_node();
                if (dom.naturalHeight)
                    return dom.naturalHeight;
                const found = this.uri().match(/\bheight=(\d+)/);
                return found ? Number(found[1]) : null;
            }
            load() {
                this.natural_width(null);
                this.natural_height(null);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_image.prototype, "natural_width", null);
        __decorate([
            $mol_mem
        ], $mol_image.prototype, "natural_height", null);
        $$.$mol_image = $mol_image;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/image/image.view.css", "[mol_image] {\n\tborder-radius: var(--mol_gap_round);\n\toverflow: hidden;\n\tflex: 0 1 auto;\n\tmax-width: 100%;\n\tobject-fit: cover;\n\theight: fit-content;\n}\n");
})($ || ($ = {}));

;
	($.$mol_link_iconed) = class $mol_link_iconed extends ($.$mol_link) {
		icon(){
			return "";
		}
		Icon(){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.icon()));
			(obj.title) = () => ("");
			return obj;
		}
		title(){
			return (this.uri());
		}
		sub(){
			return [(this.Icon())];
		}
		content(){
			return [(this.title())];
		}
		host(){
			return "";
		}
	};
	($mol_mem(($.$mol_link_iconed.prototype), "Icon"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_link_iconed extends $.$mol_link_iconed {
            icon() {
                return `https://favicon.yandex.net/favicon/${this.host()}?color=0,0,0,0&size=32&stub=1`;
            }
            host() {
                const base = this.$.$mol_state_arg.href();
                const url = new URL(this.uri(), base);
                return url.hostname;
            }
            title() {
                const uri = this.uri();
                const host = this.host();
                const suffix = (host ? uri.split(this.host(), 2)[1] : uri)?.replace(/^[\/\?#!]+/, '');
                return decodeURIComponent(suffix || host).replace(/^\//, ' ');
            }
            sub() {
                return [
                    ...this.host() ? [this.Icon()] : [],
                    ...this.content() ? [' ', ...this.content()] : [],
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_link_iconed.prototype, "icon", null);
        __decorate([
            $mol_mem
        ], $mol_link_iconed.prototype, "host", null);
        __decorate([
            $mol_mem
        ], $mol_link_iconed.prototype, "title", null);
        __decorate([
            $mol_mem
        ], $mol_link_iconed.prototype, "sub", null);
        $$.$mol_link_iconed = $mol_link_iconed;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/link/iconed/iconed.view.css", "[mol_link_iconed] {\n\talign-items: baseline;\n\tdisplay: inline-flex;\n\tpadding: var(--mol_gap_text);\n}\n\n[mol_link_iconed_icon] {\n\tbox-shadow: none;\n\theight: 1.5em;\n\twidth: 1em;\n\tflex: 0 0 auto;\n\tdisplay: inline-block;\n\talign-self: normal;\n\tvertical-align: top;\n\tborder-radius: 0;\n\tobject-fit: scale-down;\n\topacity: .75;\n}\n\n[mol_theme=\"$mol_theme_dark\"] [mol_link_iconed_icon] {\n\tfilter: var(--mol_theme_image);\n}\n");
})($ || ($ = {}));

;
	($.$mol_embed_native) = class $mol_embed_native extends ($.$mol_scroll) {
		mime(){
			return "";
		}
		title(){
			return "";
		}
		Fallback(){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ((this.uri()));
			(obj.sub) = () => ([(this.title())]);
			return obj;
		}
		uri_change(next){
			if(next !== undefined) return next;
			return null;
		}
		uri(next){
			if(next !== undefined) return next;
			return "";
		}
		dom_name(){
			return "object";
		}
		window(){
			return null;
		}
		attr(){
			return {
				...(super.attr()), 
				"data": (this.uri()), 
				"type": (this.mime())
			};
		}
		sub(){
			return [(this.Fallback())];
		}
		message(){
			return {"hashchange": (next) => (this.uri_change(next))};
		}
	};
	($mol_mem(($.$mol_embed_native.prototype), "Fallback"));
	($mol_mem(($.$mol_embed_native.prototype), "uri_change"));
	($mol_mem(($.$mol_embed_native.prototype), "uri"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_embed_native extends $.$mol_embed_native {
            window() {
                $mol_wire_solid();
                return $mol_wire_sync(this).load(this.dom_node_actual());
            }
            load(frame) {
                return new Promise((done, fail) => {
                    frame.onload = () => {
                        try {
                            if (frame.contentWindow.location.href === 'about:blank') {
                                return;
                            }
                        }
                        catch { }
                        done(frame.contentWindow);
                    };
                    frame.onerror = (event) => {
                        fail(typeof event === 'string' ? new Error(event) : event.error || event);
                    };
                });
            }
            uri_resource() {
                return this.uri().replace(/#.*/, '');
            }
            message_listener() {
                return new $mol_dom_listener($mol_dom_context, 'message', $mol_wire_async(this).message_receive);
            }
            message_receive(event) {
                if (!event)
                    return;
                if (event.source !== this.window())
                    return;
                if (!Array.isArray(event.data))
                    return;
                this.message()[event.data[0]]?.(event);
            }
            uri_change(event) {
                this.$.$mol_wait_timeout(1000);
                this.uri(event.data[1]);
            }
            auto() {
                return [
                    this.message_listener(),
                    this.window(),
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_embed_native.prototype, "window", null);
        __decorate([
            $mol_mem
        ], $mol_embed_native.prototype, "uri_resource", null);
        __decorate([
            $mol_mem
        ], $mol_embed_native.prototype, "message_listener", null);
        $$.$mol_embed_native = $mol_embed_native;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/embed/native/native.view.css", "[mol_embed_native] {\n\tmax-width: 100%;\n\tmax-height: 100vh;\n\tobject-fit: cover;\n\tdisplay: flex;\n\tflex: 1 1 auto;\n\tobject-position: top left;\n\tborder-radius: var(--mol_gap_round);\n\taspect-ratio: 4/3;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_youtube) = class $mol_icon_youtube extends ($.$mol_icon) {
		path(){
			return "M10,15L15.19,12L10,9V15M21.56,7.17C21.69,7.64 21.78,8.27 21.84,9.07C21.91,9.87 21.94,10.56 21.94,11.16L22,12C22,14.19 21.84,15.8 21.56,16.83C21.31,17.73 20.73,18.31 19.83,18.56C19.36,18.69 18.5,18.78 17.18,18.84C15.88,18.91 14.69,18.94 13.59,18.94L12,19C7.81,19 5.2,18.84 4.17,18.56C3.27,18.31 2.69,17.73 2.44,16.83C2.31,16.36 2.22,15.73 2.16,14.93C2.09,14.13 2.06,13.44 2.06,12.84L2,12C2,9.81 2.16,8.2 2.44,7.17C2.69,6.27 3.27,5.69 4.17,5.44C4.64,5.31 5.5,5.22 6.82,5.16C8.12,5.09 9.31,5.06 10.41,5.06L12,5C16.19,5 18.8,5.16 19.83,5.44C20.73,5.69 21.31,6.27 21.56,7.17Z";
		}
	};


;
"use strict";

;
	($.$mol_frame) = class $mol_frame extends ($.$mol_embed_native) {
		allow(){
			return "";
		}
		uri(next){
			if(next !== undefined) return next;
			return "about:config";
		}
		html(){
			return null;
		}
		dom_name(){
			return "iframe";
		}
		attr(){
			return {
				...(super.attr()), 
				"data": null, 
				"type": null, 
				"allow": (this.allow()), 
				"src": (this.uri()), 
				"srcdoc": (this.html())
			};
		}
		fullscreen(){
			return true;
		}
		accelerometer(){
			return true;
		}
		autoplay(){
			return true;
		}
		encription(){
			return true;
		}
		gyroscope(){
			return true;
		}
		pip(){
			return true;
		}
		clipboard_read(){
			return true;
		}
		clipboard_write(){
			return true;
		}
	};
	($mol_mem(($.$mol_frame.prototype), "uri"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_frame extends $.$mol_frame {
            window() {
                return super.window();
            }
            allow() {
                return [
                    ...this.fullscreen() ? ['fullscreen'] : [],
                    ...this.accelerometer() ? ['accelerometer'] : [],
                    ...this.autoplay() ? ['autoplay'] : [],
                    ...this.encription() ? ['encrypted-media'] : [],
                    ...this.gyroscope() ? ['gyroscope'] : [],
                    ...this.pip() ? ['picture-in-picture'] : [],
                    ...this.clipboard_read() ? [`clipboard-read ${this.uri()}`] : [],
                    ...this.clipboard_write() ? [`clipboard-write ${this.uri()}`] : [],
                ].join('; ');
            }
        }
        $$.$mol_frame = $mol_frame;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_define($mol_frame, {
        border: {
            style: 'none',
        },
        maxHeight: $mol_style_unit.vh(100),
    });
})($ || ($ = {}));

;
	($.$mol_embed_service) = class $mol_embed_service extends ($.$mol_check) {
		active(next){
			if(next !== undefined) return next;
			return false;
		}
		title(){
			return "";
		}
		video_preview(){
			return "";
		}
		Image(){
			const obj = new this.$.$mol_image();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.video_preview()));
			return obj;
		}
		Hint(){
			const obj = new this.$.$mol_icon_youtube();
			return obj;
		}
		video_embed(){
			return "";
		}
		Frame(){
			const obj = new this.$.$mol_frame();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.video_embed()));
			return obj;
		}
		uri(){
			return "";
		}
		video_id(){
			return "";
		}
		checked(next){
			return (this.active(next));
		}
		sub(){
			return [
				(this.Image()), 
				(this.Hint()), 
				(this.Frame())
			];
		}
	};
	($mol_mem(($.$mol_embed_service.prototype), "active"));
	($mol_mem(($.$mol_embed_service.prototype), "Image"));
	($mol_mem(($.$mol_embed_service.prototype), "Hint"));
	($mol_mem(($.$mol_embed_service.prototype), "Frame"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_embed_service extends $.$mol_embed_service {
            sub() {
                return this.active()
                    ? [this.Frame()]
                    : [this.Image(), this.Hint()];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_embed_service.prototype, "sub", null);
        $$.$mol_embed_service = $mol_embed_service;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/embed/service/service.view.css", "[mol_embed_service] {\n\tpadding: 0;\n\tmax-width: 100%;\n}\n\n[mol_embed_service_image] {\n\tflex: auto 1 1;\n\twidth: 100vw;\n}\n\n[mol_embed_service_frame] {\n\twidth: 100vw;\n}\n\n[mol_embed_service_hint] {\n\tposition: absolute;\n    left: 50%;\n    top: 50%;\n    width: 50%;\n    height: 50%;\n    opacity: 0.3;\n    transform: translate(-50%, -50%);\n}\n\n[mol_embed_service]:hover [mol_embed_service_hint] {\n\topacity: .6;\n}\n");
})($ || ($ = {}));

;
	($.$mol_embed_youtube) = class $mol_embed_youtube extends ($.$mol_embed_service) {};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_embed_youtube extends $.$mol_embed_youtube {
            video_embed() {
                return `https://www.youtube.com/embed/${encodeURIComponent(this.video_id())}?autoplay=1&loop=1`;
            }
            video_id() {
                return this.uri().match(/^https\:\/\/www\.youtube\.com\/(?:embed\/|shorts\/|watch\?v=)([^\/&?#]+)/)?.[1]
                    ?? this.uri().match(/^https\:\/\/youtu\.be\/([^\/&?#]+)/)?.[1]
                    ?? 'about:blank';
            }
            video_preview() {
                return `https://i.ytimg.com/vi/${this.video_id()}/sddefault.jpg`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_embed_youtube.prototype, "video_embed", null);
        __decorate([
            $mol_mem
        ], $mol_embed_youtube.prototype, "video_id", null);
        __decorate([
            $mol_mem
        ], $mol_embed_youtube.prototype, "video_preview", null);
        $$.$mol_embed_youtube = $mol_embed_youtube;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_embed_rutube) = class $mol_embed_rutube extends ($.$mol_embed_service) {};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_embed_rutube extends $.$mol_embed_rutube {
            video_embed() {
                return `https://rutube.ru/play/embed/${encodeURIComponent(this.video_id())}`;
            }
            video_id() {
                return this.uri().match(/^https:\/\/rutube.ru\/video\/([^\/&?#]+)/)?.[1] ?? 'about:blank';
            }
            video_preview() {
                return `https://rutube.ru/api/video/${this.video_id()}/thumbnail/?redirect=1`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_embed_rutube.prototype, "video_embed", null);
        __decorate([
            $mol_mem
        ], $mol_embed_rutube.prototype, "video_id", null);
        __decorate([
            $mol_mem
        ], $mol_embed_rutube.prototype, "video_preview", null);
        $$.$mol_embed_rutube = $mol_embed_rutube;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_embed_any) = class $mol_embed_any extends ($.$mol_view) {
		title(){
			return "";
		}
		uri(){
			return "";
		}
		Image(){
			const obj = new this.$.$mol_image();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
		Object(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
		Youtube(){
			const obj = new this.$.$mol_embed_youtube();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
		Rutube(){
			const obj = new this.$.$mol_embed_rutube();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
	};
	($mol_mem(($.$mol_embed_any.prototype), "Image"));
	($mol_mem(($.$mol_embed_any.prototype), "Object"));
	($mol_mem(($.$mol_embed_any.prototype), "Youtube"));
	($mol_mem(($.$mol_embed_any.prototype), "Rutube"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_embed_any extends $.$mol_embed_any {
            type() {
                try {
                    const uri = this.uri();
                    if (/\b(png|gif|jpg|jpeg|jfif|webp|svg)\b/.test(uri))
                        return 'image';
                    if (/^https:\/\/www\.youtube\.com\//.test(uri))
                        return 'youtube';
                    if (/^https:\/\/youtu\.be\//.test(uri))
                        return 'youtube';
                    if (/^https:\/\/rutube\.ru\//.test(uri))
                        return 'rutube';
                }
                catch (error) {
                    $mol_fail_log(error);
                    return 'image';
                }
                return 'object';
            }
            sub() {
                switch (this.type()) {
                    case 'image': return [this.Image()];
                    case 'youtube': return [this.Youtube()];
                    case 'rutube': return [this.Rutube()];
                    default: return [this.Object()];
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_embed_any.prototype, "type", null);
        __decorate([
            $mol_mem
        ], $mol_embed_any.prototype, "sub", null);
        $$.$mol_embed_any = $mol_embed_any;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_expander) = class $mol_expander extends ($.$mol_list) {
		expanded(next){
			if(next !== undefined) return next;
			return false;
		}
		expandable(){
			return true;
		}
		label(){
			return [(this.title())];
		}
		Trigger(){
			const obj = new this.$.$mol_check_expand();
			(obj.checked) = (next) => ((this.expanded(next)));
			(obj.expandable) = () => ((this.expandable()));
			(obj.label) = () => ((this.label()));
			return obj;
		}
		Tools(){
			return null;
		}
		Label(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Trigger()), (this.Tools())]);
			return obj;
		}
		content(){
			return [];
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.content()));
			return obj;
		}
		rows(){
			return [(this.Label()), (this.Content())];
		}
	};
	($mol_mem(($.$mol_expander.prototype), "expanded"));
	($mol_mem(($.$mol_expander.prototype), "Trigger"));
	($mol_mem(($.$mol_expander.prototype), "Label"));
	($mol_mem(($.$mol_expander.prototype), "Content"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_expander extends $.$mol_expander {
            rows() {
                return [
                    this.Label(),
                    ...this.expanded() ? [this.Content()] : []
                ];
            }
            expandable() {
                return this.content().length > 0;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_expander.prototype, "rows", null);
        $$.$mol_expander = $mol_expander;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/expander/expander.view.css", "[mol_expander] {\n\tflex-direction: column;\n}\n\n[mol_expander_label] {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tborder-radius: var(--mol_gap_round);\n}\n\n[mol_expander_trigger] {\n\tflex: auto;\n\tposition: relative;\n}\n");
})($ || ($ = {}));

;
	($.$mol_text) = class $mol_text extends ($.$mol_list) {
		auto_scroll(){
			return null;
		}
		block_content(id){
			return [];
		}
		uri_resolve(id){
			return "";
		}
		quote_text(id){
			return "";
		}
		highlight(){
			return "";
		}
		list_type(id){
			return "-";
		}
		list_text(id){
			return "";
		}
		header_level(id){
			return 1;
		}
		header_arg(id){
			return {};
		}
		pre_text(id){
			return "";
		}
		code_sidebar_showed(){
			return true;
		}
		pre_sidebar_showed(){
			return (this.code_sidebar_showed());
		}
		table_head_cells(id){
			return [];
		}
		table_rows(id){
			return [];
		}
		table_cells(id){
			return [];
		}
		table_cell_text(id){
			return "";
		}
		grid_rows(id){
			return [];
		}
		grid_cells(id){
			return [];
		}
		grid_cell_text(id){
			return "";
		}
		line_text(id){
			return "";
		}
		line_type(id){
			return "";
		}
		line_content(id){
			return [];
		}
		code_syntax(){
			return null;
		}
		link_uri(id){
			return "";
		}
		link_host(id){
			return "";
		}
		spoiler_label(id){
			return "";
		}
		Spoiler_label(id){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.spoiler_label(id)));
			return obj;
		}
		spoiler_content(id){
			return "";
		}
		Spoiler_content(id){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.spoiler_content(id)));
			return obj;
		}
		uri_base(){
			return "";
		}
		text(){
			return "";
		}
		param(){
			return "";
		}
		flow_tokens(){
			return [];
		}
		block_text(id){
			return "";
		}
		auto(){
			return [(this.auto_scroll())];
		}
		Paragraph(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ((this.block_content(id)));
			return obj;
		}
		Quote(id){
			const obj = new this.$.$mol_text();
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.text) = () => ((this.quote_text(id)));
			(obj.highlight) = () => ((this.highlight()));
			(obj.auto_scroll) = () => (null);
			return obj;
		}
		List(id){
			const obj = new this.$.$mol_text_list();
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.type) = () => ((this.list_type(id)));
			(obj.text) = () => ((this.list_text(id)));
			(obj.highlight) = () => ((this.highlight()));
			return obj;
		}
		item_index(id){
			return 0;
		}
		Header(id){
			const obj = new this.$.$mol_text_header();
			(obj.minimal_height) = () => (40);
			(obj.level) = () => ((this.header_level(id)));
			(obj.content) = () => ((this.block_content(id)));
			(obj.arg) = () => ((this.header_arg(id)));
			return obj;
		}
		Pre(id){
			const obj = new this.$.$mol_text_code();
			(obj.text) = () => ((this.pre_text(id)));
			(obj.highlight) = () => ((this.highlight()));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.sidebar_showed) = () => ((this.pre_sidebar_showed()));
			return obj;
		}
		Cut(id){
			const obj = new this.$.$mol_view();
			(obj.dom_name) = () => ("hr");
			return obj;
		}
		Table(id){
			const obj = new this.$.$mol_grid();
			(obj.head_cells) = () => ((this.table_head_cells(id)));
			(obj.rows) = () => ((this.table_rows(id)));
			return obj;
		}
		Table_row(id){
			const obj = new this.$.$mol_grid_row();
			(obj.cells) = () => ((this.table_cells(id)));
			return obj;
		}
		Table_cell(id){
			const obj = new this.$.$mol_text();
			(obj.auto_scroll) = () => (null);
			(obj.highlight) = () => ((this.highlight()));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.text) = () => ((this.table_cell_text(id)));
			return obj;
		}
		Grid(id){
			const obj = new this.$.$mol_grid();
			(obj.rows) = () => ((this.grid_rows(id)));
			return obj;
		}
		Grid_row(id){
			const obj = new this.$.$mol_grid_row();
			(obj.cells) = () => ((this.grid_cells(id)));
			return obj;
		}
		Grid_cell(id){
			const obj = new this.$.$mol_text();
			(obj.auto_scroll) = () => (null);
			(obj.highlight) = () => ((this.highlight()));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.text) = () => ((this.grid_cell_text(id)));
			return obj;
		}
		String(id){
			const obj = new this.$.$mol_dimmer();
			(obj.dom_name) = () => ("span");
			(obj.needle) = () => ((this.highlight()));
			(obj.haystack) = () => ((this.line_text(id)));
			return obj;
		}
		Span(id){
			const obj = new this.$.$mol_text_span();
			(obj.dom_name) = () => ("span");
			(obj.type) = () => ((this.line_type(id)));
			(obj.sub) = () => ((this.line_content(id)));
			return obj;
		}
		Code_line(id){
			const obj = new this.$.$mol_text_code_line();
			(obj.numb_showed) = () => (false);
			(obj.highlight) = () => ((this.highlight()));
			(obj.text) = () => ((this.line_text(id)));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.syntax) = () => ((this.code_syntax()));
			return obj;
		}
		Link(id){
			const obj = new this.$.$mol_link_iconed();
			(obj.uri) = () => ((this.link_uri(id)));
			(obj.content) = () => ((this.line_content(id)));
			return obj;
		}
		Link_http(id){
			const obj = new this.$.$mol_link_iconed();
			(obj.uri) = () => ((this.link_uri(id)));
			(obj.content) = () => ([(this.link_host(id))]);
			return obj;
		}
		Embed(id){
			const obj = new this.$.$mol_embed_any();
			(obj.uri) = () => ((this.link_uri(id)));
			(obj.title) = () => ((this.line_text(id)));
			return obj;
		}
		Spoiler(id){
			const obj = new this.$.$mol_expander();
			(obj.label) = () => ([(this.Spoiler_label(id))]);
			(obj.content) = () => ([(this.Spoiler_content(id))]);
			return obj;
		}
	};
	($mol_mem_key(($.$mol_text.prototype), "Spoiler_label"));
	($mol_mem_key(($.$mol_text.prototype), "Spoiler_content"));
	($mol_mem_key(($.$mol_text.prototype), "Paragraph"));
	($mol_mem_key(($.$mol_text.prototype), "Quote"));
	($mol_mem_key(($.$mol_text.prototype), "List"));
	($mol_mem_key(($.$mol_text.prototype), "Header"));
	($mol_mem_key(($.$mol_text.prototype), "Pre"));
	($mol_mem_key(($.$mol_text.prototype), "Cut"));
	($mol_mem_key(($.$mol_text.prototype), "Table"));
	($mol_mem_key(($.$mol_text.prototype), "Table_row"));
	($mol_mem_key(($.$mol_text.prototype), "Table_cell"));
	($mol_mem_key(($.$mol_text.prototype), "Grid"));
	($mol_mem_key(($.$mol_text.prototype), "Grid_row"));
	($mol_mem_key(($.$mol_text.prototype), "Grid_cell"));
	($mol_mem_key(($.$mol_text.prototype), "String"));
	($mol_mem_key(($.$mol_text.prototype), "Span"));
	($mol_mem_key(($.$mol_text.prototype), "Code_line"));
	($mol_mem_key(($.$mol_text.prototype), "Link"));
	($mol_mem_key(($.$mol_text.prototype), "Link_http"));
	($mol_mem_key(($.$mol_text.prototype), "Embed"));
	($mol_mem_key(($.$mol_text.prototype), "Spoiler"));
	($.$mol_text_header) = class $mol_text_header extends ($.$mol_paragraph) {
		arg(){
			return {};
		}
		content(){
			return [];
		}
		Link(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ((this.arg()));
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_text_header_Link_hint")));
			(obj.sub) = () => ((this.content()));
			return obj;
		}
		level(){
			return 1;
		}
		sub(){
			return [(this.Link())];
		}
	};
	($mol_mem(($.$mol_text_header.prototype), "Link"));
	($.$mol_text_span) = class $mol_text_span extends ($.$mol_paragraph) {
		type(){
			return "";
		}
		dom_name(){
			return "span";
		}
		attr(){
			return {...(super.attr()), "mol_text_type": (this.type())};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_text extends $.$mol_text {
            flow_tokens() {
                const tokens = [];
                this.$.$mol_syntax2_md_flow.tokenize(this.text(), (name, found, chunks) => tokens.push({ name, found, chunks }));
                return tokens;
            }
            block_type(index) {
                return this.flow_tokens()[index].name;
            }
            rows() {
                return this.flow_tokens().map(({ name }, index) => {
                    switch (name) {
                        case 'quote': return this.Quote(index);
                        case 'spoiler': return this.Spoiler(index);
                        case 'header': return this.Header(index);
                        case 'list': return this.List(index);
                        case 'code': return this.Pre(index);
                        case 'code-indent': return this.Pre(index);
                        case 'table': return this.Table(index);
                        case 'grid': return this.Grid(index);
                        case 'cut': return this.Cut(index);
                        default: return this.Paragraph(index);
                    }
                });
            }
            param() {
                return this.toString().replace(/^.*?[\)>]\./, '').replace(/[(<>)]/g, '');
            }
            header_level(index) {
                return this.flow_tokens()[index].chunks[0].length;
            }
            header_arg(index) {
                return {
                    [this.param()]: this.block_text(index)
                };
            }
            list_type(index) {
                return this.flow_tokens()[index].chunks[1] ?? '';
            }
            item_index(index) {
                return this.flow_tokens().slice(0, index).filter(token => token.name === 'block').length + 1;
            }
            pre_text(index) {
                const token = this.flow_tokens()[index];
                return (token.chunks[2] ?? token.chunks[0].replace(/^(\t| (?:\+\+|--|\*\*|  ) )/gm, '')).replace(/[\n\r]*$/, '');
            }
            quote_text(index) {
                return this.flow_tokens()[index].chunks[0].replace(/^[>"] /mg, '');
            }
            list_text(index) {
                return this.flow_tokens()[index].chunks[0].replace(/^([-*+]|(?:\d+[\.\)])+) ?/mg, '').replace(/^  ?/mg, '');
            }
            cell_content(indexBlock) {
                return this.flow_tokens()[indexBlock].chunks[0]
                    .split(/\r?\n/g)
                    .filter(row => row && !/\|--/.test(row))
                    .map((row, rowId) => {
                    return row.split(/\|/g)
                        .filter(cell => cell)
                        .map((cell, cellId) => cell.trim());
                });
            }
            table_rows(blockId) {
                return this.cell_content(blockId)
                    .slice(1)
                    .map((row, rowId) => this.Table_row({ block: blockId, row: rowId + 1 }));
            }
            table_head_cells(blockId) {
                return this.cell_content(blockId)[0]
                    .map((cell, cellId) => this.Table_cell({ block: blockId, row: 0, cell: cellId }));
            }
            table_cells(id) {
                return this.cell_content(id.block)[id.row]
                    .map((cell, cellId) => this.Table_cell({ block: id.block, row: id.row, cell: cellId }));
            }
            table_cell_text(id) {
                return this.cell_content(id.block)[id.row][id.cell];
            }
            grid_content(indexBlock) {
                return [...this.flow_tokens()[indexBlock].chunks[0].match(/(?:^! .*?$\r?\n?)+(?:^ +! .*?$\r?\n?)*/gm)]
                    .map((row, rowId) => {
                    const cells = [];
                    for (const line of row.trim().split(/\r?\n/)) {
                        const [_, indent, content] = /^( *)! (.*)/.exec(line);
                        const col = Math.ceil(indent.length / 2);
                        cells[col] = (cells[col] ? cells[col] + '\n' : '') + content;
                    }
                    return cells;
                });
            }
            grid_rows(blockId) {
                return this.grid_content(blockId)
                    .map((row, rowId) => this.Grid_row({ block: blockId, row: rowId }));
            }
            grid_cells(id) {
                return this.grid_content(id.block)[id.row]
                    .map((cell, cellId) => this.Grid_cell({ block: id.block, row: id.row, cell: cellId }));
            }
            grid_cell_text(id) {
                return this.grid_content(id.block)[id.row][id.cell];
            }
            uri_base() {
                return $mol_dom_context.document.location.href;
            }
            uri_base_abs() {
                return new URL(this.uri_base(), $mol_dom_context.document.location.href);
            }
            uri_resolve(uri) {
                if (/^(\w+script+:)+/.test(uri))
                    return null;
                if (/^#\!/.test(uri)) {
                    const params = {};
                    for (const chunk of uri.slice(2).split(this.$.$mol_state_arg.separator)) {
                        if (!chunk)
                            continue;
                        const vals = chunk.split('=').map(decodeURIComponent);
                        params[vals.shift()] = vals.join('=');
                    }
                    return this.$.$mol_state_arg.link(params);
                }
                try {
                    const url = new URL(uri, this.uri_base_abs());
                    return url.toString();
                }
                catch (error) {
                    $mol_fail_log(error);
                    return null;
                }
            }
            code_syntax() {
                return this.$.$mol_syntax2_md_code;
            }
            block_text(index) {
                const token = this.flow_tokens()[index];
                switch (token.name) {
                    case 'header': return token.chunks[2];
                    default: return token.chunks[0];
                }
            }
            block_content(index) {
                return this.line_content([index]);
            }
            line_tokens(path) {
                const tokens = [];
                this.$.$mol_syntax2_md_line.tokenize(this.line_text(path), (name, found, chunks) => tokens.push({ name, found, chunks }));
                return tokens;
            }
            line_token(path) {
                const tokens = this.line_tokens(path.slice(0, path.length - 1));
                return tokens[path[path.length - 1]];
            }
            line_type(path) {
                return this.line_token(path).name;
            }
            line_text(path) {
                if (path.length === 1)
                    return this.block_text(path[0]);
                const { name, found, chunks } = this.line_token(path);
                switch (name) {
                    case 'link': return chunks[0] || chunks[1].replace(/^.*?\/\/|\/.*$/g, '');
                    case 'text-link': return chunks[0] || chunks[1].replace(/^.*?\/\/|\/.*$/g, '');
                    default: return (chunks[0] || chunks[1] || chunks[2]) ?? found;
                }
            }
            line_content(path) {
                return this.line_tokens(path).map(({ name, chunks }, index) => {
                    const path2 = [...path, index];
                    switch (name) {
                        case 'embed': return this.Embed(path2);
                        case 'link': return this.Link(path2);
                        case 'text-link-http': return this.Link_http(path2);
                        case 'text-link': return this.Link(path2);
                        case 'image-link': return this.Embed(path2);
                        case 'code': return this.Code_line(path2);
                        case '': return this.String(path2);
                        default: return this.Span(path2);
                    }
                });
            }
            link_uri(path) {
                const token = this.line_token(path);
                const uri = this.uri_resolve(token.chunks[1] ?? token.found);
                if (!uri)
                    throw new Error('Bad link');
                return uri;
            }
            link_host(path) {
                return this.link_uri(path).replace(/^.*?\/\/|\/.*$/g, '');
            }
            auto_scroll() {
                for (const [index, token] of this.flow_tokens().entries()) {
                    if (token.name !== 'header')
                        continue;
                    const header = this.Header(index);
                    if (!header.Link().current())
                        continue;
                    new $mol_after_tick(() => this.ensure_visible(header));
                }
            }
            spoiler_rows(index) {
                return this.flow_tokens()[index].chunks[0].replace(/^[\?] /mg, '').split('\n');
            }
            spoiler_label(index) {
                return this.spoiler_rows(index)[0];
            }
            spoiler_content(index) {
                return this.spoiler_rows(index).slice(1).join('\n');
            }
        }
        __decorate([
            $mol_mem
        ], $mol_text.prototype, "flow_tokens", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "block_type", null);
        __decorate([
            $mol_mem
        ], $mol_text.prototype, "rows", null);
        __decorate([
            $mol_mem
        ], $mol_text.prototype, "param", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "header_level", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "header_arg", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "pre_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "quote_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "list_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "cell_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "table_rows", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "table_head_cells", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "table_cells", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "table_cell_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "grid_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "grid_rows", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "grid_cells", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "grid_cell_text", null);
        __decorate([
            $mol_mem
        ], $mol_text.prototype, "uri_base_abs", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "uri_resolve", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "block_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "line_tokens", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "line_token", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "line_type", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "line_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "line_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "link_uri", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "link_host", null);
        __decorate([
            $mol_mem
        ], $mol_text.prototype, "auto_scroll", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "spoiler_rows", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "spoiler_label", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "spoiler_content", null);
        $$.$mol_text = $mol_text;
        class $mol_text_header extends $.$mol_text_header {
            dom_name() {
                return 'h' + this.level();
            }
        }
        $$.$mol_text_header = $mol_text_header;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/text/text/text.view.css", "[mol_text] {\n\tline-height: 1.5em;\n\tbox-sizing: border-box;\n\tborder-radius: var(--mol_gap_round);\n\twhite-space: pre-line;\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex: 0 0 auto;\n\ttab-size: 4;\n}\n\n[mol_text_paragraph] {\n\tpadding: var(--mol_gap_text);\n\toverflow: auto;\n\toverflow-x: overlay;\n\tmax-width: 100%;\n\tdisplay: block;\n\tmax-width: 60rem;\n\tbreak-inside: avoid;\n}\n\n[mol_text_spoiler_label_paragraph] {\n\tpadding: 0;\n}\n\n[mol_text_span] {\n\tdisplay: inline;\n}\n\n[mol_text_string] {\n\tdisplay: inline;\n\tflex: 0 1 auto;\n\twhite-space: normal;\n}\n\n[mol_text_quote] {\n\tmargin: var(--mol_gap_block);\n\tpadding: var(--mol_gap_block);\n\tbackground: var(--mol_theme_card);\n\tbox-shadow: 0 0 0 1px var(--mol_theme_back);\n\tbreak-inside: avoid;\n}\n\n[mol_text_header] {\n\tdisplay: block;\n\ttext-shadow: 0 0;\n\tfont-weight: normal;\n\tbreak-after: avoid;\n}\n\n* + [mol_text_header] {\n\tmargin-top: 0.75rem;\n}\n\nh1[mol_text_header] {\n\tfont-size: 1.5rem;\n}\n\nh2[mol_text_header] {\n\tfont-size: 1.5rem;\n\tfont-style: italic;\n}\n\nh3[mol_text_header] {\n\tfont-size: 1.25rem;\n}\n\nh4[mol_text_header] {\n\tfont-size: 1.25em;\n\tfont-style: italic;\n}\n\nh5[mol_text_header] {\n\tfont-size: 1rem;\n}\n\nh6[mol_text_header] {\n\tfont-size: 1rem;\n\tfont-style: italic;\n}\n\n[mol_text_header_link] {\n\tcolor: inherit;\n}\n\n[mol_text_table] {\n\tbreak-inside: avoid;\n}\n\n[mol_text_table_cell] {\n\twidth: auto;\n\tdisplay: table-cell;\n\tvertical-align: baseline;\n\tpadding: 0;\n\tborder-radius: 0;\n}\n\n[mol_text_grid] {\n\tbreak-inside: avoid;\n}\n\n[mol_text_grid_cell] {\n\twidth: auto;\n\tdisplay: table-cell;\n\tvertical-align: top;\n\tpadding: 0;\n\tborder-radius: 0;\n}\n\n[mol_text_cut] {\n\tborder: none;\n\twidth: 100%;\n\tbox-shadow: 0 0 0 1px var(--mol_theme_line);\n}\n\n[mol_text_link_http],\n[mol_text_link] {\n\tpadding: 0;\n\tdisplay: inline;\n\twhite-space: nowrap;\n}\n\n[mol_text_link_icon] + [mol_text_embed] {\n\tmargin-left: -1.5rem;\n}\n\n[mol_text_embed_youtube] {\n\tdisplay: inline;\n}\n\n[mol_text_embed_youtube_image],\n[mol_text_embed_youtube_frame],\n[mol_text_embed_object] {\n\tobject-fit: contain;\n\tobject-position: center;\n\tdisplay: inline;\n\twidth: 100vw;\n\tmax-height: calc( 100vh - 6rem );\n\tvertical-align: top;\n}\n[mol_text_embed_object_fallback] {\n\tpadding: 0;\n}\n[mol_text_embed_image] {\n\tobject-fit: contain;\n\tobject-position: center;\n\tdisplay: inline;\n\t/* max-height: calc( 100vh - 6rem ); */\n\tvertical-align: top;\n}\n\n[mol_text_pre] {\n\twhite-space: pre;\n\toverflow-x: auto;\n\toverflow-x: overlay;\n\ttab-size: 2;\n\tbreak-inside: avoid;\n}\n\n[mol_text_code_line] {\n\tdisplay: inline-block;\n}\n\n[mol_text_type=\"strong\"] {\n\ttext-shadow: 0 0;\n\tfilter: contrast(1.5);\n}\n\n[mol_text_type=\"emphasis\"] {\n\tfont-style: italic;\n}\n\n[mol_text_type=\"insert\"] {\n\tcolor: var(--mol_theme_special);\n}\n\n[mol_text_type=\"delete\"] {\n\tcolor: var(--mol_theme_shade);\n}\n\n[mol_text_type=\"remark\"] {\n\tcolor: var(--mol_theme_shade);\n}\n\n[mol_text_type=\"quote\"] {\n\tfont-style: italic;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_calendar) = class $mol_icon_calendar extends ($.$mol_icon) {
		path(){
			return "M19,19H5V8H19M16,1V3H8V1H6V3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3H18V1M17,12H12V17H17V12Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_calendar_today) = class $mol_icon_calendar_today extends ($.$mol_icon) {
		path(){
			return "M7,10H12V15H7M19,19H5V8H19M19,3H18V1H16V3H8V1H6V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3Z";
		}
	};


;
"use strict";

;
	($.$mol_format) = class $mol_format extends ($.$mol_string) {
		mask(id){
			return "";
		}
		allow(){
			return "0123456789";
		}
		hint(){
			return (this.mask("0"));
		}
		keyboard(){
			return "numeric";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_format extends $.$mol_format {
            selection([from, to] = [0, 0]) {
                const prev = $mol_wire_probe(() => this.selection());
                if (!prev)
                    return [0, 100];
                if (from !== to)
                    return [from, to];
                const allow = this.allow();
                const value = this.value_changed();
                const filtered = [...value].filter(letter => allow.includes(letter)).join('');
                const mask = this.mask(filtered);
                if ((prev?.[0] ?? 0) >= from)
                    return [from, to];
                const lastAllow = (value.length - [...value].reverse().findIndex(letter => allow.includes(letter))) % (value.length + 1);
                if (lastAllow < from) {
                    from = to = lastAllow;
                }
                while (mask[from] && mask[from] !== '_') {
                    ++from;
                    ++to;
                }
                return [from, to];
            }
            value_changed(next) {
                const allow = this.allow();
                const normalize = (val) => {
                    val = [...val].filter(letter => allow.includes(letter)).join('');
                    const letters = [...val].reverse();
                    return this.mask(val).replace(/_/gu, () => letters.pop() ?? '_') + letters.reverse().join('');
                };
                if (next !== undefined) {
                    next = normalize(next);
                    if ([...next].filter(letter => allow.includes(letter)).join('')) {
                        if (next.includes('_'))
                            return next;
                    }
                    else {
                        next = '';
                    }
                }
                return normalize(this.value(next));
            }
        }
        __decorate([
            $mol_mem
        ], $mol_format.prototype, "selection", null);
        __decorate([
            $mol_mem
        ], $mol_format.prototype, "value_changed", null);
        $$.$mol_format = $mol_format;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/format/format.view.css", "[mol_format] {\n\tfont-family: monospace;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_trash_can) = class $mol_icon_trash_can extends ($.$mol_icon) {
		path(){
			return "M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M9,8H11V17H9V8M13,8H15V17H13V8Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_trash_can_outline) = class $mol_icon_trash_can_outline extends ($.$mol_icon) {
		path(){
			return "M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z";
		}
	};


;
"use strict";

;
	($.$mol_hor) = class $mol_hor extends ($.$mol_view) {};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_hor extends $.$mol_hor {
            minimal_width() {
                let min = 0;
                for (const view of this.sub()) {
                    if (!(view instanceof $mol_view))
                        continue;
                    min += view.minimal_width();
                }
                return min;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_hor.prototype, "minimal_width", null);
        $$.$mol_hor = $mol_hor;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_define($mol_hor, {
        display: 'flex',
        alignItems: 'flex-start',
        alignContent: 'flex-start',
        justifyContent: 'flex-start',
        flex: {
            grow: 1,
            shrink: 0,
            basis: 'auto',
        },
    });
})($ || ($ = {}));

;
	($.$mol_calendar) = class $mol_calendar extends ($.$mol_list) {
		title(){
			return "";
		}
		Title(){
			const obj = new this.$.$mol_view();
			(obj.minimal_height) = () => (24);
			(obj.sub) = () => ([(this.title())]);
			return obj;
		}
		head(){
			return [(this.Title())];
		}
		Head(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.head()));
			return obj;
		}
		weekdays(){
			return [];
		}
		Weekdays(){
			const obj = new this.$.$mol_hor();
			(obj.sub) = () => ((this.weekdays()));
			return obj;
		}
		weekend(id){
			return false;
		}
		weekday(id){
			return "";
		}
		week_days(id){
			return [];
		}
		day_ghost(id){
			return false;
		}
		day_holiday(id){
			return false;
		}
		day_selected(id){
			return false;
		}
		day_today(id){
			return false;
		}
		day_theme(id){
			return null;
		}
		day_text(id){
			return "";
		}
		day_content(id){
			return [(this.day_text(id))];
		}
		sub(){
			return [(this.Head()), (this.Weekdays())];
		}
		weeks(){
			return [];
		}
		weeks_count(){
			return 6;
		}
		Weekday(id){
			const obj = new this.$.$mol_calendar_day();
			(obj.holiday) = () => ((this.weekend(id)));
			(obj.sub) = () => ([(this.weekday(id))]);
			return obj;
		}
		Week(id){
			const obj = new this.$.$mol_hor();
			(obj.sub) = () => ((this.week_days(id)));
			return obj;
		}
		Day(id){
			const obj = new this.$.$mol_calendar_day();
			(obj.ghost) = () => ((this.day_ghost(id)));
			(obj.holiday) = () => ((this.day_holiday(id)));
			(obj.selected) = () => ((this.day_selected(id)));
			(obj.today) = () => ((this.day_today(id)));
			(obj.theme) = () => ((this.day_theme(id)));
			(obj.sub) = () => ((this.day_content(id)));
			return obj;
		}
		month_string(){
			return "";
		}
		month_moment(){
			const obj = new this.$.$mol_time_moment();
			return obj;
		}
	};
	($mol_mem(($.$mol_calendar.prototype), "Title"));
	($mol_mem(($.$mol_calendar.prototype), "Head"));
	($mol_mem(($.$mol_calendar.prototype), "Weekdays"));
	($mol_mem_key(($.$mol_calendar.prototype), "Weekday"));
	($mol_mem_key(($.$mol_calendar.prototype), "Week"));
	($mol_mem_key(($.$mol_calendar.prototype), "Day"));
	($mol_mem(($.$mol_calendar.prototype), "month_moment"));
	($.$mol_calendar_day) = class $mol_calendar_day extends ($.$mol_view) {
		holiday(){
			return false;
		}
		ghost(){
			return false;
		}
		selected(){
			return false;
		}
		today(){
			return false;
		}
		theme(){
			return null;
		}
		minimal_height(){
			return 24;
		}
		minimal_width(){
			return 36;
		}
		attr(){
			return {
				"mol_calendar_holiday": (this.holiday()), 
				"mol_calendar_ghost": (this.ghost()), 
				"mol_calendar_selected": (this.selected()), 
				"mol_calendar_today": (this.today()), 
				"mol_theme": (this.theme())
			};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_calendar extends $.$mol_calendar {
            month_moment() {
                const moment = new $mol_time_moment(this.month_string() || undefined);
                return new $mol_time_moment({ year: moment.year, month: moment.month });
            }
            title() {
                return this.month_moment().toString('Month YYYY');
            }
            day_first() {
                return this.month_moment().merge({ day: 0 });
            }
            day_last() {
                return this.day_first().shift('P1M');
            }
            day_draw_from() {
                let weekday = this.day_first().weekday;
                return this.day_first().shift({ day: -weekday });
            }
            weekdays() {
                const next = [];
                for (let index = 0; index < 7; ++index) {
                    next.push(this.Weekday(index));
                }
                return next;
            }
            weekday(index) {
                return this.day_draw_from().shift({ day: index }).toString('WD');
            }
            weekend(index) {
                return [5, 6].indexOf(index) >= 0;
            }
            sub() {
                return [
                    ...super.sub(),
                    ...this.weeks(),
                ];
            }
            weeks() {
                const weeks = [];
                let count = this.weeks_count();
                for (let i = 0; i < count; ++i) {
                    weeks.push(this.Week(i));
                }
                return weeks;
            }
            week_days(index) {
                const days = [];
                let start = this.day_draw_from().shift({ day: index * 7 });
                for (let i = 0; i < 7; ++i) {
                    days.push(this.Day(start.shift({ day: i }).toString('YYYY-MM-DD')));
                }
                return days;
            }
            day_text(day) {
                return new $mol_time_moment(day).toString("D");
            }
            day_holiday(day) {
                return this.weekend(new $mol_time_moment(day).weekday);
            }
            today() {
                return new $mol_time_moment();
            }
            day_today(day) {
                return this.today().toString('YYYY-MM-DD') === day;
            }
            day_ghost(day) {
                return new $mol_time_moment(day).toString('YYYY-MM') !== this.day_first().toString('YYYY-MM');
            }
            day_theme(day) {
                return this.day_selected(day) ? '$mol_theme_current' : super.day_theme(day);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "month_moment", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "day_first", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "day_last", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "day_draw_from", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "weekdays", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "weekday", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "sub", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "weeks", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "week_days", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "day_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "day_holiday", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "today", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "day_today", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "day_ghost", null);
        $$.$mol_calendar = $mol_calendar;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/calendar/calendar.view.css", "[mol_calendar] {\n\tdisplay: table;\n\tfont-family: monospace;\n}\n\n[mol_calendar_head] {\n\tdisplay: table-caption;\n\tbackground: inherit;\n}\n\n[mol_calendar_title] {\n\tjustify-content: center;\n}\n\n[mol_calendar_weekdays] ,\n[mol_calendar_week] {\n\tdisplay: table-row;\n\tpadding: 0;\n}\n\n[mol_calendar_day] {\n\tdisplay: table-cell;\n\tpadding: .25rem .5rem;\n\ttext-align: center;\n\tword-break: normal;\n\tbox-shadow: none;\n\tborder-radius: var(--mol_gap_round);\n}\n\n[mol_calendar_weekday] {\n\tcolor: var(--mol_theme_shade);\n\tborder-bottom: 1px solid var(--mol_theme_line);\n}\n\n[mol_calendar_holiday] {\n\tcolor: var(--mol_theme_special);\n}\n\n[mol_calendar_today] {\n\tfont-weight: bolder;\n}\n\n[mol_calendar_ghost] {\n\topacity: .2;\n}\n");
})($ || ($ = {}));

;
	($.$mol_date) = class $mol_date extends ($.$mol_pick) {
		enabled(){
			return true;
		}
		today_click(next){
			if(next !== undefined) return next;
			return null;
		}
		Today_icon(){
			const obj = new this.$.$mol_icon_calendar_today();
			return obj;
		}
		Today(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_date_Today_hint")));
			(obj.enabled) = () => ((this.enabled()));
			(obj.click) = (next) => ((this.today_click(next)));
			(obj.sub) = () => ([(this.Today_icon())]);
			return obj;
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		value_changed(next){
			return (this.Input().value_changed(next));
		}
		input_mask(id){
			return "";
		}
		Input(){
			const obj = new this.$.$mol_format();
			(obj.value) = (next) => ((this.value(next)));
			(obj.mask) = (id) => ((this.input_mask(id)));
			(obj.enabled) = () => ((this.enabled()));
			return obj;
		}
		clear(next){
			if(next !== undefined) return next;
			return null;
		}
		Clear_icon(){
			const obj = new this.$.$mol_icon_trash_can_outline();
			return obj;
		}
		Clear(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_date_Clear_hint")));
			(obj.enabled) = () => ((this.enabled()));
			(obj.click) = (next) => ((this.clear(next)));
			(obj.sub) = () => ([(this.Clear_icon())]);
			return obj;
		}
		input_content(){
			return [
				(this.Today()), 
				(this.Input()), 
				(this.Clear())
			];
		}
		Input_row(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.input_content()));
			return obj;
		}
		month_moment(){
			return (this.value_moment());
		}
		day_selected(id){
			return false;
		}
		day_click(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Calendar_title(){
			return (this.Calendar().Title());
		}
		prev_hint(){
			return (this.$.$mol_locale.text("$mol_date_prev_hint"));
		}
		prev(next){
			if(next !== undefined) return next;
			return null;
		}
		Prev_icon(){
			const obj = new this.$.$mol_icon_chevron_left();
			return obj;
		}
		Prev(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.prev_hint()));
			(obj.click) = (next) => ((this.prev(next)));
			(obj.sub) = () => ([(this.Prev_icon())]);
			return obj;
		}
		next_hint(){
			return (this.$.$mol_locale.text("$mol_date_next_hint"));
		}
		next(next){
			if(next !== undefined) return next;
			return null;
		}
		Next_icon(){
			const obj = new this.$.$mol_icon_chevron_right();
			return obj;
		}
		Next(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.next_hint()));
			(obj.click) = (next) => ((this.next(next)));
			(obj.sub) = () => ([(this.Next_icon())]);
			return obj;
		}
		Calendar_tools(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Prev()), 
				(this.Calendar_title()), 
				(this.Next())
			]);
			return obj;
		}
		Calendar(){
			const obj = new this.$.$mol_date_calendar();
			(obj.enabled) = () => ((this.enabled()));
			(obj.month_moment) = () => ((this.month_moment()));
			(obj.day_selected) = (id) => ((this.day_selected(id)));
			(obj.day_click) = (id, next) => ((this.day_click(id, next)));
			(obj.head) = () => ([(this.Calendar_tools())]);
			return obj;
		}
		Icon(){
			const obj = new this.$.$mol_icon_calendar();
			return obj;
		}
		bubble_content(){
			return [(this.Input_row()), (this.Calendar())];
		}
		value_number(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		value_moment(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_time_moment();
			return obj;
		}
	};
	($mol_mem(($.$mol_date.prototype), "today_click"));
	($mol_mem(($.$mol_date.prototype), "Today_icon"));
	($mol_mem(($.$mol_date.prototype), "Today"));
	($mol_mem(($.$mol_date.prototype), "value"));
	($mol_mem(($.$mol_date.prototype), "Input"));
	($mol_mem(($.$mol_date.prototype), "clear"));
	($mol_mem(($.$mol_date.prototype), "Clear_icon"));
	($mol_mem(($.$mol_date.prototype), "Clear"));
	($mol_mem(($.$mol_date.prototype), "Input_row"));
	($mol_mem_key(($.$mol_date.prototype), "day_click"));
	($mol_mem(($.$mol_date.prototype), "prev"));
	($mol_mem(($.$mol_date.prototype), "Prev_icon"));
	($mol_mem(($.$mol_date.prototype), "Prev"));
	($mol_mem(($.$mol_date.prototype), "next"));
	($mol_mem(($.$mol_date.prototype), "Next_icon"));
	($mol_mem(($.$mol_date.prototype), "Next"));
	($mol_mem(($.$mol_date.prototype), "Calendar_tools"));
	($mol_mem(($.$mol_date.prototype), "Calendar"));
	($mol_mem(($.$mol_date.prototype), "Icon"));
	($mol_mem(($.$mol_date.prototype), "value_number"));
	($mol_mem(($.$mol_date.prototype), "value_moment"));
	($.$mol_date_calendar) = class $mol_date_calendar extends ($.$mol_calendar) {
		day_click(id, next){
			if(next !== undefined) return next;
			return null;
		}
		enabled(){
			return true;
		}
		Day_button(id){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.day_text(id)));
			(obj.event_click) = (next) => ((this.day_click(id, next)));
			(obj.minimal_height) = () => (24);
			(obj.enabled) = () => ((this.enabled()));
			return obj;
		}
		day_content(id){
			return [(this.Day_button(id))];
		}
	};
	($mol_mem_key(($.$mol_date_calendar.prototype), "day_click"));
	($mol_mem_key(($.$mol_date_calendar.prototype), "Day_button"));


;
"use strict";
var $;
(function ($) {
    function $mol_try(handler) {
        try {
            return handler();
        }
        catch (error) {
            return error;
        }
    }
    $.$mol_try = $mol_try;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_date extends $.$mol_date {
            trigger_content() {
                return [this.value() || this.Icon()];
            }
            input_mask(val) {
                return val.length > 8 ? '____-__-__ __:__' : '____-__-__ ';
            }
            input_content() {
                return [
                    this.Today(),
                    this.Input(),
                    ...this.value() ? [this.Clear()] : [],
                ];
            }
            value(val) {
                const moment = this.value_moment();
                if (val === undefined)
                    return moment?.toString('YYYY-MM-DD hh:mm') ?? '';
                const moment2 = $mol_try(() => val && new $mol_time_moment(val).merge({ offset: new $mol_time_moment().offset })) || null;
                if (moment2 instanceof Error)
                    return val;
                this.value_moment(moment2);
                return val;
            }
            value_moment(next) {
                const stamp = this.value_number();
                if (next === undefined) {
                    return isNaN(stamp) ? null : new $mol_time_moment(stamp);
                }
                this.value_number(next?.valueOf() ?? NaN);
                return next;
            }
            value_number(next) {
                const value = this.value();
                if (next === undefined) {
                    if (!value)
                        return NaN;
                    const moment = $mol_try(() => new $mol_time_moment(value));
                    if (moment instanceof Error)
                        return NaN;
                    return moment.valueOf() ?? NaN;
                }
                const moment = $mol_try(() => new $mol_time_moment(next));
                this.value(moment.toString(value.length > 12 ? 'YYYY-MM-DD hh:mm' : 'YYYY-MM-DD'));
                return next;
            }
            value_moment_today() {
                return this.value()
                    ? new $mol_time_moment().mask(this.value())
                    : new $mol_time_moment();
            }
            clear() {
                this.value('');
                this.Input().focused(true);
                this.Input().selection([0, 0]);
            }
            month_moment(next) {
                if (next)
                    return next;
                let moment = $mol_try(() => new $mol_time_moment(this.value_changed().replace(/\D+$/, '')).mask('0000-00'));
                if (moment instanceof Error || !moment.year)
                    return new $mol_time_moment().mask('0000-00');
                if (moment.month === undefined) {
                    moment = moment.merge({ month: 0 });
                }
                return moment;
            }
            day_selected(day) {
                return this.value_moment()?.toString('YYYY-MM-DD') === day;
            }
            day_click(day) {
                const moment = new $mol_time_moment(day);
                this.value_moment(this.value_moment()?.merge(moment) ?? moment);
                this.showed(false);
            }
            prev() {
                this.month_moment(this.month_moment().shift({ month: -1 }));
            }
            next() {
                this.month_moment(this.month_moment().shift({ month: +1 }));
            }
            today_click() {
                this.value_moment(this.value_moment_today());
            }
        }
        __decorate([
            $mol_mem
        ], $mol_date.prototype, "value", null);
        __decorate([
            $mol_mem
        ], $mol_date.prototype, "value_moment", null);
        __decorate([
            $mol_mem
        ], $mol_date.prototype, "value_number", null);
        __decorate([
            $mol_mem
        ], $mol_date.prototype, "value_moment_today", null);
        __decorate([
            $mol_mem
        ], $mol_date.prototype, "month_moment", null);
        $$.$mol_date = $mol_date;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/date/date.view.css", "/* [mol_date_bubble] {\n\tpadding: .5rem;\n} */\n\n[mol_date_input] {\n\tflex-shrink: 0;\n}\n\n[mol_date_prev] ,\n[mol_date_next] {\n\tflex-grow: 1;\n}\n[mol_date_prev] {\n\tjustify-content: flex-end;\n}\n\n[mol_date_calendar_title] {\n\tpadding: var(--mol_gap_text);\n}\n\n[mol_date_calendar_day] {\n\tpadding: 0;\n}\n\n[mol_date_calendar_day_button] {\n\twidth: 100%;\n\t/* padding: .25rem .5rem; */\n\tjustify-content: center;\n\tcursor: pointer;\n\tcolor: inherit;\n}\n");
})($ || ($ = {}));

;
	($.$mol_text_list) = class $mol_text_list extends ($.$mol_text) {
		type(){
			return "";
		}
		auto_scroll(){
			return null;
		}
		attr(){
			return {...(super.attr()), "mol_text_list_type": (this.type())};
		}
		Paragraph(id){
			const obj = new this.$.$mol_text_list_item();
			(obj.index) = () => ((this.item_index(id)));
			(obj.sub) = () => ((this.block_content(id)));
			return obj;
		}
	};
	($mol_mem_key(($.$mol_text_list.prototype), "Paragraph"));
	($.$mol_text_list_item) = class $mol_text_list_item extends ($.$mol_paragraph) {
		index(){
			return 0;
		}
		attr(){
			return {...(super.attr()), "mol_text_list_item_index": (this.index())};
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/text/list/list.view.css", "[mol_text_list] {\r\n\tpadding-left: 1.75rem;\r\n}\r\n\r\n[mol_text_list_item] {\r\n\tcontain: none;\r\n\tdisplay: list-item;\r\n}\r\n\r\n[mol_text_list_item]::before {\r\n\tcontent: attr( mol_text_list_item_index ) \".\";\r\n\twidth: 1.25rem;\r\n\tdisplay: inline-block;\r\n\tposition: absolute;\r\n\tmargin-left: -1.75rem;\r\n\ttext-align: end;\r\n}\r\n\r\n[mol_text_list_type=\"-\"] > [mol_text_list_item]::before,\r\n[mol_text_list_type=\"*\"] > [mol_text_list_item]::before {\r\n\tcontent: \"•\";\r\n}\r\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$hyoo_page_side_view) = class $hyoo_page_side_view extends ($.$mol_page) {
		id(){
			return (this.side().id());
		}
		editable(){
			return (this.side().editable());
		}
		title(next){
			return (this.side().title(next));
		}
		side_details(next){
			return (this.side().details(next));
		}
		released(){
			return (this.side().released());
		}
		side_release(){
			return (this.side().release());
		}
		changed_moment(){
			return (this.side().changed_moment());
		}
		authors(){
			return (this.side().authors());
		}
		following(){
			return (this.side().following());
		}
		search_start(next){
			if(next !== undefined) return next;
			return null;
		}
		Search_start(){
			const obj = new this.$.$mol_hotkey();
			(obj.key) = () => ({"F": (next) => (this.search_start(next))});
			(obj.mod_ctrl) = () => (true);
			return obj;
		}
		slides_send(){
			return null;
		}
		history_mark(){
			return null;
		}
		menu_showed(next){
			if(next !== undefined) return next;
			return false;
		}
		Avatar(){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.id()));
			return obj;
		}
		Menu_toggle(){
			const obj = new this.$.$mol_check();
			(obj.checked) = (next) => ((this.menu_showed(next)));
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_view_Menu_toggle_hint")));
			(obj.sub) = () => ([(this.Avatar())]);
			return obj;
		}
		search_query(next){
			if(next !== undefined) return next;
			return "";
		}
		search_stop(next){
			if(next !== undefined) return next;
			return null;
		}
		Search(){
			const obj = new this.$.$mol_search_jumper();
			(obj.query) = (next) => ((this.search_query(next)));
			(obj.Root) = () => ((this.Details()));
			(obj.clear) = (next) => ((this.search_stop(next)));
			return obj;
		}
		editing(next){
			if(next !== undefined) return next;
			return false;
		}
		Edit_icon(){
			const obj = new this.$.$mol_icon_pencil_outline();
			return obj;
		}
		Unreleased(){
			const obj = new this.$.$mol_speck();
			return obj;
		}
		edit_toggle_label(){
			return [(this.Unreleased())];
		}
		Edit_toggle(){
			const obj = new this.$.$mol_check_icon();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_view_Edit_toggle_hint")));
			(obj.checked) = (next) => ((this.editing(next)));
			(obj.Icon) = () => ((this.Edit_icon()));
			(obj.label) = () => ((this.edit_toggle_label()));
			return obj;
		}
		search_show(next){
			if(next !== undefined) return next;
			return false;
		}
		Search_icon(){
			const obj = new this.$.$mol_icon_magnify();
			return obj;
		}
		Search_toggle(){
			const obj = new this.$.$mol_check_icon();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_view_Search_toggle_hint")));
			(obj.checked) = (next) => ((this.search_show(next)));
			(obj.Icon) = () => ((this.Search_icon()));
			return obj;
		}
		info(next){
			if(next !== undefined) return next;
			return false;
		}
		Info_icon(){
			const obj = new this.$.$mol_icon_information_outline();
			return obj;
		}
		Info_toggle(){
			const obj = new this.$.$mol_check_icon();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_view_Info_toggle_hint")));
			(obj.checked) = (next) => ((this.info(next)));
			(obj.Icon) = () => ((this.Info_icon()));
			return obj;
		}
		bookmark(next){
			if(next !== undefined) return next;
			return false;
		}
		Bookmark_icon(){
			const obj = new this.$.$mol_icon_bookmark_outline();
			return obj;
		}
		Bookmark_toggle(){
			const obj = new this.$.$mol_check_icon();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_view_Bookmark_toggle_hint")));
			(obj.checked) = (next) => ((this.bookmark(next)));
			(obj.Icon) = () => ((this.Bookmark_icon()));
			return obj;
		}
		details(){
			return "";
		}
		Details(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.details()));
			(obj.highlight) = () => ((this.search_query()));
			return obj;
		}
		Changed(){
			const obj = new this.$.$mol_date();
			(obj.value_moment) = () => ((this.changed_moment()));
			return obj;
		}
		author_link(id){
			return "https://page.hyoo.ru/#!={person}";
		}
		Author_link(id){
			const obj = new this.$.$hyoo_meta_link();
			(obj.meta) = () => ((this.peer(id)));
			(obj.uri) = () => ((this.author_link(id)));
			return obj;
		}
		author_list(){
			return [(this.Author_link("0_0"))];
		}
		Author_list(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.author_list()));
			return obj;
		}
		Following(){
			const obj = new this.$.$hyoo_meta_link();
			(obj.meta) = () => ((this.following()));
			return obj;
		}
		Signature(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Changed()), 
				(this.Author_list()), 
				(this.Following())
			]);
			return obj;
		}
		profile(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		peer(id){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		book(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		highlight(){
			return "";
		}
		side(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		plugins(){
			return [(this.Search_start())];
		}
		auto(){
			return [(this.slides_send()), (this.history_mark())];
		}
		Logo(){
			return (this.Menu_toggle());
		}
		head(){
			return [
				(this.Title()), 
				(this.Tools()), 
				(this.Search())
			];
		}
		tools(){
			return [
				(this.Edit_toggle()), 
				(this.Search_toggle()), 
				(this.Info_toggle()), 
				(this.Bookmark_toggle())
			];
		}
		body(){
			return [(this.Details()), (this.Signature())];
		}
	};
	($mol_mem(($.$hyoo_page_side_view.prototype), "search_start"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Search_start"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "menu_showed"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Avatar"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Menu_toggle"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "search_query"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "search_stop"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Search"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "editing"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Edit_icon"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Unreleased"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Edit_toggle"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "search_show"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Search_icon"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Search_toggle"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "info"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Info_icon"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Info_toggle"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "bookmark"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Bookmark_icon"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Bookmark_toggle"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Details"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Changed"));
	($mol_mem_key(($.$hyoo_page_side_view.prototype), "Author_link"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Author_list"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Following"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "Signature"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "profile"));
	($mol_mem_key(($.$hyoo_page_side_view.prototype), "peer"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "book"));
	($mol_mem(($.$hyoo_page_side_view.prototype), "side"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_page_side_view extends $.$hyoo_page_side_view {
            head() {
                return [
                    this.Title(),
                    this.Tools(),
                    ...this.search_show() ? [this.Search()] : [],
                ];
            }
            bookmark(next) {
                if (next)
                    this.$.$mol_storage.persisted(true);
                return this.profile().bookmarked(this.side().id(), next);
            }
            public(next) {
                return this.side().book()?.bookmarked(this.side().id(), next);
            }
            Edit_toggle() {
                return this.editable() ? super.Edit_toggle() : null;
            }
            edit_toggle_label() {
                return this.released() ? [] : [this.Unreleased()];
            }
            search_show(next = false) {
                if (next === true) {
                    this.search_query(this.highlight());
                    this.Search().bring();
                }
                if (next === false)
                    this.search_query('');
                return next;
            }
            search_start(event) {
                this.search_show(true);
                event?.preventDefault();
            }
            search_stop(event) {
                this.search_show(false);
                this.Search_toggle().focused(true);
                event?.preventDefault();
            }
            details() {
                return this.editing() ? this.side_details() : this.side_release();
            }
            Following() {
                return this.following() ? super.Following() : null;
            }
            author_list() {
                return [...this.authors()].map(peer => this.Author_link(peer));
            }
            slides_send() {
                const parent = this.$.$mol_dom_context.parent;
                if (parent === this.$.$mol_dom_context.self)
                    return;
                parent.postMessage(['done', this.side().content_full().replaceAll(/\n--+\n/g, '\n')], { targetOrigin: 'https://slides.hyoo.ru' });
            }
            history_mark() {
                this.profile().history_add(this.side().id());
            }
            author_link(id) {
                return super.author_link(id).replace('{person}', id);
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_page_side_view.prototype, "head", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_view.prototype, "edit_toggle_label", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_view.prototype, "search_show", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_view.prototype, "author_list", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_view.prototype, "slides_send", null);
        __decorate([
            $mol_action
        ], $hyoo_page_side_view.prototype, "history_mark", null);
        $$.$hyoo_page_side_view = $hyoo_page_side_view;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { rem, per } = $mol_style_unit;
    $mol_style_define($hyoo_page_side_view, {
        flex: {
            basis: rem(50),
            grow: 0,
        },
        Menu_toggle: {
            margin: [rem(-.5), rem(-.75)],
        },
        Body_content: {
            justifyContent: 'space-between',
        },
        Search: {
            flex: {
                basis: per(100),
            },
        },
        Signature: {
            justifyContent: 'flex-start',
            alignItems: 'flex-end',
            flex: {
                direction: 'row-reverse',
                wrap: 'wrap',
            },
        },
        Following: {
            flex: {
                grow: 1,
                shrink: 1,
            },
            color: $mol_theme.special,
        },
    });
})($ || ($ = {}));

;
	($.$mol_icon_publish) = class $mol_icon_publish extends ($.$mol_icon) {
		path(){
			return "M5,4V6H19V4H5M5,14H9V20H15V14H19L12,7L5,14Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_export) = class $mol_icon_export extends ($.$mol_icon) {
		path(){
			return "M23,12L19,8V11H10V13H19V16M1,18V6C1,4.89 1.9,4 3,4H15A2,2 0 0,1 17,6V9H15V6H3V18H15V15H17V18A2,2 0 0,1 15,20H3A2,2 0 0,1 1,18Z";
		}
	};


;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $.$mol_jsx_prefix = '';
    $.$mol_jsx_crumbs = '';
    $.$mol_jsx_booked = null;
    $.$mol_jsx_document = {
        getElementById: () => null,
        createElementNS: (space, name) => $mol_dom_context.document.createElementNS(space, name),
        createDocumentFragment: () => $mol_dom_context.document.createDocumentFragment(),
    };
    $.$mol_jsx_frag = '';
    function $mol_jsx(Elem, props, ...childNodes) {
        const id = props && props.id || '';
        const guid = id ? $.$mol_jsx_prefix ? $.$mol_jsx_prefix + '/' + id : id : $.$mol_jsx_prefix;
        const crumbs_self = id ? $.$mol_jsx_crumbs.replace(/(\S+)/g, `$1_${id.replace(/\/.*/i, '')}`) : $.$mol_jsx_crumbs;
        if (Elem && $.$mol_jsx_booked) {
            if ($.$mol_jsx_booked.has(id)) {
                $mol_fail(new Error(`JSX already has tag with id ${JSON.stringify(guid)}`));
            }
            else {
                $.$mol_jsx_booked.add(id);
            }
        }
        let node = guid ? $.$mol_jsx_document.getElementById(guid) : null;
        if ($.$mol_jsx_prefix) {
            const prefix_ext = $.$mol_jsx_prefix;
            const booked_ext = $.$mol_jsx_booked;
            const crumbs_ext = $.$mol_jsx_crumbs;
            for (const field in props) {
                const func = props[field];
                if (typeof func !== 'function')
                    continue;
                const wrapper = function (...args) {
                    const prefix = $.$mol_jsx_prefix;
                    const booked = $.$mol_jsx_booked;
                    const crumbs = $.$mol_jsx_crumbs;
                    try {
                        $.$mol_jsx_prefix = prefix_ext;
                        $.$mol_jsx_booked = booked_ext;
                        $.$mol_jsx_crumbs = crumbs_ext;
                        return func.call(this, ...args);
                    }
                    finally {
                        $.$mol_jsx_prefix = prefix;
                        $.$mol_jsx_booked = booked;
                        $.$mol_jsx_crumbs = crumbs;
                    }
                };
                $mol_func_name_from(wrapper, func);
                props[field] = wrapper;
            }
        }
        if (typeof Elem !== 'string') {
            if ('prototype' in Elem) {
                const view = node && node[String(Elem)] || new Elem;
                Object.assign(view, props);
                view[Symbol.toStringTag] = guid;
                view.childNodes = childNodes;
                if (!view.ownerDocument)
                    view.ownerDocument = $.$mol_jsx_document;
                view.className = (crumbs_self ? crumbs_self + ' ' : '') + (Elem['name'] || Elem);
                node = view.valueOf();
                node[String(Elem)] = view;
                return node;
            }
            else {
                const prefix = $.$mol_jsx_prefix;
                const booked = $.$mol_jsx_booked;
                const crumbs = $.$mol_jsx_crumbs;
                try {
                    $.$mol_jsx_prefix = guid;
                    $.$mol_jsx_booked = new Set;
                    $.$mol_jsx_crumbs = (crumbs_self ? crumbs_self + ' ' : '') + (Elem['name'] || Elem);
                    return Elem(props, ...childNodes);
                }
                finally {
                    $.$mol_jsx_prefix = prefix;
                    $.$mol_jsx_booked = booked;
                    $.$mol_jsx_crumbs = crumbs;
                }
            }
        }
        if (!node) {
            node = Elem
                ? $.$mol_jsx_document.createElementNS(props?.xmlns ?? 'http://www.w3.org/1999/xhtml', Elem)
                : $.$mol_jsx_document.createDocumentFragment();
        }
        $mol_dom_render_children(node, [].concat(...childNodes));
        if (!Elem)
            return node;
        if (guid)
            node.id = guid;
        for (const key in props) {
            if (key === 'id')
                continue;
            if (typeof props[key] === 'string') {
                if (typeof node[key] === 'string')
                    node[key] = props[key];
                node.setAttribute(key, props[key]);
            }
            else if (props[key] &&
                typeof props[key] === 'object' &&
                Reflect.getPrototypeOf(props[key]) === Reflect.getPrototypeOf({})) {
                if (typeof node[key] === 'object') {
                    Object.assign(node[key], props[key]);
                    continue;
                }
            }
            else {
                node[key] = props[key];
            }
        }
        if ($.$mol_jsx_crumbs)
            node.className = (props?.['class'] ? props['class'] + ' ' : '') + crumbs_self;
        return node;
    }
    $.$mol_jsx = $mol_jsx;
})($ || ($ = {}));

;
	($.$mol_icon_download) = class $mol_icon_download extends ($.$mol_icon) {
		path(){
			return "M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z";
		}
	};


;
"use strict";

;
	($.$mol_button_download) = class $mol_button_download extends ($.$mol_button_minor) {
		Icon(){
			const obj = new this.$.$mol_icon_download();
			return obj;
		}
		title(){
			return "";
		}
		blob(){
			return null;
		}
		uri(){
			return "";
		}
		file_name(){
			return "blob.bin";
		}
		sub(){
			return [(this.Icon()), (this.title())];
		}
	};
	($mol_mem(($.$mol_button_download.prototype), "Icon"));


;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_button_download extends $.$mol_button_download {
            uri() {
                return URL.createObjectURL(this.blob());
            }
            click() {
                const a = $mol_jsx("a", { href: this.uri(), download: this.file_name() });
                a.click();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_button_download.prototype, "uri", null);
        $$.$mol_button_download = $mol_button_download;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_icon_shield) = class $mol_icon_shield extends ($.$mol_icon) {
		path(){
			return "M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_shield_account) = class $mol_icon_shield_account extends ($.$mol_icon) {
		path(){
			return "M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M12,5A3,3 0 0,1 15,8A3,3 0 0,1 12,11A3,3 0 0,1 9,8A3,3 0 0,1 12,5M17.13,17C15.92,18.85 14.11,20.24 12,20.92C9.89,20.24 8.08,18.85 6.87,17C6.53,16.5 6.24,16 6,15.47C6,13.82 8.71,12.47 12,12.47C15.29,12.47 18,13.79 18,15.47C17.76,16 17.47,16.5 17.13,17Z";
		}
	};


;
"use strict";

;
	($.$mol_textarea) = class $mol_textarea extends ($.$mol_stack) {
		clickable(next){
			if(next !== undefined) return next;
			return false;
		}
		sidebar_showed(){
			return false;
		}
		press(next){
			if(next !== undefined) return next;
			return null;
		}
		hover(next){
			if(next !== undefined) return next;
			return null;
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		hint(){
			return " ";
		}
		enabled(){
			return true;
		}
		spellcheck(){
			return true;
		}
		length_max(){
			return +Infinity;
		}
		selection(next){
			if(next !== undefined) return next;
			return [];
		}
		bring(){
			return (this.Edit().bring());
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		submit_with_ctrl(){
			return true;
		}
		Edit(){
			const obj = new this.$.$mol_textarea_edit();
			(obj.value) = (next) => ((this.value(next)));
			(obj.hint) = () => ((this.hint()));
			(obj.enabled) = () => ((this.enabled()));
			(obj.spellcheck) = () => ((this.spellcheck()));
			(obj.length_max) = () => ((this.length_max()));
			(obj.selection) = (next) => ((this.selection(next)));
			(obj.submit) = (next) => ((this.submit(next)));
			(obj.submit_with_ctrl) = () => ((this.submit_with_ctrl()));
			return obj;
		}
		row_numb(id){
			return 0;
		}
		highlight(){
			return "";
		}
		syntax(){
			const obj = new this.$.$mol_syntax2();
			return obj;
		}
		View(){
			const obj = new this.$.$mol_text_code();
			(obj.text) = () => ((this.value()));
			(obj.render_visible_only) = () => (false);
			(obj.row_numb) = (id) => ((this.row_numb(id)));
			(obj.sidebar_showed) = () => ((this.sidebar_showed()));
			(obj.highlight) = () => ((this.highlight()));
			(obj.syntax) = () => ((this.syntax()));
			return obj;
		}
		attr(){
			return {
				...(super.attr()), 
				"mol_textarea_clickable": (this.clickable()), 
				"mol_textarea_sidebar_showed": (this.sidebar_showed())
			};
		}
		event(){
			return {"keydown": (next) => (this.press(next)), "pointermove": (next) => (this.hover(next))};
		}
		sub(){
			return [(this.Edit()), (this.View())];
		}
		symbols_alt(){
			return {
				"comma": "<", 
				"period": ">", 
				"dash": "−", 
				"equals": "≈", 
				"graveAccent": "́", 
				"forwardSlash": "÷", 
				"E": "€", 
				"V": "✔", 
				"X": "×", 
				"C": "©", 
				"P": "§", 
				"H": "₽", 
				"key0": "°", 
				"key8": "•", 
				"key2": "@", 
				"key3": "#", 
				"key4": "$", 
				"key6": "^", 
				"key7": "&", 
				"bracketOpen": "[", 
				"bracketClose": "]", 
				"slashBack": "|"
			};
		}
		symbols_alt_ctrl(){
			return {"space": " "};
		}
		symbols_alt_shift(){
			return {
				"V": "✅", 
				"X": "❌", 
				"O": "⭕", 
				"key1": "❗", 
				"key4": "💲", 
				"key7": "❓", 
				"comma": "«", 
				"period": "»", 
				"semicolon": "“", 
				"quoteSingle": "”", 
				"dash": "—", 
				"equals": "≠", 
				"graveAccent": "̱", 
				"bracketOpen": "{", 
				"bracketClose": "}"
			};
		}
	};
	($mol_mem(($.$mol_textarea.prototype), "clickable"));
	($mol_mem(($.$mol_textarea.prototype), "press"));
	($mol_mem(($.$mol_textarea.prototype), "hover"));
	($mol_mem(($.$mol_textarea.prototype), "value"));
	($mol_mem(($.$mol_textarea.prototype), "selection"));
	($mol_mem(($.$mol_textarea.prototype), "submit"));
	($mol_mem(($.$mol_textarea.prototype), "Edit"));
	($mol_mem(($.$mol_textarea.prototype), "syntax"));
	($mol_mem(($.$mol_textarea.prototype), "View"));
	($.$mol_textarea_edit) = class $mol_textarea_edit extends ($.$mol_string) {
		dom_name(){
			return "textarea";
		}
		enter(){
			return "enter";
		}
		field(){
			return {...(super.field()), "scrollTop": 0};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_textarea extends $.$mol_textarea {
            indent_inc() {
                let text = this.value();
                let [from, to] = this.selection();
                const rows = text.split('\n');
                let start = 0;
                for (let i = 0; i < rows.length; ++i) {
                    let end = start + rows[i].length;
                    if (end >= from && start <= to) {
                        if (to === from || start !== to) {
                            rows[i] = '\t' + rows[i];
                            to += 1;
                            end += 1;
                        }
                    }
                    start = end + 1;
                }
                this.value(rows.join('\n'));
                this.selection([from + 1, to]);
            }
            indent_dec() {
                let text = this.value();
                let [from, to] = this.selection();
                const rows = text.split('\n');
                let start = 0;
                for (let i = 0; i < rows.length; ++i) {
                    const end = start + rows[i].length;
                    if (end >= from && start <= to && rows[i].startsWith('\t')) {
                        rows[i] = rows[i].slice(1);
                        to -= 1;
                        if (start < from)
                            from -= 1;
                    }
                    start = end + 1;
                }
                this.value(rows.join('\n'));
                this.selection([from, to]);
            }
            symbol_insert(event) {
                const symbol = event.shiftKey
                    ? this.symbols_alt_shift()[$mol_keyboard_code[event.keyCode]]
                    : event.ctrlKey
                        ? this.symbols_alt_ctrl()[$mol_keyboard_code[event.keyCode]]
                        : this.symbols_alt()[$mol_keyboard_code[event.keyCode]];
                if (!symbol)
                    return;
                event.preventDefault();
                document.execCommand('insertText', false, symbol);
            }
            clickable(next) {
                if (!this.enabled())
                    return true;
                return next ?? false;
            }
            hover(event) {
                this.clickable(event.ctrlKey);
            }
            press(event) {
                if (event.altKey) {
                    this.symbol_insert(event);
                }
                else {
                    switch (event.keyCode) {
                        case !event.shiftKey && $mol_keyboard_code.tab:
                            this.indent_inc();
                            break;
                        case event.shiftKey && $mol_keyboard_code.tab:
                            this.indent_dec();
                            break;
                        default: return;
                    }
                    event.preventDefault();
                }
            }
            row_numb(index) {
                return index;
            }
            syntax() {
                return this.$.$mol_syntax2_md_code;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_textarea.prototype, "clickable", null);
        $$.$mol_textarea = $mol_textarea;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/textarea/textarea.view.css", "[mol_textarea] {\n\tflex: 1 0 auto;\n\tflex-direction: column;\n\tvertical-align: top;\n\tmin-height: max-content;\n\twhite-space: pre-wrap;\n\tword-break: break-word;\n\tborder-radius: var(--mol_gap_round);\n\tfont-family: monospace;\n\tposition: relative;\n\ttab-size: 4;\n}\n\n[mol_textarea_view] {\n\tpointer-events: none;\n\twhite-space: inherit;\n\tfont-family: inherit;\n\ttab-size: inherit;\n\tuser-select: none;\n}\n\n[mol_textarea_view_copy] {\n\tpointer-events: all;\n}\n\n[mol_textarea_clickable] > [mol_textarea_view] {\n\tpointer-events: all;\n\tuser-select: auto;\n}\n\n[mol_textarea_clickable] > [mol_textarea_edit] {\n\tuser-select: none;\n}\n\n[mol_textarea_edit] {\n\tfont-family: inherit;\n\tpadding: var(--mol_gap_text);\n\tcolor: transparent !important;\n\tcaret-color: var(--mol_theme_text);\n\tresize: none;\n\ttext-align: inherit;\n\twhite-space: inherit;\n\tborder-radius: inherit;\n\toverflow-anchor: none;\n\tposition: absolute;\n\theight: 100%;\n\twidth: 100%;\n\ttab-size: inherit;\n}\n\n[mol_textarea_sidebar_showed] [mol_textarea_edit] {\n\tleft: 1.75rem;\n\twidth: calc( 100% - 1.75rem );\n}\n\n[mol_textarea_edit]:hover + [mol_textarea_view] {\n\tz-index: var(--mol_layer_hover);\n}\n\n[mol_textarea_edit]:focus + [mol_textarea_view] {\n\tz-index: var(--mol_layer_focus);\n}\n");
})($ || ($ = {}));

;
	($.$mol_string_button) = class $mol_string_button extends ($.$mol_string) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/string/button/button.view.css", "[mol_string_button]:not(:placeholder-shown):not(:focus):not(:hover):not(:disabled) {\n\tcolor: var(--mol_theme_control);\n\tbackground: transparent;\n\tbox-shadow: none;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_labeler) = class $mol_labeler extends ($.$mol_list) {
		label(){
			return [(this.title())];
		}
		Label(){
			const obj = new this.$.$mol_view();
			(obj.minimal_height) = () => (32);
			(obj.sub) = () => ((this.label()));
			return obj;
		}
		content(){
			return [];
		}
		Content(){
			const obj = new this.$.$mol_view();
			(obj.minimal_height) = () => (24);
			(obj.sub) = () => ((this.content()));
			return obj;
		}
		rows(){
			return [(this.Label()), (this.Content())];
		}
	};
	($mol_mem(($.$mol_labeler.prototype), "Label"));
	($mol_mem(($.$mol_labeler.prototype), "Content"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/labeler/labeler.view.css", "[mol_labeler] {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: stretch;\n\tcursor: inherit;\n}\n\n[mol_labeler_label] {\n\tmin-height: 2rem;\n\tcolor: var(--mol_theme_shade);\n\tpadding: .5rem .75rem 0;\n\tgap: 0 var(--mol_gap_block);\n\tflex-wrap: wrap;\n}\n\n[mol_labeler_content] {\n\tdisplay: flex;\n\tpadding: var(--mol_gap_text);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_form_field) = class $mol_form_field extends ($.$mol_labeler) {
		name(){
			return "";
		}
		bid(){
			return "";
		}
		Bid(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.bid())]);
			return obj;
		}
		control(){
			return null;
		}
		bids(){
			return [];
		}
		label(){
			return [(this.name()), (this.Bid())];
		}
		content(){
			return [(this.control())];
		}
	};
	($mol_mem(($.$mol_form_field.prototype), "Bid"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_form_field extends $.$mol_form_field {
            bid() {
                return this.bids().filter(Boolean)[0] ?? '';
            }
        }
        __decorate([
            $mol_mem
        ], $mol_form_field.prototype, "bid", null);
        $$.$mol_form_field = $mol_form_field;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/form/field/field.view.css", "[mol_form_field] {\n\talign-items: stretch;\n}\n\n[mol_form_field_bid] {\n\tcolor: var(--mol_theme_focus);\n\tdisplay: inline-block;\n\ttext-shadow: 0 0;\n}\n\n[mol_form_field_content] {\n\tborder-radius: var(--mol_gap_round);\n}\n");
})($ || ($ = {}));

;
	($.$mol_row) = class $mol_row extends ($.$mol_view) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/row/row.view.css", "[mol_row] {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-items: flex-start;\n\talign-content: flex-start;\n\tjustify-content: flex-start;\n\tpadding: var(--mol_gap_block);\n\tgap: var(--mol_gap_block);\n\tflex: 0 0 auto;\n\tbox-sizing: border-box;\n\tmax-width: 100%;\n}\n\n[mol_row] > * {\n\tmax-width: 100%;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_form) = class $mol_form extends ($.$mol_list) {
		keydown(next){
			if(next !== undefined) return next;
			return null;
		}
		form_fields(){
			return [];
		}
		body(){
			return (this.form_fields());
		}
		Body(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ((this.body()));
			return obj;
		}
		buttons(){
			return [];
		}
		foot(){
			return (this.buttons());
		}
		Foot(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ((this.foot()));
			return obj;
		}
		submit_allowed(){
			return true;
		}
		submit_blocked(){
			return false;
		}
		event(){
			return {...(super.event()), "keydown": (next) => (this.keydown(next))};
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		rows(){
			return [(this.Body()), (this.Foot())];
		}
	};
	($mol_mem(($.$mol_form.prototype), "keydown"));
	($mol_mem(($.$mol_form.prototype), "Body"));
	($mol_mem(($.$mol_form.prototype), "Foot"));
	($mol_mem(($.$mol_form.prototype), "submit"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_form extends $.$mol_form {
            form_fields() {
                return [...this.view_find(view => view instanceof $mol_form_field)]
                    .map(path => path[path.length - 1]);
            }
            submit_allowed() {
                return this.form_fields().every(field => !field.bid());
            }
            submit_blocked() {
                return !this.submit_allowed();
            }
            keydown(next) {
                if (next.ctrlKey && next.keyCode === $mol_keyboard_code.enter && !this.submit_blocked())
                    this.submit(event);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_form.prototype, "form_fields", null);
        __decorate([
            $mol_mem
        ], $mol_form.prototype, "submit_allowed", null);
        $$.$mol_form = $mol_form;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/form/form.view.css", "[mol_form] {\r\n\tgap: var(--mol_gap_block);\r\n}\r\n\r\n[mol_form_body] {\r\n\tgap: var(--mol_gap_block);\r\n}");
})($ || ($ = {}));

;
	($.$hyoo_page_side_edit) = class $hyoo_page_side_edit extends ($.$mol_page) {
		title(next){
			return (this.side().title(next));
		}
		details(next){
			return (this.side().details(next));
		}
		details_selection(next){
			return (this.side().details_selection(next));
		}
		content_full(){
			return (this.side().content_full());
		}
		aura(next){
			return (this.side().aura(next));
		}
		editable(){
			return (this.side().editable());
		}
		released(){
			return (this.side().released());
		}
		Syntax(){
			const obj = new this.$.$mol_link_iconed();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_edit_Syntax_hint")));
			(obj.uri) = () => ("https://marked.hyoo.ru/");
			(obj.icon) = () => ("https://marked.hyoo.ru/hyoo/marked/logo/logo.svg");
			(obj.title) = () => ("");
			return obj;
		}
		publish(next){
			if(next !== undefined) return next;
			return null;
		}
		Publish_icon(){
			const obj = new this.$.$mol_icon_publish();
			return obj;
		}
		Publish(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.publish(next)));
			(obj.disabled) = () => ((this.released()));
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_edit_Publish_hint")));
			(obj.sub) = () => ([(this.Publish_icon())]);
			return obj;
		}
		Export_icon(){
			const obj = new this.$.$mol_icon_export();
			return obj;
		}
		download_name(){
			return "{filename}.mt";
		}
		download_blob(){
			const obj = new this.$.$mol_blob();
			return obj;
		}
		Download(){
			const obj = new this.$.$mol_button_download();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_page_side_edit_Download_title")));
			(obj.file_name) = () => ((this.download_name()));
			(obj.blob) = () => ((this.download_blob()));
			return obj;
		}
		copy_text(){
			return "";
		}
		copy_html(){
			return "";
		}
		Copy_html(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_page_side_edit_Copy_html_title")));
			(obj.text) = () => ((this.copy_text()));
			(obj.html) = () => ((this.copy_html()));
			return obj;
		}
		Export(){
			const obj = new this.$.$mol_pick();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_edit_Export_hint")));
			(obj.trigger_content) = () => ([(this.Export_icon())]);
			(obj.bubble_content) = () => ([(this.Download()), (this.Copy_html())]);
			return obj;
		}
		rights(next){
			if(next !== undefined) return next;
			return false;
		}
		Rights_icon(){
			const obj = new this.$.$mol_icon_shield_account();
			return obj;
		}
		Rights_toggle(){
			const obj = new this.$.$mol_check_icon();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_edit_Rights_toggle_hint")));
			(obj.checked) = (next) => ((this.rights(next)));
			(obj.Icon) = () => ((this.Rights_icon()));
			return obj;
		}
		close(next){
			if(next !== undefined) return next;
			return null;
		}
		Close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Close(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.close(next)));
			(obj.sub) = () => ([(this.Close_icon())]);
			return obj;
		}
		Details_edit(){
			const obj = new this.$.$mol_textarea();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_edit_Details_edit_hint")));
			(obj.value) = (next) => ((this.details(next)));
			(obj.selection) = (next) => ((this.details_selection(next)));
			(obj.enabled) = () => ((this.editable()));
			return obj;
		}
		Aura(){
			const obj = new this.$.$mol_string_button();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_edit_Aura_hint")));
			(obj.value) = (next) => ((this.aura(next)));
			(obj.enabled) = () => ((this.editable()));
			return obj;
		}
		Aura_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ((this.$.$mol_locale.text("$hyoo_page_side_edit_Aura_field_name")));
			(obj.Content) = () => ((this.Aura()));
			return obj;
		}
		side(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		Title(){
			const obj = new this.$.$mol_string_button();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_edit_Title_hint")));
			(obj.value) = (next) => ((this.title(next)));
			(obj.enabled) = () => ((this.editable()));
			return obj;
		}
		export_sign(){
			return (this.$.$mol_locale.text("$hyoo_page_side_edit_export_sign"));
		}
		tools(){
			return [
				(this.Syntax()), 
				(this.Publish()), 
				(this.Export()), 
				(this.Rights_toggle()), 
				(this.Close())
			];
		}
		body(){
			return [(this.Details_edit()), (this.Aura_field())];
		}
	};
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Syntax"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "publish"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Publish_icon"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Publish"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Export_icon"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "download_blob"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Download"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Copy_html"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Export"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "rights"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Rights_icon"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Rights_toggle"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "close"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Close_icon"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Close"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Details_edit"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Aura"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Aura_field"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "side"));
	($mol_mem(($.$hyoo_page_side_edit.prototype), "Title"));


;
"use strict";
var $;
(function ($) {
    $.$hyoo_marked_cut = $mol_regexp.from([
        '--',
        $mol_regexp.line_end,
    ]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { optional, slash_back, char_any, char_except, repeat } = $mol_regexp;
    $.$hyoo_marked_line_content = repeat(char_except('\r\n'), 1);
    const uri = repeat(char_except(slash_back));
    const content = { content: $.$hyoo_marked_line_content };
    const strong = $mol_regexp.from([{ marker: '**' }, content, '**']);
    const emphasis = $mol_regexp.from([{ marker: '//' }, content, '//']);
    const insertion = $mol_regexp.from([{ marker: '++' }, content, '++']);
    const deletion = $mol_regexp.from([{ marker: '--' }, content, '--']);
    const code = $mol_regexp.from([{ marker: ';;' }, content, ';;']);
    const with_uri = $mol_regexp.from([
        optional([
            { content: $.$hyoo_marked_line_content },
            slash_back
        ]),
        { uri },
    ]);
    const link = $mol_regexp.from([{ marker: '\\\\' }, with_uri, '\\\\']);
    const embed = $mol_regexp.from([{ marker: '""' }, with_uri, '""']);
    const inline = $mol_regexp.from({ strong, emphasis, insertion, deletion, code, link, embed });
    $.$hyoo_marked_line = $mol_regexp.from({ inline });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_marked_header = $mol_regexp.from([
        { marker: $mol_regexp.repeat_greedy('=', 1, 6) },
        ' ',
        { content: $hyoo_marked_line_content },
        $mol_regexp.line_end,
    ]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_marked_list_line = $mol_regexp.from([
        { indent: $mol_regexp.repeat('  ') },
        { marker: ['-', $mol_regexp.or, '+'] },
        ' ',
        { content: $hyoo_marked_line_content },
        $mol_regexp.line_end,
    ]);
    $.$hyoo_marked_list_item = $mol_regexp.from([
        $.$hyoo_marked_list_line,
        { kids: $mol_regexp.repeat_greedy([
                '  ',
                $hyoo_marked_line_content,
                $mol_regexp.line_end,
            ]) },
    ]);
    $.$hyoo_marked_list = $mol_regexp.repeat_greedy($.$hyoo_marked_list_item, 1);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_marked_quote_line = $mol_regexp.from([
        { marker: '"' },
        ' ',
        { content: $hyoo_marked_line_content },
        $mol_regexp.line_end,
    ]);
    $.$hyoo_marked_quote = $mol_regexp.repeat_greedy($.$hyoo_marked_quote_line, 1);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_marked_table_line = $mol_regexp.from([
        { indent: $mol_regexp.repeat('  ') },
        { marker: '!' },
        ' ',
        { content: $hyoo_marked_line_content },
        $mol_regexp.line_end,
    ]);
    $.$hyoo_marked_table_row = $mol_regexp.from({ content: [
            $.$hyoo_marked_table_line,
            $mol_regexp.repeat_greedy([
                '  ',
                $hyoo_marked_line_content,
                $mol_regexp.line_end,
            ]),
        ] });
    $.$hyoo_marked_table = $mol_regexp.repeat_greedy($.$hyoo_marked_table_line, 1);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { or, tab, char_any, repeat, line_end, vary } = $mol_regexp;
    $.$hyoo_marked_script_line = $mol_regexp.from([
        vary([
            tab,
            [' ', { marker: ['  ', or, '++', or, '--', or, '**'] }, ' '],
        ]),
        { content: repeat(char_any) },
        line_end,
    ]);
    $.$hyoo_marked_script = $mol_regexp.repeat_greedy($.$hyoo_marked_script_line, 1);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_marked_paragraph = $mol_regexp.from([
        { content: $mol_regexp.repeat($mol_regexp.char_any) },
        $mol_regexp.line_end,
    ]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_marked_flow = $mol_regexp.from([
        $mol_regexp.begin,
        {
            cut: $hyoo_marked_cut,
            header: $hyoo_marked_header,
            list: $hyoo_marked_list,
            quote: $hyoo_marked_quote,
            table: $hyoo_marked_table,
            script: $hyoo_marked_script,
            paragraph: $hyoo_marked_paragraph,
        },
    ], { multiline: true });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const NL = '\n';
    function flow(marked) {
        return [...marked.matchAll($hyoo_marked_flow)].map(found => {
            const token = found.groups;
            if (!token)
                return found[0];
            if (token.cut) {
                return $mol_jsx("hr", null);
            }
            if (token.header) {
                const level = token.marker.length;
                const Tag = `h${level}`;
                return $mol_jsx(Tag, { style: "break-after: avoid" },
                    NL,
                    line(token.content),
                    NL);
            }
            if (token.list) {
                const Tag = token.list[0] === '+' ? 'ol' : 'ul';
                return $mol_jsx(Tag, { style: "break-before: avoid" },
                    NL,
                    list_items(token.list),
                    NL);
            }
            if (token.table) {
                return $mol_jsx("table", null,
                    NL,
                    table_rows(token.table),
                    NL);
            }
            if (token.script) {
                return $mol_jsx("pre", null,
                    NL,
                    script_lines(token.script),
                    NL);
            }
            if (token.quote) {
                return $mol_jsx("blockquote", { style: "break-before: avoid" },
                    NL,
                    flow(token.quote.replace(/^" /gm, '')),
                    NL);
            }
            if (token.paragraph) {
                if (!token.content)
                    return '';
                const content = line(token.content);
                if (content.length !== 1)
                    return $mol_jsx("p", null,
                        NL,
                        content,
                        NL);
                if (typeof content[0] === 'string')
                    return $mol_jsx("p", null,
                        NL,
                        content,
                        NL);
                switch (content[0].localName) {
                    case 'object': return content[0];
                    default: return $mol_jsx("p", null,
                        NL,
                        content,
                        NL);
                }
            }
            return $mol_fail(new SyntaxError(`Unknown token`));
        }).filter(Boolean);
    }
    function table_cells(marked) {
        const tokens = [...marked.matchAll($hyoo_marked_table_line)];
        const cols = [];
        for (const token of tokens) {
            const index = Math.ceil(token.groups.indent.length / 2);
            const col = cols[index] || (cols[index] = []);
            col.push(token);
        }
        return cols.map(col => {
            const lines = col.map(line => line.groups.content);
            return $mol_jsx("td", null,
                NL,
                flow(lines.join('\n') + '\n'),
                NL);
        });
    }
    function table_rows(marked) {
        return [...marked.matchAll($hyoo_marked_table_row)].map(token => {
            return $mol_jsx("tr", null,
                NL,
                table_cells(token.groups.content),
                NL);
        }).filter(Boolean);
    }
    function list_items(marked) {
        return [...marked.matchAll($hyoo_marked_list_item)].map(token => {
            const kids = token.groups.kids.replace(/^  /gm, '');
            return $mol_jsx("li", null,
                flow(token.groups.content.replace(/^  /gm, '') + '\n'),
                flow(kids));
        }).filter(Boolean);
    }
    function script_lines(marked) {
        return [...marked.matchAll($hyoo_marked_script_line)].map(token => {
            if (token.groups.marker === '++')
                return $mol_jsx("ins", null,
                    "$",
                    token.groups.content,
                    NL);
            if (token.groups.marker === '--')
                return $mol_jsx("del", null,
                    "$",
                    token.groups.content,
                    NL);
            if (token.groups.marker === '**')
                return $mol_jsx("strong", null,
                    "$",
                    token.groups.content,
                    NL);
            return $mol_jsx("span", null,
                token.groups.content,
                NL);
        }).filter(Boolean);
    }
    function line(marked) {
        return [...marked.matchAll($hyoo_marked_line)].map(found => {
            const token = found.groups;
            if (!token)
                return $mol_jsx("span", null, found[0]);
            if (token.strong) {
                return $mol_jsx("strong", null, line(token.content));
            }
            if (token.emphasis) {
                return $mol_jsx("em", null, line(token.content));
            }
            if (token.insertion) {
                return $mol_jsx("ins", null, line(token.content));
            }
            if (token.deletion) {
                return $mol_jsx("del", null, line(token.content));
            }
            if (token.code) {
                return $mol_jsx("code", null, token.content);
            }
            if (token.link) {
                return $mol_jsx("a", { href: token.uri }, line(token.content || token.uri));
            }
            if (token.embed) {
                if (/\b(png|gif|jpg|jpeg|jfif|webp|svg)\b/.test(token.uri)) {
                    return $mol_jsx("img", { src: token.uri, alt: token.content });
                }
                return ($mol_jsx("object", { data: token.uri },
                    NL,
                    $mol_jsx("iframe", { src: token.uri }, token.uri),
                    NL));
            }
            return token[0];
        }).filter(Boolean);
    }
    function $hyoo_marked_to_dom(marked) {
        return $mol_jsx("body", null, flow(marked + '\n'));
    }
    $.$hyoo_marked_to_dom = $hyoo_marked_to_dom;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $hyoo_marked_to_html(marked) {
        return this.$hyoo_marked_to_dom(marked).innerHTML;
    }
    $.$hyoo_marked_to_html = $hyoo_marked_to_html;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_page_side_edit extends $.$hyoo_page_side_edit {
            publish() {
                this.side().publish();
            }
            permalink() {
                return this.$.$mol_state_arg.make_link({ '': this.side().id() });
            }
            export_sign() {
                return super.export_sign().replace('{link}', this.permalink());
            }
            download_name() {
                return super.download_name().replace('{filename}', this.title());
            }
            copy_text() {
                const view = this.Details_edit().View();
                let details = this.content_full()
                    .replaceAll(/\\\\(?:([^\\]+?)\\)?([^\\]+?)\\\\/gm, (whole, title, link) => title
                    ? `\\\\${title}\\${view.uri_resolve(link)}\\\\`
                    : `\\\\${view.uri_resolve(link)}\\\\`);
                return `${details}--\n\n${this.export_sign()}`;
            }
            download_blob() {
                return new $mol_dom_context.Blob([this.copy_text()], { type: 'text/x-marked' });
            }
            copy_html() {
                return this.$.$hyoo_marked_to_html(this.copy_text());
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_page_side_edit.prototype, "permalink", null);
        $$.$hyoo_page_side_edit = $hyoo_page_side_edit;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { rem } = $mol_style_unit;
    $mol_style_define($hyoo_page_side_edit, {
        margin: [0, 'auto'],
        flex: {
            basis: rem(50),
            grow: 0,
        },
        Tools: {
            flex: {
                grow: 0,
            },
        },
    });
})($ || ($ = {}));

;
	($.$hyoo_page_side_info) = class $hyoo_page_side_info extends ($.$mol_page) {
		text_tokens(){
			return (this.Text().flow_tokens());
		}
		text_header_title(id){
			return (this.Text().block_text(id));
		}
		section_arg(id){
			return (this.Text().header_arg(id));
		}
		section_level(id){
			return (this.Text().header_level(id));
		}
		details(){
			return (this.side().details());
		}
		details_node(){
			return (this.side().details_node());
		}
		referrers_list(){
			return (this.side().referrers_list());
		}
		referrers_stat(id){
			return (this.side().referrers_stat(id));
		}
		slides_uri(){
			return "https://slides.hyoo.ru/#!slides={source}";
		}
		Slides(){
			const obj = new this.$.$mol_link_iconed();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_side_info_Slides_hint")));
			(obj.uri) = () => ((this.slides_uri()));
			(obj.title) = () => ("");
			return obj;
		}
		close(next){
			if(next !== undefined) return next;
			return null;
		}
		Close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Close(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.close(next)));
			(obj.sub) = () => ([(this.Close_icon())]);
			return obj;
		}
		size(){
			return "0";
		}
		Size(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_page_side_info_Size_title")));
			(obj.content) = () => ([(this.size())]);
			return obj;
		}
		chars(){
			return "0";
		}
		Chars(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_page_side_info_Chars_title")));
			(obj.content) = () => ([(this.chars())]);
			return obj;
		}
		words(){
			return "0";
		}
		Words(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_page_side_info_Words_title")));
			(obj.content) = () => ([(this.words())]);
			return obj;
		}
		weight(){
			return "0B";
		}
		Weight(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_page_side_info_Weight_title")));
			(obj.content) = () => ([(this.weight())]);
			return obj;
		}
		Stat(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Size()), 
				(this.Chars()), 
				(this.Words()), 
				(this.Weight())
			]);
			return obj;
		}
		section_expanded(next){
			if(next !== undefined) return next;
			return false;
		}
		section_title(id){
			return "";
		}
		Section_link(id){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ((this.section_arg(id)));
			(obj.title) = () => ((this.section_title(id)));
			return obj;
		}
		section_list(){
			return [(this.Section_link("0"))];
		}
		Section_list(){
			const obj = new this.$.$mol_expander();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_page_side_info_Section_list_title")));
			(obj.expanded) = (next) => ((this.section_expanded(next)));
			(obj.content) = () => ((this.section_list()));
			return obj;
		}
		ref_expanded(next){
			if(next !== undefined) return next;
			return false;
		}
		ref_uri(id){
			return "";
		}
		Ref_item_link(id){
			const obj = new this.$.$mol_link_iconed();
			(obj.uri) = () => ((this.ref_uri(id)));
			return obj;
		}
		ref_stat(id){
			return 0;
		}
		Ref_item_stat(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.ref_stat(id))]);
			return obj;
		}
		Ref_item(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Ref_item_link(id)), (this.Ref_item_stat(id))]);
			return obj;
		}
		ref_list(){
			return [(this.Ref_item("0_0"))];
		}
		Ref_list(){
			const obj = new this.$.$mol_expander();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_page_side_info_Ref_list_title")));
			(obj.expanded) = (next) => ((this.ref_expanded(next)));
			(obj.content) = () => ((this.ref_list()));
			return obj;
		}
		word_item_text(id){
			return "";
		}
		Word_item_text(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.word_item_text(id))]);
			return obj;
		}
		word_item_stat(id){
			return 0;
		}
		Word_item_stat(id){
			const obj = new this.$.$mol_speck();
			(obj.value) = () => ((this.word_item_stat(id)));
			(obj.theme) = () => ("$mol_theme_special");
			return obj;
		}
		Word_item(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Word_item_text(id)), (this.Word_item_stat(id))]);
			return obj;
		}
		word_list_items(){
			return [(this.Word_item("0_0"))];
		}
		Word_list_items(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ((this.word_list_items()));
			return obj;
		}
		Word_list(){
			const obj = new this.$.$mol_expander();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_page_side_info_Word_list_title")));
			(obj.content) = () => ([(this.Word_list_items())]);
			return obj;
		}
		Text(){
			const obj = new this.$.$mol_text();
			return obj;
		}
		side(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		title(){
			return (this.$.$mol_locale.text("$hyoo_page_side_info_title"));
		}
		tools(){
			return [(this.Slides()), (this.Close())];
		}
		body(){
			return [
				(this.Stat()), 
				(this.Section_list()), 
				(this.Ref_list()), 
				(this.Word_list())
			];
		}
	};
	($mol_mem(($.$hyoo_page_side_info.prototype), "Slides"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "close"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Close_icon"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Close"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Size"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Chars"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Words"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Weight"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Stat"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "section_expanded"));
	($mol_mem_key(($.$hyoo_page_side_info.prototype), "Section_link"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Section_list"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "ref_expanded"));
	($mol_mem_key(($.$hyoo_page_side_info.prototype), "Ref_item_link"));
	($mol_mem_key(($.$hyoo_page_side_info.prototype), "Ref_item_stat"));
	($mol_mem_key(($.$hyoo_page_side_info.prototype), "Ref_item"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Ref_list"));
	($mol_mem_key(($.$hyoo_page_side_info.prototype), "Word_item_text"));
	($mol_mem_key(($.$hyoo_page_side_info.prototype), "Word_item_stat"));
	($mol_mem_key(($.$hyoo_page_side_info.prototype), "Word_item"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Word_list_items"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Word_list"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "Text"));
	($mol_mem(($.$hyoo_page_side_info.prototype), "side"));


;
"use strict";
var $;
(function ($) {
    let $mol_si_prefix;
    (function ($mol_si_prefix) {
        $mol_si_prefix[$mol_si_prefix["y"] = -8] = "y";
        $mol_si_prefix[$mol_si_prefix["z"] = -7] = "z";
        $mol_si_prefix[$mol_si_prefix["a"] = -6] = "a";
        $mol_si_prefix[$mol_si_prefix["f"] = -5] = "f";
        $mol_si_prefix[$mol_si_prefix["p"] = -4] = "p";
        $mol_si_prefix[$mol_si_prefix["n"] = -3] = "n";
        $mol_si_prefix[$mol_si_prefix["\u00B5"] = -2] = "\u00B5";
        $mol_si_prefix[$mol_si_prefix["m"] = -1] = "m";
        $mol_si_prefix[$mol_si_prefix[""] = 0] = "";
        $mol_si_prefix[$mol_si_prefix["k"] = 1] = "k";
        $mol_si_prefix[$mol_si_prefix["M"] = 2] = "M";
        $mol_si_prefix[$mol_si_prefix["G"] = 3] = "G";
        $mol_si_prefix[$mol_si_prefix["T"] = 4] = "T";
        $mol_si_prefix[$mol_si_prefix["P"] = 5] = "P";
        $mol_si_prefix[$mol_si_prefix["E"] = 6] = "E";
        $mol_si_prefix[$mol_si_prefix["Z"] = 7] = "Z";
        $mol_si_prefix[$mol_si_prefix["Y"] = 8] = "Y";
    })($mol_si_prefix = $.$mol_si_prefix || ($.$mol_si_prefix = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_si_short(numb, unit = '') {
        let magnitude = Math.floor(Math.log10(Math.abs(numb)) / 3);
        if (!Number.isFinite(magnitude)) {
            const prefix = isNaN(numb) ? `∅` : numb.toLocaleString();
            const suffix = unit ? ' ' + unit : '';
            return prefix + suffix;
        }
        let normal = numb / 10 ** (3 * magnitude);
        if (Math.round(Math.abs(normal)) === 1000) {
            normal /= 1000;
            ++magnitude;
        }
        const prefix = normal.toPrecision(3);
        if (unit) {
            return prefix + ' ' + $mol_si_prefix[magnitude] + unit;
        }
        else {
            return prefix + $mol_si_prefix[magnitude];
        }
    }
    $.$mol_si_short = $mol_si_short;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_text_profile(text) {
        text = '\n\n' + text + '\n\n';
        const key = new Map();
        for (let i = 0; i < text.length - 2; ++i) {
            const trigram = text.slice(i, i + 3);
            const count = key.get(trigram) ?? 0;
            key.set(trigram, count + 1);
        }
        return key;
    }
    $.$mol_text_profile = $mol_text_profile;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_page_side_info extends $.$hyoo_page_side_info {
            slides_uri() {
                const source = this.$.$mol_state_arg.href() + '/';
                return super.slides_uri().replace('{source}', encodeURIComponent(source));
            }
            section_indexes() {
                return [...this.text_tokens().entries()]
                    .filter(([index, token]) => token.name === 'header')
                    .map(([index]) => index);
            }
            section_list() {
                return this.section_indexes().map(index => this.Section_link(index));
            }
            section_title(index) {
                const prefix = ''.padEnd(2 * this.section_level(index), '− ');
                return prefix + this.text_header_title(index);
            }
            ref_list() {
                return this.referrers_list().map(uri => this.Ref_item(uri));
            }
            ref_uri(uri) {
                return uri;
            }
            ref_stat(uri) {
                return this.referrers_stat(uri);
            }
            weight() {
                const units = this.details_node()?.land.delta();
                const weight = units?.reduce((sum, unit) => {
                    return sum + $hyoo_crowd_unit_bin.from_unit(unit).byteLength;
                }, 0) ?? 0;
                return $mol_si_short(weight, 'B');
            }
            word_stat() {
                const stat = new Map();
                const text = this.details().toLowerCase()
                    .replace(/\]\(.*?\)/g, '')
                    .replace(/""(?:(.*?)\\)?.*?""/g, '$1')
                    .replace(/\\\\(?:(.*?)\\)?.*?\\\\/g, '$1');
                for (const match of text.matchAll(/\p{Letter}{2,}(?=((?:\P{Letter}\p{Letter}{2,})*))/ug) ?? []) {
                    const parts = match.join('').match(/\P{Letter}?\p{Letter}{2,}/gu) ?? [];
                    for (let i = 1; i <= parts.length; ++i) {
                        const word = parts.slice(0, i).join('');
                        if (word.length < 3)
                            continue;
                        stat.set(word, (stat.get(word) ?? 0) + 1);
                    }
                }
                return stat;
            }
            word_list_items() {
                const raw = [...this.word_stat()];
                const max = raw.reduce((max, [word, stat]) => Math.max(max, stat), 1);
                const min = Math.max(3, max ** .5);
                const filtered = raw.filter(([word, stat]) => stat >= min);
                filtered.sort((left, right) => right[0].length ** 1.6 - left[0].length ** 1.6 + right[1] - left[1]);
                return filtered.map(([word]) => this.Word_item(word));
            }
            word_item_text(word) {
                return word;
            }
            word_item_stat(word) {
                return this.word_stat().get(word);
            }
            size() {
                return $mol_si_short($mol_text_profile(this.details()).size, '');
            }
            chars() {
                return $mol_si_short(this.details().length, '');
            }
            words() {
                return $mol_si_short(this.details().match(/\p{Letter}+/ug)?.length ?? 0, '');
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_page_side_info.prototype, "slides_uri", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_info.prototype, "section_indexes", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_info.prototype, "section_list", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_page_side_info.prototype, "section_title", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_info.prototype, "ref_list", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_page_side_info.prototype, "ref_stat", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_info.prototype, "weight", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_info.prototype, "word_stat", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_info.prototype, "word_list_items", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_info.prototype, "size", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_info.prototype, "chars", null);
        __decorate([
            $mol_mem
        ], $hyoo_page_side_info.prototype, "words", null);
        $$.$hyoo_page_side_info = $hyoo_page_side_info;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { rem } = $mol_style_unit;
    $mol_style_define($hyoo_page_side_info, {
        flex: {
            basis: rem(20),
            grow: 0,
        },
        Section_list: {
            Content: {
                padding: {
                    left: rem(1.25),
                },
            },
        },
        Stat: {
            justifyContent: 'space-between',
            flex: {
                wrap: 'wrap',
            },
        },
        Ref_item_link: {
            flex: {
                shrink: 1,
                grow: 1,
            },
            wordBreak: 'break-word',
        },
        Ref_item_stat: {
            padding: $mol_gap.text,
        },
        Word_item_text: {
            flex: {
                grow: 1,
                shrink: 1,
            },
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_meta_person extends $hyoo_meta_model {
    }
    $.$hyoo_meta_person = $hyoo_meta_person;
})($ || ($ = {}));

;
	($.$mol_button_major) = class $mol_button_major extends ($.$mol_button_minor) {
		theme(){
			return "$mol_theme_base";
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/button/major/major.view.css", "[mol_button_major] {\n\tbackground-color: var(--mol_theme_back);\n\tcolor: var(--mol_theme_text);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$hyoo_meta_rights) = class $hyoo_meta_rights extends ($.$mol_page) {
		editors(){
			return (this.meta().editors());
		}
		peer(id){
			const obj = new this.$.$hyoo_meta_person();
			return obj;
		}
		Editor_link(id){
			const obj = new this.$.$hyoo_meta_link();
			(obj.meta) = () => ((this.peer(id)));
			return obj;
		}
		editor_list(){
			return [(this.Editor_link("0_0"))];
		}
		Editor_list(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.editor_list()));
			return obj;
		}
		editor_add_bid(){
			return (this.$.$mol_locale.text("$hyoo_meta_rights_editor_add_bid"));
		}
		editor_add_id(next){
			if(next !== undefined) return next;
			return "";
		}
		editable(){
			return false;
		}
		Editor_add_id(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_meta_rights_Editor_add_id_hint")));
			(obj.value) = (next) => ((this.editor_add_id(next)));
			(obj.enabled) = () => ((this.editable()));
			return obj;
		}
		editor_add_allowed(){
			return false;
		}
		editor_add_submit(next){
			if(next !== undefined) return next;
			return null;
		}
		Editor_add_icon(){
			const obj = new this.$.$mol_icon_plus();
			return obj;
		}
		Editor_add_submit(){
			const obj = new this.$.$mol_button_major();
			(obj.enabled) = () => ((this.editor_add_allowed()));
			(obj.click) = (next) => ((this.editor_add_submit(next)));
			(obj.sub) = () => ([(this.Editor_add_icon())]);
			return obj;
		}
		Editor_add_bar(){
			const obj = new this.$.$mol_bar();
			(obj.sub) = () => ([(this.Editor_add_id()), (this.Editor_add_submit())]);
			return obj;
		}
		editor_add_preview(){
			const obj = new this.$.$hyoo_meta_model();
			return obj;
		}
		Editor_add_preview(){
			const obj = new this.$.$hyoo_meta_link();
			(obj.meta) = () => ((this.editor_add_preview()));
			return obj;
		}
		editor_fill_all(next){
			if(next !== undefined) return next;
			return null;
		}
		Editor_fill_all(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_meta_rights_Editor_fill_all_title")));
			(obj.click) = (next) => ((this.editor_fill_all(next)));
			return obj;
		}
		editor_add_rows(){
			return [
				(this.Editor_add_bar()), 
				(this.Editor_add_preview()), 
				(this.Editor_fill_all())
			];
		}
		Editor_add_form(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.editor_add_rows()));
			return obj;
		}
		Editor_add(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ((this.$.$mol_locale.text("$hyoo_meta_rights_Editor_add_name")));
			(obj.bid) = () => ((this.editor_add_bid()));
			(obj.Content) = () => ((this.Editor_add_form()));
			return obj;
		}
		blocks(){
			return [(this.Editor_list()), (this.Editor_add())];
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.blocks()));
			return obj;
		}
		title(){
			return (this.$.$mol_locale.text("$hyoo_meta_rights_title"));
		}
		meta(){
			const obj = new this.$.$hyoo_meta_model();
			return obj;
		}
		body(){
			return [(this.Content())];
		}
	};
	($mol_mem_key(($.$hyoo_meta_rights.prototype), "peer"));
	($mol_mem_key(($.$hyoo_meta_rights.prototype), "Editor_link"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "Editor_list"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "editor_add_id"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "Editor_add_id"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "editor_add_submit"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "Editor_add_icon"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "Editor_add_submit"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "Editor_add_bar"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "editor_add_preview"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "Editor_add_preview"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "editor_fill_all"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "Editor_fill_all"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "Editor_add_form"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "Editor_add"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "Content"));
	($mol_mem(($.$hyoo_meta_rights.prototype), "meta"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_meta_rights extends $.$hyoo_meta_rights {
            editable() {
                return this.meta().land.allowed_law();
            }
            blocks() {
                return [
                    this.Editor_list(),
                    ...this.editable() ? [this.Editor_add()] : [],
                ];
            }
            editor_list() {
                const meta = this.meta().id();
                return this.editors()
                    .filter(peer => peer !== meta)
                    .map(peer => this.Editor_link(peer));
            }
            editor_add_rows() {
                return [
                    this.Editor_add_bar(),
                    this.editor_add_id() ? this.Editor_add_preview() : this.Editor_fill_all(),
                ];
            }
            editor_add_id(next = '') {
                return (next.trim().match(/^(?:.*=)?([0-9a-z]+_[0-9a-z]+)/)?.[1] ?? '');
            }
            editor_add_allowed() {
                if (!this.editable())
                    return false;
                return Boolean(this.editor_add_id());
            }
            editor_add_bid() {
                return Boolean(this.editor_add_id()) ? super.editor_add_bid() : '';
            }
            editor_fill_all() {
                this.editor_add_id('0_0');
            }
            editor_add_submit() {
                const peer = this.editor_add_id();
                this.meta().land.level(peer, $hyoo_crowd_peer_level.mod);
                this.editor_add_id('');
            }
            editor_add_preview() {
                return this.peer(this.editor_add_id());
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_meta_rights.prototype, "blocks", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_rights.prototype, "editor_list", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_rights.prototype, "editor_add_rows", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_rights.prototype, "editor_add_id", null);
        $$.$hyoo_meta_rights = $hyoo_meta_rights;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { rem } = $mol_style_unit;
    $mol_style_define($hyoo_meta_rights, {
        flex: {
            basis: rem(20),
            grow: 0,
        },
        Editor_add: {
            Content: {
                flex: {
                    wrap: 'wrap',
                },
            },
        },
    });
})($ || ($ = {}));

;
	($.$mol_icon_eye) = class $mol_icon_eye extends ($.$mol_icon) {
		path(){
			return "M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z";
		}
	};


;
"use strict";

;
	($.$mol_password) = class $mol_password extends ($.$mol_view) {
		hint(){
			return "";
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		enabled(){
			return true;
		}
		Pass(){
			const obj = new this.$.$mol_string();
			(obj.type) = () => ((this.type()));
			(obj.hint) = () => ((this.hint()));
			(obj.value) = (next) => ((this.value(next)));
			(obj.submit) = (next) => ((this.submit(next)));
			(obj.enabled) = () => ((this.enabled()));
			return obj;
		}
		checked(next){
			if(next !== undefined) return next;
			return true;
		}
		Show_icon(){
			const obj = new this.$.$mol_icon_eye();
			return obj;
		}
		Show(){
			const obj = new this.$.$mol_check_icon();
			(obj.checked) = (next) => ((this.checked(next)));
			(obj.Icon) = () => ((this.Show_icon()));
			return obj;
		}
		content(){
			return [(this.Pass()), (this.Show())];
		}
		type(next){
			if(next !== undefined) return next;
			return "password";
		}
		sub(){
			return (this.content());
		}
	};
	($mol_mem(($.$mol_password.prototype), "value"));
	($mol_mem(($.$mol_password.prototype), "submit"));
	($mol_mem(($.$mol_password.prototype), "Pass"));
	($mol_mem(($.$mol_password.prototype), "checked"));
	($mol_mem(($.$mol_password.prototype), "Show_icon"));
	($mol_mem(($.$mol_password.prototype), "Show"));
	($mol_mem(($.$mol_password.prototype), "type"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_password extends $.$mol_password {
            checked(next) {
                this.type(next ? 'text' : 'password');
                return next ?? false;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_password.prototype, "checked", null);
        $$.$mol_password = $mol_password;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$hyoo_meta_safe) = class $hyoo_meta_safe extends ($.$mol_page) {
		Expot_bid(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.$.$mol_locale.text("$hyoo_meta_safe_Expot_bid_text")));
			return obj;
		}
		password_bid(){
			return "";
		}
		password(next){
			if(next !== undefined) return next;
			return "";
		}
		Password(){
			const obj = new this.$.$mol_password();
			(obj.value) = (next) => ((this.password(next)));
			return obj;
		}
		Password_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ((this.$.$mol_locale.text("$hyoo_meta_safe_Password_field_name")));
			(obj.bids) = () => ([(this.password_bid())]);
			(obj.Content) = () => ((this.Password()));
			return obj;
		}
		recall_enabled(){
			return true;
		}
		recall(next){
			if(next !== undefined) return next;
			return "";
		}
		Recall(){
			const obj = new this.$.$mol_string();
			(obj.enabled) = () => ((this.recall_enabled()));
			(obj.value) = (next) => ((this.recall(next)));
			return obj;
		}
		Recall_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ((this.$.$mol_locale.text("$hyoo_meta_safe_Recall_field_name")));
			(obj.Content) = () => ((this.Recall()));
			return obj;
		}
		Export_pass(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Password_field()), (this.Recall_field())]);
			return obj;
		}
		export_link(){
			return "";
		}
		Export_link(){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ((this.export_link()));
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_meta_safe_Export_link_title")));
			return obj;
		}
		export_rows(){
			return [
				(this.Expot_bid()), 
				(this.Export_pass()), 
				(this.Export_link())
			];
		}
		Export_block(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.export_rows()));
			return obj;
		}
		Iport_descr(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.$.$mol_locale.text("$hyoo_meta_safe_Iport_descr_text")));
			return obj;
		}
		Import_pass(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Recall_field()), (this.Password_field())]);
			return obj;
		}
		import_switch(next){
			if(next !== undefined) return next;
			return null;
		}
		peer_new(){
			return "";
		}
		Peer_new(){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.peer_new()));
			return obj;
		}
		impot_switch_title(){
			return (this.$.$mol_locale.text("$hyoo_meta_safe_impot_switch_title"));
		}
		Import_switch(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.import_switch(next)));
			(obj.sub) = () => ([(this.Peer_new()), (this.impot_switch_title())]);
			return obj;
		}
		import_rows(){
			return [
				(this.Iport_descr()), 
				(this.Import_pass()), 
				(this.Import_switch())
			];
		}
		Import_block(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.import_rows()));
			return obj;
		}
		content(){
			return [(this.Export_block()), (this.Import_block())];
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.content()));
			return obj;
		}
		title(){
			return (this.$.$mol_locale.text("$hyoo_meta_safe_title"));
		}
		yard(){
			const obj = new this.$.$hyoo_sync_yard();
			return obj;
		}
		bid_pass_long(){
			return (this.$.$mol_locale.text("$hyoo_meta_safe_bid_pass_long"));
		}
		key_size(){
			return 144;
		}
		attr(){
			return {...(super.attr()), "mol_theme": "$mol_theme_special"};
		}
		body(){
			return [(this.Content())];
		}
	};
	($mol_mem(($.$hyoo_meta_safe.prototype), "Expot_bid"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "password"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Password"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Password_field"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "recall"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Recall"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Recall_field"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Export_pass"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Export_link"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Export_block"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Iport_descr"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Import_pass"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "import_switch"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Peer_new"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Import_switch"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Import_block"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "Content"));
	($mol_mem(($.$hyoo_meta_safe.prototype), "yard"));


;
"use strict";
var $;
(function ($) {
    let sponge = new Uint32Array(80);
    function $mol_crypto_hash(input) {
        const data = input instanceof Uint8Array
            ? input
            : new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
        const bits = data.byteLength << 3;
        const kbits = bits >> 5;
        const kword = 0x80 << (24 - bits & 0b11111);
        const bytes = 16 + (bits + 64 >>> 9 << 4);
        const klens = bytes - 1;
        const words = new Int32Array(data.buffer, data.byteOffset, data.byteLength >> 2);
        let tail = 0;
        for (let i = words.length * 4; i < data.length; ++i) {
            tail |= data[i] << (i << 3 & 0b11000);
        }
        const hash = new Int32Array([1732584193, -271733879, -1732584194, 271733878, -1009589776]);
        for (let i = 0; i < bytes; i += 16) {
            let h0 = hash[0];
            let h1 = hash[1];
            let h2 = hash[2];
            let h3 = hash[3];
            let h4 = hash[4];
            for (let j = 0; j < 16; ++j) {
                const k = i + j;
                if (k === klens) {
                    sponge[j] = bits;
                }
                else {
                    let word = k === words.length ? tail :
                        k > words.length ? 0 :
                            words[k];
                    word = word << 24 | word << 8 & 0xFF0000 | word >>> 8 & 0xFF00 | word >>> 24 & 0xFF;
                    if (k === kbits)
                        word |= kword;
                    sponge[j] = word;
                }
                const next = ((h1 & h2 | ~h1 & h3) + 1518500249 + h4 + (sponge[j] >>> 0) + ((h0 << 5) | (h0 >>> 27))) | 0;
                h4 = h3;
                h3 = h2;
                h2 = (h1 << 30) | (h1 >>> 2);
                h1 = h0;
                h0 = next;
            }
            for (let j = 16; j < 20; ++j) {
                const shuffle = sponge[j - 3] ^ sponge[j - 8] ^ sponge[j - 14] ^ sponge[j - 16];
                sponge[j] = shuffle << 1 | shuffle >>> 31;
                const next = ((h1 & h2 | ~h1 & h3) + 1518500249 + h4 + (sponge[j] >>> 0) + ((h0 << 5) | (h0 >>> 27))) | 0;
                h4 = h3;
                h3 = h2;
                h2 = (h1 << 30) | (h1 >>> 2);
                h1 = h0;
                h0 = next;
            }
            for (let j = 20; j < 40; ++j) {
                const shuffle = sponge[j - 3] ^ sponge[j - 8] ^ sponge[j - 14] ^ sponge[j - 16];
                sponge[j] = shuffle << 1 | shuffle >>> 31;
                const next = ((h1 ^ h2 ^ h3) + 1859775393 + h4 + (sponge[j] >>> 0) + ((h0 << 5) | (h0 >>> 27))) | 0;
                h4 = h3;
                h3 = h2;
                h2 = (h1 << 30) | (h1 >>> 2);
                h1 = h0;
                h0 = next;
            }
            for (let j = 40; j < 60; ++j) {
                const shuffle = sponge[j - 3] ^ sponge[j - 8] ^ sponge[j - 14] ^ sponge[j - 16];
                sponge[j] = shuffle << 1 | shuffle >>> 31;
                const next = ((h1 & h2 | h1 & h3 | h2 & h3) - 1894007588 + h4 + (sponge[j] >>> 0) + ((h0 << 5) | (h0 >>> 27))) | 0;
                h4 = h3;
                h3 = h2;
                h2 = (h1 << 30) | (h1 >>> 2);
                h1 = h0;
                h0 = next;
            }
            for (let j = 60; j < 80; ++j) {
                const shuffle = sponge[j - 3] ^ sponge[j - 8] ^ sponge[j - 14] ^ sponge[j - 16];
                sponge[j] = shuffle << 1 | shuffle >>> 31;
                const next = ((h1 ^ h2 ^ h3) - 899497514 + h4 + (sponge[j] >>> 0) + ((h0 << 5) | (h0 >>> 27))) | 0;
                h4 = h3;
                h3 = h2;
                h2 = (h1 << 30) | (h1 >>> 2);
                h1 = h0;
                h0 = next;
            }
            hash[0] += h0;
            hash[1] += h1;
            hash[2] += h2;
            hash[3] += h3;
            hash[4] += h4;
        }
        for (let i = 0; i < 20; ++i) {
            const word = hash[i];
            hash[i] = word << 24 | word << 8 & 0xFF0000 | word >>> 8 & 0xFF00 | word >>> 24 & 0xFF;
        }
        return new Uint8Array(hash.buffer);
    }
    $.$mol_crypto_hash = $mol_crypto_hash;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const algorithm = {
        name: 'AES-CBC',
        length: 128,
        tagLength: 32,
    };
    class $mol_crypto_secret extends Object {
        native;
        static size = 16;
        constructor(native) {
            super();
            this.native = native;
        }
        static async generate() {
            return new this(await $mol_crypto_native.subtle.generateKey(algorithm, true, ['encrypt', 'decrypt']));
        }
        static async from(serial) {
            return new this(await $mol_crypto_native.subtle.importKey('raw', serial, algorithm, true, ['encrypt', 'decrypt']));
        }
        static async pass(pass, salt) {
            return new this(await $mol_crypto_native.subtle.deriveKey({
                name: "PBKDF2",
                salt,
                iterations: 10_000,
                hash: "SHA-256",
            }, await $mol_crypto_native.subtle.importKey("raw", $mol_charset_encode(pass), "PBKDF2", false, ["deriveKey"]), algorithm, true, ['encrypt', 'decrypt']));
        }
        static async derive(private_serial, public_serial) {
            const ecdh = { name: "ECDH", namedCurve: "P-256" };
            const jwk = { crv: 'P-256', ext: true, kty: 'EC' };
            const private_key = await $mol_crypto_native.subtle.importKey('jwk', {
                ...jwk,
                key_ops: ['deriveKey'],
                x: private_serial.slice(0, 43),
                y: private_serial.slice(43, 86),
                d: private_serial.slice(86, 129),
            }, ecdh, true, ['deriveKey']);
            const public_key = await $mol_crypto_native.subtle.importKey('jwk', {
                ...jwk,
                key_ops: [],
                x: public_serial.slice(0, 43),
                y: public_serial.slice(43, 86),
            }, ecdh, true, []);
            const secret = await $mol_crypto_native.subtle.deriveKey({
                name: "ECDH",
                public: public_key,
            }, private_key, algorithm, true, ["encrypt", "decrypt"]);
            return new this(secret);
        }
        async serial() {
            return new Uint8Array(await $mol_crypto_native.subtle.exportKey('raw', this.native));
        }
        async encrypt(open, salt) {
            return new Uint8Array(await $mol_crypto_native.subtle.encrypt({
                ...algorithm,
                iv: salt,
            }, this.native, open));
        }
        async decrypt(closed, salt) {
            return new Uint8Array(await $mol_crypto_native.subtle.decrypt({
                ...algorithm,
                iv: salt,
            }, this.native, closed));
        }
    }
    $.$mol_crypto_secret = $mol_crypto_secret;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_after_work extends $mol_object2 {
        delay;
        task;
        id;
        constructor(delay, task) {
            super();
            this.delay = delay;
            this.task = task;
            this.id = requestIdleCallback(task, { timeout: delay });
        }
        destructor() {
            cancelIdleCallback(this.id);
        }
    }
    $.$mol_after_work = $mol_after_work;
    if (typeof requestIdleCallback !== 'function') {
        $.$mol_after_work = $mol_after_timeout;
    }
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wait_rest_async() {
        return new Promise(done => {
            new this.$mol_after_work(16, () => done(null));
        });
    }
    $.$mol_wait_rest_async = $mol_wait_rest_async;
    function $mol_wait_rest() {
        return this.$mol_wire_sync(this).$mol_wait_rest_async();
    }
    $.$mol_wait_rest = $mol_wait_rest;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_meta_safe extends $.$hyoo_meta_safe {
            password_bid() {
                const pass = this.password();
                if (pass.length <= 7)
                    return this.bid_pass_long();
                return '';
            }
            content() {
                return [
                    this.key_import()
                        ? this.Import_block()
                        : this.Export_block()
                ];
            }
            recall(next) {
                const serial = this.key_import();
                if (!serial)
                    return next ?? '';
                const pack = $mol_base64_decode(serial);
                return $mol_charset_decode(pack.slice(this.key_size()));
            }
            recall_enabled() {
                return !this.key_import();
            }
            peer_current() {
                return this.yard().peer().id;
            }
            peer_new() {
                return $mol_int62_hash_string(this.$.$mol_crypto_auditor_private_to_public(this.key_new()));
            }
            key_import(next) {
                return this.$.$mol_state_arg.value('hyoo_meta_key', next) ?? null;
            }
            key_new() {
                const serial = this.key_import();
                if (!serial)
                    return null;
                try {
                    const pack = $mol_base64_decode(serial);
                    const closed = pack.slice(0, this.key_size());
                    const salt = $mol_crypto_hash(pack.slice(this.key_size())).slice(0, 16);
                    const pass = this.password();
                    const secret = $mol_wire_sync(this.$.$mol_crypto_secret).pass(pass, salt);
                    const opened = $mol_wire_sync(secret).decrypt(closed, salt);
                    return $mol_charset_decode(opened);
                }
                catch (error) {
                    $mol_fail_log(error);
                    return null;
                }
            }
            import_switch() {
                this.yard().peer(this.key_new());
                this.password('');
                this.key_import(null);
                this.$.$mol_wait_rest();
                this.$.$mol_dom_context.location.reload();
            }
            key_export() {
                const pass = this.password();
                const recall = $mol_charset_encode(this.recall());
                const salt = $mol_crypto_hash(recall).slice(0, 16);
                const secret = $mol_wire_sync(this.$.$mol_crypto_secret).pass(pass, salt);
                const open = this.$.$mol_charset_encode(this.yard().peer().key_private_serial);
                const closed = new Uint8Array($mol_wire_sync(secret).encrypt(open, salt));
                const pack = new Uint8Array(this.key_size() + recall.byteLength);
                pack.set(closed, 0);
                pack.set(recall, this.key_size());
                return this.$.$mol_base64_encode(pack);
            }
            export_rows() {
                return [
                    this.Expot_bid(),
                    this.Export_pass(),
                    ...this.password_bid() ? [] : [this.Export_link()],
                ];
            }
            import_rows() {
                return [
                    this.Iport_descr(),
                    this.Import_pass(),
                    ...this.key_new() ? [this.Import_switch()] : [],
                ];
            }
            export_link() {
                return this.$.$mol_state_arg.link({
                    hyoo_meta_key: this.key_export(),
                });
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_meta_safe.prototype, "password_bid", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_safe.prototype, "content", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_safe.prototype, "recall", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_safe.prototype, "peer_current", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_safe.prototype, "peer_new", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_safe.prototype, "key_new", null);
        __decorate([
            $mol_action
        ], $hyoo_meta_safe.prototype, "import_switch", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_safe.prototype, "key_export", null);
        __decorate([
            $mol_mem
        ], $hyoo_meta_safe.prototype, "export_link", null);
        $$.$hyoo_meta_safe = $hyoo_meta_safe;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($hyoo_meta_safe, {
            flex: {
                basis: `20rem`,
            },
            Export_block: {
                gap: $mol_gap.block,
            },
            Import_block: {
                gap: $mol_gap.block,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_sync) = class $mol_icon_sync extends ($.$mol_icon) {
		path(){
			return "M12,18A6,6 0 0,1 6,12C6,11 6.25,10.03 6.7,9.2L5.24,7.74C4.46,8.97 4,10.43 4,12A8,8 0 0,0 12,20V23L16,19L12,15M12,4V1L8,5L12,9V6A6,6 0 0,1 18,12C18,13 17.75,13.97 17.3,14.8L18.76,16.26C19.54,15.03 20,13.57 20,12A8,8 0 0,0 12,4Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_sync_off) = class $mol_icon_sync_off extends ($.$mol_icon) {
		path(){
			return "M20,4H14V10L16.24,7.76C17.32,8.85 18,10.34 18,12C18,13 17.75,13.94 17.32,14.77L18.78,16.23C19.55,15 20,13.56 20,12C20,9.79 19.09,7.8 17.64,6.36L20,4M2.86,5.41L5.22,7.77C4.45,9 4,10.44 4,12C4,14.21 4.91,16.2 6.36,17.64L4,20H10V14L7.76,16.24C6.68,15.15 6,13.66 6,12C6,11 6.25,10.06 6.68,9.23L14.76,17.31C14.5,17.44 14.26,17.56 14,17.65V19.74C14.79,19.53 15.54,19.2 16.22,18.78L18.58,21.14L19.85,19.87L4.14,4.14L2.86,5.41M10,6.35V4.26C9.2,4.47 8.45,4.8 7.77,5.22L9.23,6.68C9.5,6.56 9.73,6.44 10,6.35Z";
		}
	};


;
"use strict";

;
	($.$hyoo_sync_online) = class $hyoo_sync_online extends ($.$mol_select) {
		dictionary(){
			return (this.yard().master_list());
		}
		master_cursor(next){
			return (this.yard().master_cursor(next));
		}
		master_id(id){
			return "";
		}
		Option_logo(id){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.master_id(id)));
			return obj;
		}
		master_link(){
			return "";
		}
		Well(){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.master_link()));
			return obj;
		}
		Fail(){
			const obj = new this.$.$mol_icon_sync_off();
			return obj;
		}
		link_content(){
			return [(this.Well()), (this.Fail())];
		}
		hint(){
			return "$hyoo_sync";
		}
		message(){
			return (this.hint());
		}
		Link(){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ((this.master_link()));
			(obj.sub) = () => ((this.link_content()));
			(obj.hint) = () => ((this.message()));
			return obj;
		}
		minimal_width(){
			return 40;
		}
		minimal_height(){
			return 40;
		}
		yard(){
			const obj = new this.$.$hyoo_sync_yard();
			return obj;
		}
		Filter(){
			return null;
		}
		option_content(id){
			return [(this.Option_logo(id)), (this.option_label(id))];
		}
		trigger_content(){
			return [(this.Link())];
		}
	};
	($mol_mem_key(($.$hyoo_sync_online.prototype), "Option_logo"));
	($mol_mem(($.$hyoo_sync_online.prototype), "Well"));
	($mol_mem(($.$hyoo_sync_online.prototype), "Fail"));
	($mol_mem(($.$hyoo_sync_online.prototype), "Link"));
	($mol_mem(($.$hyoo_sync_online.prototype), "yard"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_sync_online extends $.$hyoo_sync_online {
            message() {
                try {
                    this.yard().sync();
                    return this.hint();
                }
                catch (error) {
                    if (error instanceof Promise)
                        $mol_fail_hidden(error);
                    $mol_fail_log(error);
                    return String(error);
                }
            }
            link_content() {
                try {
                    this.yard().sync();
                    return [this.Well()];
                }
                catch (error) {
                    if (error instanceof Promise)
                        $mol_fail_hidden(error);
                    $mol_fail_log(error);
                    return [this.Fail()];
                }
            }
            hint() {
                return super.hint() + ' ' + $hyoo_sync_revision;
            }
            master_link() {
                return this.yard().master_link().replace(/^ws(s?):/, 'http$1:');
            }
            master_id(index) {
                return this.dictionary()[index].replace(/^ws(s?):/, 'http$1:');
            }
            option_label(index) {
                return this.dictionary()[index].replace(/^ws(s?):\/\//, '');
            }
            value(next) {
                return String(this.master_cursor(next == undefined ? undefined : Number(next)));
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_sync_online.prototype, "message", null);
        __decorate([
            $mol_mem
        ], $hyoo_sync_online.prototype, "link_content", null);
        __decorate([
            $mol_mem
        ], $hyoo_sync_online.prototype, "hint", null);
        __decorate([
            $mol_mem
        ], $hyoo_sync_online.prototype, "master_link", null);
        $$.$hyoo_sync_online = $hyoo_sync_online;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/sync/online/online.view.css", "[hyoo_sync_online_option_row] {\n\tpadding: var(--mol_gap_text);\n}\n\n[hyoo_sync_online_well] {\n\tcolor: var(--mol_theme_current);\n}\n\n[hyoo_sync_online_fail] {\n\tcolor: var(--mol_theme_focus);\n}\n\n[hyoo_sync_online][mol_view_error=\"Promise\"] {\n\tanimation: hyoo_sync_online_wait 1s linear infinite;\n}\n\n@keyframes hyoo_sync_online_wait {\n\tfrom {\n\t\topacity: 1;\n\t}\n\tto {\n\t\topacity: .5;\n\t}\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_key) = class $mol_icon_key extends ($.$mol_icon) {
		path(){
			return "M7 14C5.9 14 5 13.1 5 12S5.9 10 7 10 9 10.9 9 12 8.1 14 7 14M12.6 10C11.8 7.7 9.6 6 7 6C3.7 6 1 8.7 1 12S3.7 18 7 18C9.6 18 11.8 16.3 12.6 14H16V18H20V14H23V10H12.6Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_key_variant) = class $mol_icon_key_variant extends ($.$mol_icon) {
		path(){
			return "M22,18V22H18V19H15V16H12L9.74,13.74C9.19,13.91 8.61,14 8,14A6,6 0 0,1 2,8A6,6 0 0,1 8,2A6,6 0 0,1 14,8C14,8.61 13.91,9.19 13.74,9.74L22,18M7,5A2,2 0 0,0 5,7A2,2 0 0,0 7,9A2,2 0 0,0 9,7A2,2 0 0,0 7,5Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_image) = class $mol_icon_image extends ($.$mol_icon) {
		path(){
			return "M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z";
		}
	};


;
"use strict";

;
	($.$hyoo_page_menu) = class $hyoo_page_menu extends ($.$hyoo_meta_menu) {
		side(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		Profile(){
			const obj = new this.$.$hyoo_meta_link();
			(obj.meta) = () => ((this.side()));
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_menu_Profile_hint")));
			(obj.Title) = () => (null);
			(obj.relation) = () => ("nofollow");
			return obj;
		}
		Online(){
			const obj = new this.$.$hyoo_sync_online();
			(obj.yard) = () => ((this.yard()));
			return obj;
		}
		Safe_icon(){
			const obj = new this.$.$mol_icon_key_variant();
			return obj;
		}
		safe_showing(next){
			if(next !== undefined) return next;
			return false;
		}
		Safe_showing(){
			const obj = new this.$.$mol_check_icon();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_menu_Safe_showing_hint")));
			(obj.Icon) = () => ((this.Safe_icon()));
			(obj.checked) = (next) => ((this.safe_showing(next)));
			return obj;
		}
		About(){
			const obj = new this.$.$mol_link_iconed();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_menu_About_hint")));
			(obj.title) = () => ("");
			(obj.uri) = () => ("http://page.hyoo.ru/");
			return obj;
		}
		Aura_icon(){
			const obj = new this.$.$mol_icon_image();
			return obj;
		}
		aura_showing(next){
			if(next !== undefined) return next;
			return true;
		}
		Aura_showing(){
			const obj = new this.$.$mol_check_icon();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_page_menu_Aura_showing_hint")));
			(obj.Icon) = () => ((this.Aura_icon()));
			(obj.checked) = (next) => ((this.aura_showing(next)));
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		title(){
			return (this.$.$mol_locale.text("$hyoo_page_menu_title"));
		}
		attr(){
			return {...(super.attr()), "mol_theme": "$mol_theme_special"};
		}
		head(){
			return [
				(this.Profile()), 
				(this.Title()), 
				(this.Tools())
			];
		}
		Logo(){
			return null;
		}
		foot(){
			return [
				(this.Online()), 
				(this.Safe_showing()), 
				(this.About()), 
				(this.Aura_showing()), 
				(this.Lights())
			];
		}
	};
	($mol_mem(($.$hyoo_page_menu.prototype), "side"));
	($mol_mem(($.$hyoo_page_menu.prototype), "Profile"));
	($mol_mem(($.$hyoo_page_menu.prototype), "Online"));
	($mol_mem(($.$hyoo_page_menu.prototype), "Safe_icon"));
	($mol_mem(($.$hyoo_page_menu.prototype), "safe_showing"));
	($mol_mem(($.$hyoo_page_menu.prototype), "Safe_showing"));
	($mol_mem(($.$hyoo_page_menu.prototype), "About"));
	($mol_mem(($.$hyoo_page_menu.prototype), "Aura_icon"));
	($mol_mem(($.$hyoo_page_menu.prototype), "aura_showing"));
	($mol_mem(($.$hyoo_page_menu.prototype), "Aura_showing"));
	($mol_mem(($.$hyoo_page_menu.prototype), "Lights"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_page_menu extends $.$hyoo_page_menu {
        }
        $$.$hyoo_page_menu = $hyoo_page_menu;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_db_response(request) {
        return new Promise((done, fail) => {
            request.onerror = () => fail(new Error(request.error.message));
            request.onsuccess = () => done(request.result);
        });
    }
    $.$mol_db_response = $mol_db_response;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    async function $mol_db(name, ...migrations) {
        const request = this.$mol_dom_context.indexedDB.open(name, migrations.length ? migrations.length + 1 : undefined);
        request.onupgradeneeded = event => {
            migrations.splice(0, event.oldVersion - 1);
            const transaction = new $mol_db_transaction(request.transaction);
            for (const migrate of migrations)
                migrate(transaction);
        };
        const db = await $mol_db_response(request);
        return new $mol_db_database(db);
    }
    $.$mol_db = $mol_db;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_db_store {
        native;
        constructor(native) {
            this.native = native;
        }
        get name() {
            return this.native.name;
        }
        get path() {
            return this.native.keyPath;
        }
        get incremental() {
            return this.native.autoIncrement;
        }
        get indexes() {
            return new Proxy({}, {
                ownKeys: () => [...this.native.indexNames],
                has: (_, name) => this.native.indexNames.contains(name),
                get: (_, name) => new $mol_db_index(this.native.index(name))
            });
        }
        index_make(name, path = [], unique = false, multiEntry = false) {
            return this.native.createIndex(name, path, { multiEntry, unique });
        }
        index_drop(name) {
            this.native.deleteIndex(name);
            return this;
        }
        get transaction() {
            return new $mol_db_transaction(this.native.transaction);
        }
        get db() {
            return this.transaction.db;
        }
        clear() {
            return $mol_db_response(this.native.clear());
        }
        count(keys) {
            return $mol_db_response(this.native.count(keys));
        }
        put(doc, key) {
            return $mol_db_response(this.native.put(doc, key));
        }
        get(key) {
            return $mol_db_response(this.native.get(key));
        }
        select(key, count) {
            return $mol_db_response(this.native.getAll(key, count));
        }
        drop(keys) {
            return $mol_db_response(this.native.delete(keys));
        }
    }
    $.$mol_db_store = $mol_db_store;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_db_index {
        native;
        constructor(native) {
            this.native = native;
        }
        get name() {
            return this.native.name;
        }
        get paths() {
            return this.native.keyPath;
        }
        get unique() {
            return this.native.unique;
        }
        get multiple() {
            return this.native.multiEntry;
        }
        get store() {
            return new $mol_db_store(this.native.objectStore);
        }
        get transaction() {
            return this.store.transaction;
        }
        get db() {
            return this.store.db;
        }
        count(keys) {
            return $mol_db_response(this.native.count(keys));
        }
        get(key) {
            return $mol_db_response(this.native.get(key));
        }
        select(key, count) {
            return $mol_db_response(this.native.getAll(key, count));
        }
    }
    $.$mol_db_index = $mol_db_index;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $mol_dom_context.indexedDB = $node['fake-indexeddb'].indexedDB;
    $mol_dom_context.IDBCursor = $node['fake-indexeddb'].IDBCursor;
    $mol_dom_context.IDBCursorWithValue = $node['fake-indexeddb'].IDBCursorWithValue;
    $mol_dom_context.IDBDatabase = $node['fake-indexeddb'].IDBDatabase;
    $mol_dom_context.IDBFactory = $node['fake-indexeddb'].IDBFactory;
    $mol_dom_context.IDBIndex = $node['fake-indexeddb'].IDBIndex;
    $mol_dom_context.IDBKeyRange = $node['fake-indexeddb'].IDBKeyRange;
    $mol_dom_context.IDBObjectStore = $node['fake-indexeddb'].IDBObjectStore;
    $mol_dom_context.IDBOpenDBRequest = $node['fake-indexeddb'].IDBOpenDBRequest;
    $mol_dom_context.IDBRequest = $node['fake-indexeddb'].IDBRequest;
    $mol_dom_context.IDBTransaction = $node['fake-indexeddb'].IDBTransaction;
    $mol_dom_context.IDBVersionChangeEvent = $node['fake-indexeddb'].IDBVersionChangeEvent;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_db_database {
        native;
        constructor(native) {
            this.native = native;
        }
        get name() {
            return this.native.name;
        }
        get version() {
            return this.native.version;
        }
        get stores() {
            return [...this.native.objectStoreNames];
        }
        read(...names) {
            return new $mol_db_transaction(this.native.transaction(names, 'readonly', { durability: 'relaxed' })).stores;
        }
        change(...names) {
            return new $mol_db_transaction(this.native.transaction(names, 'readwrite', { durability: 'relaxed' }));
        }
        kill() {
            this.native.close();
            const request = $mol_dom_context.indexedDB.deleteDatabase(this.name);
            request.onblocked = console.warn;
            return $mol_db_response(request);
        }
        destructor() {
            this.native.close();
        }
    }
    $.$mol_db_database = $mol_db_database;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_db_transaction {
        native;
        constructor(native) {
            this.native = native;
        }
        get stores() {
            return new Proxy({}, {
                ownKeys: () => [...this.native.objectStoreNames],
                has: (_, name) => this.native.objectStoreNames.contains(name),
                get: (_, name, proxy) => (name in proxy)
                    ? new $mol_db_store(this.native.objectStore(name))
                    : undefined,
            });
        }
        store_make(name) {
            return this.native.db.createObjectStore(name, { autoIncrement: true });
        }
        store_drop(name) {
            this.native.db.deleteObjectStore(name);
            return this;
        }
        abort() {
            if (this.native.error)
                return;
            this.native.abort();
        }
        commit() {
            this.native.commit?.();
            return new Promise((done, fail) => {
                this.native.onerror = () => fail(new Error(this.native.error.message));
                this.native.oncomplete = () => done();
            });
        }
        get db() {
            return new $mol_db_database(this.native.db);
        }
    }
    $.$mol_db_transaction = $mol_db_transaction;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_sync_client extends $hyoo_sync_yard {
        async db() {
            const db1 = await this.$.$mol_db('$hyoo_sync_client_db');
            await db1.kill();
            return await this.$.$mol_db('$hyoo_sync_client_db2', mig => mig.store_make('Unit'), mig => mig.stores.Unit.index_make('Land', ['land']), mig => mig.stores.Unit.index_make('Data', ['data']));
        }
        async db_land_load(land) {
            try {
                var db = await this.db();
            }
            catch (error) {
                $mol_fail_log(error);
                return [];
            }
            const Unit = db.read('Unit').Unit;
            const recs = await Unit.indexes.Land.select([land.id()]);
            if (!recs)
                return [];
            const units = recs.map(rec => new $hyoo_crowd_unit(rec.land, rec.auth, rec.head, rec.self, rec.next, rec.prev, rec.time, rec.data, new $hyoo_crowd_unit_bin(rec.bin.buffer)));
            return units;
        }
        async db_land_search(from, to = from + '\uFFFF') {
            try {
                var db = await this.db();
            }
            catch (error) {
                $mol_fail_log(error);
                return new Set();
            }
            const Unit = db.read('Unit').Unit;
            const query = IDBKeyRange.bound([from], [to]);
            const recs = await Unit.indexes.Data.select(query);
            return new Set(recs.map(rec => rec.land));
        }
        async db_land_save(land, units) {
            try {
                var db = await this.db();
            }
            catch (error) {
                $mol_fail_log(error);
                return;
            }
            const trans = db.change('Unit');
            const Unit = trans.stores.Unit;
            for (const unit of units) {
                Unit.put(unit, [unit.land, unit.head, unit.self]);
            }
            await trans.commit();
            this.$.$mol_storage.persisted(true);
        }
        reconnects(reset) {
            return ($mol_wire_probe(() => this.reconnects()) ?? 0) + 1;
        }
        master() {
            this.reconnects();
            const link = this.master_link();
            const line = new $mol_dom_context.WebSocket(link, ['$hyoo_sync_protocol_1']);
            line.binaryType = 'arraybuffer';
            line.onmessage = async (event) => {
                if (event.data instanceof ArrayBuffer) {
                    await this.line_receive(line, new Uint8Array(event.data));
                }
                else {
                    this.$.$mol_log3_fail({
                        place: this,
                        message: 'Wrong data',
                        data: event.data
                    });
                }
            };
            let interval;
            line.onclose = () => {
                clearInterval(interval);
                setTimeout(() => this.reconnects(null), 1000);
            };
            Object.assign(line, {
                destructor: () => {
                    line.onclose = () => { };
                    clearInterval(interval);
                    line.close();
                }
            });
            return new Promise((done, fail) => {
                line.onopen = () => {
                    this.$.$mol_log3_come({
                        place: this,
                        message: 'Connected to Master',
                        line: $mol_key(line),
                        server: link,
                    });
                    interval = setInterval(() => line.send(new Uint8Array), 30000);
                    done(line);
                };
                line.onerror = () => {
                    line.onclose = event => {
                        fail(new Error(`Master is unavailable (${event.code})`));
                    };
                    clearInterval(interval);
                    this.master_cursor((this.master_cursor() + 1) % this.$.$hyoo_sync_masters.length);
                };
            });
        }
        line_send_clocks(line, land) {
            if (line instanceof WebSocket) {
                line.send(land.clocks_bin);
            }
            else {
                line.postMessage(['hyoo_sync_clocks', land.id(), land._clocks]);
            }
        }
        async line_send_units(line, units) {
            if (line instanceof WebSocket) {
                await this.world().sign_units(units);
                const message = new Blob(units.map(unit => unit.bin));
                line.send(message);
            }
            else {
                line.postMessage(['hyoo_sync_units', units[0].land, units]);
            }
        }
    }
    __decorate([
        $mol_memo.method
    ], $hyoo_sync_client.prototype, "db", null);
    __decorate([
        $mol_mem
    ], $hyoo_sync_client.prototype, "reconnects", null);
    __decorate([
        $mol_mem
    ], $hyoo_sync_client.prototype, "master", null);
    $.$hyoo_sync_client = $hyoo_sync_client;
})($ || ($ = {}));

;
	($.$hyoo_page) = class $hyoo_page extends ($.$mol_book2) {
		side_title(id){
			return (this.side(id).title());
		}
		pages_node(id){
			return (this.side(id).pages_node());
		}
		bookmarks_node(){
			return (this.profile().bookmarks_node());
		}
		aura_image(){
			return "";
		}
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		ref_track(){
			return null;
		}
		News(){
			const obj = new this.$.$hyoo_page_side_news();
			(obj.side) = () => ((this.profile()));
			return obj;
		}
		book_side(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		book_pages_node(){
			return null;
		}
		side_uri(id){
			return "";
		}
		side_add(id, next){
			if(next !== undefined) return next;
			return null;
		}
		tools_ext(){
			return [];
		}
		Side_menu(){
			const obj = new this.$.$hyoo_page_side_menu();
			(obj.yard) = () => ((this.yard()));
			(obj.side) = () => ((this.book_side()));
			(obj.side_current) = () => ((this.side_current()));
			(obj.list) = () => ((this.book_pages_node()));
			(obj.item_list) = (id) => ((this.pages_node(id)));
			(obj.item_uri) = (id) => ((this.side_uri(id)));
			(obj.item_add) = (id, next) => ((this.side_add(id, next)));
			(obj.tools_ext) = () => ((this.tools_ext()));
			return obj;
		}
		side_menu_showed(next){
			if(next !== undefined) return next;
			return false;
		}
		editing(next){
			if(next !== undefined) return next;
			return false;
		}
		info(next){
			if(next !== undefined) return next;
			return false;
		}
		View_details(id){
			return (this.View(id).Details());
		}
		View(id){
			const obj = new this.$.$hyoo_page_side_view();
			(obj.side) = () => ((this.side(id)));
			(obj.peer) = (id) => ((this.side(id)));
			(obj.profile) = () => ((this.profile()));
			(obj.menu_showed) = (next) => ((this.side_menu_showed(next)));
			(obj.editing) = (next) => ((this.editing(next)));
			(obj.info) = (next) => ((this.info(next)));
			(obj.highlight) = () => ((this.search()));
			return obj;
		}
		rights(next){
			if(next !== undefined) return next;
			return false;
		}
		edit_close(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Edit(id){
			const obj = new this.$.$hyoo_page_side_edit();
			(obj.side) = () => ((this.side(id)));
			(obj.rights) = (next) => ((this.rights(next)));
			(obj.close) = (next) => ((this.edit_close(id, next)));
			return obj;
		}
		info_close(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Info(id){
			const obj = new this.$.$hyoo_page_side_info();
			(obj.side) = () => ((this.side(id)));
			(obj.close) = (next) => ((this.info_close(id, next)));
			(obj.Text) = () => ((this.View_details(id)));
			return obj;
		}
		rights_close(next){
			if(next !== undefined) return next;
			return null;
		}
		Close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Rights_close(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.rights_close(next)));
			(obj.sub) = () => ([(this.Close_icon())]);
			return obj;
		}
		Rights(id){
			const obj = new this.$.$hyoo_meta_rights();
			(obj.meta) = () => ((this.side(id)));
			(obj.peer) = (id) => ((this.side(id)));
			(obj.tools) = () => ([(this.Rights_close())]);
			return obj;
		}
		safe_close(next){
			if(next !== undefined) return next;
			return null;
		}
		Safe_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Safe_close(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.safe_close(next)));
			(obj.sub) = () => ([(this.Safe_icon())]);
			return obj;
		}
		Safe(){
			const obj = new this.$.$hyoo_meta_safe();
			(obj.yard) = () => ((this.yard()));
			(obj.tools) = () => ([(this.Safe_close())]);
			return obj;
		}
		page_add(next){
			if(next !== undefined) return next;
			return null;
		}
		aura_showing(next){
			if(next !== undefined) return next;
			return true;
		}
		safe(next){
			if(next !== undefined) return next;
			return false;
		}
		search(){
			return (this.Menu().search());
		}
		Menu(){
			const obj = new this.$.$hyoo_page_menu();
			(obj.yard) = () => ((this.yard()));
			(obj.side) = () => ((this.profile()));
			(obj.list) = () => ((this.bookmarks_node()));
			(obj.item_uri) = (id) => ((this.side_uri(id)));
			(obj.add) = (next) => ((this.page_add(next)));
			(obj.item_add) = (id, next) => ((this.side_add(id, next)));
			(obj.aura_showing) = (next) => ((this.aura_showing(next)));
			(obj.safe_showing) = (next) => ((this.safe(next)));
			return obj;
		}
		side_main_id(){
			return "iy8wtn_tky6pc";
		}
		yard(){
			const obj = new this.$.$hyoo_sync_client();
			return obj;
		}
		side(id){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		side_current(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		profile(){
			const obj = new this.$.$hyoo_page_side();
			return obj;
		}
		style(){
			return {...(super.style()), "backgroundImage": (this.aura_image())};
		}
		plugins(){
			return [(this.Theme())];
		}
		auto(){
			return [(this.ref_track())];
		}
		pages(){
			return [
				(this.News()), 
				(this.Side_menu()), 
				(this.View("0_0")), 
				(this.Edit("0_0")), 
				(this.Info("0_0")), 
				(this.Rights("0_0")), 
				(this.Safe())
			];
		}
		Placeholder(){
			return (this.Menu());
		}
	};
	($mol_mem(($.$hyoo_page.prototype), "Theme"));
	($mol_mem(($.$hyoo_page.prototype), "News"));
	($mol_mem(($.$hyoo_page.prototype), "book_side"));
	($mol_mem_key(($.$hyoo_page.prototype), "side_add"));
	($mol_mem(($.$hyoo_page.prototype), "Side_menu"));
	($mol_mem(($.$hyoo_page.prototype), "side_menu_showed"));
	($mol_mem(($.$hyoo_page.prototype), "editing"));
	($mol_mem(($.$hyoo_page.prototype), "info"));
	($mol_mem_key(($.$hyoo_page.prototype), "View"));
	($mol_mem(($.$hyoo_page.prototype), "rights"));
	($mol_mem_key(($.$hyoo_page.prototype), "edit_close"));
	($mol_mem_key(($.$hyoo_page.prototype), "Edit"));
	($mol_mem_key(($.$hyoo_page.prototype), "info_close"));
	($mol_mem_key(($.$hyoo_page.prototype), "Info"));
	($mol_mem(($.$hyoo_page.prototype), "rights_close"));
	($mol_mem(($.$hyoo_page.prototype), "Close_icon"));
	($mol_mem(($.$hyoo_page.prototype), "Rights_close"));
	($mol_mem_key(($.$hyoo_page.prototype), "Rights"));
	($mol_mem(($.$hyoo_page.prototype), "safe_close"));
	($mol_mem(($.$hyoo_page.prototype), "Safe_icon"));
	($mol_mem(($.$hyoo_page.prototype), "Safe_close"));
	($mol_mem(($.$hyoo_page.prototype), "Safe"));
	($mol_mem(($.$hyoo_page.prototype), "page_add"));
	($mol_mem(($.$hyoo_page.prototype), "aura_showing"));
	($mol_mem(($.$hyoo_page.prototype), "safe"));
	($mol_mem(($.$hyoo_page.prototype), "Menu"));
	($mol_mem(($.$hyoo_page.prototype), "yard"));
	($mol_mem_key(($.$hyoo_page.prototype), "side"));
	($mol_mem(($.$hyoo_page.prototype), "side_current"));
	($mol_mem(($.$hyoo_page.prototype), "profile"));


;
"use strict";
var $;
(function ($) {
    function $mol_wire_stale(task) {
        try {
            return task();
        }
        catch (error) {
            if (!$mol_promise_like(error))
                return $mol_fail_hidden(error);
            const fiber = $mol_wire_auto();
            if (!(fiber instanceof $mol_wire_fiber))
                return;
            return $mol_wire_probe(() => fiber.result());
        }
    }
    $.$mol_wire_stale = $mol_wire_stale;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_offline() { }
    $.$mol_offline = $mol_offline;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    try {
        $mol_offline();
    }
    catch (error) {
        console.error(error);
    }
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_page extends $.$hyoo_page {
            profile() {
                return this.side(this.yard().home().id());
            }
            title() {
                const side = this.side_current();
                const book = this.side_current_book();
                return book === side ? side.title() : `${side.title()} | ${book.title()}`;
            }
            aura_showing(next) {
                const key = `aura_showing:${this.book_id()}`;
                return this.$.$mol_state_local.value(key, next?.toString()) !== 'false';
            }
            aura_image() {
                return $mol_wire_stale(() => {
                    if (!this.aura_showing())
                        return '';
                    const side = this.side_current();
                    const aura = side.aura_effective();
                    if (!aura)
                        return '';
                    const shade = 'hsla( 0deg, 0%, calc( 50% + var(--mol_theme_luma) * 50% ), .666 )';
                    return `linear-gradient( ${shade}, ${shade} ), url("${aura}")`;
                }) ?? '';
            }
            editing(next) {
                if (next)
                    this.$.$mol_storage.persisted(true);
                return this.$.$mol_state_session.value('edit', next) ?? false;
            }
            rights(next) {
                return this.$.$mol_state_session.value('rights', next) ?? false;
            }
            info(next) {
                return this.$.$mol_state_session.value('info', next) ?? false;
            }
            safe(next) {
                const arg = next == undefined ? undefined : next ? '' : null;
                return this.$.$mol_state_arg.value('hyoo_meta_key', arg) !== null;
            }
            edit_close() {
                this.editing(false);
            }
            rights_close() {
                this.rights(false);
            }
            info_close() {
                this.info(false);
            }
            safe_close() {
                this.safe(false);
            }
            side(id) {
                return this.yard().world().Fund($hyoo_page_side).Item(id);
            }
            side_uri(id) {
                return this.$.$mol_state_arg.make_link({ '': id });
            }
            side_current_id() {
                return (this.$.$mol_state_arg.value('') || this.side_main_id());
            }
            side_current() {
                return this.side(this.side_current_id());
            }
            side_current_book() {
                return this.side_current().book() ?? this.side_current();
            }
            book_id() {
                return $mol_wire_stale(() => {
                    if (!this.side_menu_showed())
                        return '';
                    const side = this.side_current();
                    const books = side.books().slice().reverse();
                    if (side.pages().length || this.side_menu_showed())
                        books.push(side);
                    return books[0]?.id() ?? '';
                }) ?? this.side_current_id();
            }
            book_side() {
                const id = this.book_id();
                return id ? this.side(id) : null;
            }
            book_pages_node() {
                return this.pages_node(this.book_id());
            }
            side_menu_showed(next) {
                return next ?? Boolean(this.side_current().book() || this.side_current().pages().length > 0);
            }
            pages() {
                const id = this.side_current_id();
                const book = this.book_id();
                return [
                    this.Gap('left'),
                    ...book ? [this.Side_menu()] : [],
                    this.View(id),
                    ...this.info() ? [this.Info(id)] : [],
                    ...this.editing() ? [this.Edit(id)] : [],
                    ...this.rights() ? [this.Rights(id)] : [],
                    this.Gap('right'),
                    ...this.safe() ? [this.Safe()] : [],
                ];
            }
            page_add() {
                const land = this.yard().land_grab();
                this.$.$mol_dom_context.location.href = this.$.$mol_state_arg.link({ '': land.id() });
                this.bookmarks_node().add(land.id());
                this.editing(true);
            }
            side_add(id) {
                const book = this.side(id);
                const page = book.world().Fund($hyoo_page_side).make();
                this.$.$mol_dom_context.location.href = this.$.$mol_state_arg.link({ '': page.id() });
                page.steal_rights(book);
                page.book(book);
                this.bookmarks_node().add(page.id());
                this.editing(true);
            }
            ref_track() {
                const ref = this.$.$mol_dom_context.document.referrer;
                if (!ref)
                    return;
                const key = `${this}.ref_track`;
                if (this.$.$mol_state_session.value(key))
                    return;
                this.side_current().referrers_track(ref);
                this.$.$mol_state_session.value(key, true);
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "profile", null);
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "aura_showing", null);
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "aura_image", null);
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "editing", null);
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "rights", null);
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "info", null);
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "safe", null);
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "side_current_id", null);
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "book_id", null);
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "side_menu_showed", null);
        __decorate([
            $mol_mem
        ], $hyoo_page.prototype, "pages", null);
        __decorate([
            $mol_action
        ], $hyoo_page.prototype, "page_add", null);
        __decorate([
            $mol_action
        ], $hyoo_page.prototype, "side_add", null);
        __decorate([
            $mol_mem,
            $mol_action
        ], $hyoo_page.prototype, "ref_track", null);
        $$.$hyoo_page = $hyoo_page;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_define($hyoo_page, {
        background: {
            size: ['cover'],
            position: 'center',
        },
        Menu: {
            '@media': {
                'print': {
                    display: 'none',
                },
            },
        },
        Edit: {
            '@media': {
                'print': {
                    display: 'none',
                },
            },
        },
    });
})($ || ($ = {}));

;
	($.$hyoo_apps) = class $hyoo_apps extends ($.$mol_book2) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		menu_title(){
			return (this.$.$mol_locale.text("$hyoo_apps_menu_title"));
		}
		Source(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ("https://github.com/hyoo-ru/apps.hyoo.ru");
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		tools(){
			return [(this.Source()), (this.Lights())];
		}
		Menu_title(){
			return (this.Menu().Title());
		}
		Menu_tools(){
			return (this.Menu().Tools());
		}
		filter(next){
			if(next !== undefined) return next;
			return "";
		}
		Filter(){
			const obj = new this.$.$mol_search();
			(obj.query) = (next) => ((this.filter(next)));
			return obj;
		}
		group_name(id){
			return "";
		}
		group_expanded(id, next){
			if(next !== undefined) return next;
			return false;
		}
		app_uri_default(id){
			return "";
		}
		app_arg(id){
			return {};
		}
		app_title(id){
			return "";
		}
		Menu_link_title(id){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ((this.app_title(id)));
			(obj.needle) = () => ((this.filter()));
			return obj;
		}
		Menu_link_out(id){
			const obj = new this.$.$mol_link_iconed();
			(obj.uri) = () => ((this.app_uri_default(id)));
			(obj.arg) = () => ((this.app_arg(id)));
			(obj.sub) = () => ([(this.Menu_link_title(id))]);
			return obj;
		}
		Menu_link_in_icon(id){
			const obj = new this.$.$mol_icon_chevron_right();
			return obj;
		}
		Menu_link_in(id){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ((this.app_arg(id)));
			(obj.sub) = () => ([(this.Menu_link_in_icon(id))]);
			return obj;
		}
		Menu_item(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Menu_link_out(id)), (this.Menu_link_in(id))]);
			return obj;
		}
		group_items(id){
			return [(this.Menu_item(id))];
		}
		Group(id){
			const obj = new this.$.$mol_expander();
			(obj.title) = () => ((this.group_name(id)));
			(obj.expanded) = (next) => ((this.group_expanded(id, next)));
			(obj.content) = () => ((this.group_items(id)));
			return obj;
		}
		group_list(){
			return [(this.Group("id"))];
		}
		Menu_items(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.group_list()));
			return obj;
		}
		Menu(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.menu_title()));
			(obj.tools) = () => ((this.tools()));
			(obj.head) = () => ([
				(this.Menu_title()), 
				(this.Menu_tools()), 
				(this.Filter())
			]);
			(obj.body) = () => ([(this.Menu_items())]);
			return obj;
		}
		app_uri_embed(id, next){
			if(next !== undefined) return next;
			return "";
		}
		App(id){
			const obj = new this.$.$mol_frame();
			(obj.uri) = (next) => ((this.app_uri_embed(id, next)));
			return obj;
		}
		Placeholder(){
			return null;
		}
		plugins(){
			return [(this.Theme())];
		}
		pages(){
			return [(this.Menu()), (this.App("id"))];
		}
		groups(){
			return {
				"release": (this.$.$mol_locale.text("$hyoo_apps_groups_release")), 
				"develop": (this.$.$mol_locale.text("$hyoo_apps_groups_develop")), 
				"preview": (this.$.$mol_locale.text("$hyoo_apps_groups_preview"))
			};
		}
		apps(){
			return {
				"studio": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_studio_title")), 
					"uri": "https://studio.hyoo.ru/"
				}, 
				"marked": {
					"target": "develop", 
					"title": "MarkedText", 
					"uri": "https://marked.hyoo.ru/"
				}, 
				"idea": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_idea_title")), 
					"uri": "https://idea.hyoo.ru/"
				}, 
				"board": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_board_title")), 
					"uri": "https://board.hyoo.ru/"
				}, 
				"notes": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_notes_title")), 
					"uri": "https://notes.hyoo.ru/"
				}, 
				"page": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_page_title")), 
					"uri": "https://page.hyoo.ru/"
				}, 
				"slides": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_slides_title")), 
					"uri": "https://slides.hyoo.ru/"
				}, 
				"search": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_search_title")), 
					"uri": "https://search.hyoo.ru/"
				}, 
				"artist": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_artist_title")), 
					"uri": "https://artist.hyoo.ru/"
				}, 
				"match": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_match_title")), 
					"uri": "https://match.hyoo.ru/"
				}, 
				"lingua": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_lingua_title")), 
					"uri": "https://lingua.hyoo.ru/"
				}, 
				"talks": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_talks_title")), 
					"uri": "https://talks.hyoo.ru/#!chat=fsh1o2_jdzewo"
				}, 
				"map": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_map_title")), 
					"uri": "https://map.hyoo.ru/"
				}, 
				"scout": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_scout_title")), 
					"uri": "https://scout.hyoo.ru/"
				}, 
				"fallacy": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_fallacy_title")), 
					"uri": "https://fallacy.hyoo.ru/"
				}, 
				"meme": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_meme_title")), 
					"uri": "https://meme.hyoo.ru/"
				}, 
				"calc": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_calc_title")), 
					"uri": "https://calc.hyoo.ru/#!title=a*x**2%20%2B%20b*x%20%2B%20c%20%3D%200/A1=x%20%3D%20%5B%0A%09%28%20-_.b%20%2B%20sqrt%28_.D%29%20%29%20%2F%202%20%2F%20_.a%2C%0A%09%28%20-_.b%20-%20sqrt%28_.D%29%20%29%20%2F%202%20%2F%20_.a%2C%0A%5D/A2=D%20%3D%20_.b**2%20-%204*_.a*_.c/C1=a%20%3D%203/C2=b%20%3D%206/C3=c%20%3D%20-9"
				}, 
				"play": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_play_title")), 
					"uri": "https://play.hyoo.ru/"
				}, 
				"life": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_life_title")), 
					"uri": "https://life.hyoo.ru/"
				}, 
				"iq": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_iq_title")), 
					"uri": "https://iq.hyoo.ru/"
				}, 
				"todomvc": {
					"target": "release", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_todomvc_title")), 
					"uri": "https://todomvc.hyoo.ru/"
				}, 
				"game": {
					"target": "preview", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_game_title")), 
					"uri": "https://game.hyoo.ru/"
				}, 
				"draw": {
					"target": "preview", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_draw_title")), 
					"uri": "https://draw.hyoo.ru/"
				}, 
				"invest": {
					"target": "preview", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_invest_title")), 
					"uri": "https://invest.hyoo.ru/"
				}, 
				"lamps": {
					"target": "preview", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_lamps_title")), 
					"uri": "https://lamps.hyoo.ru/"
				}, 
				"questions": {
					"target": "preview", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_questions_title")), 
					"uri": "https://mol.js.org/app/questions/-/"
				}, 
				"shelter": {
					"target": "preview", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_shelter_title")), 
					"uri": "https://shelter.hyoo.ru/#login=user"
				}, 
				"mail": {
					"target": "preview", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_mail_title")), 
					"uri": "https://mail.hyoo.ru/#!folder=inbox/mail=qwe"
				}, 
				"gazporn": {
					"target": "preview", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_gazporn_title")), 
					"uri": "https://nin-jin.github.io/chart/"
				}, 
				"toys": {
					"target": "preview", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_toys_title")), 
					"uri": "https://toys.hyoo.ru/#size=M/popular"
				}, 
				"mol": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_mol_title")), 
					"uri": "https://mol.hyoo.ru/"
				}, 
				"science": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_science_title")), 
					"uri": "https://science.hyoo.ru/"
				}, 
				"crus": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_crus_title")), 
					"uri": "https://crus.hyoo.ru/"
				}, 
				"piterjs": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_piterjs_title")), 
					"uri": "https://piterjs.org/"
				}, 
				"habhub": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_habhub_title")), 
					"uri": "https://habhub.hyoo.ru/"
				}, 
				"jseval": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_jseval_title")), 
					"uri": "https://eval.js.hyoo.ru/"
				}, 
				"jsperf": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_jsperf_title")), 
					"uri": "https://perf.js.hyoo.ru/#!prefix=let%20res/sources=%5B\"res%20%3D%20window.location.href\"%2C\"res%20%3D%20document.location.href\"%2C\"res%20%3D%20location.href\"%5D/postfix=%24mol_assert_like%28%20res%2C%20location.href%20%29"
				}, 
				"jsopt": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_jsopt_title")), 
					"uri": "https://opt.js.hyoo.ru/"
				}, 
				"bench": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_bench_title")), 
					"uri": "https://bench.hyoo.ru/#bench=https%3A%2F%2Fhyoo-ru.github.io%2Ftodomvc%2Fbenchmark%2F/sort=fill"
				}, 
				"toxic": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_toxic_title")), 
					"uri": "https://nin-jin.github.io/toxic-repos/"
				}, 
				"request": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_request_title")), 
					"uri": "https://http.hyoo.ru/#uri=https%3A%2F%2Fapi.github.com%2Frepos%2Fhyoo-ru%2Fmam_mol"
				}, 
				"tree": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_tree_title")), 
					"uri": "https://tree.hyoo.ru/"
				}, 
				"icons": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_icons_title")), 
					"uri": "https://nin-jin.github.io/mol_icon/"
				}, 
				"visavis": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_visavis_title")), 
					"uri": "https://visavis.mpds.io/#!section=examples"
				}, 
				"rdf": {
					"target": "develop", 
					"title": (this.$.$mol_locale.text("$hyoo_apps_apps_rdf_title")), 
					"uri": "http://rdf.hyoo.ru/"
				}
			};
		}
	};
	($mol_mem(($.$hyoo_apps.prototype), "Theme"));
	($mol_mem(($.$hyoo_apps.prototype), "Source"));
	($mol_mem(($.$hyoo_apps.prototype), "Lights"));
	($mol_mem(($.$hyoo_apps.prototype), "filter"));
	($mol_mem(($.$hyoo_apps.prototype), "Filter"));
	($mol_mem_key(($.$hyoo_apps.prototype), "group_expanded"));
	($mol_mem_key(($.$hyoo_apps.prototype), "Menu_link_title"));
	($mol_mem_key(($.$hyoo_apps.prototype), "Menu_link_out"));
	($mol_mem_key(($.$hyoo_apps.prototype), "Menu_link_in_icon"));
	($mol_mem_key(($.$hyoo_apps.prototype), "Menu_link_in"));
	($mol_mem_key(($.$hyoo_apps.prototype), "Menu_item"));
	($mol_mem_key(($.$hyoo_apps.prototype), "Group"));
	($mol_mem(($.$hyoo_apps.prototype), "Menu_items"));
	($mol_mem(($.$hyoo_apps.prototype), "Menu"));
	($mol_mem_key(($.$hyoo_apps.prototype), "app_uri_embed"));
	($mol_mem_key(($.$hyoo_apps.prototype), "App"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/apps/apps.view.css", "[hyoo_apps_menu] {\n\tflex: 0 0 20rem;\n}\n\n[hyoo_apps_menu_link_out] {\n\tflex-grow: 1;\n}\n\n[hyoo_apps_app] {\n\tflex: 1 0 25rem;\n}\n\n[hyoo_apps_filter] {\n\talign-self: stretch;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_apps extends $.$hyoo_apps {
            app() {
                return this.$.$mol_state_arg.value('app');
            }
            group_name(id) {
                return this.groups()[id];
            }
            group_list() {
                return Object.keys(this.groups()).map(group => this.Group(group));
            }
            group_items(group) {
                const apps = this.apps();
                const filter = this.filter();
                return Object.keys(this.apps())
                    .filter(app => apps[app].target === group)
                    .filter($mol_match_text(filter, app => [
                    app,
                    apps[app].title,
                    apps[app].uri,
                ]))
                    .map(app => this.Menu_item(app));
            }
            pages() {
                const app = this.app();
                return [
                    this.Menu(),
                    ...app ? [this.App(app)] : [],
                ];
            }
            app_title(app) {
                return this.apps()[app].title;
            }
            app_uri_default(app, next) {
                return this.apps()[app].uri;
            }
            app_uri_embed(app, next) {
                const lights = this.$.$mol_lights();
                if (this.app() === app) {
                    const arg = this.$.$mol_state_arg.value('uri', next);
                    if (arg)
                        return arg.replace(/mol_lights=(true|false)/, `mol_lights=${lights}`);
                }
                return this.app_uri_default(app) + `#mol_lights=${lights}`;
            }
            app_arg(app) {
                return { app, uri: null };
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_apps.prototype, "group_list", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_apps.prototype, "group_items", null);
        __decorate([
            $mol_mem
        ], $hyoo_apps.prototype, "pages", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_apps.prototype, "app_uri_embed", null);
        $$.$hyoo_apps = $hyoo_apps;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_tag_tree) = class $mol_tag_tree extends ($.$mol_list) {
		tag_list(){
			return [];
		}
		item_list(){
			return [];
		}
		item_title(id){
			return "";
		}
		tag_expanded(id, next){
			if(next !== undefined) return next;
			return false;
		}
		tag_name(id){
			return "";
		}
		tag_path(id){
			return [];
		}
		Tag_tree(id){
			const obj = new this.$.$mol_tag_tree();
			(obj.ids_tags) = () => ((this.ids_tags()));
			(obj.path) = () => ((this.tag_path(id)));
			(obj.Item) = (id) => ((this.Item(id)));
			(obj.item_title) = (id) => ((this.item_title(id)));
			(obj.tag_expanded) = (id, next) => ((this.tag_expanded(id, next)));
			(obj.tag_name) = (id) => ((this.tag_name(id)));
			return obj;
		}
		path(){
			return [];
		}
		ids_tags(){
			return {};
		}
		ids(){
			return [];
		}
		tags(){
			return [];
		}
		levels_expanded(){
			return 0;
		}
		sub(){
			return [...(this.tag_list()), ...(this.item_list())];
		}
		Item(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.item_title(id))]);
			return obj;
		}
		Tag(id){
			const obj = new this.$.$mol_expander();
			(obj.expandable) = () => (true);
			(obj.expanded) = (next) => ((this.tag_expanded(id, next)));
			(obj.title) = () => ((this.tag_name(id)));
			(obj.content) = () => ([(this.Tag_tree(id))]);
			return obj;
		}
	};
	($mol_mem_key(($.$mol_tag_tree.prototype), "tag_expanded"));
	($mol_mem_key(($.$mol_tag_tree.prototype), "Tag_tree"));
	($mol_mem_key(($.$mol_tag_tree.prototype), "Item"));
	($mol_mem_key(($.$mol_tag_tree.prototype), "Tag"));


;
"use strict";
var $;
(function ($) {
    function $mol_compare_text(item = (item) => String(item)) {
        return (a, b) => {
            const text_a = item(a).trim().toLowerCase();
            const text_b = item(b).trim().toLowerCase();
            const parts_a = text_a.split(/(\d+)/);
            const parts_b = text_b.split(/(\d+)/);
            const count = Math.max(parts_a.length, parts_b.length);
            for (let i = 0; i < count; ++i) {
                const part_a = parts_a[i] || '';
                const part_b = parts_b[i] || '';
                const diff = Number(part_a) - Number(part_b);
                if (diff)
                    return diff;
                if (part_a > part_b)
                    return 1;
                if (part_a < part_b)
                    return -1;
            }
            return parts_a.length - parts_b.length;
        };
    }
    $.$mol_compare_text = $mol_compare_text;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_tag_tree extends $.$mol_tag_tree {
            ids() {
                const prefix = this.path().join('/');
                const ids_tags = this.ids_tags();
                return Object.keys(ids_tags).filter(id => ids_tags[id].some((tag) => tag.startsWith(prefix)));
            }
            item_list() {
                const path = this.path();
                const grouped = new Set(this.tags().flatMap(tag => this.Tag_tree(tag).ids()));
                return this.ids()
                    .filter(id => !grouped.has(id))
                    .sort($mol_compare_text())
                    .map(id => this.Item([...path, id]));
            }
            tags() {
                const stat = new Map();
                const ids_tags = this.ids_tags();
                const ids = this.ids();
                const prefix = this.path().join('/');
                for (let id of ids) {
                    for (let tag of ids_tags[id]) {
                        if (prefix && !tag.startsWith(prefix + '/'))
                            continue;
                        tag = tag.slice(prefix.length).replace(/^\//, '');
                        stat.set(tag, (stat.get(tag) ?? 0) + 1);
                    }
                }
                for (let [tag, count] of stat) {
                    if (count < 2)
                        stat.delete(tag);
                    if (count > ids.length - 2)
                        stat.delete(tag);
                }
                const prefixes = [...new Set([...stat.keys()].map(tag => tag.replace(/\/.*/, '')))].sort($mol_compare_text());
                return prefixes;
            }
            tag_list() {
                return this.tags().map(tag => this.Tag([tag]));
            }
            tag_path(id) {
                return [...this.path(), id];
            }
            tag_expanded(id, next) {
                return next ?? this.tag_expanded_default(id);
            }
            tag_expanded_default(id) {
                return this.levels_expanded() >= id.length;
            }
            tag_name(id) {
                return id;
            }
            item_title(id) {
                return id.at(-1);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_tag_tree.prototype, "ids", null);
        __decorate([
            $mol_mem
        ], $mol_tag_tree.prototype, "item_list", null);
        __decorate([
            $mol_mem
        ], $mol_tag_tree.prototype, "tags", null);
        __decorate([
            $mol_mem
        ], $mol_tag_tree.prototype, "tag_list", null);
        __decorate([
            $mol_mem_key
        ], $mol_tag_tree.prototype, "tag_expanded", null);
        $$.$mol_tag_tree = $mol_tag_tree;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/tag/tree/tree.view.css", "[mol_tag_tree_tag_content] {\n\tpadding-left: var(--mol_gap_block);\n    margin-left: var(--mol_gap_block);\n    box-shadow: inset 1px 0 0 0 var(--mol_theme_line);\n}\n\n[mol_tag_tree_item] {\n\tpadding: var(--mol_gap_text);\n\tpadding-left: 0;\n}\n\n[mol_tag_tree_tag_trigger_icon] {\n    margin-left: -1rem;\n    margin-right: -0.25rem;\n}\n");
})($ || ($ = {}));

;
	($.$mol_app_demo_menu) = class $mol_app_demo_menu extends ($.$mol_page) {
		filter(next){
			if(next !== undefined) return next;
			return "";
		}
		Filter(){
			const obj = new this.$.$mol_search();
			(obj.query) = (next) => ((this.filter(next)));
			return obj;
		}
		ids_tags(){
			return {};
		}
		levels_expanded_default(){
			return 0;
		}
		levels_expanded(){
			return (this.levels_expanded_default());
		}
		Tree(){
			const obj = new this.$.$mol_tag_tree();
			(obj.Item) = (id) => ((this.Option(id)));
			(obj.ids_tags) = () => ((this.ids_tags()));
			(obj.levels_expanded) = () => ((this.levels_expanded()));
			return obj;
		}
		option_arg(id){
			return {};
		}
		option_title(id){
			return "";
		}
		Option_title(id){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ((this.option_title(id)));
			(obj.needle) = () => ((this.filter()));
			return obj;
		}
		names(){
			return [];
		}
		widget_tags(id){
			return [];
		}
		widget_aspects(id){
			return [];
		}
		widget_title(id){
			return "";
		}
		search_start(next){
			if(next !== undefined) return next;
			return null;
		}
		body(){
			return [(this.Filter()), (this.Tree())];
		}
		Option(id){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ((this.option_arg(id)));
			(obj.sub) = () => ([(this.Option_title(id))]);
			return obj;
		}
	};
	($mol_mem(($.$mol_app_demo_menu.prototype), "filter"));
	($mol_mem(($.$mol_app_demo_menu.prototype), "Filter"));
	($mol_mem(($.$mol_app_demo_menu.prototype), "Tree"));
	($mol_mem_key(($.$mol_app_demo_menu.prototype), "Option_title"));
	($mol_mem(($.$mol_app_demo_menu.prototype), "search_start"));
	($mol_mem_key(($.$mol_app_demo_menu.prototype), "Option"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const compare_names = (a, b) => {
            if (a[0] === '$' && b[0] !== '$')
                return 1;
            if (a[0] !== '$' && b[0] === '$')
                return -1;
            if (a > b)
                return 1;
            if (a < b)
                return -1;
            return 0;
        };
        class $mol_app_demo_menu extends $.$mol_app_demo_menu {
            filter(next) {
                return this.$.$mol_state_session.value('filter', next === '' ? null : next) ?? super.filter();
            }
            option_arg(id) {
                return { 'demo': id.at(-1)?.replace(/^\$*/, '') };
            }
            option_title(path_id) {
                const id = path_id.at(-1);
                return id.replace('_demo_', '/').replace('_demo', '');
            }
            search_start(event) {
                this.Filter().Query().bring();
                event?.preventDefault();
            }
            filter_last_word_completed() {
                return /[^\s]+\s+$/.test(this.filter());
            }
            filter_words() {
                const filter = this.filter().trim();
                const words = filter !== '' ? filter.split(/\s+/) : [];
                return [...new Set(words)].map(word => word.toLowerCase());
            }
            ids_tags() {
                const result = {};
                for (const name of this.names_filtered()) {
                    let aspects = this.widget_aspects(name);
                    result[name] = result[name] ?? [];
                    for (const tag of aspects) {
                        result[name].push(tag);
                    }
                }
                return result;
            }
            tags_filtered() {
                return [...new Set(this.names_filtered().flatMap(name => this.widget_tags(name)))]
                    .map(tag => tag.trim().toLowerCase())
                    .filter(tag => tag !== '')
                    .sort(compare_names);
            }
            filter_suggests() {
                const filter_words = this.filter_words();
                if (filter_words.length === 0)
                    return this.tags_filtered();
                const filtered_names = this.names_filtered();
                if (filtered_names.length <= 1)
                    return [];
                const tags = this.tags_filtered();
                const filter_last_word = filter_words.slice(-1)[0];
                const filter_last_word_completed = this.filter_last_word_completed();
                const suggests = [];
                for (const tag of tags) {
                    if (filter_words.includes(tag))
                        continue;
                    if (filter_last_word_completed) {
                        suggests.push(`${filter_words.join(' ')} ${tag}`);
                    }
                    else if (tag.indexOf(filter_last_word) === 0 &&
                        (filter_last_word.length < tag.length)) {
                        suggests.push(`${filter_words.slice(0, -1).join(' ')} ${tag}`);
                    }
                }
                return suggests;
            }
            levels_expanded() {
                if (this.filter_words().length)
                    return 99;
                return super.levels_expanded();
            }
            names_filtered() {
                const words = this.filter_words();
                return this.names().filter($mol_match_text(this.filter(), name => [
                    name,
                    ...this.widget_aspects(name),
                    ...this.widget_tags(name),
                ]));
            }
        }
        __decorate([
            $mol_mem
        ], $mol_app_demo_menu.prototype, "filter", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo_menu.prototype, "filter_last_word_completed", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo_menu.prototype, "filter_words", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo_menu.prototype, "ids_tags", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo_menu.prototype, "tags_filtered", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo_menu.prototype, "filter_suggests", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo_menu.prototype, "names_filtered", null);
        $$.$mol_app_demo_menu = $mol_app_demo_menu;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/app/demo/menu/menu.view.css", "[mol_app_demo_menu] {\n\tflex: 0 0 18rem;\n}\n\n[mol_app_demo_menu_selector] {\n\tdisplay: flex;\n\tflex-wrap: nowrap;\n\tgap: 0;\n}\n\n[mol_app_demo_menu_tools] {\n\tpadding: 0;\n}\n\n[mol_app_demo_menu_themes] {\n\tflex: none;\n}\n\n[mol_app_demo_menu_filter] {\n\talign-self: stretch;\n\tflex-grow: 0;\n\tflex-shrink: 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_forum) = class $mol_icon_forum extends ($.$mol_icon) {
		path(){
			return "M17,12V3A1,1 0 0,0 16,2H3A1,1 0 0,0 2,3V17L6,13H16A1,1 0 0,0 17,12M21,6H19V15H6V17A1,1 0 0,0 7,18H18L22,22V7A1,1 0 0,0 21,6Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_forum_outline) = class $mol_icon_forum_outline extends ($.$mol_icon) {
		path(){
			return "M15,4V11H5.17L4,12.17V4H15M16,2H3A1,1 0 0,0 2,3V17L6,13H16A1,1 0 0,0 17,12V3A1,1 0 0,0 16,2M21,6H19V15H6V17A1,1 0 0,0 7,18H18L22,22V7A1,1 0 0,0 21,6Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_open_in_new) = class $mol_icon_open_in_new extends ($.$mol_icon) {
		path(){
			return "M14,3V5H17.59L7.76,14.83L9.17,16.24L19,6.41V10H21V3M19,19H5V5H12V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19Z";
		}
	};


;
"use strict";

;
	($.$mol_chat) = class $mol_chat extends ($.$mol_link) {
		Icon(){
			const obj = new this.$.$mol_icon_forum_outline();
			return obj;
		}
		title(){
			return (this.$.$mol_locale.text("$mol_chat_title"));
		}
		standalone(){
			return "";
		}
		Standalone_icon(){
			const obj = new this.$.$mol_icon_open_in_new();
			return obj;
		}
		Esternal(){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ((this.standalone()));
			(obj.sub) = () => ([(this.Standalone_icon())]);
			return obj;
		}
		Close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Close(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ({"mol_chat": null});
			(obj.sub) = () => ([(this.Close_icon())]);
			return obj;
		}
		embed(){
			return "";
		}
		Embed(){
			const obj = new this.$.$mol_frame();
			(obj.uri) = () => ((this.embed()));
			return obj;
		}
		Page(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.title()));
			(obj.tools) = () => ([(this.Esternal()), (this.Close())]);
			(obj.Body) = () => ((this.Embed()));
			return obj;
		}
		seed(){
			return "";
		}
		opened(){
			return false;
		}
		arg(){
			return {"mol_chat": ""};
		}
		hint(){
			return (this.title());
		}
		sub(){
			return [(this.Icon())];
		}
		pages(){
			return [(this.Page())];
		}
	};
	($mol_mem(($.$mol_chat.prototype), "Icon"));
	($mol_mem(($.$mol_chat.prototype), "Standalone_icon"));
	($mol_mem(($.$mol_chat.prototype), "Esternal"));
	($mol_mem(($.$mol_chat.prototype), "Close_icon"));
	($mol_mem(($.$mol_chat.prototype), "Close"));
	($mol_mem(($.$mol_chat.prototype), "Embed"));
	($mol_mem(($.$mol_chat.prototype), "Page"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_chat extends $.$mol_chat {
            opened() {
                return this.$.$mol_state_arg.value('mol_chat') !== null;
            }
            pages() {
                return this.opened() ? [this.Page()] : [];
            }
            standalone() {
                const seed = this.seed();
                const origin = new URL(this.$.$mol_state_arg.href()).origin;
                return `https://talks.hyoo.ru/#!chat=${seed}`;
            }
            embed() {
                const seed = this.seed();
                const lights = String(this.$.$mol_lights());
                const embed = this.$.$mol_state_arg.href();
                return `https://talks.hyoo.ru/#!chat=${encodeURIComponent(seed)}/mol_lights=${lights}`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_chat.prototype, "standalone", null);
        __decorate([
            $mol_mem
        ], $mol_chat.prototype, "embed", null);
        $$.$mol_chat = $mol_chat;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/chat/chat.view.css", "[mol_chat_page] {\n\tflex: 1 0 30rem;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_settings) = class $mol_icon_settings extends ($.$mol_icon) {
		path(){
			return "M12,15.5C10.07,15.5 8.5,13.93 8.5,12C8.5,10.07 10.07,8.5 12,8.5C13.93,8.5 15.5,10.07 15.5,12C15.5,13.93 13.93,15.5 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z";
		}
	};


;
"use strict";

;
	($.$mol_app_demo_detail) = class $mol_app_demo_detail extends ($.$mol_page) {
		readme(next){
			if(next !== undefined) return next;
			return false;
		}
		readme_icon(){
			const obj = new this.$.$mol_icon_information_outline();
			return obj;
		}
		Readme(){
			const obj = new this.$.$mol_check_icon();
			(obj.checked) = (next) => ((this.readme(next)));
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_app_demo_detail_Readme_hint")));
			(obj.Icon) = () => ((this.readme_icon()));
			return obj;
		}
		chat_pages(){
			return (this.Chat().pages());
		}
		chat_seed(){
			return "0_0";
		}
		Chat(){
			const obj = new this.$.$mol_chat();
			(obj.seed) = () => ((this.chat_seed()));
			return obj;
		}
		edit_hint(){
			return (this.$.$mol_locale.text("$mol_app_demo_detail_edit_hint"));
		}
		Edit_speck(){
			const obj = new this.$.$mol_speck();
			(obj.value) = () => ("β");
			return obj;
		}
		Edit_icon(){
			const obj = new this.$.$mol_icon_settings();
			return obj;
		}
		edit_uri(){
			return "";
		}
		Edit(){
			const obj = new this.$.$mol_link();
			(obj.hint) = () => ((this.edit_hint()));
			(obj.sub) = () => ([(this.Edit_speck()), (this.Edit_icon())]);
			(obj.uri) = () => ((this.edit_uri()));
			return obj;
		}
		close_hint(){
			return (this.$.$mol_locale.text("$mol_app_demo_detail_close_hint"));
		}
		Close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		close_arg(){
			return {"demo": null};
		}
		Close(){
			const obj = new this.$.$mol_link();
			(obj.hint) = () => ((this.close_hint()));
			(obj.sub) = () => ([(this.Close_icon())]);
			(obj.arg) = () => ((this.close_arg()));
			return obj;
		}
		Demo(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		description(){
			return "";
		}
		tools(){
			return [
				(this.Readme()), 
				(this.Chat()), 
				(this.Edit()), 
				(this.Close())
			];
		}
		body(){
			return [(this.Demo())];
		}
	};
	($mol_mem(($.$mol_app_demo_detail.prototype), "readme"));
	($mol_mem(($.$mol_app_demo_detail.prototype), "readme_icon"));
	($mol_mem(($.$mol_app_demo_detail.prototype), "Readme"));
	($mol_mem(($.$mol_app_demo_detail.prototype), "Chat"));
	($mol_mem(($.$mol_app_demo_detail.prototype), "Edit_speck"));
	($mol_mem(($.$mol_app_demo_detail.prototype), "Edit_icon"));
	($mol_mem(($.$mol_app_demo_detail.prototype), "Edit"));
	($mol_mem(($.$mol_app_demo_detail.prototype), "Close_icon"));
	($mol_mem(($.$mol_app_demo_detail.prototype), "Close"));
	($mol_mem(($.$mol_app_demo_detail.prototype), "Demo"));


;
"use strict";

;
	($.$mol_example) = class $mol_example extends ($.$mol_view) {
		tags(){
			return [];
		}
		aspects(){
			return [];
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/example/example.view.css", "[mol_example] {\n\tmax-width: 100%;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_example_small) = class $mol_example_small extends ($.$mol_example) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/example/small/small.view.css", "[mol_example_small] {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-items: flex-start;\n\talign-content: flex-start;\n\tjustify-content: flex-start;\n\tflex: 0 0 auto;\n\tbox-sizing: border-box;\n\tmax-width: 100%;\n\tgap: var(--mol_gap_block);\n}\n\n[mol_example_small] > * {\n\tmax-width: 100%;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_example_large) = class $mol_example_large extends ($.$mol_example) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/example/large/large.view.css", "[mol_example_large] {\n\tflex: 1 1 auto;\n\tflex-direction: column;\n\tbackground: var(--mol_theme_back);\n\tbox-shadow: 0 0 0 1px var(--mol_theme_line);\n\tborder-radius: var(--mol_gap_round);\n\tmax-width: 100%;\n\tmax-height: 100%;\n\toverflow: hidden;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_app_demo_readme) = class $mol_app_demo_readme extends ($.$mol_page) {
		source_link(){
			return "";
		}
		source_hint(){
			return (this.$.$mol_locale.text("$mol_app_demo_readme_source_hint"));
		}
		Source_link(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ((this.source_link()));
			(obj.hint) = () => ((this.source_hint()));
			return obj;
		}
		Close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		close(next){
			if(next !== undefined) return next;
			return null;
		}
		Close(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_app_demo_readme_Close_hint")));
			(obj.sub) = () => ([(this.Close_icon())]);
			(obj.click) = (next) => ((this.close(next)));
			return obj;
		}
		readme(){
			return "";
		}
		uri_base(next){
			if(next !== undefined) return next;
			return "";
		}
		Not_found_caption(){
			return (this.$.$mol_locale.text("$mol_app_demo_readme_Not_found_caption"));
		}
		readme_link_template(){
			return "https://raw.githubusercontent.com/{repo}/HEAD/{module}/readme.md";
		}
		source_link_template(){
			return "https://github.com/{repo}/tree/HEAD/{module}";
		}
		repo(){
			return "";
		}
		module(){
			return [];
		}
		title(){
			return (this.$.$mol_locale.text("$mol_app_demo_readme_title"));
		}
		opened(next){
			if(next !== undefined) return next;
			return false;
		}
		tools(){
			return [(this.Source_link()), (this.Close())];
		}
		Readme(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.readme()));
			(obj.uri_base) = () => ((this.uri_base()));
			return obj;
		}
		Not_found(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Not_found_caption())]);
			return obj;
		}
	};
	($mol_mem(($.$mol_app_demo_readme.prototype), "Source_link"));
	($mol_mem(($.$mol_app_demo_readme.prototype), "Close_icon"));
	($mol_mem(($.$mol_app_demo_readme.prototype), "close"));
	($mol_mem(($.$mol_app_demo_readme.prototype), "Close"));
	($mol_mem(($.$mol_app_demo_readme.prototype), "uri_base"));
	($mol_mem(($.$mol_app_demo_readme.prototype), "opened"));
	($mol_mem(($.$mol_app_demo_readme.prototype), "Readme"));
	($mol_mem(($.$mol_app_demo_readme.prototype), "Not_found"));


;
"use strict";
var $;
(function ($) {
    function $mol_dom_parse(text, type = 'application/xhtml+xml') {
        const parser = new $mol_dom_context.DOMParser();
        const doc = parser.parseFromString(text, type);
        const error = doc.getElementsByTagName('parsererror');
        if (error.length)
            throw new Error(error[0].textContent);
        return doc;
    }
    $.$mol_dom_parse = $mol_dom_parse;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_fetch_response extends $mol_object2 {
        native;
        constructor(native) {
            super();
            this.native = native;
        }
        status() {
            const types = ['unknown', 'inform', 'success', 'redirect', 'wrong', 'failed'];
            return types[Math.floor(this.native.status / 100)];
        }
        code() {
            return this.native.status;
        }
        message() {
            return this.native.statusText || `HTTP Error ${this.code()}`;
        }
        headers() {
            return this.native.headers;
        }
        mime() {
            return this.headers().get('content-type');
        }
        stream() {
            return this.native.body;
        }
        text() {
            const buffer = this.buffer();
            const native = this.native;
            const mime = native.headers.get('content-type') || '';
            const [, charset] = /charset=(.*)/.exec(mime) || [, 'utf-8'];
            const decoder = new TextDecoder(charset);
            return decoder.decode(buffer);
        }
        json() {
            return $mol_wire_sync(this.native).json();
        }
        blob() {
            return $mol_wire_sync(this.native).blob();
        }
        buffer() {
            return $mol_wire_sync(this.native).arrayBuffer();
        }
        xml() {
            return $mol_dom_parse(this.text(), 'application/xml');
        }
        xhtml() {
            return $mol_dom_parse(this.text(), 'application/xhtml+xml');
        }
        html() {
            return $mol_dom_parse(this.text(), 'text/html');
        }
    }
    __decorate([
        $mol_action
    ], $mol_fetch_response.prototype, "stream", null);
    __decorate([
        $mol_action
    ], $mol_fetch_response.prototype, "text", null);
    __decorate([
        $mol_action
    ], $mol_fetch_response.prototype, "xml", null);
    __decorate([
        $mol_action
    ], $mol_fetch_response.prototype, "xhtml", null);
    __decorate([
        $mol_action
    ], $mol_fetch_response.prototype, "html", null);
    $.$mol_fetch_response = $mol_fetch_response;
    class $mol_fetch extends $mol_object2 {
        static request(input, init = {}) {
            const controller = new AbortController();
            let done = false;
            const promise = fetch(input, {
                ...init,
                signal: controller.signal,
            }).finally(() => {
                done = true;
            });
            return Object.assign(promise, {
                destructor: () => {
                    if (!done && !controller.signal.aborted)
                        controller.abort();
                },
            });
        }
        static response(input, init) {
            return new $mol_fetch_response($mol_wire_sync(this).request(input, init));
        }
        static success(input, init) {
            const response = this.response(input, init);
            if (response.status() === 'success')
                return response;
            throw new Error(response.message(), { cause: response });
        }
        static stream(input, init) {
            return this.success(input, init).stream();
        }
        static text(input, init) {
            return this.success(input, init).text();
        }
        static json(input, init) {
            return this.success(input, init).json();
        }
        static blob(input, init) {
            return this.success(input, init).blob();
        }
        static buffer(input, init) {
            return this.success(input, init).buffer();
        }
        static xml(input, init) {
            return this.success(input, init).xml();
        }
        static xhtml(input, init) {
            return this.success(input, init).xhtml();
        }
        static html(input, init) {
            return this.success(input, init).html();
        }
    }
    __decorate([
        $mol_action
    ], $mol_fetch, "response", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "success", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "stream", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "text", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "json", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "blob", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "buffer", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "xml", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "xhtml", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "html", null);
    $.$mol_fetch = $mol_fetch;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_app_demo_readme_not_found_error extends Error {
            module;
            constructor(module) {
                super('Readme not found');
                this.module = module;
            }
        }
        $$.$mol_app_demo_readme_not_found_error = $mol_app_demo_readme_not_found_error;
        class $mol_app_demo_readme extends $.$mol_app_demo_readme {
            close() {
                this.opened(false);
            }
            link(template, repo, module) {
                return template.replace('{repo}', repo).replace('{module}', module.join('/'));
            }
            uri_base(next = '') {
                $mol_wire_solid();
                return next;
            }
            source_link() {
                return this.link(this.source_link_template(), this.repo(), this.module());
            }
            readme() {
                let module = this.module();
                while (module.length) {
                    try {
                        const link = this.link(this.readme_link_template(), this.repo(), module);
                        const text = this.$.$mol_fetch.text(link);
                        this.uri_base(this.link(this.source_link_template(), this.repo(), module));
                        return text;
                    }
                    catch (error) {
                        if (error instanceof Promise)
                            $mol_fail_hidden(error);
                        module = module.slice(0, -1);
                    }
                }
                throw new $mol_app_demo_readme_not_found_error(module);
            }
            body() {
                try {
                    this.readme();
                    return [this.Readme()];
                }
                catch (err) {
                    if (err instanceof Promise)
                        $mol_fail_hidden(err);
                    return [this.Not_found()];
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_app_demo_readme.prototype, "uri_base", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo_readme.prototype, "source_link", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo_readme.prototype, "readme", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo_readme.prototype, "body", null);
        $$.$mol_app_demo_readme = $mol_app_demo_readme;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_status) = class $mol_status extends ($.$mol_view) {
		message(){
			return "";
		}
		status(){
			return (this.title());
		}
		minimal_height(){
			return 24;
		}
		minimal_width(){
			return 0;
		}
		sub(){
			return [(this.message())];
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_status extends $.$mol_status {
            message() {
                try {
                    return this.status() ?? null;
                }
                catch (error) {
                    if (error instanceof Promise)
                        $mol_fail_hidden(error);
                    return error.message;
                }
            }
        }
        $$.$mol_status = $mol_status;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/status/status.view.css", "[mol_status] {\n\tpadding: var(--mol_gap_text);\n\tborder-radius: var(--mol_gap_round);\n\tdisplay: block;\n}\n\n[mol_status]:not([mol_view_error=\"Promise\"]) {\n\tcolor: var(--mol_theme_focus);\n}\n\n[mol_status]:not([mol_view_error=\"Promise\"]):empty {\n\tdisplay: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_app_demo) = class $mol_app_demo extends ($.$mol_book2) {
		detail_title(){
			return "$mol";
		}
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		Search_start(){
			const obj = new this.$.$mol_hotkey();
			(obj.key) = () => ({"F": (next) => (this.search_start(next))});
			(obj.mod_ctrl) = () => (true);
			return obj;
		}
		menu_title(){
			return (this.$.$mol_locale.text("$mol_app_demo_menu_title"));
		}
		names(){
			return [];
		}
		widget_tags(id){
			return [];
		}
		widget_aspects(id){
			return [];
		}
		widget_title(id){
			return "";
		}
		search_start(next){
			return (this.Menu().search_start(next));
		}
		sources_uri(){
			return "https://github.com/hyoo-ru/mam_mol/";
		}
		Sources(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ((this.sources_uri()));
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		tools(){
			return [(this.Sources()), (this.Lights())];
		}
		chat_seed(id){
			return "p9zx0v_nsmx1d";
		}
		chat_pages(id){
			return (this.Detail(id).chat_pages());
		}
		detail_description(){
			return "";
		}
		edit_uri(){
			return "";
		}
		readme_page(next){
			if(next !== undefined) return next;
			return false;
		}
		Demo(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		repo(){
			return "";
		}
		module(){
			return [];
		}
		detail_empty_prefix(){
			return (this.$.$mol_locale.text("$mol_app_demo_detail_empty_prefix"));
		}
		selected(){
			return "";
		}
		detail_empty_postfix(){
			return (this.$.$mol_locale.text("$mol_app_demo_detail_empty_postfix"));
		}
		editor_title(){
			return (this.detail_title());
		}
		meta_bundle_base(){
			return "";
		}
		repo_dict(){
			return {};
		}
		plugins(){
			return [(this.Theme()), (this.Search_start())];
		}
		demo_block_list(){
			return ["$mol_example_small", "$mol_example_large"];
		}
		Menu(){
			const obj = new this.$.$mol_app_demo_menu();
			(obj.title) = () => ((this.menu_title()));
			(obj.names) = () => ((this.names()));
			(obj.widget_tags) = (id) => ((this.widget_tags(id)));
			(obj.widget_aspects) = (id) => ((this.widget_aspects(id)));
			(obj.widget_title) = (id) => ((this.widget_title(id)));
			(obj.tools) = () => ((this.tools()));
			return obj;
		}
		Detail(id){
			const obj = new this.$.$mol_app_demo_detail();
			(obj.chat_seed) = () => ((this.chat_seed(id)));
			(obj.title) = () => ((this.detail_title()));
			(obj.description) = () => ((this.detail_description()));
			(obj.edit_uri) = () => ((this.edit_uri()));
			(obj.readme) = (next) => ((this.readme_page(next)));
			(obj.Demo) = () => ((this.Demo()));
			return obj;
		}
		Readme_page(){
			const obj = new this.$.$mol_app_demo_readme();
			(obj.repo) = () => ((this.repo()));
			(obj.opened) = (next) => ((this.readme_page(next)));
			(obj.module) = () => ((this.module()));
			return obj;
		}
		Detail_empty_message(){
			const obj = new this.$.$mol_status();
			(obj.sub) = () => ([
				(this.detail_empty_prefix()), 
				(this.selected()), 
				(this.detail_empty_postfix())
			]);
			return obj;
		}
	};
	($mol_mem(($.$mol_app_demo.prototype), "Theme"));
	($mol_mem(($.$mol_app_demo.prototype), "Search_start"));
	($mol_mem(($.$mol_app_demo.prototype), "Sources"));
	($mol_mem(($.$mol_app_demo.prototype), "Lights"));
	($mol_mem(($.$mol_app_demo.prototype), "readme_page"));
	($mol_mem(($.$mol_app_demo.prototype), "Demo"));
	($mol_mem(($.$mol_app_demo.prototype), "Menu"));
	($mol_mem_key(($.$mol_app_demo.prototype), "Detail"));
	($mol_mem(($.$mol_app_demo.prototype), "Readme_page"));
	($mol_mem(($.$mol_app_demo.prototype), "Detail_empty_message"));


;
"use strict";
var $;
(function ($) {
    function $mol_func_is_class(func) {
        return Object.getOwnPropertyDescriptor(func, 'prototype')?.writable === false;
    }
    $.$mol_func_is_class = $mol_func_is_class;
})($ || ($ = {}));

;
	($.$mol_app_demo_main) = class $mol_app_demo_main extends ($.$mol_page) {
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		project_uri(){
			return "https://github.com/eigenmethod/mol/tree/master/";
		}
		Project(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ((this.project_uri()));
			return obj;
		}
		description(){
			return "";
		}
		Description(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.description()));
			(obj.uri_base) = () => ((this.project_uri()));
			return obj;
		}
		minimal_width(){
			return 400;
		}
		title(){
			return "$mol libs for web ui";
		}
		tools(){
			return [(this.Lights()), (this.Project())];
		}
		body(){
			return [(this.Description())];
		}
	};
	($mol_mem(($.$mol_app_demo_main.prototype), "Lights"));
	($mol_mem(($.$mol_app_demo_main.prototype), "Project"));
	($mol_mem(($.$mol_app_demo_main.prototype), "Description"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_app_demo_main extends $.$mol_app_demo_main {
            description() {
                return $mol_file.relative('mol/readme.md').text();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_app_demo_main.prototype, "description", null);
        $$.$mol_app_demo_main = $mol_app_demo_main;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_app_demo extends $.$mol_app_demo {
            component_name(name) {
                return name.split('_demo')?.[0] ?? name;
            }
            detail_title() {
                const selected = this.selected();
                return selected ? this.component_name(selected) : super.title();
            }
            detail_description() {
                return this.Demo().title();
            }
            names() {
                const next = [];
                for (const name in this.$) {
                    const ctor = this.$[name];
                    if (typeof ctor !== 'function')
                        continue;
                    if (!$mol_func_is_class(ctor))
                        continue;
                    if (!(ctor.prototype instanceof $mol_example))
                        continue;
                    if (this.demo_block_list().includes(name))
                        continue;
                    next.push(name);
                }
                return next.sort();
            }
            widget_tags(name) {
                const component_name = this.component_name(name);
                const tags = this.Widget(name).tags().map(tag => tag.toLowerCase());
                if (tags.length === 0) {
                    console.warn(`Demo widget without tags: ${name}`);
                    return [component_name];
                }
                else {
                    return [...tags, component_name];
                }
            }
            widget_title(name) {
                return this.Widget(name).title();
            }
            widget_aspects(name) {
                return this.Widget(name).aspects();
            }
            selected() {
                let value = $mol_state_arg.value('demo') || '';
                if (value && !value.startsWith('$'))
                    value = '$' + value;
                return value;
            }
            readme_page(next) {
                return $mol_state_session.value('readme', next) ?? false;
            }
            selected_class_name() {
                return this.selected();
            }
            Widget(name) {
                return new this.$[name];
            }
            names_demo() {
                const selected = this.selected();
                return [selected];
            }
            pages() {
                let sub = [];
                sub.push(this.Menu());
                const selected = this.selected();
                if (!selected)
                    return sub;
                sub.push(this.Detail(selected));
                const readme_page = this.readme_page();
                if (readme_page)
                    sub.push(this.Readme_page());
                sub.push(...this.chat_pages(selected));
                return sub;
            }
            Demo() {
                return this.Widget(this.selected());
            }
            logo_uri() {
                return $mol_file.relative('/mol/logo/logo.svg').path();
            }
            meta_bundle_base() {
                return this.$.$mol_state_arg.make_link({});
            }
            repo_dict() {
                const meta_uri = new URL('web.meta.tree', this.meta_bundle_base()).toString();
                const str = this.$.$mol_fetch.text(meta_uri);
                const tree = this.$.$mol_tree2_from_string(str);
                const dict = {};
                tree.kids.forEach(meta => {
                    const packs = meta.select('pack');
                    packs.kids.forEach(pack => {
                        const module_name = meta.value === '/' ? pack.kids[0]?.type :
                            [...meta.value.split('/').slice(1), pack.kids[0]?.type].join('_');
                        const repo = pack.kids[0]?.kids[0]?.kids[0]?.value
                            .split('.git')[0].split('/').slice(-2).join('/');
                        if (!repo)
                            throw new Error(`${this}.repo_dict(): Pack node "${pack.toString()}" does not contain a valid git url`);
                        dict[module_name] = repo;
                    });
                });
                return dict;
            }
            name_parse(name) {
                const split = name.replace(/\$/, '').split('_');
                const repos = this.repo_dict();
                const keys = split.map((_, index) => split.slice(0, -1 - index).join('_'));
                const key = keys.find(key => key in repos);
                if (!key)
                    throw new Error(`${this}.name_parse("${name}"): Key "${key}" not found`);
                const repo = repos[key];
                const module = split.slice(key.split('_').length);
                return { repo, module };
            }
            repo() {
                return this.name_parse($mol_state_arg.value('demo')).repo;
            }
            module() {
                return this.name_parse(this.selected()).module;
            }
            chat_link() {
                return $mol_state_arg.make_link({ demo: this.selected() });
            }
            edit_uri() {
                const source = encodeURIComponent(`$${''}my_app ${this.selected()}`);
                const pack = encodeURIComponent(this.$.$mol_state_arg.make_link({}));
                return `https://studio.hyoo.ru/#!pack=${pack}/source=${source}/preview`;
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_app_demo.prototype, "component_name", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo.prototype, "names", null);
        __decorate([
            $mol_mem_key
        ], $mol_app_demo.prototype, "widget_tags", null);
        __decorate([
            $mol_mem_key
        ], $mol_app_demo.prototype, "widget_title", null);
        __decorate([
            $mol_mem_key
        ], $mol_app_demo.prototype, "widget_aspects", null);
        __decorate([
            $mol_mem_key
        ], $mol_app_demo.prototype, "Widget", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo.prototype, "names_demo", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo.prototype, "meta_bundle_base", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo.prototype, "repo_dict", null);
        __decorate([
            $mol_mem_key
        ], $mol_app_demo.prototype, "name_parse", null);
        __decorate([
            $mol_mem
        ], $mol_app_demo.prototype, "edit_uri", null);
        $$.$mol_app_demo = $mol_app_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/app/demo/demo.view.css", "\n[mol_app_demo_main],\n[mol_app_demo_detail],\n[mol_app_empty_message] {\n\tflex: 1000 0 40rem;\n}\n\n[mol_app_demo_nav_table] {\n\twidth: 100%;\n\tbox-sizing: border-box;\n}\n\n[mol_app_demo_nav_row] {\n\tdisplay: flex;\n}\n\n[mol_app_demo_nav_option] {\n\tpadding: 0 .5rem 0 0;\n\tdisplay: flex;\n\tflex: 1;\n\talign-items: center;\n\tbox-shadow: none;\n}\n\n[mol_app_demo_nav_expand] {\n\talign-self: stretch;\n\talign-items: center;\n\tpadding-right: .25rem;\n}\n\n[mol_app_demo_nav_content] {\n\tflex-grow: 1;\n}\n\n[mol_app_demo_list] {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-content: flex-start;\n\talign-items: flex-start;\n}\n\n[mol_app_demo_screen] {\n\tmax-height: 45%;\n}\n\n[mol_app_demo_detail_body] {\n\tdisplay: flex;\n\talign-items: stretch;\n\tjustify-content: flex-start;\n\tflex-direction: column;\n}\n\n[mol_app_demo_detail_list] {\n\tflex: 1 0 100%;\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n[mol_app_demo_page_close] {\n\tcolor: inherit;\n\talign-items: center;\n\tpadding: 1rem;\n}\n\n[mol_app_demo_welcome] {\n\tflex: 1 1 auto;\n}\n\n[mol_app_demo_option_link] {\n\tpadding: 0;\n}\n\n[mol_app_demo_sample_large] {\n\tbox-sizing: border-box;\n}\n\n[mol_app_demo_detail_empty_message] {\n\tmargin: auto;\n}\n\n[mol_app_demo_chat] {\n\tflex: none;\n}\n\n[mol_app_demo_readme] {\n\tflex: 1 0 40rem;\n}\n\n[mol_app_demo_readme_not_found] {\n\tdisplay: flex;\n\tflex: 1 0;\n\talign-items: center;\n\tjustify-content: center;\n\tfont-size: 2rem;\n\tcolor: var(--mol_theme_shade);\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_sort) = class $mol_icon_sort extends ($.$mol_icon) {
		path(){
			return "M18 21L14 17H17V7H14L18 3L22 7H19V17H22M2 19V17H12V19M2 13V11H9V13M2 7V5H6V7H2Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_sort_asc) = class $mol_icon_sort_asc extends ($.$mol_icon) {
		path(){
			return "M10,11V13H18V11H10M10,5V7H14V5H10M10,17V19H22V17H10M6,7H8.5L5,3.5L1.5,7H4V20H6V7Z";
		}
	};


;
"use strict";

;
	($.$mol_portion_indicator) = class $mol_portion_indicator extends ($.$mol_view) {
		width_style(){
			return "0";
		}
		style(){
			return {...(super.style()), "width": (this.width_style())};
		}
	};
	($.$mol_portion) = class $mol_portion extends ($.$mol_view) {
		indicator_width_style(){
			return "0";
		}
		Indicator(){
			const obj = new this.$.$mol_portion_indicator();
			(obj.width_style) = () => ((this.indicator_width_style()));
			return obj;
		}
		portion(){
			return 0;
		}
		sub(){
			return [(this.Indicator())];
		}
	};
	($mol_mem(($.$mol_portion.prototype), "Indicator"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_portion extends $.$mol_portion {
            indicator_width_style() {
                return this.portion() * 100 + '%';
            }
        }
        $$.$mol_portion = $mol_portion;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/portion/portion.view.css", "[mol_portion] {\n\tdisplay: inline-flex;\n\tflex: 0 1 8rem;\n\twidth: 8rem;\n\tmax-height: calc( 1rem + 1.5em );\n\talign-self: stretch;\n\tvertical-align: inherit;\n\tborder-radius: var(--mol_gap_round);\n\tbackground: var(--mol_theme_line);\n}\n\n[mol_portion_indicator] {\n\tpadding: .25rem 0 0;\n\tbackground-color: var(--mol_theme_control);\n\tcolor: var(--mol_theme_control);\n\tborder-radius: var(--mol_gap_round);\n}\n");
})($ || ($ = {}));

;
	($.$mol_bench) = class $mol_bench extends ($.$mol_grid) {
		result(){
			return {};
		}
		event_sort_toggle(id, next){
			if(next !== undefined) return next;
			return null;
		}
		col_head_title(id){
			return "";
		}
		Col_head_sort(id){
			const obj = new this.$.$mol_icon_sort_asc();
			return obj;
		}
		col_head_content(id){
			return [(this.col_head_title(id)), (this.Col_head_sort(id))];
		}
		result_value(id){
			return "";
		}
		result_portion(id){
			return 0;
		}
		Result_portion(id){
			const obj = new this.$.$mol_portion();
			(obj.portion) = () => ((this.result_portion(id)));
			return obj;
		}
		records(){
			return (this.result());
		}
		col_sort(next){
			if(next !== undefined) return next;
			return "";
		}
		Col_head(id){
			const obj = new this.$.$mol_bench_head();
			(obj.event_click) = (next) => ((this.event_sort_toggle(id, next)));
			(obj.sub) = () => ((this.col_head_content(id)));
			return obj;
		}
		cell_content_number(id){
			return [(this.result_value(id)), (this.Result_portion(id))];
		}
	};
	($mol_mem_key(($.$mol_bench.prototype), "event_sort_toggle"));
	($mol_mem_key(($.$mol_bench.prototype), "Col_head_sort"));
	($mol_mem_key(($.$mol_bench.prototype), "Result_portion"));
	($mol_mem(($.$mol_bench.prototype), "col_sort"));
	($mol_mem_key(($.$mol_bench.prototype), "Col_head"));
	($.$mol_bench_head) = class $mol_bench_head extends ($.$mol_float) {
		event_click(next){
			if(next !== undefined) return next;
			return null;
		}
		hint(){
			return (this.$.$mol_locale.text("$mol_bench_head_hint"));
		}
		horizontal(){
			return false;
		}
		event(){
			return {...(super.event()), "click": (next) => (this.event_click(next))};
		}
		attr(){
			return {...(super.attr()), "title": (this.hint())};
		}
	};
	($mol_mem(($.$mol_bench_head.prototype), "event_click"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_bench extends $.$mol_bench {
            col_sort(next) {
                return $mol_state_arg.value(this.state_key('sort'), next) ?? '';
            }
            row_ids() {
                const result = this.result();
                const keys = Object.keys(result).map(key => ['', key]);
                const col = this.col_sort();
                if (col) {
                    keys.sort((a, b) => {
                        return this.result_number({ row: a, col }) - this.result_number({ row: b, col });
                    });
                }
                return keys;
            }
            result_value(id) {
                return this.result()[id.row[id.row.length - 1]][id.col];
            }
            result_number(id) {
                return parseInt(this.result_value(id), 10);
            }
            result_value_max(col) {
                let max = 0;
                const rows = this.row_ids();
                rows.forEach(row => {
                    const numb = this.result_number({ row, col });
                    if (numb > max)
                        max = numb;
                });
                return max;
            }
            result_portion(id) {
                return this.result_number(id) / this.result_value_max(id.col);
            }
            col_head_title(col) {
                return col;
            }
            event_sort_toggle(col, next) {
                this.col_sort(col);
            }
            col_type(col) {
                if (col === this.hierarchy_col())
                    return 'branch';
                const rowFirst = this.row_id(0);
                const val = this.record(rowFirst[rowFirst.length - 1])[col];
                if (!isNaN(parseFloat(val)))
                    return 'number';
                return 'text';
            }
            cell_content_number(id) {
                return [
                    this.result_value(id),
                    ...(this.col_sort() === id.col) ? [this.Result_portion(id)] : []
                ];
            }
            col_head_content(col) {
                return [
                    this.col_head_title(col),
                    ...(this.col_sort() === col) ? [' ', this.Col_head_sort(col)] : []
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_bench.prototype, "col_sort", null);
        __decorate([
            $mol_mem
        ], $mol_bench.prototype, "row_ids", null);
        __decorate([
            $mol_mem_key
        ], $mol_bench.prototype, "result_value_max", null);
        __decorate([
            $mol_mem_key
        ], $mol_bench.prototype, "col_type", null);
        $$.$mol_bench = $mol_bench;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/bench/bench.view.css", "[mol_bench_col_head] {\n\tcursor: pointer;\n}\n\n[mol_bench_cell_number] {\n\twhite-space: nowrap;\n\ttext-align: right;\n}\n\n[mol_bench_result_portion] {\n\tmargin-left: .75rem;\n}\n\n[mol_bench_row]:nth-child(1) [mol_portion_indicator] {\n\tbackground: var(--mol_theme_current);\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_minus) = class $mol_icon_minus extends ($.$mol_icon) {
		path(){
			return "M19,13H5V11H19V13Z";
		}
	};


;
"use strict";

;
	($.$mol_number) = class $mol_number extends ($.$mol_view) {
		precision(){
			return 1;
		}
		type(){
			return "tel";
		}
		value_string(next){
			if(next !== undefined) return next;
			return "";
		}
		hint(){
			return " ";
		}
		string_enabled(){
			return (this.enabled());
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		String(){
			const obj = new this.$.$mol_string();
			(obj.type) = () => ((this.type()));
			(obj.value) = (next) => ((this.value_string(next)));
			(obj.hint) = () => ((this.hint()));
			(obj.enabled) = () => ((this.string_enabled()));
			(obj.submit) = (next) => ((this.submit(next)));
			return obj;
		}
		event_dec(next){
			if(next !== undefined) return next;
			return null;
		}
		dec_enabled(){
			return (this.enabled());
		}
		dec_icon(){
			const obj = new this.$.$mol_icon_minus();
			return obj;
		}
		Dec(){
			const obj = new this.$.$mol_button_minor();
			(obj.event_click) = (next) => ((this.event_dec(next)));
			(obj.enabled) = () => ((this.dec_enabled()));
			(obj.sub) = () => ([(this.dec_icon())]);
			return obj;
		}
		event_inc(next){
			if(next !== undefined) return next;
			return null;
		}
		inc_enabled(){
			return (this.enabled());
		}
		inc_icon(){
			const obj = new this.$.$mol_icon_plus();
			return obj;
		}
		Inc(){
			const obj = new this.$.$mol_button_minor();
			(obj.event_click) = (next) => ((this.event_inc(next)));
			(obj.enabled) = () => ((this.inc_enabled()));
			(obj.sub) = () => ([(this.inc_icon())]);
			return obj;
		}
		precision_view(){
			return (this.precision());
		}
		precision_change(){
			return (this.precision());
		}
		value_min(){
			return -Infinity;
		}
		value_max(){
			return +Infinity;
		}
		value(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		enabled(){
			return true;
		}
		sub(){
			return [
				(this.String()), 
				(this.Dec()), 
				(this.Inc())
			];
		}
	};
	($mol_mem(($.$mol_number.prototype), "value_string"));
	($mol_mem(($.$mol_number.prototype), "submit"));
	($mol_mem(($.$mol_number.prototype), "String"));
	($mol_mem(($.$mol_number.prototype), "event_dec"));
	($mol_mem(($.$mol_number.prototype), "dec_icon"));
	($mol_mem(($.$mol_number.prototype), "Dec"));
	($mol_mem(($.$mol_number.prototype), "event_inc"));
	($mol_mem(($.$mol_number.prototype), "inc_icon"));
	($mol_mem(($.$mol_number.prototype), "Inc"));
	($mol_mem(($.$mol_number.prototype), "value"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/number/number.css", "[mol_number] {\n\tdisplay: flex;\n\tflex: 0 1 auto;\n\tposition: relative;\n\talign-items: stretch;\n\tmax-width: 100%;\n}\n\n[mol_number_string] {\n\tappearance: textfield;\n\tflex: 1 1 7rem;\n\twidth: 7rem;\n}\n\n[mol_number_string]::-webkit-inner-spin-button {\n\tdisplay: none;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_number extends $.$mol_number {
            value_limited(val) {
                if (Number.isNaN(val))
                    return this.value(val);
                if (val === undefined)
                    return this.value();
                const min = this.value_min();
                const max = this.value_max();
                if (val < min)
                    return this.value(min);
                if (val > max)
                    return this.value(max);
                return this.value(val);
            }
            event_dec(next) {
                this.value_limited((this.value_limited() || 0) - this.precision_change());
            }
            event_inc(next) {
                this.value_limited((this.value_limited() || 0) + this.precision_change());
            }
            round(val) {
                if (Number.isNaN(val))
                    return '';
                if (val === 0)
                    return '0';
                if (!val)
                    return '';
                const precision_view = this.precision_view();
                if (!precision_view)
                    return val.toFixed();
                if (precision_view >= 1) {
                    return (val / precision_view).toFixed();
                }
                else {
                    const fixed_number = Math.log10(1 / precision_view);
                    return val.toFixed(Math.ceil(fixed_number));
                }
            }
            value_string(next) {
                const current = this.round(this.value_limited());
                if (next === undefined)
                    return current;
                const precision = this.precision_view();
                if (precision - Math.floor(precision) === 0)
                    next = next.replace(/[.,]/g, '');
                next = (this.value_min() < 0 && next.startsWith('-') ? '-' : '')
                    + next.replace(/,/g, '.').replace(/[^\d\.]/g, '').replace(/^0{2,}/, '0');
                let dot_pos = next.indexOf('.');
                if (dot_pos !== -1) {
                    const prev = $mol_wire_probe(() => this.value_string()) ?? '';
                    const dot_pos_prev = prev.indexOf('.');
                    if (dot_pos_prev === dot_pos)
                        dot_pos = next.lastIndexOf('.');
                    const frac = next.slice(dot_pos + 1).replace(/\./g, '');
                    next = (next.slice(0, dot_pos) || '0').replace(/\./g, '') + '.' + frac;
                }
                if (Number.isNaN(Number(next)))
                    return next;
                if (next.endsWith('.'))
                    return next;
                if (next.endsWith('-'))
                    return next;
                this.value_limited(Number(next || Number.NaN));
                return next;
            }
            dec_enabled() {
                return this.enabled() && (!((this.value() || 0) <= this.value_min()));
            }
            inc_enabled() {
                return this.enabled() && (!((this.value() || 0) >= this.value_max()));
            }
        }
        __decorate([
            $mol_mem
        ], $mol_number.prototype, "value_string", null);
        __decorate([
            $mol_mem
        ], $mol_number.prototype, "dec_enabled", null);
        __decorate([
            $mol_mem
        ], $mol_number.prototype, "inc_enabled", null);
        $$.$mol_number = $mol_number;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_tick) = class $mol_icon_tick extends ($.$mol_icon) {
		path(){
			return "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z";
		}
	};


;
"use strict";

;
	($.$mol_check_box) = class $mol_check_box extends ($.$mol_check) {
		Icon(){
			const obj = new this.$.$mol_icon_tick();
			return obj;
		}
	};
	($mol_mem(($.$mol_check_box.prototype), "Icon"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/box/box.view.css", "[mol_check_box_icon] {\n\tborder-radius: var(--mol_gap_round);\n\tbox-shadow: inset 0 0 0 1px var(--mol_theme_line);\n\tcolor: var(--mol_theme_shade);\n\theight: 1rem;\n\talign-self: center;\n}\n\n[mol_check]:not([mol_check_checked]) > [mol_check_box_icon] {\n\tfill: transparent;\n}\n\n[mol_check]:not([disabled]) > [mol_check_box_icon] {\n\tbackground: var(--mol_theme_field);\n\tcolor: var(--mol_theme_text);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$hyoo_bench_app) = class $hyoo_bench_app extends ($.$mol_book2) {
		addon_title(){
			return (this.$.$mol_locale.text("$hyoo_bench_app_addon_title"));
		}
		Menu_tools(){
			return (this.Addon_page().Tools());
		}
		filter(next){
			if(next !== undefined) return next;
			return "";
		}
		Filter(){
			const obj = new this.$.$mol_search();
			(obj.query) = (next) => ((this.filter(next)));
			return obj;
		}
		source_link(){
			return "https://github.com/hyoo-ru/bench.hyoo.ru";
		}
		Source_link(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ((this.source_link()));
			return obj;
		}
		menu_tools(){
			return [(this.Source_link())];
		}
		menu_options(){
			return [];
		}
		Menu(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.menu_options()));
			return obj;
		}
		Addon_page(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.addon_title()));
			(obj.head) = () => ([(this.Filter()), (this.Menu_tools())]);
			(obj.tools) = () => ((this.menu_tools()));
			(obj.body) = () => ([(this.Menu())]);
			return obj;
		}
		description(){
			return "";
		}
		Descr(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.description()));
			return obj;
		}
		param_fields(){
			return [];
		}
		Param_fields(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.param_fields()));
			return obj;
		}
		result(){
			return null;
		}
		result_col_title(id){
			return "";
		}
		result_col_sort(next){
			if(next !== undefined) return next;
			return "";
		}
		Result(){
			const obj = new this.$.$mol_bench();
			(obj.result) = () => ((this.result()));
			(obj.col_head_title) = (id) => ((this.result_col_title(id)));
			(obj.col_sort) = (next) => ((this.result_col_sort(next)));
			return obj;
		}
		Main_page(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.title()));
			(obj.body) = () => ([
				(this.Descr()), 
				(this.Param_fields()), 
				(this.Result())
			]);
			return obj;
		}
		sandbox_title(){
			return (this.$.$mol_locale.text("$hyoo_bench_app_sandbox_title"));
		}
		bench(next){
			if(next !== undefined) return next;
			return "//bench.hyoo.ru/list/";
		}
		Sandbox(){
			const obj = new this.$.$mol_frame();
			(obj.uri) = () => ((this.bench()));
			return obj;
		}
		Sandbox_page(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.sandbox_title()));
			(obj.Body) = () => ((this.Sandbox()));
			return obj;
		}
		menu_option_checked(id, next){
			if(next !== undefined) return next;
			return false;
		}
		sample_title(id){
			return "";
		}
		param_title(id){
			return "";
		}
		param_value(id, next){
			if(next !== undefined) return next;
			return 0;
		}
		param_precision(id){
			return 0;
		}
		Param_value(id){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.param_value(id, next)));
			(obj.precision_change) = () => ((this.param_precision(id)));
			return obj;
		}
		samples(next){
			if(next !== undefined) return next;
			return [];
		}
		pages(){
			return [
				(this.Addon_page()), 
				(this.Main_page()), 
				(this.Sandbox_page())
			];
		}
		Menu_option(id){
			const obj = new this.$.$mol_check_box();
			(obj.minimal_height) = () => (36);
			(obj.checked) = (next) => ((this.menu_option_checked(id, next)));
			(obj.title) = () => ((this.sample_title(id)));
			return obj;
		}
		Param(id){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.param_title(id)));
			(obj.content) = () => ([(this.Param_value(id))]);
			return obj;
		}
		result_col_title_sample(){
			return (this.$.$mol_locale.text("$hyoo_bench_app_result_col_title_sample"));
		}
	};
	($mol_mem(($.$hyoo_bench_app.prototype), "filter"));
	($mol_mem(($.$hyoo_bench_app.prototype), "Filter"));
	($mol_mem(($.$hyoo_bench_app.prototype), "Source_link"));
	($mol_mem(($.$hyoo_bench_app.prototype), "Menu"));
	($mol_mem(($.$hyoo_bench_app.prototype), "Addon_page"));
	($mol_mem(($.$hyoo_bench_app.prototype), "Descr"));
	($mol_mem(($.$hyoo_bench_app.prototype), "Param_fields"));
	($mol_mem(($.$hyoo_bench_app.prototype), "result_col_sort"));
	($mol_mem(($.$hyoo_bench_app.prototype), "Result"));
	($mol_mem(($.$hyoo_bench_app.prototype), "Main_page"));
	($mol_mem(($.$hyoo_bench_app.prototype), "bench"));
	($mol_mem(($.$hyoo_bench_app.prototype), "Sandbox"));
	($mol_mem(($.$hyoo_bench_app.prototype), "Sandbox_page"));
	($mol_mem_key(($.$hyoo_bench_app.prototype), "menu_option_checked"));
	($mol_mem_key(($.$hyoo_bench_app.prototype), "param_value"));
	($mol_mem_key(($.$hyoo_bench_app.prototype), "Param_value"));
	($mol_mem(($.$hyoo_bench_app.prototype), "samples"));
	($mol_mem_key(($.$hyoo_bench_app.prototype), "Menu_option"));
	($mol_mem_key(($.$hyoo_bench_app.prototype), "Param"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_bench_app extends $.$hyoo_bench_app {
            bench(next) {
                return $mol_state_arg.value('bench', next) || super.bench();
            }
            sandbox() {
                return this.Sandbox().window();
            }
            command_last(next) {
                return next || null;
            }
            command_result(command) {
                $mol_wire_solid();
                return $mol_wire_sync(this).command_result_async(command);
            }
            command_result_async(command) {
                const sandbox = this.sandbox();
                this.command_last(command);
                return new Promise(done => requestAnimationFrame(() => {
                    const handle = (event) => {
                        if (event.data[0] !== 'done')
                            return;
                        window.removeEventListener('message', handle);
                        done(event.data[1]);
                    };
                    window.addEventListener('message', handle);
                    sandbox.postMessage(command, '*');
                }));
            }
            meta() {
                return this.command_result(['meta']);
            }
            source_link() {
                return this.meta().source || super.source_link();
            }
            samples_all(next) {
                return Object.keys(this.meta().samples).sort($mol_compare_text(sample => this.sample_title(sample)));
            }
            samples(next) {
                const arg = $mol_state_arg.value('sample', next && next.join('~'));
                const all = this.samples_all();
                return arg ? arg.split('~').sort().filter(name => all.indexOf(name) >= 0) : [];
            }
            steps(next) {
                return Object.keys(this.meta().steps);
            }
            title() {
                const title = this.meta().title;
                return title[$mol_locale.lang()] || title['en'] || super.title();
            }
            description() {
                const descr = this.meta().descr;
                return descr[$mol_locale.lang()] || descr['en'] || '';
            }
            result_sample(sample_id) {
                const result = {
                    sample: this.sample_title(sample_id),
                };
                this.steps().forEach(step => {
                    result[step] = this.command_result([step, sample_id, this.param_dict()]);
                });
                return result;
            }
            result() {
                const result = {};
                this.samples().forEach(sample => {
                    result[sample] = this.result_sample(sample);
                });
                return result;
            }
            sandbox_title() {
                const command = this.command_last();
                if (!command)
                    return super.sandbox_title();
                if (command[0] === 'meta')
                    return super.sandbox_title();
                return `${this.sample_title(command[1])}: ${this.step_title(command[0])}`;
            }
            result_col_title(col_id) {
                if (col_id === 'sample')
                    return this.result_col_title_sample();
                return this.step_title(col_id).join(' ');
            }
            step_title(step) {
                const title = this.meta().steps[step].title;
                return [title[$mol_locale.lang()] || title['en']];
            }
            result_col_sort(next) {
                return $mol_state_arg.value('sort', next) || '';
            }
            menu_options() {
                const filter = this.filter().toLowerCase();
                return this.samples_all()
                    .filter(sample => this.sample_title(sample).toLowerCase().match(filter))
                    .map(sample => this.Menu_option(sample));
            }
            sample_title(sample) {
                const title = this.meta().samples[sample].title;
                return title[$mol_locale.lang()] || title['en'];
            }
            menu_option_checked(sample, next) {
                if (next === void 0)
                    return this.samples().indexOf(sample) !== -1;
                if (next)
                    this.samples(this.samples().concat(sample));
                else
                    this.samples(this.samples().filter(s => s !== sample));
                return next;
            }
            params() {
                return Object.keys(this.meta().params || {});
            }
            param_fields() {
                return this.params().map(param => this.Param(param));
            }
            param_title(id) {
                const title = this.meta().params[id].title;
                return title[$mol_locale.lang()] || title['en'];
            }
            param_value(id, next) {
                let next_2 = Number($mol_state_arg.value(id, next));
                return next_2 || this.meta().params[id].default;
            }
            param_precision(id) {
                return this.meta().params[id].precision;
            }
            param_dict() {
                const param_dict = {};
                const params = this.params();
                for (let param of params) {
                    param_dict[param] = this.param_value(param);
                }
                return param_dict;
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "bench", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "sandbox", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "command_last", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_bench_app.prototype, "command_result", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "meta", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "samples_all", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "samples", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "steps", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "title", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "description", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_bench_app.prototype, "result_sample", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "result", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "sandbox_title", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "result_col_sort", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "menu_options", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_bench_app.prototype, "menu_option_checked", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_bench_app.prototype, "param_value", null);
        __decorate([
            $mol_mem
        ], $hyoo_bench_app.prototype, "param_dict", null);
        $$.$hyoo_bench_app = $hyoo_bench_app;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/bench/app/app.view.css", "[hyoo_bench_app_main_page] {\n\tflex: 0 0 45rem;\n}\n\n[hyoo_bench_app_main_page_body] {\n\tdisplay: flex;\n\toverflow: auto;\n\tz-index: 1;\n}\n\n[hyoo_bench_app_addon_page] {\n\tflex: 0 0 20rem;\n}\n\n[hyoo_bench_app_sandbox_page] {\n\tflex: 1000 0 20rem;\n}\n\n[hyoo_bench_app_result_page] {\n\tflex: 1 1 auto;\n}\n\n[hyoo_bench_app_sandbox] {\n\tborder: none;\n\tbackground: white;\n}\n\n[hyoo_bench_app_descr] {\n\tflex: 0 0 auto;\n\tmax-width: none;\n}\n\n[hyoo_bench_app_param_fields] {\n\tflex: none;\n\tflex-wrap: wrap;\n}\n\n[hyoo_bench_app_result] {\n\tflex: none;\n}\n\n[hyoo_bench_app_menu] {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n[hyoo_bench_app_addon_page_tools] {\n\tflex-grow: 1;\n}\n\n[hyoo_bench_app_result_head] {\n\tcursor: pointer;\n}\n\n[hyoo_bench_app_result_cell_number] {\n\twhite-space: nowrap;\n\ttext-align: right;\n}\n\n[hyoo_bench_app_result_portion] {\n\tdisplay: inline-flex;\n\tvertical-align: bottom;\n\tmargin-left: .5rem;\n\twidth: 5vw;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_help) = class $mol_icon_help extends ($.$mol_icon) {
		path(){
			return "M10,19H13V22H10V19M12,2C17.35,2.22 19.68,7.62 16.5,11.67C15.67,12.67 14.33,13.33 13.67,14.17C13,15 13,16 13,17H10C10,15.33 10,13.92 10.67,12.92C11.33,11.92 12.67,11.33 13.5,10.67C15.92,8.43 15.32,5.26 12,5A3,3 0 0,0 9,8H6A6,6 0 0,1 12,2Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_help_circle) = class $mol_icon_help_circle extends ($.$mol_icon) {
		path(){
			return "M15.07,11.25L14.17,12.17C13.45,12.89 13,13.5 13,15H11V14.5C11,13.39 11.45,12.39 12.17,11.67L13.41,10.41C13.78,10.05 14,9.55 14,9C14,7.89 13.1,7 12,7A2,2 0 0,0 10,9H8A4,4 0 0,1 12,5A4,4 0 0,1 16,9C16,9.88 15.64,10.67 15.07,11.25M13,19H11V17H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12C22,6.47 17.5,2 12,2Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_help_circle_outline) = class $mol_icon_help_circle_outline extends ($.$mol_icon) {
		path(){
			return "M11,18H13V16H11V18M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,6A4,4 0 0,0 8,10H10A2,2 0 0,1 12,8A2,2 0 0,1 14,10C14,12 11,11.75 11,15H13C13,12.75 16,12.5 16,10A4,4 0 0,0 12,6Z";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_assert_ok(value) {
        if (value)
            return;
        $mol_fail(new Error(`${value} ≠ true`));
    }
    $.$mol_assert_ok = $mol_assert_ok;
    function $mol_assert_not(value) {
        if (!value)
            return;
        $mol_fail(new Error(`${value} ≠ false`));
    }
    $.$mol_assert_not = $mol_assert_not;
    function $mol_assert_fail(handler, ErrorRight) {
        const fail = $.$mol_fail;
        try {
            $.$mol_fail = $.$mol_fail_hidden;
            handler();
        }
        catch (error) {
            $.$mol_fail = fail;
            if (typeof ErrorRight === 'string') {
                $mol_assert_equal(error.message, ErrorRight);
            }
            else {
                $mol_assert_equal(error instanceof ErrorRight, true);
            }
            return error;
        }
        finally {
            $.$mol_fail = fail;
        }
        $mol_fail(new Error('Not failed'));
    }
    $.$mol_assert_fail = $mol_assert_fail;
    function $mol_assert_like(...args) {
        $mol_assert_equal(...args);
    }
    $.$mol_assert_like = $mol_assert_like;
    function $mol_assert_unique(...args) {
        for (let i = 0; i < args.length; ++i) {
            for (let j = 0; j < args.length; ++j) {
                if (i === j)
                    continue;
                if (!$mol_compare_deep(args[i], args[j]))
                    continue;
                $mol_fail(new Error(`args[${i}] = args[${j}] = ${print(args[i])}`));
            }
        }
    }
    $.$mol_assert_unique = $mol_assert_unique;
    function $mol_assert_equal(...args) {
        for (let i = 1; i < args.length; ++i) {
            if ($mol_compare_deep(args[0], args[i]))
                continue;
            if (args[0] instanceof $mol_dom_context.Element && args[i] instanceof $mol_dom_context.Element && args[0].outerHTML === args[i].outerHTML)
                continue;
            return $mol_fail(new Error(`args[0] ≠ args[${i}]\n${print(args[0])}\n---\n${print(args[i])}`));
        }
    }
    $.$mol_assert_equal = $mol_assert_equal;
    const print = (val) => {
        if (!val)
            return val;
        if (typeof val === 'bigint')
            return String(val) + 'n';
        if (typeof val === 'symbol')
            return `Symbol(${val.description})`;
        if (typeof val !== 'object')
            return val;
        if ('outerHTML' in val)
            return val.outerHTML;
        try {
            return JSON.stringify(val, (k, v) => typeof v === 'bigint' ? String(v) : v, '\t');
        }
        catch (error) {
            console.error(error);
            return val;
        }
    };
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_import extends $mol_object2 {
        static module(uri) {
            $mol_wire_solid();
            return $mol_wire_sync(this).module_async(uri);
        }
        static module_async(uri) {
            return import(uri);
        }
        static script(uri) {
            $mol_wire_solid();
            return $mol_wire_sync(this).script_async(uri);
        }
        static script_async(uri) {
            const doc = $mol_dom_context.document;
            const script = doc.createElement('script');
            script.src = uri;
            doc.head.appendChild(script);
            return new Promise((done, fail) => {
                script.onload = () => done($mol_dom_context);
                script.onerror = () => fail(new Error(`Can not import ${uri}`));
            });
        }
        static style(uri) {
            return $mol_wire_sync(this).style_async(uri);
        }
        static style_async(uri) {
            const doc = $mol_dom_context.document;
            const style = doc.createElement('link');
            style.rel = 'stylesheet';
            style.href = uri;
            doc.head.appendChild(style);
            return new Promise((done, fail) => {
                style.onload = () => done(style.sheet);
                style.onerror = () => fail(new Error(`Can not import ${uri}`));
            });
        }
    }
    __decorate([
        $mol_mem_key
    ], $mol_import, "module", null);
    __decorate([
        $mol_mem_key
    ], $mol_import, "script", null);
    __decorate([
        $mol_mem_key
    ], $mol_import, "style", null);
    $.$mol_import = $mol_import;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_js_perf_case extends $hyoo_crowd_struct {
        title(next) {
            return this.sub('title', $hyoo_crowd_reg).str(next);
        }
        setup(next) {
            return this.sub('setup', $hyoo_crowd_reg).str(next);
        }
        measure(next) {
            return this.sub('measure', $hyoo_crowd_reg).str(next);
        }
        steal(donor) {
            this.title(donor.title());
            this.setup(donor.setup());
            this.measure(donor.measure());
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_js_perf_case.prototype, "title", null);
    __decorate([
        $mol_mem
    ], $hyoo_js_perf_case.prototype, "setup", null);
    __decorate([
        $mol_mem
    ], $hyoo_js_perf_case.prototype, "measure", null);
    __decorate([
        $mol_action
    ], $hyoo_js_perf_case.prototype, "steal", null);
    $.$hyoo_js_perf_case = $hyoo_js_perf_case;
})($ || ($ = {}));

;
	($.$mol_icon_chevron_double_down) = class $mol_icon_chevron_double_down extends ($.$mol_icon) {
		path(){
			return "M16.59,5.59L18,7L12,13L6,7L7.41,5.59L12,10.17L16.59,5.59M16.59,11.59L18,13L12,19L6,13L7.41,11.59L12,16.17L16.59,11.59Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_unfold_more_horizontal) = class $mol_icon_unfold_more_horizontal extends ($.$mol_icon) {
		path(){
			return "M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $hyoo_js_perf_stats extends $mol_object2 {
        elapsed;
        iterations;
        frequency_portion;
        error;
        memory;
        memory_portion;
        size;
        size_portion;
        deps;
        deps_portion;
        get time() { return this.elapsed / this.iterations; }
        get frequency() { return this.iterations * 1000 / this.elapsed; }
        get memory_per_iteration() { return this.memory / this.iterations; }
    }
    $.$hyoo_js_perf_stats = $hyoo_js_perf_stats;
})($ || ($ = {}));

;
	($.$hyoo_js_perf_case_result) = class $hyoo_js_perf_case_result extends ($.$mol_view) {
		frequency_portion(){
			return 0;
		}
		Frequency_portion(){
			const obj = new this.$.$mol_portion();
			(obj.portion) = () => ((this.frequency_portion()));
			return obj;
		}
		memory_portion(){
			return 0;
		}
		Memory_portion(){
			const obj = new this.$.$mol_portion();
			(obj.portion) = () => ((this.memory_portion()));
			return obj;
		}
		size_portion(){
			return 0;
		}
		Size_portion(){
			const obj = new this.$.$mol_portion();
			(obj.portion) = () => ((this.size_portion()));
			return obj;
		}
		deps_portion(){
			return 0;
		}
		Deps_portion(){
			const obj = new this.$.$mol_portion();
			(obj.portion) = () => ((this.deps_portion()));
			return obj;
		}
		portions(){
			return [
				(this.Frequency_portion()), 
				(this.Memory_portion()), 
				(this.Size_portion()), 
				(this.Deps_portion())
			];
		}
		Portions(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.portions()));
			return obj;
		}
		title(){
			return "";
		}
		frequency_hint(){
			return (this.$.$mol_locale.text("$hyoo_js_perf_case_result_frequency_hint"));
		}
		frequency(){
			return "";
		}
		Frequency(){
			const obj = new this.$.$mol_view();
			(obj.attr) = () => ({"title": (this.frequency_hint())});
			(obj.sub) = () => ([(this.frequency())]);
			return obj;
		}
		time_hint(){
			return (this.$.$mol_locale.text("$hyoo_js_perf_case_result_time_hint"));
		}
		time_total(){
			return "";
		}
		Time(){
			const obj = new this.$.$mol_view();
			(obj.attr) = () => ({"title": (this.time_hint())});
			(obj.sub) = () => ([(this.time_total())]);
			return obj;
		}
		iterations_hint(){
			return (this.$.$mol_locale.text("$hyoo_js_perf_case_result_iterations_hint"));
		}
		iterations(){
			return "";
		}
		Iterations(){
			const obj = new this.$.$mol_view();
			(obj.attr) = () => ({"title": (this.iterations_hint())});
			(obj.sub) = () => ([(this.iterations())]);
			return obj;
		}
		Stats_main(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.title()), 
				(this.Frequency()), 
				"≈", 
				(this.Time()), 
				"×", 
				(this.Iterations())
			]);
			return obj;
		}
		memory_per_iteration_hint(){
			return (this.$.$mol_locale.text("$hyoo_js_perf_case_result_memory_per_iteration_hint"));
		}
		memory_per_iteration(){
			return "";
		}
		Memory_per_iteration(){
			const obj = new this.$.$mol_view();
			(obj.attr) = () => ({"title": (this.memory_per_iteration_hint())});
			(obj.sub) = () => ([(this.memory_per_iteration())]);
			return obj;
		}
		memory_hint(){
			return (this.$.$mol_locale.text("$hyoo_js_perf_case_result_memory_hint"));
		}
		memory_total(){
			return "";
		}
		Memory(){
			const obj = new this.$.$mol_view();
			(obj.attr) = () => ({"title": (this.memory_hint())});
			(obj.sub) = () => ([(this.memory_total())]);
			return obj;
		}
		Stats_mem(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				"×", 
				(this.Memory_per_iteration()), 
				"=", 
				(this.Memory())
			]);
			return obj;
		}
		size_hint(){
			return (this.$.$mol_locale.text("$hyoo_js_perf_case_result_size_hint"));
		}
		size(){
			return 0;
		}
		Size(){
			const obj = new this.$.$mol_view();
			(obj.attr) = () => ({"title": (this.size_hint())});
			(obj.sub) = () => ([(this.size())]);
			return obj;
		}
		Stats_size(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.title()), (this.Size())]);
			return obj;
		}
		deps_hint(){
			return (this.$.$mol_locale.text("$hyoo_js_perf_case_result_deps_hint"));
		}
		deps(){
			return "";
		}
		Deps(){
			const obj = new this.$.$mol_view();
			(obj.attr) = () => ({"title": (this.deps_hint())});
			(obj.sub) = () => ([(this.deps())]);
			return obj;
		}
		Stats_deps(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["📦", (this.Deps())]);
			return obj;
		}
		stats(){
			return [
				(this.Stats_main()), 
				(this.Stats_mem()), 
				(this.Stats_size()), 
				(this.Stats_deps())
			];
		}
		Stats(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.stats()));
			return obj;
		}
		error(){
			return "";
		}
		Error(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.error())]);
			return obj;
		}
		result(){
			const obj = new this.$.$hyoo_js_perf_stats();
			return obj;
		}
		sub(){
			return [
				(this.Portions()), 
				(this.Stats()), 
				(this.Error())
			];
		}
	};
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Frequency_portion"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Memory_portion"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Size_portion"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Deps_portion"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Portions"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Frequency"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Time"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Iterations"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Stats_main"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Memory_per_iteration"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Memory"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Stats_mem"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Size"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Stats_size"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Deps"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Stats_deps"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Stats"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "Error"));
	($mol_mem(($.$hyoo_js_perf_case_result.prototype), "result"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_js_perf_case_result extends $.$hyoo_js_perf_case_result {
            sub() {
                if (!this.result())
                    return [];
                return this.result().error ? [this.Error()] : [this.Stats(), this.Portions()];
            }
            portions() {
                const result = this.result();
                return [
                    ...result.frequency ? [this.Frequency_portion()] : [],
                    ...result.memory ? [this.Memory_portion()] : [],
                    ...result.size ? [this.Size_portion(), this.Deps_portion()] : [],
                ];
            }
            stats() {
                const result = this.result();
                return [
                    ...result.frequency ? [this.Stats_main()] : [],
                    ...result.memory ? [this.Stats_mem()] : [],
                    ...result.size ? [this.Stats_size(), this.Stats_deps()] : [],
                ];
            }
            error() {
                return `${this.result().error}`;
            }
            iterations() {
                return $mol_si_short(this.result().iterations, 'It');
            }
            frequency() {
                return $mol_si_short(this.result().frequency, 'Hz');
            }
            time_total() {
                return $mol_si_short(this.result().time / 1000, 's');
            }
            memory_total() {
                const val = this.result().memory;
                return val ? $mol_si_short(val, 'B') : '?B';
            }
            memory_per_iteration() {
                const val = this.result().memory_per_iteration;
                return val ? $mol_si_short(val, 'B') : '?B';
            }
            size() {
                return this.result().size;
            }
            deps() {
                return $mol_si_short(this.result().deps, 'B');
            }
            frequency_portion() {
                return this.result().frequency_portion;
            }
            memory_portion() {
                return this.result().memory_portion;
            }
            size_portion() {
                return this.result().size_portion;
            }
            deps_portion() {
                return this.result().deps_portion;
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_js_perf_case_result.prototype, "portions", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf_case_result.prototype, "stats", null);
        $$.$hyoo_js_perf_case_result = $hyoo_js_perf_case_result;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/js/perf/case/result/result.view.css", "[hyoo_js_perf_case_result] {\n\tpadding: .5rem .75rem .25rem;\n\tflex-direction: column;\n\tflex: 1 1 24rem;\n}\n\n[hyoo_js_perf_case_result] > * {\n\tdisplay: flex;\n}\n\n[hyoo_js_perf_case_result_stats] {\n\tdisplay: flex;\n\twhite-space: pre;\n\tjustify-content: space-between;\n}\n\n[hyoo_js_perf_case_result_stats] > * {\n\tword-break: keep-all;\n\twhite-space: nowrap;\n\t/* margin: 0 .5rem; */\n}\n\n[hyoo_js_perf_case_result_stats_main],\n[hyoo_js_perf_case_result_stats_mem] {\n\tdisplay: contents;\n}\n\n[hyoo_js_perf_case_result_perf],\n[hyoo_js_perf_case_result_memory] {\n\tflex-direction: column;\n}\n\n[hyoo_js_perf_case_result_frequency],\n[hyoo_js_perf_case_result_memory_per_iteration] {\n\ttext-shadow: 0 0;\n}\n\n[hyoo_js_perf_case_result_error] {\n\tcolor: crimson;\n\ttext-shadow: 0 0;\n}\n\n[hyoo_js_perf_case_result_portions] {\n\tgap: .75rem;\n}\n\n[hyoo_js_perf_case_result] [mol_portion] {\n\tflex: 1 1 50%;\n\twidth: auto;\n}\n\n[hyoo_js_perf_case_result]:nth-child(1) [mol_portion_indicator] {\n\tbackground-color: dimgray;\n}\n\n[hyoo_js_perf_case_result]:nth-child(2) [mol_portion_indicator] {\n\tbackground-color: royalblue;\n}\n\n[hyoo_js_perf_case_result]:nth-child(3) [mol_portion_indicator] {\n\tbackground-color: orange;\n}\n\n[hyoo_js_perf_case_result]:nth-child(2) [hyoo_js_perf_case_result_frequency],\n[hyoo_js_perf_case_result]:nth-child(2) [hyoo_js_perf_case_result_memory_per_iteration] {\n\tcolor: royalblue;\n}\n\n[hyoo_js_perf_case_result]:nth-child(3) [hyoo_js_perf_case_result_frequency],\n[hyoo_js_perf_case_result]:nth-child(3) [hyoo_js_perf_case_result_memory_per_iteration] {\n\tcolor: orange;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_play) = class $mol_icon_play extends ($.$mol_icon) {
		path(){
			return "M8,5.14V19.14L19,12.14L8,5.14Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_flash) = class $mol_icon_flash extends ($.$mol_icon) {
		path(){
			return "M7,2V13H10V22L17,10H13L17,2H7Z";
		}
	};


;
"use strict";

;
	($.$mol_follower) = class $mol_follower extends ($.$mol_ghost) {
		transform(){
			return "";
		}
		Anchor(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		align(){
			return [-.5, -.5];
		}
		offset(){
			return [0, 0];
		}
		style(){
			return {...(super.style()), "transform": (this.transform())};
		}
	};
	($mol_mem(($.$mol_follower.prototype), "Anchor"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_follower extends $.$mol_follower {
            pos() {
                const self_rect = this.view_rect();
                const prev = $mol_wire_probe(() => this.pos());
                const anchor_rect = this.Anchor()?.view_rect();
                if (!anchor_rect)
                    return null;
                const offset = this.offset();
                const align = this.align();
                const left = Math.floor((prev?.left ?? 0)
                    - (self_rect?.left ?? 0)
                    + (self_rect?.width ?? 0) * align[0]
                    + (anchor_rect?.left ?? 0)
                    + offset[0] * (anchor_rect?.width ?? 0));
                const top = Math.floor((prev?.top ?? 0)
                    - (self_rect?.top ?? 0)
                    + (self_rect?.height ?? 0) * align[1]
                    + (anchor_rect?.top ?? 0)
                    + offset[1] * (anchor_rect?.height ?? 0));
                return { left, top };
            }
            transform() {
                const pos = this.pos();
                if (!pos)
                    return 'scale(0)';
                const { left, top } = pos;
                return `translate( ${left}px, ${top}px )`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_follower.prototype, "pos", null);
        __decorate([
            $mol_mem
        ], $mol_follower.prototype, "transform", null);
        $$.$mol_follower = $mol_follower;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/follower/follower.view.css", "[mol_follower] {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\ttransition: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_dump_value) = class $mol_dump_value extends ($.$mol_view) {
		simple(){
			return "";
		}
		Simple(){
			const obj = new this.$.$mol_text_code();
			(obj.text) = () => ((this.simple()));
			return obj;
		}
		expanded(next){
			if(next !== undefined) return next;
			return false;
		}
		expandable(){
			return true;
		}
		expand_all(next){
			if(next !== undefined) return next;
			return null;
		}
		expand_title(){
			return "";
		}
		Expand_title(){
			const obj = new this.$.$mol_text_code();
			(obj.text) = () => ((this.expand_title()));
			return obj;
		}
		Expand_head(){
			const obj = new this.$.$mol_check_expand();
			(obj.minimal_height) = () => (24);
			(obj.minimal_width) = () => (24);
			(obj.expanded) = (next) => ((this.expanded(next)));
			(obj.expandable) = () => ((this.expandable()));
			(obj.clicks) = (next) => ((this.expand_all(next)));
			(obj.label) = () => ([(this.Expand_title())]);
			return obj;
		}
		preview_dom(){
			return null;
		}
		preview(){
			return null;
		}
		Preview_dom(){
			const obj = new this.$.$mol_view();
			(obj.dom_node) = () => ((this.preview_dom()));
			(obj.render) = () => ((this.preview()));
			return obj;
		}
		Preview(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Preview_dom())]);
			return obj;
		}
		row_values(id){
			return [];
		}
		prototypes(){
			return false;
		}
		Row(id){
			const obj = new this.$.$mol_dump_list();
			(obj.values) = () => ((this.row_values(id)));
			(obj.prototypes) = () => ((this.prototypes()));
			(obj.preview_show) = () => ((this.preview_show()));
			return obj;
		}
		expand_content(){
			return [(this.Preview()), (this.Row("0"))];
		}
		Expand(){
			const obj = new this.$.$mol_expander();
			(obj.expanded) = (next) => ((this.expanded(next)));
			(obj.Trigger) = () => ((this.Expand_head()));
			(obj.content) = () => ((this.expand_content()));
			return obj;
		}
		value(next){
			if(next !== undefined) return next;
			return null;
		}
		preview_show(next){
			if(next !== undefined) return next;
			return true;
		}
		sub(){
			return [(this.Simple()), (this.Expand())];
		}
	};
	($mol_mem(($.$mol_dump_value.prototype), "Simple"));
	($mol_mem(($.$mol_dump_value.prototype), "expanded"));
	($mol_mem(($.$mol_dump_value.prototype), "expand_all"));
	($mol_mem(($.$mol_dump_value.prototype), "Expand_title"));
	($mol_mem(($.$mol_dump_value.prototype), "Expand_head"));
	($mol_mem(($.$mol_dump_value.prototype), "Preview_dom"));
	($mol_mem(($.$mol_dump_value.prototype), "Preview"));
	($mol_mem_key(($.$mol_dump_value.prototype), "Row"));
	($mol_mem(($.$mol_dump_value.prototype), "Expand"));
	($mol_mem(($.$mol_dump_value.prototype), "value"));
	($mol_mem(($.$mol_dump_value.prototype), "preview_show"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_dump_value extends $.$mol_dump_value {
            sub() {
                const value = this.value();
                if (!value)
                    return [this.Simple()];
                if (typeof value === 'object')
                    return [this.Expand()];
                if (typeof value === 'function')
                    return [this.Expand()];
                return [this.Simple()];
            }
            simple() {
                const value = this.value();
                if (typeof value === 'number')
                    return value.toLocaleString('en').replaceAll(',', '_');
                if (typeof value === 'bigint')
                    return value.toLocaleString('en').replaceAll(',', '_');
                return value ? String(value) : JSON.stringify(value) ?? 'undefined';
            }
            expand_title() {
                const value = this.value();
                if (typeof value === 'function') {
                    const name = Reflect.getOwnPropertyDescriptor(value, 'name')?.value;
                    const source = Function.prototype.toString.call(value);
                    const args = source.match(/^[^{=>]*?\(([\s\S]*?)\)/)?.[1] ?? source.match(/^([$\w]+)\s+=>/)?.[1] ?? '';
                    if (name)
                        return name + '(' + args + ')';
                }
                if (value instanceof RegExp)
                    return String(value);
                if (value instanceof Date)
                    return value.toISOString();
                const kind = Reflect.getOwnPropertyDescriptor(value, Symbol.toStringTag)?.value
                    ?? value.constructor.name
                    ?? 'Object';
                if (value instanceof Node) {
                    try {
                        switch (value.nodeType) {
                            case value.TEXT_NODE: return kind + ' ' + value.nodeValue?.trim();
                            case value.ELEMENT_NODE: return `<${value.localName}> ${value.id}`;
                            case value.DOCUMENT_NODE: return kind + ' ' + value.baseURI;
                        }
                    }
                    catch { }
                }
                return kind;
            }
            rows_values() {
                let value = this.value();
                const res = [];
                if (value instanceof Map) {
                    for (const [key, val] of value) {
                        res.push([key, '▶', val]);
                    }
                }
                if (value instanceof Set) {
                    for (const val of value) {
                        res.push([val]);
                    }
                }
                if (value instanceof Function) {
                    let source = Function.prototype.toString.call(value)
                        .replace(/^.*?\{\r?\n?/, '')
                        .replace(/}$/, '')
                        .trimEnd();
                    const indent = source.match(/^\s*/)[0];
                    source = source.replace(new RegExp(`^${indent}`, 'gm'), '\t');
                    res.push([source]);
                }
                if (value instanceof Element) {
                    try {
                        for (const kid of value.childNodes) {
                            res.push([kid]);
                        }
                        for (const attr of value.attributes) {
                            if (attr.nodeName === 'id')
                                continue;
                            res.push([attr.nodeName, '=', attr.nodeValue]);
                        }
                    }
                    catch { }
                }
                if (value && (typeof value === 'object' || typeof value === 'function')) {
                    for (const key of Reflect.ownKeys(value)) {
                        const prefix = String(key) + '∶';
                        const descr = Reflect.getOwnPropertyDescriptor(value, key);
                        if ('value' in descr) {
                            const line = [prefix, descr.value];
                            res.push(line);
                        }
                        else {
                            res.push([prefix, descr.get, descr.set]);
                        }
                    }
                    if (this.prototypes()) {
                        res.push(['__proto__:', Reflect.getPrototypeOf(value)]);
                    }
                }
                return res;
            }
            preview_dom() {
                const value = this.value();
                if (value instanceof Element) {
                    if ($mol_try(() => value.localName) instanceof Error)
                        return null;
                    if (value.isConnected)
                        return null;
                    return value;
                }
                return null;
            }
            expand_content() {
                return [
                    ...this.preview_show() && this.preview_dom() ? [this.Preview()] : [],
                    ...this.rows_values().map((_, index) => this.Row(index)),
                ];
            }
            expandable() {
                return this.expand_content().length > 0;
            }
            row_values(index) {
                return this.rows_values()[index];
            }
            expand_all(event) {
                this.expanded(true);
                for (const row of this.expand_content()) {
                    if (!(row instanceof $mol_dump_list))
                        continue;
                    if (row.values()[0] === '__proto__:')
                        continue;
                    row.expand_all(event);
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "sub", null);
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "simple", null);
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "expand_title", null);
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "rows_values", null);
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "preview_dom", null);
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "expand_content", null);
        $$.$mol_dump_value = $mol_dump_value;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/dump/value/value.view.css", "[mol_dump_value] {\n\tmin-height: 2.5rem;\n\tmin-width: 2.5rem;\n}\n\n[mol_dump_value_simple] {\n\tpadding: 0;\n}\n\n[mol_dump_value_expand_content] {\n\tpadding-left: 1.5rem;\n\talign-items: flex-start;\n}\n\n[mol_dump_value_expand_title_rows],\n[mol_dump_value_simple_rows],\n[mol_dump_value_expand_head] {\n\tpadding: 0;\n\tgap: 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_dump_list) = class $mol_dump_list extends ($.$mol_view) {
		dump_value(id){
			return null;
		}
		dump_expanded(id, next){
			if(next !== undefined) return next;
			return false;
		}
		prototypes(){
			return false;
		}
		preview_show(){
			return true;
		}
		Dump(id){
			const obj = new this.$.$mol_dump_value();
			(obj.value) = () => ((this.dump_value(id)));
			(obj.expanded) = (next) => ((this.dump_expanded(id, next)));
			(obj.prototypes) = () => ((this.prototypes()));
			(obj.preview_show) = () => ((this.preview_show()));
			return obj;
		}
		values(){
			return [];
		}
		sub(){
			return [(this.Dump("0"))];
		}
	};
	($mol_mem_key(($.$mol_dump_list.prototype), "dump_expanded"));
	($mol_mem_key(($.$mol_dump_list.prototype), "Dump"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_dump_list extends $.$mol_dump_list {
            sub() {
                return this.values().map((_, index) => this.Dump(index));
            }
            dump_value(index) {
                return this.values()[index];
            }
            expand_all(event) {
                this.Dump(1).expanded(true);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_dump_list.prototype, "sub", null);
        $$.$mol_dump_list = $mol_dump_list;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/dump/list/list.view.css", "[mol_dump_list] {\n\talign-items: flex-start;\n\tgap: var(--mol_gap_space);\n}\n\n[mol_dump_list_dump]:first-child {\n\tposition: sticky;\n\ttop: 0;\n}\n");
})($ || ($ = {}));

;
	($.$hyoo_js_eval) = class $hyoo_js_eval extends ($.$mol_book2) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		Submit(){
			const obj = new this.$.$mol_hotkey();
			(obj.key) = () => ({"enter": (next) => (this.submit(next))});
			(obj.mod_ctrl) = () => (true);
			return obj;
		}
		Clear_icon(){
			const obj = new this.$.$mol_icon_plus();
			return obj;
		}
		Clear(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ({"code": null});
			(obj.sub) = () => ([(this.Clear_icon())]);
			return obj;
		}
		Source(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ("https://github.com/hyoo-ru/eval.js.hyoo.ru");
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		menu_link_title(id){
			return "";
		}
		menu_link_code(id){
			return "";
		}
		Menu_link(id){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ((this.menu_link_title(id)));
			(obj.arg) = () => ({"code": (this.menu_link_code(id))});
			return obj;
		}
		menu(){
			return [(this.Menu_link("default"))];
		}
		Menu(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.menu()));
			return obj;
		}
		Menu_page(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_js_eval_Menu_page_title")));
			(obj.tools) = () => ([
				(this.Clear()), 
				(this.Source()), 
				(this.Lights())
			]);
			(obj.body) = () => ([(this.Menu())]);
			return obj;
		}
		perf(){
			return "";
		}
		Perf(){
			const obj = new this.$.$mol_link_iconed();
			(obj.title) = () => ("");
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_eval_Perf_hint")));
			(obj.uri) = () => ((this.perf()));
			return obj;
		}
		Bookmark_icon(){
			const obj = new this.$.$mol_icon_bookmark_outline();
			return obj;
		}
		bookmark(next){
			if(next !== undefined) return next;
			return false;
		}
		Bookmark(){
			const obj = new this.$.$mol_check_icon();
			(obj.Icon) = () => ((this.Bookmark_icon()));
			(obj.checked) = (next) => ((this.bookmark(next)));
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_eval_Bookmark_hint")));
			return obj;
		}
		Run_icon(){
			const obj = new this.$.$mol_icon_play();
			return obj;
		}
		run(next){
			if(next !== undefined) return next;
			return true;
		}
		Run(){
			const obj = new this.$.$mol_check_icon();
			(obj.Icon) = () => ((this.Run_icon()));
			(obj.checked) = (next) => ((this.run(next)));
			(obj.hint) = () => ((this.result_label()));
			return obj;
		}
		bring(){
			return (this.Code().bring());
		}
		code(next){
			if(next !== undefined) return next;
			return "";
		}
		Code(){
			const obj = new this.$.$mol_textarea();
			(obj.hint) = () => ("javascript..");
			(obj.sidebar_showed) = () => (true);
			(obj.spellcheck) = () => (false);
			(obj.value) = (next) => ((this.code(next)));
			return obj;
		}
		error_anchor(){
			return null;
		}
		error_offset(){
			return [0, 0];
		}
		error_message(){
			return "";
		}
		Error_icon(){
			const obj = new this.$.$mol_icon_flash();
			return obj;
		}
		Error_view(){
			const obj = new this.$.$mol_view();
			(obj.attr) = () => ({"title": (this.error_message())});
			(obj.sub) = () => ([(this.Error_icon())]);
			return obj;
		}
		Error_mark(){
			const obj = new this.$.$mol_follower();
			(obj.Anchor) = () => ((this.error_anchor()));
			(obj.offset) = () => ((this.error_offset()));
			(obj.Sub) = () => ((this.Error_view()));
			return obj;
		}
		Code_page(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_js_eval_Code_page_title")));
			(obj.bring) = () => ((this.bring()));
			(obj.tools) = () => ([
				(this.Perf()), 
				(this.Bookmark()), 
				(this.Run())
			]);
			(obj.body) = () => ([(this.Code()), (this.Error_mark())]);
			return obj;
		}
		result_label(){
			return (this.$.$mol_locale.text("$hyoo_js_eval_result_label"));
		}
		Results_close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Results_close(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ({"run": "false"});
			(obj.sub) = () => ([(this.Results_close_icon())]);
			return obj;
		}
		UI(){
			const obj = new this.$.$mol_list();
			(obj.sub_visible) = () => (null);
			return obj;
		}
		log(id){
			return [];
		}
		Log(id){
			const obj = new this.$.$mol_dump_list();
			(obj.values) = () => ((this.log(id)));
			(obj.prototypes) = () => (true);
			return obj;
		}
		logs(){
			return [(this.Log("0"))];
		}
		Result(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.logs()));
			return obj;
		}
		Result_page(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.result_label()));
			(obj.tools) = () => ([(this.Results_close())]);
			(obj.body) = () => ([(this.UI()), (this.Result())]);
			return obj;
		}
		Placeholder(){
			return null;
		}
		plugins(){
			return [(this.Theme()), (this.Submit())];
		}
		bookmark_list(next){
			if(next !== undefined) return next;
			return ["// Example Notebook\n\n// load external script\nconst {\n\t$mol_compare_deep: compare\n} = $mol_import.module(\n\t'https://esm.sh/mol_compare_deep'\n).default\n\n// local vars\nconst one = [1]\none.push( one )\nconst left =  { a: [1,one], b:    one  }\nconst right = { a:    one,  b: [1,one] }\n\n// result\ncompare( left, right )"];
		}
		pages(){
			return [
				(this.Menu_page()), 
				(this.Code_page()), 
				(this.Result_page())
			];
		}
	};
	($mol_mem(($.$hyoo_js_eval.prototype), "Theme"));
	($mol_mem(($.$hyoo_js_eval.prototype), "submit"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Submit"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Clear_icon"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Clear"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Source"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Lights"));
	($mol_mem_key(($.$hyoo_js_eval.prototype), "Menu_link"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Menu"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Menu_page"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Perf"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Bookmark_icon"));
	($mol_mem(($.$hyoo_js_eval.prototype), "bookmark"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Bookmark"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Run_icon"));
	($mol_mem(($.$hyoo_js_eval.prototype), "run"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Run"));
	($mol_mem(($.$hyoo_js_eval.prototype), "code"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Code"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Error_icon"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Error_view"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Error_mark"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Code_page"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Results_close_icon"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Results_close"));
	($mol_mem(($.$hyoo_js_eval.prototype), "UI"));
	($mol_mem_key(($.$hyoo_js_eval.prototype), "Log"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Result"));
	($mol_mem(($.$hyoo_js_eval.prototype), "Result_page"));
	($mol_mem(($.$hyoo_js_eval.prototype), "bookmark_list"));


;
"use strict";
var $;
(function ($) {
    function $mol_wire_field(host, field, descr) {
        if (!descr)
            descr = Reflect.getOwnPropertyDescriptor(host, field);
        const _get = descr?.get || $mol_const(descr?.value);
        const _set = descr?.set || function (next) {
            $mol_wire_atom.solo(this, _get).put(next);
        };
        const sup = Reflect.getPrototypeOf(host);
        const sup_descr = Reflect.getOwnPropertyDescriptor(sup, field);
        Object.defineProperty(_get, 'name', { value: sup_descr?.get?.name ?? field });
        Object.defineProperty(_set, 'name', { value: sup_descr?.set?.name ?? field });
        function get() {
            return $mol_wire_atom.solo(this, _get).sync();
        }
        const temp = $mol_wire_task.getter(_set);
        function set(next) {
            temp(this, [next]).sync();
        }
        Object.defineProperty(get, 'name', { value: _get.name + '$' });
        Object.defineProperty(set, 'name', { value: _set.name + '@' });
        Object.assign(get, { orig: _get });
        Object.assign(set, { orig: _set });
        const { value, writable, ...descr2 } = { ...descr, get, set };
        Reflect.defineProperty(host, field, descr2);
        return descr2;
    }
    $.$mol_wire_field = $mol_wire_field;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_easing(next) {
        const atom = $mol_wire_auto();
        if (!(atom instanceof $mol_wire_atom))
            $mol_fail(new Error('Allowed only inside atom'));
        const prev = atom.result() ?? next;
        if (typeof prev !== 'number')
            return next;
        const current = (prev * 2 + next) / 3;
        const diff = Math.abs(current - next);
        if (diff < 1)
            return next;
        $mol_state_time.now(0);
        return current;
    }
    $.$mol_wire_easing = $mol_wire_easing;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_patch(obj) {
        for (const field of Reflect.ownKeys(obj)) {
            const descr = Reflect.getOwnPropertyDescriptor(obj, field);
            if (!descr.configurable)
                continue;
            if (!descr.get)
                continue;
            const get = descr.get ?? (() => descr.value);
            const set = descr.set ?? (next => descr.value = next);
            Reflect.defineProperty(obj, field, {
                configurable: true,
                enumerable: descr.enumerable,
                get() {
                    const atom = $mol_wire_atom.solo(obj, get);
                    atom.watch();
                    return atom.sync();
                },
                set(next) {
                    const atom = $mol_wire_atom.solo(obj, get);
                    set.call(this, next);
                    atom.refresh();
                },
            });
        }
    }
    $.$mol_wire_patch = $mol_wire_patch;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_wire_let(host) {
        for (const field of Object.keys(host)) {
            host[field] = new $mol_wire_atom(field, host[field], host).channel();
        }
        return host;
    }
    $.$mol_wire_let = $mol_wire_let;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_set extends Set {
        pub = new $mol_wire_pub;
        has(value) {
            this.pub.promote();
            return super.has(value);
        }
        entries() {
            this.pub.promote();
            return super.entries();
        }
        keys() {
            this.pub.promote();
            return super.keys();
        }
        values() {
            this.pub.promote();
            return super.values();
        }
        forEach(task, self) {
            this.pub.promote();
            super.forEach(task, self);
        }
        [Symbol.iterator]() {
            this.pub.promote();
            return super[Symbol.iterator]();
        }
        get size() {
            this.pub.promote();
            return super.size;
        }
        add(value) {
            if (super.has(value))
                return this;
            super.add(value);
            this.pub.emit();
            return this;
        }
        delete(value) {
            const res = super.delete(value);
            if (res)
                this.pub.emit();
            return res;
        }
        clear() {
            if (!super.size)
                return;
            super.clear();
            this.pub.emit();
        }
        item(val, next) {
            if (next === undefined)
                return this.has(val);
            if (next)
                this.add(val);
            else
                this.delete(val);
            return next;
        }
    }
    $.$mol_wire_set = $mol_wire_set;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_dict extends Map {
        pub = new $mol_wire_pub;
        has(key) {
            this.pub.promote();
            return super.has(key);
        }
        get(key) {
            this.pub.promote();
            return super.get(key);
        }
        entries() {
            this.pub.promote();
            return super.entries();
        }
        keys() {
            this.pub.promote();
            return super.keys();
        }
        values() {
            this.pub.promote();
            return super.values();
        }
        forEach(task, self) {
            this.pub.promote();
            super.forEach(task, self);
        }
        [Symbol.iterator]() {
            this.pub.promote();
            return super[Symbol.iterator]();
        }
        get size() {
            this.pub.promote();
            return super.size;
        }
        set(key, value) {
            if (super.get(key) === value)
                return this;
            super.set(key, value);
            this.pub?.emit();
            return this;
        }
        delete(key) {
            const res = super.delete(key);
            if (res)
                this.pub.emit();
            return res;
        }
        clear() {
            if (!super.size)
                return;
            super.clear();
            this.pub.emit();
        }
        item(key, next) {
            if (next === undefined)
                return this.get(key) ?? null;
            if (next === null)
                this.delete(key);
            else
                this.set(key, next);
            return next;
        }
    }
    $.$mol_wire_dict = $mol_wire_dict;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_log extends $mol_object2 {
        static watch(task) {
            return task;
        }
        static track(fiber) {
            const prev = $mol_wire_probe(() => this.track(fiber));
            let next;
            try {
                next = fiber.sync();
            }
            finally {
                for (const pub of fiber.pub_list) {
                    if (pub instanceof $mol_wire_fiber) {
                        this.track(pub);
                    }
                }
            }
            if (fiber.host === this)
                return next;
            if ($mol_compare_deep(prev, next)) {
                this.$.$mol_log3_rise({
                    message: '💧 Same',
                    place: fiber,
                });
            }
            else if (prev !== undefined) {
                this.$.$mol_log3_rise({
                    message: '🔥 Next',
                    place: fiber,
                    prev,
                });
            }
            return next;
        }
        static active() {
            try {
                this.watch()?.();
            }
            catch (error) {
                $mol_fail_log(error);
            }
            finally {
                for (const pub of $mol_wire_auto().pub_list) {
                    if (pub instanceof $mol_wire_fiber) {
                        this.track(pub);
                    }
                }
            }
        }
    }
    __decorate([
        $mol_mem
    ], $mol_wire_log, "watch", null);
    __decorate([
        $mol_mem_key
    ], $mol_wire_log, "track", null);
    __decorate([
        $mol_mem
    ], $mol_wire_log, "active", null);
    $.$mol_wire_log = $mol_wire_log;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    var $$;
    (function ($$) {
        class $hyoo_js_eval extends $.$hyoo_js_eval {
            code(next) {
                return this.$.$mol_state_arg.value('code', next) ?? '';
            }
            run(next) {
                return this.$.$mol_state_arg.value('run', next?.valueOf && String(next)) === 'true';
            }
            submit() {
                this.run(true);
            }
            perf() {
                const sources = encodeURIComponent(JSON.stringify([this.code()]));
                return `https://perf.js.hyoo.ru/#!sources=${sources}`;
            }
            pages() {
                return [
                    this.Menu_page(),
                    this.Code_page(),
                    ...this.run() ? [this.Result_page()] : [],
                ];
            }
            bookmark_list(next) {
                return this.$.$mol_state_local.value('snippets', next) ?? super.bookmark_list();
            }
            bookmark(next) {
                const prev = this.bookmark_list();
                const code = this.code();
                if (next === undefined) {
                    return prev.includes(code);
                }
                else {
                    const list = prev.filter(str => str !== code);
                    if (next)
                        list.unshift(code);
                    this.bookmark_list(list);
                    return next;
                }
            }
            menu() {
                return this.bookmark_list().map((_, index) => this.Menu_link(index));
            }
            menu_link_code(index) {
                return this.bookmark_list()[index];
            }
            menu_link_title(index) {
                return this.bookmark_list()[index]
                    .replace(/\n[\s\S]*/, '')
                    .replace(/^\/\/ +/, '');
            }
            code_enhanced() {
                let code = this.code();
                code = code.replaceAll(/^([ \t]*)(?:const|var|let|class|function) +(\w+)/mig, (found, indent, name) => `__spy__( "${indent}${name} =", ()=>[ ${name} ] );${found}`);
                return code;
            }
            execute() {
                if (!this.run())
                    return [];
                this.code();
                this.result([]);
                clearTimeout(this._defer_spy);
                this.spy_queue.length = 0;
                const console = new Proxy(this.$.console, {
                    get: (target, field) => {
                        if (typeof target[field] !== 'function')
                            return target[field];
                        return (...args) => {
                            this.spy(`${String(field)}:`, () => [...args]);
                            return target[field](...args);
                        };
                    }
                });
                const __spy__ = this.spy.bind(this);
                let __res__;
                try {
                    __res__ = ['=', eval(this.code_enhanced())];
                }
                catch (error) {
                    __res__ = ['=', error];
                }
                __spy__('=', () => __res__.slice(1));
                this.spy_run();
                return __res__;
            }
            error_pos() {
                const [eq, val] = this.execute();
                if (!(val instanceof Error))
                    return null;
                const pos = val.stack.match(/(?:<anonymous>| eval).*:(\d+:\d+)/);
                if (!pos)
                    return null;
                const [line, col] = pos[1].split(':').map(Number);
                const row = this.Code().View().Row(line);
                const shift = this.code_enhanced().split('\n')[line - 1]
                    ?.match(/^\w*__spy__\( .*?\);/)?.[0]?.length ?? 0;
                return row.find_pos(col - 1 - shift);
            }
            error_anchor() {
                return this.error_pos()?.token;
            }
            error_offset() {
                const pos = this.error_pos();
                return [pos.offset / pos.token.haystack().length, 0];
            }
            error_message() {
                return this.execute()[1]?.message;
            }
            Error_mark() {
                return this.run() ? super.Error_mark() : null;
            }
            spy_queue = [];
            _defer_spy = 0;
            spy_run() {
                if (!this.run())
                    return;
                this.result([
                    ...this.result(),
                    ...this.spy_queue.splice(0).map(([name, task]) => {
                        try {
                            return [name].concat(task());
                        }
                        catch (error) {
                            if (error instanceof ReferenceError) {
                                this.spy_queue.push([name, task]);
                                if (!this._defer_spy) {
                                    this._defer_spy = setTimeout(() => {
                                        this._defer_spy = 0;
                                        this.spy_run();
                                    }, 100);
                                }
                            }
                            else {
                                return [name, error];
                            }
                        }
                    }).filter(Boolean),
                ]);
            }
            spy(name, task) {
                this.spy_queue.push([name, task]);
                if (this.spy_queue.length > 1)
                    return;
                Promise.resolve().then(() => this.spy_run());
            }
            result(next = []) {
                return next;
            }
            rejection_listener() {
                return new $mol_dom_listener(window, 'unhandledrejection', (event) => {
                    this.spy('Unhandled', () => event.reason);
                });
            }
            logs() {
                this.rejection_listener();
                this.execute();
                return this.result().map((_, index) => this.Log(index));
            }
            log(index) {
                return this.result()[index];
            }
            html(next = '') {
                const root = this.UI().dom_node();
                root.innerHTML = next;
                return new Proxy((query) => root.querySelector(query), {
                    get: ($, id) => $('#' + id),
                });
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "code", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "run", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "perf", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "pages", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "bookmark_list", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "bookmark", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "menu", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_eval.prototype, "menu_link_title", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "code_enhanced", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "execute", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "error_pos", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "error_offset", null);
        __decorate([
            $mol_action
        ], $hyoo_js_eval.prototype, "spy_run", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "result", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "rejection_listener", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_eval.prototype, "logs", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_eval.prototype, "log", null);
        $$.$hyoo_js_eval = $hyoo_js_eval;
    })($$ = $_1.$$ || ($_1.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/js/eval/eval.view.css", "[hyoo_js_eval_menu_page] {\n\tflex: 0 0 auto;\n}\n\n[hyoo_js_eval_code_page] {\n\tflex: 1 0 auto;\n}\n\n[hyoo_js_eval_code] {\n\tflex: 0 0 auto;\n}\n\n[hyoo_js_eval_result] {\n\tpadding: var(--mol_gap_text);\n}\n\n[hyoo_js_eval_result_page] {\n\tflex: 1 0 40rem;\n}\n\n[hyoo_js_eval_error_icon] {\n\tcolor: var(--mol_theme_focus);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$hyoo_js_perf_case_row) = class $hyoo_js_perf_case_row extends ($.$mol_view) {
		sample(){
			return "";
		}
		Eval_result(){
			return (this.Eval().Result());
		}
		prefix_showed(next){
			if(next !== undefined) return next;
			return true;
		}
		measurable(next){
			if(next !== undefined) return next;
			return true;
		}
		Measurable(){
			const obj = new this.$.$mol_check_box();
			(obj.checked) = (next) => ((this.measurable(next)));
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_case_row_Measurable_hint")));
			return obj;
		}
		changable(){
			return true;
		}
		title(next){
			if(next !== undefined) return next;
			return "";
		}
		Title(){
			const obj = new this.$.$mol_string_button();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_case_row_Title_hint")));
			(obj.enabled) = () => ((this.changable()));
			(obj.value) = (next) => ((this.title(next)));
			return obj;
		}
		eval_standalone(){
			return "";
		}
		Eval_sandalone(){
			const obj = new this.$.$mol_link_iconed();
			(obj.title) = () => ("");
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_case_row_Eval_sandalone_hint")));
			(obj.uri) = () => ((this.eval_standalone()));
			return obj;
		}
		Prefix_tools(){
			const obj = new this.$.$mol_bar();
			(obj.sub) = () => ([
				(this.Measurable()), 
				(this.Title()), 
				(this.Eval_sandalone())
			]);
			return obj;
		}
		prefix(next){
			if(next !== undefined) return next;
			return "";
		}
		Prefix_code(){
			const obj = new this.$.$mol_textarea();
			(obj.enabled) = () => ((this.changable()));
			(obj.spellcheck) = () => (false);
			(obj.value) = (next) => ((this.prefix(next)));
			(obj.hint) = () => ("let count = {#}");
			return obj;
		}
		Prefix(){
			const obj = new this.$.$mol_expander();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_case_row_Prefix_title")));
			(obj.expanded) = (next) => ((this.prefix_showed(next)));
			(obj.minimal_width) = () => (150);
			(obj.Tools) = () => ((this.Prefix_tools()));
			(obj.content) = () => ([(this.Prefix_code())]);
			return obj;
		}
		source_showed(next){
			if(next !== undefined) return next;
			return true;
		}
		drop(next){
			if(next !== undefined) return next;
			return null;
		}
		Drop_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Drop(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.drop(next)));
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_case_row_Drop_hint")));
			(obj.sub) = () => ([(this.Drop_icon())]);
			return obj;
		}
		dupe(next){
			if(next !== undefined) return next;
			return null;
		}
		Dupe_icon(){
			const obj = new this.$.$mol_icon_chevron_double_down();
			return obj;
		}
		Dupe(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.dupe(next)));
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_case_row_Dupe_hint")));
			(obj.sub) = () => ([(this.Dupe_icon())]);
			return obj;
		}
		swap(next){
			if(next !== undefined) return next;
			return null;
		}
		Swap_icon(){
			const obj = new this.$.$mol_icon_unfold_more_horizontal();
			return obj;
		}
		Swap(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.swap(next)));
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_case_row_Swap_hint")));
			(obj.sub) = () => ([(this.Swap_icon())]);
			return obj;
		}
		edit_tools(){
			return [
				(this.Drop()), 
				(this.Dupe()), 
				(this.Swap())
			];
		}
		Source_tools(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.edit_tools()));
			return obj;
		}
		source(next){
			if(next !== undefined) return next;
			return "";
		}
		Source_code(){
			const obj = new this.$.$mol_textarea();
			(obj.enabled) = () => ((this.changable()));
			(obj.spellcheck) = () => (false);
			(obj.value) = (next) => ((this.source(next)));
			(obj.hint) = () => ("res = {#} % count");
			return obj;
		}
		Source(){
			const obj = new this.$.$mol_expander();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_case_row_Source_title")));
			(obj.expanded) = (next) => ((this.source_showed(next)));
			(obj.minimal_width) = () => (150);
			(obj.Tools) = () => ((this.Source_tools()));
			(obj.content) = () => ([(this.Source_code())]);
			return obj;
		}
		eval_showed(next){
			if(next !== undefined) return next;
			return false;
		}
		Eval_labeler(){
			const obj = new this.$.$mol_expander();
			(obj.expanded) = (next) => ((this.eval_showed(next)));
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_case_row_Eval_labeler_title")));
			(obj.content) = () => ([(this.Eval_result())]);
			return obj;
		}
		result_title(id){
			return "";
		}
		result(id){
			const obj = new this.$.$hyoo_js_perf_stats();
			return obj;
		}
		Result(id){
			const obj = new this.$.$hyoo_js_perf_case_result();
			(obj.title) = () => ((this.result_title(id)));
			(obj.result) = () => ((this.result(id)));
			return obj;
		}
		result_rows(){
			return [
				(this.Result("0")), 
				(this.Result("1")), 
				(this.Result("2"))
			];
		}
		Results(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.result_rows()));
			return obj;
		}
		columns(){
			return [
				(this.Prefix()), 
				(this.Source()), 
				(this.Eval_labeler()), 
				(this.Results())
			];
		}
		results(){
			return [];
		}
		Eval(){
			const obj = new this.$.$hyoo_js_eval();
			(obj.code) = () => ((this.sample()));
			(obj.run) = () => ((this.eval_showed()));
			return obj;
		}
		sub(){
			return (this.columns());
		}
	};
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "prefix_showed"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "measurable"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Measurable"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "title"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Title"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Eval_sandalone"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Prefix_tools"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "prefix"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Prefix_code"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Prefix"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "source_showed"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "drop"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Drop_icon"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Drop"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "dupe"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Dupe_icon"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Dupe"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "swap"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Swap_icon"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Swap"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Source_tools"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "source"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Source_code"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Source"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "eval_showed"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Eval_labeler"));
	($mol_mem_key(($.$hyoo_js_perf_case_row.prototype), "result"));
	($mol_mem_key(($.$hyoo_js_perf_case_row.prototype), "Result"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Results"));
	($mol_mem(($.$hyoo_js_perf_case_row.prototype), "Eval"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_js_perf_case_row extends $.$hyoo_js_perf_case_row {
            columns() {
                return [
                    this.Prefix(),
                    this.Source(),
                    ...this.results().length > 1
                        ? [this.Results()]
                        : this.source()
                            ? [this.Eval_labeler()]
                            : [this.Results()]
                ];
            }
            result(level) {
                return this.results()[level];
            }
            result_title(level) {
                return ['🔠', '🥶', '🥵'][level] ?? '';
            }
            eval_standalone() {
                const code = this.sample();
                return `https://eval.js.hyoo.ru/#!code=${encodeURIComponent(code)}/run=true`;
            }
            edit_tools() {
                return this.changable() ? super.edit_tools() : [];
            }
            prefix_showed(next) {
                return next
                    ?? $mol_wire_probe(() => this.prefix_showed())
                    ?? this.prefix().split('\n').length <= 2;
            }
            source_showed(next) {
                return next
                    ?? $mol_wire_probe(() => this.source_showed())
                    ?? this.source().split('\n').length <= 2;
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_js_perf_case_row.prototype, "columns", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf_case_row.prototype, "prefix_showed", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf_case_row.prototype, "source_showed", null);
        $$.$hyoo_js_perf_case_row = $hyoo_js_perf_case_row;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/js/perf/case/row/row.view.css", "[hyoo_js_perf_case_row] {\n\tflex: 0 1 auto;\n\tflex-wrap: wrap;\n\tbackground: var(--mol_theme_card);\n\tborder-radius: var(--mol_gap_round);\n}\n\n[hyoo_js_perf_case_row_prefix] ,\n[hyoo_js_perf_case_row_source] {\n\tflex: 1 1 40rem;\n\tvertical-align: top;\n}\n\n[hyoo_js_perf_case_row_prefix_tools] {\n\tflex-grow: 1000;\n}\n\n[hyoo_js_perf_case_row_eval_labeler] {\n\tflex: 1 1 26rem;\n}\n[hyoo_js_perf_case_row_results] {\n\tflex: 1 1 26rem;\n\tflex-wrap: wrap;\n\talign-content: flex-start;\n}\n\n[hyoo_js_perf_case_row_eval_labeler_trigger] {\n\tflex-grow: 0;\n}\n\n[hyoo_js_perf_case_row_title] {\n\ttext-shadow: 0 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_check_group) = class $mol_check_group extends ($.$mol_check_box) {
		checks(){
			return [];
		}
		full(){
			return true;
		}
	};


;
	($.$mol_icon_check) = class $mol_icon_check extends ($.$mol_icon) {
		path(){
			return "M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_check_all) = class $mol_icon_check_all extends ($.$mol_icon) {
		path(){
			return "M0.41,13.41L6,19L7.41,17.58L1.83,12M22.24,5.58L11.66,16.17L7.5,12L6.07,13.41L11.66,19L23.66,7M18,7L16.59,5.58L10.24,11.93L11.66,13.34L18,7Z";
		}
	};


;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_check_group extends $.$mol_check_group {
            checked(next) {
                if (next !== undefined) {
                    for (const check of this.checks()) {
                        check.checked(next);
                    }
                    return next;
                }
                return this.checks().some(check => check.checked());
            }
            full() {
                return this.checks().every(check => check.checked());
            }
            Icon() {
                return this.full() ? new $mol_icon_check_all : new $mol_icon_tick;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_check_group.prototype, "checked", null);
        __decorate([
            $mol_mem
        ], $mol_check_group.prototype, "full", null);
        __decorate([
            $mol_mem
        ], $mol_check_group.prototype, "Icon", null);
        $$.$mol_check_group = $mol_check_group;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_share) = class $mol_icon_share extends ($.$mol_icon) {
		path(){
			return "M21,12L14,5V9C7,10 4,15 3,20C5.5,16.5 9,14.9 14,14.9V19L21,12Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_share_variant) = class $mol_icon_share_variant extends ($.$mol_icon) {
		path(){
			return "M18,16.08C17.24,16.08 16.56,16.38 16.04,16.85L8.91,12.7C8.96,12.47 9,12.24 9,12C9,11.76 8.96,11.53 8.91,11.3L15.96,7.19C16.5,7.69 17.21,8 18,8A3,3 0 0,0 21,5A3,3 0 0,0 18,2A3,3 0 0,0 15,5C15,5.24 15.04,5.47 15.09,5.7L8.04,9.81C7.5,9.31 6.79,9 6,9A3,3 0 0,0 3,12A3,3 0 0,0 6,15C6.79,15 7.5,14.69 8.04,14.19L15.16,18.34C15.11,18.55 15.08,18.77 15.08,19C15.08,20.61 16.39,21.91 18,21.91C19.61,21.91 20.92,20.61 20.92,19A2.92,2.92 0 0,0 18,16.08Z";
		}
	};


;
"use strict";

;
	($.$mol_button_share) = class $mol_button_share extends ($.$mol_button_minor) {
		Icon(){
			const obj = new this.$.$mol_icon_share_variant();
			return obj;
		}
		title(){
			return "";
		}
		uri(){
			return "";
		}
		capture(){
			return null;
		}
		hint(){
			return (this.$.$mol_locale.text("$mol_button_share_hint"));
		}
		sub(){
			return [(this.Icon()), (this.title())];
		}
	};
	($mol_mem(($.$mol_button_share.prototype), "Icon"));


;
"use strict";
var $;
(function ($) {
    function $mol_dom_serialize(node) {
        const serializer = new $mol_dom_context.XMLSerializer;
        return serializer.serializeToString(node);
    }
    $.$mol_dom_serialize = $mol_dom_serialize;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    async function $mol_dom_capture_svg(el) {
        function restyle(el, styles) {
            for (let i = 0; i < styles.length; ++i) {
                const prop = styles[i];
                el.style[prop] = styles[prop];
            }
        }
        function clone(el) {
            const re = el.cloneNode();
            if (el instanceof HTMLImageElement && !/^(data|blob):/.test(el.src)) {
                const canvas = $mol_jsx("canvas", { width: el.naturalWidth, height: el.naturalHeight });
                const context = canvas.getContext('2d');
                context.drawImage(el, 0, 0);
                try {
                    ;
                    re.src = canvas.toDataURL();
                }
                catch (error) {
                    $mol_fail_log(error);
                }
            }
            if (re instanceof HTMLInputElement) {
                re.setAttribute('value', el.value);
                if (el.checked)
                    re.setAttribute('checked', '');
            }
            if (re instanceof HTMLTextAreaElement) {
                re.setAttribute('value', el.value);
            }
            const styles = $mol_dom_context.getComputedStyle(el);
            restyle(re, styles);
            const before = $mol_dom_context.getComputedStyle(el, ':before');
            if (before.content[0] === '"') {
                const kid = $mol_jsx("span", null, JSON.parse(before.content));
                restyle(kid, before);
                re.appendChild(kid);
            }
            for (const kid of el.childNodes) {
                const dup = (kid.nodeType === kid.ELEMENT_NODE)
                    ? clone(kid)
                    : kid.cloneNode();
                re.appendChild(dup);
            }
            const after = $mol_dom_context.getComputedStyle(el, ':after');
            if (after.content[0] === '"') {
                const kid = $mol_jsx("span", null, JSON.parse(after.content));
                restyle(kid, after);
                re.appendChild(kid);
            }
            return re;
        }
        const { width, height } = el.getBoundingClientRect();
        return $mol_jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: `0 0 ${width} ${height}`, width: String(width), height: String(height) },
            $mol_jsx("foreignObject", { xmlns: "http://www.w3.org/2000/svg", width: String(width), height: String(height) }, clone(el)));
    }
    $.$mol_dom_capture_svg = $mol_dom_capture_svg;
    async function $mol_dom_capture_image(el) {
        const xml = $mol_dom_serialize(await $mol_dom_capture_svg(el));
        const uri = 'data:image/svg+xml,' + encodeURIComponent(xml);
        const image = $mol_jsx("img", { src: uri });
        await wait_load(image);
        return image;
    }
    $.$mol_dom_capture_image = $mol_dom_capture_image;
    async function $mol_dom_capture_canvas(el) {
        const image = await $mol_dom_capture_image(el);
        const canvas = $mol_jsx("canvas", { width: image.width, height: image.height });
        const context = canvas.getContext('2d');
        context.drawImage(image, 0, 0);
        return canvas;
    }
    $.$mol_dom_capture_canvas = $mol_dom_capture_canvas;
    function wait_load(el) {
        return new Promise((done, fail) => {
            el.onload = () => done(el);
            el.onerror = fail;
        });
    }
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_button_share extends $.$mol_button_share {
            capture() {
                return this.$.$mol_dom_context.document.body;
            }
            uri() {
                return this.$.$mol_state_arg.href();
            }
            async click() {
                const title = this.title();
                const url = this.uri() ?? undefined;
                const files = [];
                let el = this.capture();
                if (el) {
                    if (el instanceof $mol_view)
                        el = el.dom_tree();
                    const canvas = await $mol_dom_capture_canvas(el);
                    const blob = await new Promise(done => canvas.toBlob(done));
                    const file = new File([blob], title + '.png', { type: blob.type });
                    files.push(file);
                }
                await this.$.$mol_dom_context.navigator.share({ title, files, url });
            }
        }
        $$.$mol_button_share = $mol_button_share;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_directions) = class $mol_icon_directions extends ($.$mol_icon) {
		path(){
			return "M14,14.5V12H10V15H8V11A1,1 0 0,1 9,10H14V7.5L17.5,11M21.71,11.29L12.71,2.29H12.7C12.31,1.9 11.68,1.9 11.29,2.29L2.29,11.29C1.9,11.68 1.9,12.32 2.29,12.71L11.29,21.71C11.68,22.09 12.31,22.1 12.71,21.71L21.71,12.71C22.1,12.32 22.1,11.68 21.71,11.29Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_directions_fork) = class $mol_icon_directions_fork extends ($.$mol_icon) {
		path(){
			return "M3,4V12.5L6,9.5L9,13C10,14 10,15 10,15V21H14V14C14,14 14,13 13.47,12C12.94,11 12,10 12,10L9,6.58L11.5,4M18,4L13.54,8.47L14,9C14,9 14.93,10 15.47,11C15.68,11.4 15.8,11.79 15.87,12.13L21,7";
		}
	};


;
"use strict";

;
	($.$mol_icon_plus_box) = class $mol_icon_plus_box extends ($.$mol_icon) {
		path(){
			return "M17,13H13V17H11V13H7V11H11V7H13V11H17M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $hyoo_js_perf_bench extends $hyoo_crowd_struct {
        title(next) {
            return this.sub('title', $hyoo_crowd_reg).str(next);
        }
        prefix(next) {
            return this.sub('prefix', $hyoo_crowd_reg).str(next);
        }
        postfix(next) {
            return this.sub('postfix', $hyoo_crowd_reg).str(next);
        }
        cases() {
            return this.sub('cases', $hyoo_crowd_list).nodes($hyoo_js_perf_case);
        }
        case_ensure(index) {
            return this.cases()[index] ?? this.case_add();
        }
        case_add() {
            this.sub('cases', $hyoo_crowd_list).insert([{}]);
            return this.cases().slice(-1)[0];
        }
        case_drop(index) {
            this.sub('cases', $hyoo_crowd_list).cut(index);
        }
        case_dupe(index) {
            this.sub('cases', $hyoo_crowd_list).insert([{}], index + 1);
            const [prev, next] = this.cases().slice(index, index + 2);
            next.steal(prev);
            return next;
        }
        case_swap(index) {
            const list = this.sub('cases', $hyoo_crowd_list);
            const pos = index ? index - 1 : list.units().length;
            list.move(index, pos);
            return pos;
        }
        steal(donor) {
            this.title(donor.title());
            this.prefix(donor.prefix());
            this.postfix(donor.postfix());
            for (const _case of donor.cases()) {
                this.case_add().steal(_case);
            }
        }
        changable() {
            return this.land.level('') >= $hyoo_crowd_peer_level.mod;
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_js_perf_bench.prototype, "title", null);
    __decorate([
        $mol_mem
    ], $hyoo_js_perf_bench.prototype, "prefix", null);
    __decorate([
        $mol_mem
    ], $hyoo_js_perf_bench.prototype, "postfix", null);
    __decorate([
        $mol_mem
    ], $hyoo_js_perf_bench.prototype, "cases", null);
    __decorate([
        $mol_action
    ], $hyoo_js_perf_bench.prototype, "case_add", null);
    __decorate([
        $mol_action
    ], $hyoo_js_perf_bench.prototype, "case_drop", null);
    __decorate([
        $mol_action
    ], $hyoo_js_perf_bench.prototype, "case_dupe", null);
    __decorate([
        $mol_action
    ], $hyoo_js_perf_bench.prototype, "case_swap", null);
    __decorate([
        $mol_action
    ], $hyoo_js_perf_bench.prototype, "steal", null);
    __decorate([
        $mol_mem
    ], $hyoo_js_perf_bench.prototype, "changable", null);
    $.$hyoo_js_perf_bench = $hyoo_js_perf_bench;
})($ || ($ = {}));

;
	($.$hyoo_js_perf) = class $hyoo_js_perf extends ($.$mol_book2) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		run(next){
			if(next !== undefined) return next;
			return null;
		}
		Hotkey(){
			const obj = new this.$.$mol_hotkey();
			(obj.mod_ctrl) = () => (true);
			(obj.key) = () => ({"enter": (next) => (this.run(next))});
			return obj;
		}
		menu_tools(){
			return [];
		}
		Online(){
			const obj = new this.$.$hyoo_sync_online();
			(obj.yard) = () => ((this.yard()));
			return obj;
		}
		Source(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ("https://github.com/hyoo-ru/perf.js.hyoo.ru");
			return obj;
		}
		About_icon(){
			const obj = new this.$.$mol_icon_help_circle_outline();
			return obj;
		}
		About(){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ("https://page.hyoo.ru/#!=btunlj_fp1tum");
			(obj.sub) = () => ([(this.About_icon())]);
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		changable(){
			return true;
		}
		prefix(next){
			if(next !== undefined) return next;
			return "";
		}
		Prefix_code(){
			const obj = new this.$.$mol_textarea();
			(obj.enabled) = () => ((this.changable()));
			(obj.spellcheck) = () => (false);
			(obj.value) = (next) => ((this.prefix(next)));
			(obj.hint) = () => ("let res = 0");
			return obj;
		}
		Prefix(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_Prefix_title")));
			(obj.Content) = () => ((this.Prefix_code()));
			return obj;
		}
		postfix(next){
			if(next !== undefined) return next;
			return "";
		}
		Postfix_code(){
			const obj = new this.$.$mol_textarea();
			(obj.enabled) = () => ((this.changable()));
			(obj.spellcheck) = () => (false);
			(obj.value) = (next) => ((this.postfix(next)));
			(obj.hint) = () => ("$mol_assert_like( res, {#} - 1 )");
			return obj;
		}
		Postfix(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_Postfix_title")));
			(obj.Content) = () => ((this.Postfix_code()));
			return obj;
		}
		hint(){
			return "### Results Legend\n🔠 Source Size 📦 Bundle Size\n🥶 Cold Run 🥵 Hot Run\n\n### Iterations count / number\n\t{#}\n\n### Load generic Script\n\n\tconst { some } = $mol_import.script(\n\t\t'https://unpkg.org/...'\n\t)\n\n### Load ESM Module\n\n\tconst { some } = $mol_import.module(\n\t\t'https://esm.sh/...'\n\t).default\n\n### Assert equality\n\n\t$mol_assert_like( [777], [777] )\n\n### Measure memory\n\nCall Chrome with:\n\t--js-flags=\"--expose-gc\"\n\t--enable-precise-memory-info\n\n### Other JS Tools\n\n[V8 Optimizations](https://opt.js.hyoo.ru/) [Sandbox](https://eval.js.hyoo.ru)";
		}
		Hint(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.hint()));
			return obj;
		}
		Common_content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Prefix()), 
				(this.Postfix()), 
				(this.Hint())
			]);
			return obj;
		}
		Common(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_Common_title")));
			(obj.tools) = () => ((this.menu_tools()));
			(obj.foot) = () => ([
				(this.Online()), 
				(this.Source()), 
				(this.About()), 
				(this.Lights())
			]);
			(obj.body) = () => ([(this.Common_content())]);
			return obj;
		}
		bench_title(next){
			if(next !== undefined) return next;
			return "";
		}
		Title(){
			const obj = new this.$.$mol_string_button();
			(obj.value) = (next) => ((this.bench_title(next)));
			(obj.hint) = () => ((this.menu_title()));
			(obj.enabled) = () => ((this.changable()));
			return obj;
		}
		case_title(id, next){
			if(next !== undefined) return next;
			return "";
		}
		case_prefix(id, next){
			if(next !== undefined) return next;
			return "";
		}
		source(id, next){
			if(next !== undefined) return next;
			return "";
		}
		case_measurable(id, next){
			if(next !== undefined) return next;
			return true;
		}
		Case_measurable(id){
			return (this.Case(id).Measurable());
		}
		case_sample(id){
			return "";
		}
		results(id, next){
			if(next !== undefined) return next;
			return [];
		}
		case_drop(id, next){
			if(next !== undefined) return next;
			return null;
		}
		case_dupe(id, next){
			if(next !== undefined) return next;
			return null;
		}
		case_swap(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Case(id){
			const obj = new this.$.$hyoo_js_perf_case_row();
			(obj.title) = (next) => ((this.case_title(id, next)));
			(obj.prefix) = (next) => ((this.case_prefix(id, next)));
			(obj.source) = (next) => ((this.source(id, next)));
			(obj.measurable) = (next) => ((this.case_measurable(id, next)));
			(obj.sample) = () => ((this.case_sample(id)));
			(obj.results) = (next) => ((this.results(id, next)));
			(obj.changable) = () => ((this.changable()));
			(obj.drop) = (next) => ((this.case_drop(id, next)));
			(obj.dupe) = (next) => ((this.case_dupe(id, next)));
			(obj.swap) = (next) => ((this.case_swap(id, next)));
			return obj;
		}
		cases(){
			return [(this.Case("0"))];
		}
		Cases(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.cases()));
			return obj;
		}
		measurable_all(){
			return [];
		}
		Measurable_all(){
			const obj = new this.$.$mol_check_group();
			(obj.checks) = () => ((this.measurable_all()));
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_Measurable_all_hint")));
			return obj;
		}
		Run_icon(){
			const obj = new this.$.$mol_icon_play();
			return obj;
		}
		Run(){
			const obj = new this.$.$mol_button_major();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_Run_hint")));
			(obj.click) = (next) => ((this.run(next)));
			(obj.sub) = () => ([(this.Run_icon())]);
			return obj;
		}
		Share(){
			const obj = new this.$.$mol_button_share();
			(obj.capture) = () => ((this.Cases()));
			return obj;
		}
		bench_fork(next){
			if(next !== undefined) return next;
			return null;
		}
		Fork_icon(){
			const obj = new this.$.$mol_icon_directions_fork();
			return obj;
		}
		Fork(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_Fork_hint")));
			(obj.click) = (next) => ((this.bench_fork(next)));
			(obj.sub) = () => ([(this.Fork_icon())]);
			return obj;
		}
		bench_new(next){
			if(next !== undefined) return next;
			return null;
		}
		New_icon(){
			const obj = new this.$.$mol_icon_plus_box();
			return obj;
		}
		New(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_js_perf_New_hint")));
			(obj.click) = (next) => ((this.bench_new(next)));
			(obj.sub) = () => ([(this.New_icon())]);
			return obj;
		}
		Tool_buttons(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Measurable_all()), 
				(this.Run()), 
				(this.Share()), 
				(this.Fork()), 
				(this.New())
			]);
			return obj;
		}
		Cases_pane(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.bench_title()));
			(obj.Title) = () => ((this.Title()));
			(obj.body) = () => ([(this.Cases())]);
			(obj.tools) = () => ([(this.Tool_buttons())]);
			return obj;
		}
		yard(){
			const obj = new this.$.$hyoo_sync_client();
			return obj;
		}
		bench_id(){
			return null;
		}
		bench(){
			const obj = new this.$.$hyoo_js_perf_bench();
			return obj;
		}
		titles(){
			return [];
		}
		prefixes(){
			return [];
		}
		sources(){
			return [];
		}
		menu_title(){
			return (this.$.$mol_locale.text("$hyoo_js_perf_menu_title"));
		}
		permalink(){
			return "";
		}
		plugins(){
			return [(this.Theme()), (this.Hotkey())];
		}
		pages(){
			return [(this.Common()), (this.Cases_pane())];
		}
	};
	($mol_mem(($.$hyoo_js_perf.prototype), "Theme"));
	($mol_mem(($.$hyoo_js_perf.prototype), "run"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Hotkey"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Online"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Source"));
	($mol_mem(($.$hyoo_js_perf.prototype), "About_icon"));
	($mol_mem(($.$hyoo_js_perf.prototype), "About"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Lights"));
	($mol_mem(($.$hyoo_js_perf.prototype), "prefix"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Prefix_code"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Prefix"));
	($mol_mem(($.$hyoo_js_perf.prototype), "postfix"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Postfix_code"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Postfix"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Hint"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Common_content"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Common"));
	($mol_mem(($.$hyoo_js_perf.prototype), "bench_title"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Title"));
	($mol_mem_key(($.$hyoo_js_perf.prototype), "case_title"));
	($mol_mem_key(($.$hyoo_js_perf.prototype), "case_prefix"));
	($mol_mem_key(($.$hyoo_js_perf.prototype), "source"));
	($mol_mem_key(($.$hyoo_js_perf.prototype), "case_measurable"));
	($mol_mem_key(($.$hyoo_js_perf.prototype), "results"));
	($mol_mem_key(($.$hyoo_js_perf.prototype), "case_drop"));
	($mol_mem_key(($.$hyoo_js_perf.prototype), "case_dupe"));
	($mol_mem_key(($.$hyoo_js_perf.prototype), "case_swap"));
	($mol_mem_key(($.$hyoo_js_perf.prototype), "Case"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Cases"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Measurable_all"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Run_icon"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Run"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Share"));
	($mol_mem(($.$hyoo_js_perf.prototype), "bench_fork"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Fork_icon"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Fork"));
	($mol_mem(($.$hyoo_js_perf.prototype), "bench_new"));
	($mol_mem(($.$hyoo_js_perf.prototype), "New_icon"));
	($mol_mem(($.$hyoo_js_perf.prototype), "New"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Tool_buttons"));
	($mol_mem(($.$hyoo_js_perf.prototype), "Cases_pane"));
	($mol_mem(($.$hyoo_js_perf.prototype), "yard"));
	($mol_mem(($.$hyoo_js_perf.prototype), "bench"));


;
"use strict";
var $;
(function ($) {
    function $mol_range2(item = index => index, size = () => Number.POSITIVE_INFINITY) {
        const source = typeof item === 'function' ? new $mol_range2_array() : item;
        if (typeof item !== 'function') {
            item = index => source[index];
            size = () => source.length;
        }
        return new Proxy(source, {
            get(target, field) {
                if (typeof field === 'string') {
                    if (field === 'length')
                        return size();
                    const index = Number(field);
                    if (index < 0)
                        return undefined;
                    if (index >= size())
                        return undefined;
                    if (index === Math.trunc(index))
                        return item(index);
                }
                return $mol_range2_array.prototype[field];
            },
            set(target, field) {
                return $mol_fail(new TypeError(`Lazy range is read only (trying to set field ${JSON.stringify(field)})`));
            },
            ownKeys(target) {
                return [...Array(size())].map((v, i) => String(i)).concat('length');
            },
            getOwnPropertyDescriptor(target, field) {
                if (field === "length")
                    return {
                        value: size(),
                        writable: true,
                        enumerable: false,
                        configurable: false,
                    };
                const index = Number(field);
                if (index === Math.trunc(index))
                    return {
                        get: () => this.get(target, field, this),
                        enumerable: true,
                        configurable: true,
                    };
                return Object.getOwnPropertyDescriptor(target, field);
            }
        });
    }
    $.$mol_range2 = $mol_range2;
    class $mol_range2_array extends Array {
        concat(...tail) {
            if (tail.length === 0)
                return this;
            if (tail.length > 1) {
                let list = this;
                for (let item of tail)
                    list = list.concat(item);
                return list;
            }
            return $mol_range2(index => index < this.length ? this[index] : tail[0][index - this.length], () => this.length + tail[0].length);
        }
        filter(check, context) {
            const filtered = [];
            let cursor = -1;
            return $mol_range2(index => {
                while (cursor < this.length && index >= filtered.length - 1) {
                    const val = this[++cursor];
                    if (check(val, cursor, this))
                        filtered.push(val);
                }
                return filtered[index];
            }, () => cursor < this.length ? Number.POSITIVE_INFINITY : filtered.length);
        }
        forEach(proceed, context) {
            for (let [key, value] of this.entries())
                proceed.call(context, value, key, this);
        }
        map(proceed, context) {
            return $mol_range2(index => proceed.call(context, this[index], index, this), () => this.length);
        }
        reduce(merge, result) {
            let index = 0;
            if (arguments.length === 1) {
                result = this[index++];
            }
            for (; index < this.length; ++index) {
                result = merge(result, this[index], index, this);
            }
            return result;
        }
        toReversed() {
            return $mol_range2(index => this[this.length - 1 - index], () => this.length);
        }
        slice(from = 0, to = this.length) {
            return $mol_range2(index => this[from + index], () => Math.min(to, this.length) - from);
        }
        some(check, context) {
            for (let index = 0; index < this.length; ++index) {
                if (check.call(context, this[index], index, this))
                    return true;
            }
            return false;
        }
        every(check, context) {
            for (let index = 0; index < this.length; ++index) {
                if (!check.call(context, this[index], index, this))
                    return false;
            }
            return true;
        }
        reverse() {
            return $mol_fail(new TypeError(`Mutable reverse is forbidden. Use toReversed instead.`));
        }
        sort() {
            return $mol_fail(new TypeError(`Mutable sort is forbidden. Use toSorted instead.`));
        }
        [Symbol.toPrimitive]() {
            return $mol_guid();
        }
    }
    $.$mol_range2_array = $mol_range2_array;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_js_perf extends $.$hyoo_js_perf {
            bench_fund() {
                return this.yard().world().Fund($hyoo_js_perf_bench);
            }
            bench_id() {
                return $mol_int62_string_ensure(this.$.$mol_state_arg.value('bench'));
            }
            permalink() {
                return `https://perf.js.hyoo.ru/#!bench=${this.bench_id()}`;
            }
            bench() {
                const id = this.bench_id();
                return id ? this.bench_fund().Item(id) : null;
            }
            bench_new() {
                const bench = this.bench_fund().make();
                this.$.$mol_state_arg.go({ bench: bench.land.id() });
                return bench;
            }
            bench_fork() {
                const prev = this.bench();
                const prefix = this.prefix();
                const postfix = this.postfix();
                const titles = this.titles();
                const prefixes = this.prefixes();
                const sources = this.sources();
                const next = this.bench_new();
                if (prev) {
                    next.steal(prev);
                }
                else {
                    next.prefix(prefix);
                    next.postfix(postfix);
                    const count = this.cases_count();
                    for (let i = 0; i < count; ++i) {
                        const case_ = next.case_add();
                        case_.title(titles[i] ?? '');
                        case_.setup(prefixes[i] ?? '');
                        case_.measure(sources[i] ?? '');
                    }
                }
                return next;
            }
            bench_changable() {
                const bench = this.bench();
                if (bench?.changable())
                    return bench;
                return this.bench_fork();
            }
            titles(next) {
                const bench = this.bench();
                if (bench)
                    return bench.cases().map(case_ => case_.title());
                return JSON.parse(this.$.$mol_state_arg.value('titles', next === undefined ? undefined : JSON.stringify(next)) || '[]');
            }
            prefixes(next) {
                const bench = this.bench();
                if (bench)
                    return bench.cases().map(case_ => case_.setup());
                return JSON.parse(this.$.$mol_state_arg.value('prefixes', next === undefined ? undefined : JSON.stringify(next)) || '[]');
            }
            sources(next) {
                const bench = this.bench();
                if (bench)
                    return bench.cases().map(case_ => case_.measure());
                return JSON.parse(this.$.$mol_state_arg.value('sources', next === undefined ? undefined : JSON.stringify(next)) || '[]');
            }
            bench_title(next) {
                if (next === undefined) {
                    return this.bench()?.title()
                        ?? this.$.$mol_state_arg.value('title')
                        ?? '';
                }
                else {
                    return this.bench_changable().title(next);
                }
            }
            menu_title() {
                return this.bench_title() || super.menu_title();
            }
            prefix(next) {
                if (next === undefined) {
                    return this.bench()?.prefix()
                        ?? this.$.$mol_state_arg.value('prefix')
                        ?? this.$.$mol_state_arg.value('common')
                        ?? '';
                }
                else {
                    return this.bench_changable().prefix(next);
                }
            }
            postfix(next) {
                if (next === undefined) {
                    return this.bench()?.postfix()
                        ?? this.$.$mol_state_arg.value('postfix')
                        ?? '';
                }
                else {
                    return this.bench_changable().postfix(next);
                }
            }
            case_drop(index) {
                if ((this.bench()?.cases().length ?? 0) <= index)
                    return;
                this.bench_changable().case_drop(index);
            }
            case_dupe(index) {
                if ((this.bench()?.cases().length ?? 0) <= index)
                    return;
                this.bench_changable().case_dupe(index);
            }
            case_swap(index) {
                if ((this.bench()?.cases().length ?? 0) <= index)
                    return;
                this.bench_changable().case_swap(index);
            }
            cases_count() {
                return Math.max(this.prefixes().length, this.sources().length, this.titles().length);
            }
            cases() {
                return $mol_range2(index => this.Case(index), () => Math.max(1, this.cases_count()));
            }
            case_title(index, next) {
                if (next === undefined) {
                    return this.bench()?.cases()[index]?.title()
                        ?? this.titles()[index]
                        ?? '';
                }
                else {
                    return this.bench_changable().case_ensure(index).title(next);
                }
            }
            case_prefix(index, next) {
                if (next === undefined) {
                    return this.bench()?.cases()[index]?.setup()
                        ?? this.prefixes()[index]
                        ?? '';
                }
                else {
                    return this.bench_changable().case_ensure(index).setup(next);
                }
            }
            source(index, next) {
                if (next === undefined) {
                    return this.bench()?.cases()[index]?.measure()
                        ?? this.sources()[index]
                        ?? '';
                }
                else {
                    return this.bench_changable().case_ensure(index).measure(next);
                }
            }
            case_sample(index) {
                const token = this.token();
                const code = this.prefix()
                    + '\n\n' + this.case_prefix(index)
                    + '\n\n' + this.source(index)
                    + '\n\n' + this.postfix();
                return code.trim().replace(/\{#\}/g, '0');
            }
            case_size(index) {
                return (this.case_prefix(index) + '\n' + this.source(index))
                    .replace(/(\/\*)?\/\/.*$/gm, '')
                    .match(/\w+/g)?.length ?? 0;
            }
            case_deps_names(index) {
                const src = (this.case_prefix(index) + '\n' + this.source(index));
                const found = src.matchAll(/\$mol_import\.(?:script|module)\s*\(\s*['"]https?:\/\/[^/]*\/((?:@[\w.-]*\/)?[\w.-]*)/g);
                return [...found].map(([imp, mod]) => mod);
            }
            case_deps(index) {
                return this.case_deps_names(index)
                    .reduce((sum, name) => sum + this.module_size(name), 0);
            }
            case_measurable(index, next) {
                const bench = this.bench();
                if (!bench)
                    return next ?? true;
                const case_ = bench.cases()[index];
                if (!case_)
                    return false;
                const key = `${this}.case_measurable("${case_.id()}")`;
                return this.$.$mol_state_local.value(key, next) ?? true;
            }
            module_size(name) {
                return this.$.$mol_fetch.json(`https://bundlephobia.com/api/size?record=true&package=${name}`).gzip;
            }
            measures_for(index, next) {
                this.prefix();
                this.postfix();
                this.sources();
                this.prefixes();
                return next || [];
            }
            measures() {
                return this.sources().map((_, index) => this.measures_for(index));
            }
            max_frequency() {
                return this.measures().reduce((max, measure) => {
                    return Math.max(max, measure.reduce((max, level) => {
                        return Math.max(max, level.frequency || 0);
                    }, 0));
                }, 0);
            }
            max_memory() {
                return this.measures().reduce((max, measure) => {
                    return Math.max(max, measure.reduce((max, level) => {
                        return Math.max(max, level.memory_per_iteration);
                    }, 0));
                }, 0);
            }
            max_size() {
                return this.measures()
                    .map((_, i) => this.case_size(i))
                    .reduce((max, size) => Math.max(max, size), 0);
            }
            max_deps() {
                return this.measures()
                    .map((_, i) => {
                    try {
                        return this.case_deps(i);
                    }
                    catch (error) {
                        $mol_fail_log(error);
                        return 0;
                    }
                })
                    .reduce((max, size) => Math.max(max, size), 0);
            }
            results(index) {
                const measure = this.measures_for(index);
                if (!measure)
                    return [];
                return [
                    $hyoo_js_perf_stats.create(stats2 => {
                        try {
                            stats2.size = this.case_size(index);
                            stats2.size_portion = this.case_size(index) / this.max_size();
                            stats2.deps = this.case_deps(index);
                            stats2.deps_portion = this.case_deps(index) / this.max_deps();
                        }
                        catch (error) {
                            $mol_fail_log(error);
                            stats2.error = error.message;
                        }
                    }),
                    ...measure.map((stats) => $hyoo_js_perf_stats.create(stats2 => {
                        stats2.frequency_portion = stats.frequency / this.max_frequency();
                        stats2.memory_portion = stats.memory_per_iteration / this.max_memory();
                        stats2.memory = stats.memory;
                        stats2.elapsed = stats.elapsed;
                        stats2.iterations = stats.iterations;
                        stats2.error = stats.error;
                    })),
                ];
            }
            token() {
                return Math.random().toString(16).substring(2);
            }
            measure_step(count, prefix, inner, postfix) {
                this.$.$mol_wait_rest();
                const token = this.token();
                let total = -performance.now();
                prefix = prefix.replace(/\{#\}/g, `${count}`);
                postfix = postfix.replace(/\{#\}/g, `${count}`);
                inner = Array.from({ length: count }, (_, i) => inner.replace(/\{#\}/g, `${i}`)).join(';\n');
                const source = [
                    prefix,
                    `const backup_${token} = $mol_wire_auto()`,
                    `$mol_wire_auto( null )`,
                    `if( window.gc ) gc(), gc()`,
                    `let mem_${token} = -performance.memory?.usedJSHeapSize ?? 0`,
                    `let time_${token} = -performance.now()`,
                    inner,
                    `time_${token} += performance.now()`,
                    postfix,
                    `if( window.gc ) gc(), gc()`,
                    `mem_${token} += performance.memory?.usedJSHeapSize ?? 0`,
                    `$mol_wire_auto( backup_${token} )`,
                    `return { time: time_${token}, mem: window.gc ? mem_${token} : 0 }`,
                ].join(';\n');
                let func = new Function('', source);
                let { time, mem } = func();
                total += performance.now();
                return { total, time, mem };
            }
            measure_precise(prefix, inner, postfix) {
                const one = this.measure_step(1, prefix, inner, postfix);
                const iterations_raw = Math.ceil(1 + (1000 - one.total) / one.time);
                const iterations = Math.min(Math.max(1, iterations_raw), 100_000);
                let avg_last = 0;
                const times = [];
                const mems = [];
                const avg = (numbs) => Math.pow(numbs.reduce((a, b) => a * b), 1 / numbs.length);
                const med = (numbs) => numbs.sort((l, r) => l - r)[numbs.length / 2 | 0];
                while (times.length < 100) {
                    const { time, mem } = this.measure_step(iterations, prefix, inner, postfix);
                    times.push(time);
                    mems.push(mem);
                    const avg_next = avg(times);
                    if (times.length > 4 && Math.abs(avg_next - avg_last) / avg_next < 0.001)
                        break;
                    avg_last = avg_next;
                }
                return $hyoo_js_perf_stats.create(stats => {
                    stats.elapsed = med(times);
                    stats.memory = med(mems);
                    stats.iterations = iterations;
                });
            }
            measure_safe(index, prefix, inner, postfix) {
                try {
                    return this.measure_precise(prefix, inner, postfix);
                }
                catch (error) {
                    if (error instanceof Promise) {
                        const stats = $hyoo_js_perf_stats.create(stats => {
                            stats.error = `Measure ${++this._run_iteration}`;
                        });
                        this.measures_for(index, [stats]);
                        $mol_fail_hidden(error);
                    }
                    $mol_fail_log(error);
                    return $hyoo_js_perf_stats.create(stats => {
                        stats.error = error.message;
                        stats.elapsed = 0;
                        stats.memory = 0;
                        stats.iterations = Number.NEGATIVE_INFINITY;
                    });
                }
            }
            _run_iteration = 0;
            iterations_reset() {
                this._run_iteration = 0;
            }
            measurable_all() {
                return [...this.sources().entries()]
                    .filter(([index, inner]) => inner.trim())
                    .map(([index]) => this.Case_measurable(index));
            }
            run() {
                for (const [index, inner] of this.sources().entries()) {
                    this.measures_for(index, []);
                }
                const prefix = this.prefix();
                const prefixes = this.prefixes();
                const postfix = this.postfix();
                const token = this.token();
                for (const [index, inner] of this.sources().entries()) {
                    if (!inner.trim())
                        continue;
                    if (!this.case_measurable(index))
                        continue;
                    const cold = this.measure_safe(index, [
                        '/*cold*/',
                        prefix,
                        prefixes[index] || '',
                        `let accum_${token}`,
                        `const case_${token} = iter_${token} => {\n accum_${token} = iter_${token} \n};`,
                    ].join(';\n'), `case_${token}({#});\n` + inner, postfix);
                    const hot = this.measure_safe(index, [
                        '/*hot*/',
                        prefix,
                        prefixes[index] || '',
                        `let accum_${token}`,
                        `const case_${token} = iter_${token} => {\n ${inner.replace(/\{#\}/g, `iter_${token}`)} \n};`,
                    ].join(';\n'), `case_${token}({#})`, postfix);
                    this.measures_for(index, [cold, hot]);
                    this.iterations_reset();
                }
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "bench_fund", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "bench", null);
        __decorate([
            $mol_action
        ], $hyoo_js_perf.prototype, "bench_new", null);
        __decorate([
            $mol_action
        ], $hyoo_js_perf.prototype, "bench_fork", null);
        __decorate([
            $mol_action
        ], $hyoo_js_perf.prototype, "bench_changable", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "titles", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "prefixes", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "sources", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "bench_title", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "prefix", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "postfix", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "cases_count", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "cases", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "case_title", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "case_prefix", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "source", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "case_sample", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "case_size", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "case_deps_names", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "case_deps", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "case_measurable", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "module_size", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "measures_for", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "measures", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "max_frequency", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "max_memory", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "max_size", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "max_deps", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_js_perf.prototype, "results", null);
        __decorate([
            $mol_memo.method
        ], $hyoo_js_perf.prototype, "token", null);
        __decorate([
            $mol_action
        ], $hyoo_js_perf.prototype, "measure_step", null);
        __decorate([
            $mol_action
        ], $hyoo_js_perf.prototype, "measure_precise", null);
        __decorate([
            $mol_action
        ], $hyoo_js_perf.prototype, "measure_safe", null);
        __decorate([
            $mol_action
        ], $hyoo_js_perf.prototype, "iterations_reset", null);
        __decorate([
            $mol_mem
        ], $hyoo_js_perf.prototype, "measurable_all", null);
        __decorate([
            $mol_action
        ], $hyoo_js_perf.prototype, "run", null);
        $$.$hyoo_js_perf = $hyoo_js_perf;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/js/perf/perf.view.css", "[hyoo_js_perf_cases_pane_tools] {\n\tflex-grow: 0;\n}\n\n[hyoo_js_perf_body] {\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-between;\n\tpadding: 0;\n}\n\n[hyoo_js_perf_common] {\n\tflex-direction: column;\n\tflex: 0 0 30rem;\n}\n\n[hyoo_js_perf_common_content] {\n\tgap: var(--mol_gap_block);\n}\n\n[hyoo_js_perf_cases_pane] {\n\tflex: 1000 0 90rem;\n\tbackground: var(--mol_theme_back);\n}\n\n[hyoo_js_perf_cases] {\n\tgap: var(--mol_gap_block);\n}\n");
})($ || ($ = {}));

;
	($.$mol_check_list) = class $mol_check_list extends ($.$mol_view) {
		option_checked(id, next){
			if(next !== undefined) return next;
			return false;
		}
		option_title(id){
			return "";
		}
		option_label(id){
			return [(this.option_title(id))];
		}
		enabled(){
			return true;
		}
		option_enabled(id){
			return (this.enabled());
		}
		option_hint(id){
			return "";
		}
		items(){
			return [];
		}
		dictionary(){
			return {};
		}
		Option(id){
			const obj = new this.$.$mol_check();
			(obj.checked) = (next) => ((this.option_checked(id, next)));
			(obj.label) = () => ((this.option_label(id)));
			(obj.enabled) = () => ((this.option_enabled(id)));
			(obj.hint) = () => ((this.option_hint(id)));
			(obj.minimal_height) = () => (24);
			return obj;
		}
		options(){
			return {};
		}
		keys(){
			return [];
		}
		sub(){
			return (this.items());
		}
	};
	($mol_mem_key(($.$mol_check_list.prototype), "option_checked"));
	($mol_mem_key(($.$mol_check_list.prototype), "Option"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_check_list extends $.$mol_check_list {
            options() {
                return {};
            }
            dictionary(next) {
                return next ?? {};
            }
            option_checked(id, next) {
                const prev = this.dictionary();
                if (next === undefined)
                    return prev[id] ?? null;
                const next_rec = { ...prev, [id]: next };
                if (next === null)
                    delete next_rec[id];
                return this.dictionary(next_rec)[id] ?? null;
            }
            keys() {
                return Object.keys(this.options());
            }
            items() {
                return this.keys().map(key => this.Option(key));
            }
            option_title(key) {
                return this.options()[key] || key;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_check_list.prototype, "keys", null);
        __decorate([
            $mol_mem
        ], $mol_check_list.prototype, "items", null);
        $$.$mol_check_list = $mol_check_list;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/list/list.view.css", "[mol_check_list] {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tflex: 1 1 auto;\n\tborder-radius: var(--mol_gap_round);\n\tgap: 1px;\n}\n\n[mol_check_list_option] {\n\tflex: 0 1 auto;\n}\n\n[mol_check_list_option]:where([mol_check_checked=\"true\"]) {\n\ttext-shadow: 0 0;\n\tcolor: var(--mol_theme_current);\n}\n\n[mol_check_list_option]:where([mol_check_checked=\"true\"][disabled]) {\n\tcolor: var(--mol_theme_text);\n}\n");
})($ || ($ = {}));

;
	($.$mol_switch) = class $mol_switch extends ($.$mol_check_list) {
		value(next){
			if(next !== undefined) return next;
			return "";
		}
	};
	($mol_mem(($.$mol_switch.prototype), "value"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_switch extends $.$mol_switch {
            value(next) {
                return $mol_state_session.value(`${this}.value()`, next) ?? '';
            }
            option_checked(key, next) {
                if (next === undefined)
                    return this.value() == key;
                this.value(next ? key : '');
                return next;
            }
        }
        $$.$mol_switch = $mol_switch;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_deck) = class $mol_deck extends ($.$mol_list) {
		current(next){
			if(next !== undefined) return next;
			return "0";
		}
		switch_options(){
			return {};
		}
		Switch(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.current(next)));
			(obj.options) = () => ((this.switch_options()));
			return obj;
		}
		Content(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		items(){
			return [];
		}
		rows(){
			return [(this.Switch()), (this.Content())];
		}
	};
	($mol_mem(($.$mol_deck.prototype), "current"));
	($mol_mem(($.$mol_deck.prototype), "Switch"));
	($mol_mem(($.$mol_deck.prototype), "Content"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_deck extends $.$mol_deck {
            current(next) {
                return $mol_state_session.value(`${this}.current()`, next) || '0';
            }
            switch_options() {
                let options = {};
                this.items().forEach((item, index) => {
                    options[String(index)] = item.title();
                });
                return options;
            }
            Content() {
                return this.items()[Number(this.current())];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_deck.prototype, "Content", null);
        $$.$mol_deck = $mol_deck;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_poll) = class $mol_icon_poll extends ($.$mol_icon) {
		path(){
			return "M3,22V8H7V22H3M10,22V2H14V22H10M17,22V14H21V22H17Z";
		}
	};


;
"use strict";

;
	($.$hyoo_mol_bench) = class $hyoo_mol_bench extends ($.$mol_book2_catalog) {
		Close_item_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Init(){
			const obj = new this.$.$hyoo_mol_bench_perf();
			(obj.bench_title) = () => ("State Management");
			(obj.analysis_uri) = () => ("https://page.hyoo.ru/#!=3ia3ll_rcpl7b");
			(obj.Close) = () => ((this.Close_item()));
			(obj.bench_id) = () => ("9h2as6_u0mfnn");
			return obj;
		}
		equals(){
			const obj = new this.$.$hyoo_mol_bench_perf();
			(obj.bench_title) = () => ("Deep Equals");
			(obj.analysis_uri) = () => ("https://t.me/mol_bench/31");
			(obj.Close) = () => ((this.Close_item()));
			(obj.bench_id) = () => ("hwh5lj_gpifwn");
			return obj;
		}
		moment(){
			const obj = new this.$.$hyoo_mol_bench_perf();
			(obj.bench_title) = () => ("Time Moments");
			(obj.analysis_uri) = () => ("https://t.me/mol_bench/10");
			(obj.Close) = () => ((this.Close_item()));
			(obj.bench_id) = () => ("lrvlhv_jz49k6");
			return obj;
		}
		Markdown(){
			const obj = new this.$.$hyoo_mol_bench_perf();
			(obj.bench_title) = () => ("Markdown Parse");
			(obj.analysis_uri) = () => ("https://t.me/mol_bench/27");
			(obj.Close) = () => ((this.Close_item()));
			(obj.bench_id) = () => ("egbl19_e5ljht");
			return obj;
		}
		Runtype(){
			const obj = new this.$.$hyoo_mol_bench_perf();
			(obj.bench_title) = () => ("Runtime typing");
			(obj.Close) = () => ((this.Close_item()));
			(obj.bench_id) = () => ("y4n9yl_ug1hdz");
			return obj;
		}
		Immutable(){
			const obj = new this.$.$hyoo_mol_bench_perf();
			(obj.bench_title) = () => ("Immutable Patches");
			(obj.analysis_uri) = () => ("https://t.me/mam_mol/108985");
			(obj.Close) = () => ((this.Close_item()));
			(obj.bench_id) = () => ("wqcgji_pkdto1");
			return obj;
		}
		Rope(){
			const obj = new this.$.$hyoo_mol_bench_bench();
			(obj.title) = () => ("Rope Charts");
			(obj.analysis_uri) = () => ("https://t.me/mol_bench/24");
			(obj.Close) = () => ((this.Close_item()));
			(obj.bench) = () => ("https://bench.hyoo.ru/chart/rope/");
			return obj;
		}
		Todomvc(){
			const obj = new this.$.$hyoo_mol_bench_bench();
			(obj.title) = () => ("ToDoMVC");
			(obj.analysis_uri) = () => ("https://t.me/mol_bench/13");
			(obj.Close) = () => ((this.Close_item()));
			(obj.bench) = () => ("https://hyoo-ru.github.io/todomvc/benchmark/");
			return obj;
		}
		Chanelog_mol(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("$mol");
			(obj.uri) = () => ("https://nin-jin.github.io/my_gitlab/");
			return obj;
		}
		Changelog_vue(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("Vue");
			(obj.uri) = () => ("https://gitlab.com/gitlab-org/frontend/playground/echarts/-/commit/562ba199b271bc46621cf1a9a9b37e679a3f47d3");
			return obj;
		}
		Changelog_vanilla(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("Vanilla");
			(obj.uri) = () => ("https://github.com/github/accessibilityjs/commit/2e78680ad0a852973b8f87d793e191d184be9cf8");
			return obj;
		}
		Chanelog(){
			const obj = new this.$.$hyoo_mol_bench_visual();
			(obj.title) = () => ("Long ChangeLog");
			(obj.analysis_uri) = () => ("https://t.me/mol_bench/30");
			(obj.Close) = () => ((this.Close_item()));
			(obj.items) = () => ([
				(this.Chanelog_mol()), 
				(this.Changelog_vue()), 
				(this.Changelog_vanilla())
			]);
			return obj;
		}
		Toxic_mol(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("$mol");
			(obj.uri) = () => ("https://nin-jin.github.io/toxic-repos/");
			return obj;
		}
		Toxic_vue(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("Vue");
			(obj.uri) = () => ("https://toxic-repos.ru/");
			return obj;
		}
		Toxic(){
			const obj = new this.$.$hyoo_mol_bench_visual();
			(obj.title) = () => ("Toxic Repos");
			(obj.analysis_uri) = () => ("https://t.me/mol_bench/28?single");
			(obj.Close) = () => ((this.Close_item()));
			(obj.items) = () => ([(this.Toxic_mol()), (this.Toxic_vue())]);
			return obj;
		}
		DBMon_mol(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("$mol");
			(obj.uri) = () => ("https://mol.js.org/perf/dbmon/-/index.html");
			return obj;
		}
		DBMon_vue(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("Vue");
			(obj.uri) = () => ("https://mathieuancelin.github.io/js-repaint-perfs/vue2");
			return obj;
		}
		DBMon_react(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("React");
			(obj.uri) = () => ("https://mathieuancelin.github.io/js-repaint-perfs/react");
			return obj;
		}
		DBMon_vanilla(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("Vanilla");
			(obj.uri) = () => ("https://mathieuancelin.github.io/js-repaint-perfs/vanilla-simple/");
			return obj;
		}
		DBMon(){
			const obj = new this.$.$hyoo_mol_bench_visual();
			(obj.title) = () => ("DB Monitor");
			(obj.analysis_uri) = () => ("https://t.me/mol_bench/23");
			(obj.Close) = () => ((this.Close_item()));
			(obj.items) = () => ([
				(this.DBMon_mol()), 
				(this.DBMon_vue()), 
				(this.DBMon_react()), 
				(this.DBMon_vanilla())
			]);
			return obj;
		}
		Habr_mol(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("$mol");
			(obj.uri) = () => ("https://nin-jin.github.io/habrcomment/#!article=423889/comment=22820664");
			return obj;
		}
		Habr_vue(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("Vue");
			(obj.uri) = () => ("https://habr.com/ru/post/423889/#comment_22820664");
			return obj;
		}
		Habr(){
			const obj = new this.$.$hyoo_mol_bench_visual();
			(obj.title) = () => ("Habr Comments");
			(obj.analysis_uri) = () => ("https://t.me/mol_bench/21");
			(obj.Close) = () => ((this.Close_item()));
			(obj.items) = () => ([(this.Habr_mol()), (this.Habr_vue())]);
			return obj;
		}
		Sierp_mol(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("$mol");
			(obj.uri) = () => ("https://mol.js.org/perf/sierp/-/");
			return obj;
		}
		Sierp_react(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("React");
			(obj.uri) = () => ("https://nin-jin.github.io/sierpinski/fiber.html");
			return obj;
		}
		Sierp_glimmer(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ("Glimmer");
			(obj.uri) = () => ("https://lifeart.github.io/sierpinski-glimmer/");
			return obj;
		}
		Sierp(){
			const obj = new this.$.$hyoo_mol_bench_visual();
			(obj.title) = () => ("Sierpinski Triangle");
			(obj.analysis_uri) = () => ("https://t.me/mol_bench/19");
			(obj.Close) = () => ((this.Close_item()));
			(obj.items) = () => ([
				(this.Sierp_mol()), 
				(this.Sierp_react()), 
				(this.Sierp_glimmer())
			]);
			return obj;
		}
		menu_title(){
			return (this.$.$mol_locale.text("$hyoo_mol_bench_menu_title"));
		}
		Placeholder(){
			return null;
		}
		Close_item(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ({"bench": null});
			(obj.sub) = () => ([(this.Close_item_icon())]);
			return obj;
		}
		param(){
			return "bench";
		}
		spreads(){
			return {
				"reactivity": (this.Init()), 
				"equals": (this.equals()), 
				"moment": (this.moment()), 
				"markdown": (this.Markdown()), 
				"runtype": (this.Runtype()), 
				"imutable": (this.Immutable()), 
				"rope": (this.Rope()), 
				"todomvc": (this.Todomvc()), 
				"changelog": (this.Chanelog()), 
				"toxic": (this.Toxic()), 
				"dbmon": (this.DBMon()), 
				"habr": (this.Habr()), 
				"sierp": (this.Sierp())
			};
		}
	};
	($mol_mem(($.$hyoo_mol_bench.prototype), "Close_item_icon"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Init"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "equals"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "moment"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Markdown"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Runtype"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Immutable"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Rope"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Todomvc"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Chanelog_mol"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Changelog_vue"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Changelog_vanilla"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Chanelog"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Toxic_mol"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Toxic_vue"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Toxic"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "DBMon_mol"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "DBMon_vue"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "DBMon_react"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "DBMon_vanilla"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "DBMon"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Habr_mol"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Habr_vue"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Habr"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Sierp_mol"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Sierp_react"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Sierp_glimmer"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Sierp"));
	($mol_mem(($.$hyoo_mol_bench.prototype), "Close_item"));
	($.$hyoo_mol_bench_bench) = class $hyoo_mol_bench_bench extends ($.$hyoo_bench_app) {
		analysis_uri(){
			return "";
		}
		Analysis(){
			const obj = new this.$.$hyoo_mol_bench_analysis();
			(obj.uri) = () => ((this.analysis_uri()));
			return obj;
		}
		Close(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		addon_title(){
			return (this.title());
		}
		menu_tools(){
			return [(this.Analysis()), (this.Close())];
		}
	};
	($mol_mem(($.$hyoo_mol_bench_bench.prototype), "Analysis"));
	($mol_mem(($.$hyoo_mol_bench_bench.prototype), "Close"));
	($.$hyoo_mol_bench_perf) = class $hyoo_mol_bench_perf extends ($.$hyoo_js_perf) {
		Permalink(){
			const obj = new this.$.$mol_link_iconed();
			(obj.title) = () => ("");
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_mol_bench_perf_Permalink_hint")));
			(obj.uri) = () => ((this.permalink()));
			return obj;
		}
		analysis_uri(){
			return "";
		}
		Analysis(){
			const obj = new this.$.$hyoo_mol_bench_analysis();
			(obj.uri) = () => ((this.analysis_uri()));
			return obj;
		}
		Close(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		changable(){
			return false;
		}
		Share(){
			return null;
		}
		Fork(){
			return null;
		}
		New(){
			return null;
		}
		menu_tools(){
			return [
				(this.Permalink()), 
				(this.Analysis()), 
				(this.Close())
			];
		}
	};
	($mol_mem(($.$hyoo_mol_bench_perf.prototype), "Permalink"));
	($mol_mem(($.$hyoo_mol_bench_perf.prototype), "Analysis"));
	($mol_mem(($.$hyoo_mol_bench_perf.prototype), "Close"));
	($.$hyoo_mol_bench_visual) = class $hyoo_mol_bench_visual extends ($.$mol_page) {
		analysis_uri(){
			return "";
		}
		Analysis(){
			const obj = new this.$.$hyoo_mol_bench_analysis();
			(obj.uri) = () => ((this.analysis_uri()));
			return obj;
		}
		Close(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Switch(){
			return (this.Deck().Switch());
		}
		Content(){
			return (this.Deck().Content());
		}
		items(){
			return [];
		}
		Deck(){
			const obj = new this.$.$mol_deck();
			(obj.rows) = () => ([(this.Content())]);
			(obj.items) = () => ((this.items()));
			return obj;
		}
		head(){
			return [
				(this.Title()), 
				(this.Switch()), 
				(this.Tools())
			];
		}
		tools(){
			return [(this.Analysis()), (this.Close())];
		}
		body_content(){
			return [(this.Deck())];
		}
	};
	($mol_mem(($.$hyoo_mol_bench_visual.prototype), "Analysis"));
	($mol_mem(($.$hyoo_mol_bench_visual.prototype), "Close"));
	($mol_mem(($.$hyoo_mol_bench_visual.prototype), "Deck"));
	($.$hyoo_mol_bench_analysis) = class $hyoo_mol_bench_analysis extends ($.$mol_link) {
		Icon(){
			const obj = new this.$.$mol_icon_poll();
			return obj;
		}
		hint(){
			return (this.$.$mol_locale.text("$hyoo_mol_bench_analysis_hint"));
		}
		sub(){
			return [(this.Icon())];
		}
	};
	($mol_mem(($.$hyoo_mol_bench_analysis.prototype), "Icon"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/mol/bench/bench.view.css", "[hyoo_mol_bench_menu] {\n\tflex: 0 0 15rem;\n}\n\n[hyoo_mol_bench_perf_title] {\n\tflex-grow: 1;\n}\n\n[hyoo_mol_bench_visual] {\n\tflex: 1 0 auto;\n}\n\n[hyoo_mol_bench_visual_body] {\n\tpadding: 0;\n}\n\n[hyoo_mol_bench_visual_deck_switch] {\n\tflex-grow: 1000;\n}\n\n[hyoo_mol_bench_visual_title] {\n\tflex-grow: 1;\n}\n\n[hyoo_mol_bench_visual_deck] {\n\tflex: 1 1 auto;\n\talign-self: stretch;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_view_tree2_error extends Error {
        spans;
        constructor(message, spans) {
            super(message);
            this.spans = spans;
        }
        toJSON() {
            return {
                message: this.message,
                spans: this.spans
            };
        }
    }
    $.$mol_view_tree2_error = $mol_view_tree2_error;
    class $mol_view_tree2_error_suggestions {
        suggestions;
        constructor(suggestions) {
            this.suggestions = suggestions;
        }
        toString() {
            return this.suggestions.map(suggestion => `\`${suggestion}\``).join(', ');
        }
        toJSON() {
            return this.suggestions;
        }
    }
    $.$mol_view_tree2_error_suggestions = $mol_view_tree2_error_suggestions;
    function $mol_view_tree2_error_str(strings, ...parts) {
        const spans = [];
        for (const part of parts) {
            if (part instanceof $mol_span)
                spans.push(part);
            if (Array.isArray(part) && part.length > 0 && part[0] instanceof $mol_span)
                spans.push(...part);
        }
        return new $mol_view_tree2_error(join(strings, parts), spans);
    }
    $.$mol_view_tree2_error_str = $mol_view_tree2_error_str;
    function join(strings, objects) {
        let result = '';
        let obj_pos = 0;
        let obj_len = objects.length;
        for (const str of strings) {
            result += str;
            if (obj_pos < obj_len) {
                const obj = objects[obj_pos++];
                if (Array.isArray(obj))
                    result += obj.map(item => `\`${item}\``).join(', ');
                else
                    result += `\`${String(obj)}\``;
            }
        }
        return result;
    }
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_view_tree2_child(tree) {
        if (tree.kids.length === 0) {
            return this.$mol_fail($mol_view_tree2_error_str `Required one child at ${tree.span}`);
        }
        if (tree.kids.length > 1) {
            return this.$mol_fail($mol_view_tree2_error_str `Should be only one child at ${tree.span}`);
        }
        return tree.kids[0];
    }
    $.$mol_view_tree2_child = $mol_view_tree2_child;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_view_tree2_classes(defs) {
        return defs.clone(defs.hack({
            '-': () => []
        }));
    }
    $.$mol_view_tree2_classes = $mol_view_tree2_classes;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_view_tree2_normalize(defs) {
        return defs.clone($mol_view_tree2_classes(defs).kids.map(cl => cl.clone([
            this.$mol_view_tree2_class_super(cl).clone(this.$mol_view_tree2_class_props(cl))
        ])));
    }
    $.$mol_view_tree2_normalize = $mol_view_tree2_normalize;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { begin, end, latin_only, or, optional, repeat_greedy } = $mol_regexp;
    $.$mol_view_tree2_prop_signature = $mol_regexp.from([
        begin,
        { name: repeat_greedy(latin_only, 1) },
        { key: optional(['*', repeat_greedy(latin_only, 0)]) },
        { next: optional(['?', repeat_greedy(latin_only, 0)]) },
        end,
    ]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_view_tree2_prop_parts(prop) {
        const groups = [...prop.type.matchAll($mol_view_tree2_prop_signature)][0]?.groups;
        if (!groups) {
            this.$mol_fail($mol_view_tree2_error_str `Required prop like some*? at ${prop.span}`);
        }
        return {
            name: groups.name,
            key: groups.key,
            next: groups.next ? '?' : ''
        };
    }
    $.$mol_view_tree2_prop_parts = $mol_view_tree2_prop_parts;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const regular_regex = /^\w+$/;
    function $mol_view_tree2_prop_quote(name) {
        if (regular_regex.test(name.value))
            return name;
        return name.data(JSON.stringify(name.value));
    }
    $.$mol_view_tree2_prop_quote = $mol_view_tree2_prop_quote;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const class_regex = /^[$A-Z][$\w<>\[\]()"'?|]+$/;
    function $mol_view_tree2_class_match(klass) {
        if (!klass?.type)
            return false;
        if (klass.type === 'NaN' || klass.type === 'Infinity')
            return false;
        return class_regex.test(klass.type);
    }
    $.$mol_view_tree2_class_match = $mol_view_tree2_class_match;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const err = $mol_view_tree2_error_str;
    function $mol_view_tree2_class_super(klass) {
        if (!$mol_view_tree2_class_match(klass))
            return this.$mol_fail(err `Wrong class name at ${klass.span}`);
        const superclass = klass.kids.length === 1 ? klass.kids[0] : undefined;
        if (!superclass)
            return this.$mol_fail(err `No super class at ${klass.span}`);
        if (!$mol_view_tree2_class_match(superclass))
            return this.$mol_fail(err `Wrong super class name ${JSON.stringify(superclass.type).replace(/(^"|"$)/g, "")} at ${superclass.span}`);
        return superclass;
    }
    $.$mol_view_tree2_class_super = $mol_view_tree2_class_super;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const err = $mol_view_tree2_error_str;
    function $mol_view_tree2_class_props(klass) {
        let props = this.$mol_view_tree2_class_super(klass);
        props = props.clone(props.hack({
            '': (node, belt) => {
                const normal = node.type.replace(/!\w+/, '*');
                if (node.type === normal)
                    return [node.clone(node.hack(belt))];
                return [node.struct(normal, node.hack(belt))];
            }
        }));
        const props_inner = {};
        const add_inner = (prop) => {
            const { name } = this.$mol_view_tree2_prop_parts(prop);
            const prev = props_inner[name];
            if (prev && prev.kids[0]?.toString() !== prop.kids[0]?.toString()) {
                this.$mol_fail(err `Need an equal default values at ${prev.span} vs ${prop.span}`);
            }
            props_inner[name] = prop;
        };
        const upper = (operator, belt, context) => {
            const prop = this.$mol_view_tree2_child(operator);
            const defs = prop.hack(belt, { factory: prop });
            if (defs.length)
                add_inner(prop.clone(defs));
            return [operator.clone([prop.clone([])])];
        };
        const props_root = props.hack({
            '<=': upper,
            '<=>': upper,
            '^': (operator, belt, context) => {
                if (operator.kids.length === 0)
                    return [operator];
                return upper(operator, belt, context);
            },
            '': (left, belt, context) => {
                let right;
                const operator = left.kids[0];
                if (operator?.type === '=>' && context.factory) {
                    right = operator.kids[0];
                    if (!right)
                        this.$mol_fail(err `Need a child ${operator.span}`);
                    if (!context.factory)
                        this.$mol_fail(err `Need a parent ${left.span}`);
                    add_inner(right.clone([
                        right.struct('=', [
                            context.factory.struct(context.factory.type.replace(/\*.*/, '*'), [left.clone([])]),
                        ]),
                    ]));
                }
                if (right)
                    context = { factory: right.clone([]) };
                else if (operator && !context.factory && $mol_view_tree2_class_match(operator)) {
                    context = { factory: left.clone([]) };
                }
                const hacked = left.clone(left.hack(belt, context));
                return [hacked];
            }
        }, { factory: undefined });
        for (const prop of props_root)
            add_inner(prop);
        return Object.values(props_inner);
    }
    $.$mol_view_tree2_class_props = $mol_view_tree2_class_props;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_guard_defined(value) {
        return value !== null && value !== undefined;
    }
    $.$mol_guard_defined = $mol_guard_defined;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_js_is_number(type) {
        return type.match(/[\+\-]*NaN/) || !Number.isNaN(Number(type));
    }
    $.$mol_tree2_js_is_number = $mol_tree2_js_is_number;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const err = $mol_view_tree2_error_str;
    function name_of(prop) {
        return this.$mol_view_tree2_prop_parts(prop).name;
    }
    function params_of(prop, bidi = true) {
        const { key, next } = this.$mol_view_tree2_prop_parts(prop);
        return prop.struct('(,)', [
            ...key
                ? [prop.struct('id')]
                : [],
            ...(bidi && next) ? [prop.struct('next')] : [],
        ]);
    }
    function args_of(prop, bidi = true) {
        const { key, next } = this.$mol_view_tree2_prop_parts(prop);
        return prop.struct('(,)', [
            ...key
                ? key.length > 1
                    ? [prop.data(key.slice(1))]
                    : [prop.struct('id')]
                : [],
            ...(bidi && next) ? [prop.struct('next')] : [],
        ]);
    }
    function call_method_name(child, optional) {
        return child.struct(optional ? '?.[]' : '[]', [
            child.data(name_of.call(this, child))
        ]);
    }
    function call_of(bind, bidi = true) {
        if (bind.kids.length === 0) {
            return this.$mol_fail(err `Required one child at ${bind.span}`);
        }
        const chain = [bind.struct('this')];
        for (const child of bind.kids) {
            chain.push(call_method_name.call(this, child, chain.length > 1), args_of.call(this, child, bidi));
        }
        return bind.struct('()', chain);
    }
    const localized_string = $$.$mol_tree2_from_string(`
		()
			this
			[] \\$
			[] \\$mol_locale
			[] \\text
			(,) #key
	`, 'localized_string');
    function klass_body(acc, prop) {
        const { klass, members, addons } = acc;
        const { name, key, next } = this.$mol_view_tree2_prop_parts(prop);
        const decorate = () => {
            return prop.struct('()', [
                prop.struct(key ? '$mol_mem_key' : '$mol_mem'),
                prop.struct('(,)', [
                    prop.struct('()', [
                        klass.struct('$'),
                        prop.struct('[]', [
                            klass.data(klass.type),
                        ]),
                        prop.struct('[]', [
                            prop.data('prototype'),
                        ]),
                    ]),
                    prop.data(name),
                ]),
            ]);
        };
        const op = prop.kids[0];
        const is_delegate = op?.type === '<=>' || op?.type === '=';
        if (!is_delegate && next)
            addons.push(decorate());
        const val = prop.hack({
            '@': (locale, belt, context) => {
                const chain = context.chain?.join('_');
                return localized_string.hack({
                    '#key': key => [locale.data(`${klass.type}_${name}${chain ? `_${chain}` : ''}`)],
                });
            },
            '<=': bind => [call_of.call(this, bind, false)],
            '<=>': bind => [call_of.call(this, bind, true)],
            '=>': bind => [],
            '^': (ref) => [
                ref.struct('...', [
                    ref.struct('()', [
                        ref.struct(ref.kids[0]?.type ? 'this' : 'super'),
                        ref.struct('[]', [
                            ref.data(ref.kids[0]?.type ? name_of.call(this, ref.kids[0]) : name),
                        ]),
                        ref.kids[0]?.type ? args_of.call(this, ref.kids[0]) : ref.struct('(,)')
                    ]),
                ]),
            ],
            '=': bind => [bind.struct('()', [
                    bind.struct('this'),
                    ...bind.hack({ '': (method, belt, ctx) => [
                            call_method_name.call(this, method, (ctx.item_index++) > 0),
                            args_of.call(this, method),
                            ...method.hack(belt),
                        ] }, { item_index: 0 }),
                ])],
            '': (input, belt, context) => {
                if (input.type[0] === '*') {
                    return [
                        input.struct('{,}', input.kids.map(field => {
                            if (field.type === '^')
                                return field.list([field]).hack(belt)[0];
                            const field_name = (field.type || field.value).replace(/\?\w*$/, '');
                            return field.struct(':', [
                                field.data(field_name),
                                field.kids[0].type === '<=>'
                                    ? field.struct('=>', [
                                        params_of.call(this, field),
                                        ...field.hack(belt),
                                    ])
                                    : field.hack(belt, { ...context, chain: [...context.chain ?? [], field_name] })[0],
                            ]);
                        }).filter(this.$mol_guard_defined))
                    ];
                }
                if (input.type[0] === '/')
                    return [
                        input.struct('[,]', input.hack(belt)),
                    ];
                if (input.type && $mol_tree2_js_is_number(input.type))
                    return [
                        input
                    ];
                if ($mol_view_tree2_class_match(input)) {
                    if (!next)
                        addons.push(decorate());
                    const overrides = [];
                    for (const over of input.kids) {
                        if (over.type[0] === '/')
                            continue;
                        const bind = over.kids[0];
                        if (bind.type === '=>')
                            continue;
                        const over_name = name_of.call(this, over);
                        const body = [
                            args_of.call(this, over),
                            over.struct('()', over.hack(belt, { chain: [over.type] })),
                        ];
                        overrides.push(over.struct('=', [
                            over.struct('()', [
                                over.struct('obj'),
                                over.struct('[]', [
                                    over.data(over_name),
                                ]),
                            ]),
                            over.struct('=>', body),
                        ]));
                    }
                    return [
                        input.struct('const', [
                            input.struct('obj'),
                            input.struct('new', [
                                input.struct('this'),
                                input.struct('[]', [
                                    input.data('$'),
                                ]),
                                input.struct('[]', [
                                    input.data(input.type.replace(/<.+>/g, '')),
                                ]),
                                input.struct('(,)', input.select('/', null).hack(belt)),
                            ]),
                        ]),
                        ...overrides,
                        input.struct('obj'),
                    ];
                }
                return [input];
            },
        });
        members.push(prop.struct('.', [
            prop.data(name),
            params_of.call(this, prop),
            prop.struct('{;}', [
                ...next && !is_delegate ? [
                    prop.struct('if', [
                        prop.struct('(!==)', [
                            prop.struct('next'),
                            prop.struct('undefined'),
                        ]),
                        prop.struct('return', [
                            prop.struct('next'),
                        ]),
                    ]),
                ] : [],
                ...val.slice(0, -1),
                prop.struct('return', val.slice(-1)),
            ]),
        ]));
        return acc;
    }
    function $mol_view_tree2_to_js(descr) {
        descr = $mol_view_tree2_classes(descr);
        const definitions = [];
        for (const klass of descr.kids) {
            const parent = klass.kids[0];
            const props = this.$mol_view_tree2_class_props(klass);
            const addons = [];
            const members = [];
            const acc = { klass, addons, members };
            for (const prop of props) {
                try {
                    klass_body.call(this, acc, prop);
                }
                catch (e) {
                    e.message += ` at ${prop.span}`;
                    $mol_fail_hidden(e);
                }
            }
            definitions.push(klass.struct('=', [
                klass.struct('()', [
                    klass.struct('$'),
                    klass.struct('[]', [
                        klass.data(klass.type),
                    ]),
                ]),
                klass.struct('class', [
                    klass.struct(klass.type),
                    parent.struct('extends', [
                        parent.struct('()', [
                            parent.struct('$'),
                            parent.struct('[]', [
                                parent.data(parent.type),
                            ]),
                        ]),
                    ]),
                    klass.struct('{}', members),
                ]),
            ]), ...addons);
        }
        return descr.list([
            descr.struct(';', definitions)
        ]);
    }
    $.$mol_view_tree2_to_js = $mol_view_tree2_to_js;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function is_identifier(tree) {
        if (tree.type)
            return false;
        return /^[a-z_$][a-z_$0-9]*$/i.test(tree.text());
    }
    function $mol_tree2_js_to_text(js) {
        function sequence(open, separator, close) {
            return (input, belt) => [
                input.struct('line', [
                    ...open ? [input.data(open)] : [],
                    input.struct(separator && input.kids.length > 2 ? 'indent' : 'line', [].concat(...input.kids.map((kid, index) => [
                        kid.struct('line', [
                            ...kid.list([kid]).hack(belt),
                            ...(separator && index < input.kids.length - 1) ? [input.data(separator)] : [],
                        ]),
                    ]))),
                    ...close ? [input.data(close)] : [],
                ]),
            ];
        }
        function block(open, separator, close) {
            return (input, belt) => [
                ...open ? [input.data(open)] : [],
                ...input.kids.length === 0 ? [] : [input.struct('indent', input.kids.map((kid, index) => kid.struct('line', [
                        ...kid.list([kid]).hack(belt),
                        ...(separator) ? [input.data(separator)] : [],
                    ])))],
                ...close ? [input.data(close)] : [],
            ];
        }
        function duplet(open, separator, close) {
            return (input, belt) => [
                input.struct('line', [
                    ...open ? [input.data(open)] : [],
                    ...input.list(input.kids.slice(0, 1)).hack(belt),
                    ...(separator && input.kids.length > 1) ? [input.data(separator)] : [],
                    ...input.list(input.kids.slice(1, 2)).hack(belt),
                    ...close ? [input.data(close)] : [],
                ]),
            ];
        }
        function triplet(open, separator12, separator23, close) {
            return (input, belt) => [
                input.struct('line', [
                    ...open ? [input.data(open)] : [],
                    ...input.list(input.kids.slice(0, 1)).hack(belt),
                    ...(separator12 && input.kids.length > 1) ? [input.data(separator12)] : [],
                    ...input.list(input.kids.slice(1, 2)).hack(belt),
                    ...(separator23 && input.kids.length > 2) ? [input.data(separator23)] : [],
                    ...input.list(input.kids.slice(2, 3)).hack(belt),
                    ...close ? [input.data(close)] : [],
                ]),
            ];
        }
        return js.list(js.hack({
            '+': sequence('+'),
            '-': sequence('-'),
            '!': sequence('!'),
            '~': sequence('~'),
            'return': sequence('return '),
            'break': sequence('break '),
            'continue': sequence('continue '),
            'yield': sequence('yield '),
            'yield*': sequence('yield* '),
            'await': sequence('await '),
            'void': sequence('void '),
            'delete': sequence('delete '),
            'typeof': sequence('typeof '),
            'new': sequence('new '),
            '...': sequence('...'),
            '@++': sequence('', '', '++'),
            '@--': sequence('', '', '--'),
            '(in)': sequence('(', ' in ', ')'),
            '(instanceof)': sequence('(', ' instanceof ', ')'),
            '(+)': sequence('(', ' + ', ')'),
            '(-)': sequence('(', ' - ', ')'),
            '(*)': sequence('(', ' * ', ')'),
            '(/)': sequence('(', ' / ', ')'),
            '(%)': sequence('(', ' % ', ')'),
            '(**)': sequence('(', ' ** ', ')'),
            '(<)': sequence('(', ' < ', ')'),
            '(<=)': sequence('(', ' <= ', ')'),
            '(>)': sequence('(', ' > ', ')'),
            '(>=)': sequence('(', ' >= ', ')'),
            '(==)': sequence('(', ' == ', ')'),
            '(!=)': sequence('(', ' != ', ')'),
            '(===)': sequence('(', ' === ', ')'),
            '(!==)': sequence('(', ' !== ', ')'),
            '(<<)': sequence('(', ' << ', ')'),
            '(>>)': sequence('(', ' >> ', ')'),
            '(>>>)': sequence('(', ' >>> ', ')'),
            '(&)': sequence('(', ' & ', ')'),
            '(|)': sequence('(', ' | ', ')'),
            '(^)': sequence('(', ' ^ ', ')'),
            '(&&)': sequence('(', ' && ', ')'),
            '(||)': sequence('(', ' || ', ')'),
            '(,)': sequence('(', ', ', ')'),
            '{;}': block('{', ';', '}'),
            ';': block('', ';', ''),
            '[,]': sequence('[', ', ', ']'),
            '{,}': sequence('{', ', ', '}'),
            '()': sequence('(', '', ')'),
            '{}': block('{', '', '}'),
            '[]': (input, belt) => {
                const first = input.kids[0];
                if (!is_identifier(first))
                    return sequence('[', '', ']')(input, belt);
                else
                    return [input.data('.' + first.text())];
            },
            '?.[]': (input, belt) => {
                const first = input.kids[0];
                if (!is_identifier(first))
                    return sequence('?.[', '', ']')(input, belt);
                else
                    return [input.data('?.' + first.text())];
            },
            ':': (input, belt) => input.kids[0].type
                ? duplet('[', ']: ')(input, belt)
                : duplet('', ': ')(input, belt),
            'let': duplet('let ', ' = '),
            'const': duplet('const ', ' = '),
            'var': duplet('var ', ' = '),
            '=': duplet('', ' = '),
            '+=': duplet('', ' += '),
            '-=': duplet('', ' -= '),
            '*=': duplet('', ' *= '),
            '/=': duplet('', ' /= '),
            '%=': duplet('', ' %= '),
            '**=': duplet('', ' **= '),
            '<<=': duplet('', ' <<= '),
            '>>=': duplet('', ' >>= '),
            '>>>=': duplet('', ' >>>= '),
            '&=': duplet('', ' &= '),
            '|=': duplet('', ' |= '),
            '^=': duplet('', ' ^= '),
            '&&=': duplet('', ' &&= '),
            '||=': duplet('', ' ||= '),
            '=>': duplet('', ' => '),
            'async=>': duplet('async ', ' => '),
            'function': triplet('function '),
            'function*': triplet('function* '),
            'async': triplet('async function '),
            'async*': triplet('async function* '),
            'class': triplet('class ', ' '),
            'extends': sequence('extends ', '', ' '),
            'if': triplet('if', ' ', 'else'),
            '?:': triplet('', ' ? ', ' : '),
            '.': (input, belt) => {
                const first = input.kids[0];
                if (!is_identifier(first))
                    return triplet('[', ']')(input, belt);
                else
                    return [
                        input.data(first.text()),
                        ...input.list(input.kids.slice(1)).hack(belt),
                    ];
            },
            'get': triplet('get [', ']'),
            'set': triplet('set [', ']'),
            'static': triplet('static [', ']'),
            '/./': sequence(),
            '.global': sequence('g'),
            '.multiline': sequence('m'),
            '.ignoreCase': sequence('i'),
            '.source': (input, belt) => [
                input.data('/'),
                input.data(JSON.stringify(input.text()).slice(1, -1)),
                input.data('/'),
            ],
            '``': (input, belt) => {
                return [
                    input.struct('line', [
                        input.data('`'),
                        ...[].concat(...input.kids.map(kid => {
                            if (kid.type) {
                                return [
                                    kid.data('${'),
                                    ...kid.list([kid]).hack(belt),
                                    kid.data('}'),
                                ];
                            }
                            else {
                                return [
                                    input.data(JSON.stringify(kid.text()).slice(1, -1)),
                                ];
                            }
                        })),
                        input.data('`'),
                    ]),
                ];
            },
            '': (input, belt) => {
                if (!input.type)
                    return [
                        input.data(JSON.stringify(input.text())),
                    ];
                if (/^[\w$#][\w0-9$]*$/i.test(input.type))
                    return [
                        input.data(input.type),
                    ];
                if ($mol_tree2_js_is_number(input.type))
                    return [
                        input.data(input.type)
                    ];
                $mol_fail(new SyntaxError(`Wrong node type`));
            },
        }));
    }
    $.$mol_tree2_js_to_text = $mol_tree2_js_to_text;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_text_to_string(text) {
        let res = '';
        function visit(text, prefix, inline) {
            if (text.type === 'indent') {
                if (inline)
                    res += '\n';
                for (let kid of text.kids) {
                    visit(kid, prefix + '\t', false);
                }
                if (inline)
                    res += prefix;
            }
            else if (text.type === 'line') {
                if (!inline)
                    res += prefix;
                for (let kid of text.kids) {
                    visit(kid, prefix, true);
                }
                if (!inline)
                    res += '\n';
            }
            else {
                if (!inline)
                    res += prefix;
                res += text.text();
                if (!inline)
                    res += '\n';
            }
        }
        for (let kid of text.kids) {
            visit(kid, '', false);
        }
        return res;
    }
    $.$mol_tree2_text_to_string = $mol_tree2_text_to_string;
})($ || ($ = {}));

;
	($.$mol_select_list) = class $mol_select_list extends ($.$mol_view) {
		Badges(){
			return [];
		}
		badge_title(id){
			return "badge";
		}
		remove(id, next){
			if(next !== undefined) return next;
			return null;
		}
		badge_hint(){
			return (this.$.$mol_locale.text("$mol_select_list_badge_hint"));
		}
		enabled(){
			return true;
		}
		drop_enabled(){
			return (this.enabled());
		}
		event_select(id, next){
			if(next !== undefined) return next;
			return null;
		}
		align_hor(){
			return "right";
		}
		options(){
			return [];
		}
		options_pickable(){
			return (this.options());
		}
		pick(next){
			if(next !== undefined) return next;
			return "";
		}
		option_title(id){
			return "";
		}
		pick_enabled(){
			return (this.enabled());
		}
		pick_hint(){
			return (this.$.$mol_locale.text("$mol_select_list_pick_hint"));
		}
		filter_pattern(next){
			return (this.Pick().filter_pattern(next));
		}
		Pick_icon(){
			const obj = new this.$.$mol_icon_plus();
			return obj;
		}
		Pick(){
			const obj = new this.$.$mol_select();
			(obj.event_select) = (id, next) => ((this.event_select(id, next)));
			(obj.align_hor) = () => ((this.align_hor()));
			(obj.options) = () => ((this.options_pickable()));
			(obj.value) = (next) => ((this.pick(next)));
			(obj.option_label) = (id) => ((this.option_title(id)));
			(obj.trigger_enabled) = () => ((this.pick_enabled()));
			(obj.hint) = () => ((this.pick_hint()));
			(obj.Trigger_icon) = () => ((this.Pick_icon()));
			return obj;
		}
		value(next){
			if(next !== undefined) return next;
			return [];
		}
		dictionary(){
			return {};
		}
		badges_list(){
			return (this.Badges());
		}
		Badge(id){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.badge_title(id)));
			(obj.click) = (next) => ((this.remove(id, next)));
			(obj.hint) = () => ((this.badge_hint()));
			(obj.enabled) = () => ((this.drop_enabled()));
			return obj;
		}
		sub(){
			return [(this.Pick()), ...(this.badges_list())];
		}
	};
	($mol_mem_key(($.$mol_select_list.prototype), "remove"));
	($mol_mem_key(($.$mol_select_list.prototype), "event_select"));
	($mol_mem(($.$mol_select_list.prototype), "pick"));
	($mol_mem(($.$mol_select_list.prototype), "Pick_icon"));
	($mol_mem(($.$mol_select_list.prototype), "Pick"));
	($mol_mem(($.$mol_select_list.prototype), "value"));
	($mol_mem_key(($.$mol_select_list.prototype), "Badge"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_select_list extends $.$mol_select_list {
            value(val) {
                return super.value(val);
            }
            pick(key) {
                if (!key)
                    return '';
                this.value([...this.value(), key]);
                return '';
            }
            event_select(id, event) {
                event?.preventDefault();
                this.pick(id);
            }
            options() {
                return Object.keys(this.dictionary());
            }
            options_pickable() {
                if (!this.enabled())
                    return [];
                const exists = new Set(this.value());
                return this.options().filter(key => !exists.has(key));
            }
            option_title(key) {
                const value = this.dictionary()[key];
                return value == null ? key : value;
            }
            badge_title(key) {
                return this.option_title(key);
            }
            pick_enabled() {
                return this.options_pickable().length > 0;
            }
            Badges() {
                return this.value()
                    .map(id => this.Badge(id))
                    .reverse();
            }
            title() {
                return this.value().map(key => this.option_title(key)).join(' + ');
            }
            remove(key) {
                this.value(this.value().filter(id => id !== key));
            }
        }
        __decorate([
            $mol_mem
        ], $mol_select_list.prototype, "pick", null);
        __decorate([
            $mol_mem
        ], $mol_select_list.prototype, "options", null);
        __decorate([
            $mol_mem
        ], $mol_select_list.prototype, "options_pickable", null);
        __decorate([
            $mol_mem
        ], $mol_select_list.prototype, "pick_enabled", null);
        __decorate([
            $mol_mem
        ], $mol_select_list.prototype, "title", null);
        __decorate([
            $mol_action
        ], $mol_select_list.prototype, "remove", null);
        $$.$mol_select_list = $mol_select_list;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem } = $mol_style_unit;
        $mol_style_define($mol_select_list, {
            flex: {
                wrap: 'wrap',
                shrink: 1,
                grow: 1,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_to_json(tree) {
        if (!tree.type) {
            if (tree.kids.every(kid => !kid.type))
                return tree.text();
            if (tree.kids.length !== 1)
                this.$mol_fail(new Error(`Multiple json root at ${tree.span}`));
            return this.$mol_tree2_to_json(tree.kids[0]);
        }
        if (tree.type === '-')
            return undefined;
        if (tree.type === 'true')
            return true;
        if (tree.type === 'false')
            return false;
        if (tree.type === 'null')
            return null;
        if (tree.type === '*') {
            const obj = {};
            for (const kid of tree.kids) {
                if (kid.type === '-')
                    continue;
                const key = kid.type || kid.clone(kid.kids.slice(0, -1)).text();
                const val = this.$mol_tree2_to_json(kid.kids[kid.kids.length - 1]);
                if (val !== undefined)
                    obj[key] = val;
            }
            return obj;
        }
        if (tree.type === '/') {
            const res = [];
            for (const kid of tree.kids) {
                if (kid.type === '-')
                    continue;
                var val = this.$mol_tree2_to_json(kid);
                if (val !== undefined)
                    res.push(val);
            }
            return res;
        }
        const numb = Number(tree.type);
        if (!Number.isNaN(numb) || tree.type === 'NaN')
            return numb;
        this.$mol_fail(new Error(`Unknown json type (${tree.type}) at ${tree.span}`));
    }
    $.$mol_tree2_to_json = $mol_tree2_to_json;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const keywords = new Set([
        '',
        '.byte',
        '.sequence',
        '.set_of',
        '.optional',
        '.list_of',
        '.any_of',
        '.except',
        '.with_delimiter',
    ]);
    function $mol_tree2_grammar_check(grammar) {
        function visit(node) {
            check: {
                if (keywords.has(node.type))
                    break check;
                if (grammar.select(node.type).kids.length)
                    break check;
                $mol_fail(node.error(`Wrong pattern name`));
            }
            for (const kid of node.kids) {
                visit(kid);
            }
        }
        visit(grammar);
        return grammar;
    }
    $.$mol_tree2_grammar_check = $mol_tree2_grammar_check;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function attrs_belt(separator) {
        return {
            '': (input) => [
                input.data(' '),
                input.data($mol_html_encode(input.type)),
                ...input.value ? [
                    input.data('"'),
                    input.data($mol_html_encode(input.value)),
                    input.data('"'),
                ] : [],
                ...input.hack({
                    '': (input) => {
                        if (!input.type)
                            return [
                                input.data(separator),
                                input.data('"'),
                                input.data($mol_html_encode(input.text())),
                                input.data('"'),
                            ];
                        $mol_fail(new SyntaxError('Wrong attribute value'));
                    },
                }),
            ],
        };
    }
    function $mol_tree2_xml_to_text(xml) {
        return xml.list(xml.hack({
            '@': (input, belt) => [],
            '--': (input, belt) => [
                xml.struct('line', [
                    input.data('<!-- '),
                    ...input.hack(belt),
                    input.data(' -->'),
                ]),
            ],
            '?': (input, belt) => [
                xml.struct('line', [
                    input.data('<?'),
                    input.kids[0].data(input.kids[0].type),
                    ...input.kids[0].hack(attrs_belt('=')),
                    input.data('?>'),
                ]),
            ],
            '!': (input, belt) => [
                xml.struct('line', [
                    input.data('<!'),
                    input.kids[0].data(input.kids[0].type),
                    ...input.kids[0].hack(attrs_belt(' ')),
                    input.data('>'),
                ]),
            ],
            '': (input, belt) => {
                if (!input.type)
                    return [
                        input.data($mol_html_encode(input.text())),
                    ];
                const attrs = input.select('@', null).hack(attrs_belt('='));
                const content = input.hack(belt);
                return [
                    input.struct('line', [
                        input.data(`<`),
                        input.data(input.type),
                        ...attrs,
                        ...content.length ? [
                            input.data(`>`),
                            input.struct('indent', content),
                            input.data(`</`),
                            input.data(input.type),
                            input.data(`>`),
                        ] : [
                            input.data(` />`),
                        ]
                    ]),
                ];
            },
        }));
    }
    $.$mol_tree2_xml_to_text = $mol_tree2_xml_to_text;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_xml_from_dom(dom) {
        switch (dom.nodeType) {
            case dom.DOCUMENT_NODE: {
                let kids = [];
                for (const kid of dom.childNodes) {
                    kids.push($mol_tree2_xml_from_dom(kid));
                }
                return $mol_tree2.list(kids);
            }
            case dom.PROCESSING_INSTRUCTION_NODE: {
                return $mol_tree2.struct('?', [
                    $mol_tree2.struct(dom.nodeName, dom.nodeValue.split(' ').map(chunk => {
                        const [, name, value] = /^(.*?)(?:="(.*?)")?$/.exec(chunk);
                        const kids = value ? [$mol_tree2.data(value)] : [];
                        return $mol_tree2.struct(name, kids);
                    }))
                ]);
            }
            case dom.DOCUMENT_TYPE_NODE: {
                const dom2 = dom;
                return $mol_tree2.struct('!', [
                    $mol_tree2.struct('DOCTYPE', [
                        $mol_tree2.struct(dom2.name)
                    ])
                ]);
            }
            case dom.ELEMENT_NODE: {
                let kids = [];
                for (const attr of dom.attributes) {
                    kids.push($mol_tree2.struct('@', [
                        $mol_tree2.struct(attr.nodeName, [
                            $mol_tree2.data(attr.nodeValue)
                        ])
                    ]));
                }
                for (const kid of dom.childNodes) {
                    const k = $mol_tree2_xml_from_dom(kid);
                    if (k.type || k.value)
                        kids.push(k);
                }
                return $mol_tree2.struct(dom.nodeName, kids);
            }
            case dom.COMMENT_NODE: {
                return $mol_tree2.struct('--', [
                    $mol_tree2.data(dom.nodeValue)
                ]);
            }
            case dom.TEXT_NODE: {
                if (!dom.nodeValue.trim())
                    return $mol_tree2.list([]);
                return $mol_tree2.data(dom.nodeValue.replace(/\s+/g, ' '));
            }
        }
        return $mol_fail(new Error(`Unsupported node ${dom.nodeName}`));
    }
    $.$mol_tree2_xml_from_dom = $mol_tree2_xml_from_dom;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    function $mol_vlq_encode(val) {
        const sign = val < 0 ? 1 : 0;
        if (sign)
            val = -val;
        let index = sign | ((val & 0b1111) << 1);
        val >>>= 4;
        let res = '';
        while (val) {
            index |= 1 << 5;
            res += alphabet[index];
            if (!val)
                break;
            index = val & 0b11111;
            val >>>= 5;
        }
        res += alphabet[index];
        return res;
    }
    $.$mol_vlq_encode = $mol_vlq_encode;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_text_to_sourcemap(tree) {
        let col = 1;
        let prev_span;
        let prev_index = 0;
        let prev_col = 1;
        let mappings = '';
        let line = [];
        const file_indexes = new Map();
        const file_sources = new Map();
        function span2index(span) {
            if (file_indexes.has(span.uri))
                return file_indexes.get(span.uri);
            const index = file_indexes.size;
            file_indexes.set(span.uri, index);
            file_sources.set(span.uri, span.source);
            return index;
        }
        function next_line() {
            if (!line.length)
                return;
            mappings += line.join(',') + ';';
            line = [];
            col = 1;
            prev_col = 1;
        }
        function visit(text, prefix, inline) {
            function indent() {
                col += prefix;
            }
            if (inline && text.type === 'indent')
                next_line();
            if (prev_span !== text.span || col === 1) {
                const index = span2index(text.span);
                line.push($mol_vlq_encode(col - prev_col) +
                    $mol_vlq_encode(index - prev_index) +
                    $mol_vlq_encode(text.span.row - (prev_span?.row ?? 1)) +
                    $mol_vlq_encode(text.span.col - (prev_span?.col ?? 1)));
                prev_col = col;
                prev_span = text.span;
                prev_index = index;
            }
            if (text.type === 'indent') {
                for (let kid of text.kids) {
                    visit(kid, prefix + 1, false);
                }
                if (inline)
                    next_line();
            }
            else if (text.type === 'line') {
                if (!inline)
                    indent();
                for (let kid of text.kids) {
                    visit(kid, prefix, true);
                }
                if (!inline)
                    next_line();
            }
            else {
                if (!inline)
                    indent();
                col += text.text().length;
                if (!inline)
                    next_line();
            }
        }
        for (let kid of tree.kids) {
            visit(kid, 0, false);
        }
        next_line();
        const map = {
            version: 3,
            sources: [...file_sources.keys()],
            sourcesContent: [...file_sources.values()],
            mappings,
        };
        return map;
    }
    $.$mol_tree2_text_to_sourcemap = $mol_tree2_text_to_sourcemap;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_sourcemap_url(uri, type = 'js') {
        if (type === 'css')
            return `\n/*# sourceMappingURL=${uri}*/`;
        return `\n//# sourceMappingURL=${uri}`;
    }
    $.$mol_sourcemap_url = $mol_sourcemap_url;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const prefix = '# sourceMappingURL=data:application/json,';
    const end_comment = ' */';
    function $mol_sourcemap_dataurl_decode(data) {
        const index = data.lastIndexOf(prefix);
        if (index === -1)
            return undefined;
        data = data.substring(index + prefix.length);
        if (data.endsWith(end_comment))
            data = data.substring(0, data.length - end_comment.length);
        const decoded = this.decodeURIComponent(data);
        try {
            const map = JSON.parse(decoded);
            if (!map)
                return undefined;
            if (typeof map.mappings === 'string' && map.mappings.startsWith(';;')) {
                map.mappings = map.mappings.substring(2);
            }
            return map;
        }
        catch (e) {
            if (e instanceof Error)
                e.message += ', origin=' + decoded;
            $mol_fail_hidden(e);
        }
    }
    $.$mol_sourcemap_dataurl_decode = $mol_sourcemap_dataurl_decode;
    function $mol_sourcemap_dataurl_encode(map, type = 'js') {
        const str = JSON.stringify({ ...map, mappings: ';;' + map.mappings });
        return this.$mol_sourcemap_url('data:application/json,' + this.encodeURIComponent(str), type);
    }
    $.$mol_sourcemap_dataurl_encode = $mol_sourcemap_dataurl_encode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_text_to_string_mapped(text, type) {
        const code = this.$mol_tree2_text_to_string(text);
        const map = this.$mol_tree2_text_to_sourcemap(text);
        const chunk = this.$mol_sourcemap_dataurl_encode(map, type);
        return code + chunk;
    }
    $.$mol_tree2_text_to_string_mapped = $mol_tree2_text_to_string_mapped;
    function $mol_tree2_text_to_string_mapped_js(text) {
        return this.$mol_tree2_text_to_string_mapped(text, 'js');
    }
    $.$mol_tree2_text_to_string_mapped_js = $mol_tree2_text_to_string_mapped_js;
    function $mol_tree2_text_to_string_mapped_css(text) {
        return this.$mol_tree2_text_to_string_mapped(text, 'css');
    }
    $.$mol_tree2_text_to_string_mapped_css = $mol_tree2_text_to_string_mapped_css;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_text_to_sourcemap_vis(text) {
        const code = this.$mol_tree2_text_to_string(text);
        const map = this.$mol_tree2_text_to_sourcemap(text);
        const uri = [
            'https://sokra.github.io/source-map-visualization/#base64',
            btoa(code),
            btoa(JSON.stringify(map)),
            ...map.sourcesContent?.filter($mol_guard_defined).map(btoa) ?? [],
        ].join(',');
        return uri;
    }
    $.$mol_tree2_text_to_sourcemap_vis = $mol_tree2_text_to_sourcemap_vis;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_span_imprint(tree) {
        const sources = new Map();
        const res = tree.clone(tree.hack({
            '': (input, belt) => {
                if (!sources.has(input.span.uri)) {
                    sources.set(input.span.uri, tree.struct(input.span.uri, [
                        tree.data(input.span.source)
                    ]));
                }
                return [
                    input.clone([
                        input.data(input.span.toString()),
                        ...input.hack(belt),
                    ]),
                ];
            },
        }));
        return tree.clone([
            ...sources.values(),
            res,
        ]);
    }
    $.$mol_tree2_span_imprint = $mol_tree2_span_imprint;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_span_reuse(tree) {
        const sources = new Map();
        return tree.clone(tree.hack({
            '': (input, belt) => {
                if (input.type) {
                    sources.set(input.type, input.kids[0].text());
                    return [];
                }
                return input.hack({
                    '': (input, belt) => {
                        const kids = input.list(input.kids.slice(1)).hack(belt);
                        const [_, uri, row, col, length] = /^(.*)#(\d+):(\d+)\/(\d+)$/.exec(input.kids[0].text());
                        const span = new $mol_span(uri, sources.get(uri), Number(row), Number(col), Number(length));
                        return [
                            new $mol_tree2(input.type, input.value, kids, span),
                        ];
                    },
                });
            },
        }));
    }
    $.$mol_tree2_span_reuse = $mol_tree2_span_reuse;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_bin_to_bytes(tree) {
        return Uint8Array.from(tree.kids, kid => parseInt(kid.value, 16));
    }
    $.$mol_tree2_bin_to_bytes = $mol_tree2_bin_to_bytes;
    function $mol_tree2_bin_from_bytes(bytes, span = $mol_span.unknown) {
        return $mol_tree2.list(Array.from(bytes, code => {
            return $mol_tree2.data(code.toString(16).padStart(2, '0'), [], span);
        }), span);
    }
    $.$mol_tree2_bin_from_bytes = $mol_tree2_bin_from_bytes;
    function $mol_tree2_bin_from_string(str, span = $mol_span.unknown) {
        return $mol_tree2_bin_from_bytes([...new TextEncoder().encode(str)], span);
    }
    $.$mol_tree2_bin_from_string = $mol_tree2_bin_from_string;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_leb128_encode(val) {
        const length = Math.max(1, Math.ceil(Math.log2(val) / 7));
        const bytes = new Uint8Array(length);
        for (let i = 0; i < bytes.length; ++i) {
            bytes[i] = ((val >> (7 * i)) & 0xFF) | (1 << 7);
        }
        bytes[bytes.length - 1] ^= (1 << 7);
        return bytes;
    }
    $.$mol_leb128_encode = $mol_leb128_encode;
    function $mol_leb128_decode(bytes) {
        let val = 0;
        for (let i = 0; i < bytes.length; ++i) {
            val |= (bytes[i] & ~(1 << 7)) << (7 * i);
        }
        return val;
    }
    $.$mol_leb128_decode = $mol_leb128_decode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $mol_wasm_bin_section;
    (function ($mol_wasm_bin_section) {
        $mol_wasm_bin_section[$mol_wasm_bin_section["custom"] = 0] = "custom";
        $mol_wasm_bin_section[$mol_wasm_bin_section["type"] = 1] = "type";
        $mol_wasm_bin_section[$mol_wasm_bin_section["import"] = 2] = "import";
        $mol_wasm_bin_section[$mol_wasm_bin_section["func"] = 3] = "func";
        $mol_wasm_bin_section[$mol_wasm_bin_section["table"] = 4] = "table";
        $mol_wasm_bin_section[$mol_wasm_bin_section["memory"] = 5] = "memory";
        $mol_wasm_bin_section[$mol_wasm_bin_section["global"] = 6] = "global";
        $mol_wasm_bin_section[$mol_wasm_bin_section["export"] = 7] = "export";
        $mol_wasm_bin_section[$mol_wasm_bin_section["start"] = 8] = "start";
        $mol_wasm_bin_section[$mol_wasm_bin_section["element"] = 9] = "element";
        $mol_wasm_bin_section[$mol_wasm_bin_section["code"] = 10] = "code";
        $mol_wasm_bin_section[$mol_wasm_bin_section["data"] = 11] = "data";
    })($mol_wasm_bin_section = $.$mol_wasm_bin_section || ($.$mol_wasm_bin_section = {}));
    let $mol_wasm_bin_external;
    (function ($mol_wasm_bin_external) {
        $mol_wasm_bin_external[$mol_wasm_bin_external["func"] = 0] = "func";
        $mol_wasm_bin_external[$mol_wasm_bin_external["table"] = 1] = "table";
        $mol_wasm_bin_external[$mol_wasm_bin_external["mem"] = 2] = "mem";
        $mol_wasm_bin_external[$mol_wasm_bin_external["global"] = 3] = "global";
    })($mol_wasm_bin_external = $.$mol_wasm_bin_external || ($.$mol_wasm_bin_external = {}));
    let $mol_wasm_bin_valtype;
    (function ($mol_wasm_bin_valtype) {
        $mol_wasm_bin_valtype[$mol_wasm_bin_valtype["i32"] = 127] = "i32";
        $mol_wasm_bin_valtype[$mol_wasm_bin_valtype["i64"] = 126] = "i64";
        $mol_wasm_bin_valtype[$mol_wasm_bin_valtype["f32"] = 125] = "f32";
        $mol_wasm_bin_valtype[$mol_wasm_bin_valtype["f64"] = 124] = "f64";
    })($mol_wasm_bin_valtype = $.$mol_wasm_bin_valtype || ($.$mol_wasm_bin_valtype = {}));
    let $mol_wasm_bin_instr;
    (function ($mol_wasm_bin_instr) {
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["block"] = 2] = "block";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["loop"] = 3] = "loop";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["if"] = 4] = "if";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["else"] = 5] = "else";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["br"] = 12] = "br";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["br_if"] = 13] = "br_if";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["br_table"] = 14] = "br_table";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["call"] = 16] = "call";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["call_indirect"] = 17] = "call_indirect";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["ref.null"] = 208] = "ref.null";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["ref.is_null"] = 209] = "ref.is_null";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["ref.func"] = 210] = "ref.func";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["drop"] = 26] = "drop";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["select"] = 27] = "select";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["select2"] = 28] = "select2";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["memory.size"] = 63] = "memory.size";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["memory.grow"] = 64] = "memory.grow";
        $mol_wasm_bin_instr[$mol_wasm_bin_instr["mem"] = 252] = "mem";
    })($mol_wasm_bin_instr = $.$mol_wasm_bin_instr || ($.$mol_wasm_bin_instr = {}));
    let $mol_wasm_bin_instr_nullary;
    (function ($mol_wasm_bin_instr_nullary) {
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["unreachable"] = 0] = "unreachable";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["nop"] = 1] = "nop";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["end"] = 11] = "end";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["return"] = 15] = "return";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.eqz"] = 69] = "i32.eqz";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.eq"] = 70] = "i32.eq";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.ne"] = 71] = "i32.ne";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.lt_s"] = 72] = "i32.lt_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.lt_u"] = 73] = "i32.lt_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.gt_s"] = 74] = "i32.gt_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.gt_u"] = 75] = "i32.gt_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.le_s"] = 76] = "i32.le_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.le_u"] = 77] = "i32.le_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.ge_s"] = 78] = "i32.ge_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.ge_u"] = 79] = "i32.ge_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.eqz"] = 80] = "i64.eqz";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.eq"] = 81] = "i64.eq";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.ne"] = 82] = "i64.ne";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.lt_s"] = 83] = "i64.lt_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.lt_u"] = 84] = "i64.lt_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.gt_s"] = 85] = "i64.gt_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.gt_u"] = 86] = "i64.gt_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.le_s"] = 87] = "i64.le_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.le_u"] = 88] = "i64.le_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.ge_s"] = 89] = "i64.ge_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.ge_u"] = 90] = "i64.ge_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f32.eq"] = 91] = "f32.eq";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f32.ne"] = 92] = "f32.ne";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f32.lt"] = 93] = "f32.lt";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f32.gt"] = 94] = "f32.gt";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f32.le"] = 95] = "f32.le";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f32.ge"] = 96] = "f32.ge";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f64.eq"] = 97] = "f64.eq";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f64.ne"] = 98] = "f64.ne";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f64.lt"] = 99] = "f64.lt";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f64.gt"] = 100] = "f64.gt";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f64.le"] = 101] = "f64.le";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["f64.ge"] = 102] = "f64.ge";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.clz"] = 103] = "i32.clz";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.ctz"] = 104] = "i32.ctz";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.popcnt"] = 105] = "i32.popcnt";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.add"] = 106] = "i32.add";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.sub"] = 107] = "i32.sub";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.mul"] = 108] = "i32.mul";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.div_s"] = 109] = "i32.div_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.div_u"] = 110] = "i32.div_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.rem_s"] = 111] = "i32.rem_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.rem_u"] = 112] = "i32.rem_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.and"] = 113] = "i32.and";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.or"] = 114] = "i32.or";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.xor"] = 115] = "i32.xor";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.shl"] = 116] = "i32.shl";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.shr_s"] = 117] = "i32.shr_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.shr_u"] = 118] = "i32.shr_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.rotl"] = 119] = "i32.rotl";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i32.rotr"] = 120] = "i32.rotr";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.clz"] = 121] = "i64.clz";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.ctz"] = 122] = "i64.ctz";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.popcnt"] = 123] = "i64.popcnt";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.add"] = 124] = "i64.add";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.sub"] = 125] = "i64.sub";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.mul"] = 126] = "i64.mul";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.div_s"] = 127] = "i64.div_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.div_u"] = 128] = "i64.div_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.rem_s"] = 129] = "i64.rem_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.rem_u"] = 130] = "i64.rem_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.and"] = 131] = "i64.and";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.or"] = 132] = "i64.or";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.xor"] = 133] = "i64.xor";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.shl"] = 134] = "i64.shl";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.shr_s"] = 135] = "i64.shr_s";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.shr_u"] = 136] = "i64.shr_u";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.rotl"] = 137] = "i64.rotl";
        $mol_wasm_bin_instr_nullary[$mol_wasm_bin_instr_nullary["i64.rotr"] = 138] = "i64.rotr";
    })($mol_wasm_bin_instr_nullary = $.$mol_wasm_bin_instr_nullary || ($.$mol_wasm_bin_instr_nullary = {}));
    let $mol_wasm_bin_instr_unary;
    (function ($mol_wasm_bin_instr_unary) {
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["local.get"] = 32] = "local.get";
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["local.set"] = 33] = "local.set";
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["local.tee"] = 34] = "local.tee";
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["global.get"] = 35] = "global.get";
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["global.set"] = 36] = "global.set";
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["table.get"] = 37] = "table.get";
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["table.set"] = 38] = "table.set";
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["i32.const"] = 65] = "i32.const";
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["i64.const"] = 66] = "i64.const";
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["f32.const"] = 67] = "f32.const";
        $mol_wasm_bin_instr_unary[$mol_wasm_bin_instr_unary["f64.const"] = 68] = "f64.const";
    })($mol_wasm_bin_instr_unary = $.$mol_wasm_bin_instr_unary || ($.$mol_wasm_bin_instr_unary = {}));
    let $mol_wasm_bin_instr_binary;
    (function ($mol_wasm_bin_instr_binary) {
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i32.load"] = 40] = "i32.load";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.load"] = 41] = "i64.load";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["f32.load"] = 42] = "f32.load";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["f64.load"] = 43] = "f64.load";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i32.load8_s"] = 44] = "i32.load8_s";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i32.load8_u"] = 45] = "i32.load8_u";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i32.load16_s"] = 46] = "i32.load16_s";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i32.load16_u"] = 47] = "i32.load16_u";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.load8_s"] = 48] = "i64.load8_s";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.load8_u"] = 49] = "i64.load8_u";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.load16_s"] = 50] = "i64.load16_s";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.load16_u"] = 51] = "i64.load16_u";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.load32_s"] = 52] = "i64.load32_s";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.load32_u"] = 53] = "i64.load32_u";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i32.store"] = 54] = "i32.store";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.store"] = 55] = "i64.store";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["f32.store"] = 56] = "f32.store";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["f64.store"] = 57] = "f64.store";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i32.store8"] = 58] = "i32.store8";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i32.store16"] = 59] = "i32.store16";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.store8"] = 60] = "i64.store8";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.store16"] = 61] = "i64.store16";
        $mol_wasm_bin_instr_binary[$mol_wasm_bin_instr_binary["i64.store32"] = 62] = "i64.store32";
    })($mol_wasm_bin_instr_binary = $.$mol_wasm_bin_instr_binary || ($.$mol_wasm_bin_instr_binary = {}));
    let $mol_wasm_bin_instr_mem;
    (function ($mol_wasm_bin_instr_mem) {
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["i32.trunc_sat_f32_s"] = 0] = "i32.trunc_sat_f32_s";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["i32.trunc_sat_f32_u"] = 1] = "i32.trunc_sat_f32_u";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["i32.trunc_sat_f64_s"] = 2] = "i32.trunc_sat_f64_s";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["i32.trunc_sat_f64_u"] = 3] = "i32.trunc_sat_f64_u";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["i64.trunc_sat_f32_s"] = 4] = "i64.trunc_sat_f32_s";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["i64.trunc_sat_f32_u"] = 5] = "i64.trunc_sat_f32_u";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["i64.trunc_sat_f64_s"] = 6] = "i64.trunc_sat_f64_s";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["i64.trunc_sat_f64_u"] = 7] = "i64.trunc_sat_f64_u";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["memory.init"] = 8] = "memory.init";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["data.drop"] = 9] = "data.drop";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["memory.copy"] = 10] = "memory.copy";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["memory.fill"] = 11] = "memory.fill";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["table.init"] = 12] = "table.init";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["elem.drop"] = 13] = "elem.drop";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["table.copy"] = 14] = "table.copy";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["table.grow"] = 15] = "table.grow";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["table.size"] = 16] = "table.size";
        $mol_wasm_bin_instr_mem[$mol_wasm_bin_instr_mem["table.fill"] = 17] = "table.fill";
    })($mol_wasm_bin_instr_mem = $.$mol_wasm_bin_instr_mem || ($.$mol_wasm_bin_instr_mem = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_wasm_to_bin(code) {
        const bytes = (bytes, span) => $mol_tree2_bin_from_bytes(bytes, span).kids;
        const int = (int, span) => bytes($mol_leb128_encode(int), span);
        const dyn = (items, span) => [...int(items.length, span), ...items];
        const str = (str, span) => dyn($mol_tree2_bin_from_string(str, span).kids, span);
        const array_prolog = (input, span = input.span) => int(input.kids.length, span);
        const pending = (input) => $mol_fail(input.error('Pending implementation'));
        const prolog = this.$mol_tree2_from_string(`
			\\00
			\\61
			\\73
			\\6D
			\\01
			\\00
			\\00
			\\00
		`, '$mol_tree2_wasm_to_bin_prolog');
        const body = [];
        const types_mapping = new Map();
        customs: {
            const customs = code.select('custom');
            for (const custom of customs.kids) {
                const name = custom.kids[0];
                const section = [];
                section.push(...str(name.type, name.span));
                body.push(...bytes([$mol_wasm_bin_section.custom], custom.span));
                body.push(...dyn(section, custom.span));
            }
        }
        types: {
            const types = code.select('type');
            if (types.kids.length === 0)
                break types;
            const section = [];
            for (const type of types.kids) {
                section.push(...bytes([0x60], type.span));
                const name = type.kids[0];
                types_mapping.set(name.type, types_mapping.size);
                const params = name.select('=>', null);
                section.push(...array_prolog(params));
                for (const param of params.kids) {
                    section.push(...bytes([$mol_wasm_bin_valtype[param.type]], param.span));
                }
                const results = name.select('<=', null);
                section.push(...array_prolog(results));
                for (const result of results.kids) {
                    section.push(...bytes([$mol_wasm_bin_valtype[result.type]], result.span));
                }
            }
            body.push(...bytes([$mol_wasm_bin_section.type], prolog.span), ...dyn([
                ...array_prolog(types, prolog.span),
                ...section,
            ], prolog.span));
        }
        imports: {
            const imports = code.select('import');
            if (imports.kids.length === 0)
                break imports;
            const section = [];
            for (const import_ of imports.kids) {
                const path = import_.kids[0];
                const kind = path.kids[0];
                for (const name of path.type.split('.')) {
                    section.push(...str(name, path.span));
                }
                if (kind.type === 'func') {
                    const name = kind.kids[0];
                    const index = types_mapping.get(name.type);
                    if (index === undefined)
                        this.$mol_fail(name.error('Unknown type'));
                    section.push(...bytes([$mol_wasm_bin_external.func], kind.span), ...int(index, name.span));
                }
            }
            body.push(...bytes([$mol_wasm_bin_section.import], prolog.span), ...dyn([
                ...array_prolog(imports, prolog.span),
                ...section,
            ], prolog.span));
        }
        funcs: {
            const funcs = code.select('func');
            if (funcs.kids.length === 0)
                break funcs;
            const section = [];
            for (const func of funcs.kids) {
                const name = func.kids[0];
                const index = types_mapping.get(name.type);
                if (index === undefined)
                    this.$mol_fail(name.error('Unknown type'));
                section.push(...int(index, name.span));
            }
            body.push(...bytes([$mol_wasm_bin_section.func], prolog.span), ...dyn([
                ...array_prolog(funcs, prolog.span),
                ...section,
            ], prolog.span));
        }
        exports: {
            const exports = code.select('export');
            if (exports.kids.length === 0)
                break exports;
            const section = [];
            for (const export_ of exports.kids) {
                const path = export_.kids[0];
                const kind = path.kids[0];
                section.push(...str(path.type, path.span));
                if (kind.type === 'func') {
                    const name = kind.kids[0];
                    const index = types_mapping.get(name.type);
                    if (index === undefined)
                        this.$mol_fail(name.error('Unknown type'));
                    section.push(...bytes([$mol_wasm_bin_external.func], kind.span), ...int(index, name.span));
                }
            }
            body.push(...bytes([$mol_wasm_bin_section.export], prolog.span), ...dyn([
                ...array_prolog(exports, prolog.span),
                ...section,
            ], prolog.span));
        }
        codes: {
            const funcs = code.select('func');
            if (funcs.kids.length === 0)
                break codes;
            const section = [];
            for (const func of funcs.kids) {
                const body = [];
                body.push(...int(0, func.span));
                for (const expr of func.kids[0].kids) {
                    if (typeof $mol_wasm_bin_instr_unary[expr.type] === 'number') {
                        body.push(...bytes([$mol_wasm_bin_instr_unary[expr.type]], expr.span), ...int(Number(expr.kids[0].type), expr.kids[0].span));
                        continue;
                    }
                    if (typeof $mol_wasm_bin_instr_nullary[expr.type] === 'number') {
                        body.push(...bytes([$mol_wasm_bin_instr_nullary[expr.type]], expr.span));
                        continue;
                    }
                    $mol_fail(expr.error('Unknown wasm instruction'));
                }
                body.push(...bytes([$mol_wasm_bin_instr_nullary.end], func.span));
                section.push(...dyn(body, func.span));
            }
            body.push(...bytes([$mol_wasm_bin_section.code], prolog.span), ...dyn([
                ...array_prolog(funcs, prolog.span),
                ...section,
            ], prolog.span));
        }
        return code.list([
            ...prolog.kids,
            ...body,
        ]);
    }
    $.$mol_tree2_wasm_to_bin = $mol_tree2_wasm_to_bin;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_view_tree2_to_text(tree) {
        return this.$mol_tree2_js_to_text(this.$mol_view_tree2_to_js(tree));
    }
    $.$mol_view_tree2_to_text = $mol_view_tree2_to_text;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_view_tree2_to_locale(module) {
        const locales = {};
        const descr = $mol_view_tree2_classes(module);
        for (const klass of descr.kids) {
            const props = this.$mol_view_tree2_class_props(klass);
            const acc = { chain: [] };
            for (const prop of props) {
                const { name } = this.$mol_view_tree2_prop_parts(prop);
                prop.hack({
                    '': (input, belt, context) => {
                        if (input.type[0] === '@') {
                            const chain = context.chain?.join('_');
                            const path = `${klass.type}_${name}${chain.length ? `_${chain}` : ''}`;
                            locales[path] = input.kids[0].text();
                        }
                        if (input.type[0] === '*') {
                            for (const field of input.kids) {
                                if (field.type === '^')
                                    continue;
                                const field_name = field.type.replace(/\?\w*$/, '');
                                field.hack(belt, {
                                    ...context,
                                    chain: [
                                        ...context.chain ?? [],
                                        field_name
                                    ]
                                });
                            }
                        }
                        if (/^[$A-Z]/.test(input.type)) {
                            for (const over of input.kids) {
                                if (over.type === '/')
                                    continue;
                                const oname = this.$mol_view_tree2_prop_parts(over).name;
                                over.hack(belt, { ...context, chain: [oname] });
                            }
                        }
                        return [input];
                    }
                }, acc);
            }
        }
        return locales;
    }
    $.$mol_view_tree2_to_locale = $mol_view_tree2_to_locale;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const err = $mol_view_tree2_error_str;
    function name_of(prop) {
        const name = prop.type
            ? this.$mol_view_tree2_prop_parts(prop).name
            : prop.value;
        if (!name) {
            this.$mol_fail(err `Required valid prop name at ${prop.span}`);
        }
        return prop.data(name);
    }
    function channel_signature(prop, ...val) {
        const { name, key, next } = this.$mol_view_tree2_prop_parts(prop);
        if (next && !val[0]?.value) {
            this.$mol_fail(err `Type empty for next value at ${prop.span}`);
        }
        return prop.struct('line', [
            prop.data(name),
            prop.data('( '),
            ...key ? [
                prop.data('id'),
                prop.data(': any' + (next ? ', ' : '')),
            ] : [],
            ...next ? [
                prop.data('next'),
                prop.data('?: '),
                ...val,
                prop.data(' '),
            ] : [],
            prop.data(')'),
        ]);
    }
    function return_type(klass, input) {
        return [
            input.data('ReturnType< '),
            klass,
            input.data('[\''),
            name_of.call(this, input),
            input.data('\'] >'),
        ];
    }
    function parameters(klass, input, pick_index) {
        const result = [
            input.data('Parameters< '),
            klass,
            input.data('[\''),
            name_of.call(this, input),
            input.data(`'] >`),
        ];
        if (pick_index !== undefined) {
            result.push(input.data(`[${pick_index}]`));
        }
        return result;
    }
    function primitive_type(input) {
        let type = 'string';
        if (input.type && $mol_tree2_js_is_number(input.type))
            type = 'number';
        if (input.type === 'true' || input.type === 'false')
            type = 'boolean';
        return input.data(type);
    }
    function readonly_arr(input, infered) {
        return [
            input.data('readonly('),
            infered.length === 1 ? infered[0] : input.struct('indent', infered),
            input.data(')[]'),
        ];
    }
    function type_enforce(name, a, b) {
        return name.struct('line', [
            name.data(`type ${name.value.replace(/<.*>/g, '')} = $mol_type_enforce<`),
            name.struct('indent', [
                a[0].struct('line', a),
                a[0].data(','),
                b[0].struct('line', b),
            ]),
            name.data('>'),
        ]);
    }
    function $mol_view_tree2_to_dts(tree) {
        const descr = $mol_view_tree2_classes(tree);
        const types = [];
        for (const klass of descr.kids) {
            let assert_count = 0;
            const parent = this.$mol_view_tree2_child(klass);
            const props = this.$mol_view_tree2_class_props(klass);
            const aliases = [];
            const context = { objects: [] };
            const klass_name = klass.type.slice(1);
            types.push(klass.struct('line', [
                klass.data('export class '),
                klass.data(klass.type),
                parent.data(' extends '),
                parent.data(parent.type),
                klass.data(' {'),
            ]), ...props.map(prop => {
                const val = prop.hack({
                    'null': val => {
                        const kid = val.kids[0];
                        return kid?.type
                            ? [kid.data(kid.type), val.data(' | null')]
                            : [val.data('any')];
                    },
                    'true': val => [val.data('boolean')],
                    'false': val => [val.data('boolean')],
                    '@': (locale, belt) => locale.hack(belt),
                    '<=>': (input) => return_type.call(this, klass.data(klass.type), this.$mol_view_tree2_child(input)),
                    '<=': (input) => return_type.call(this, klass.data(klass.type), this.$mol_view_tree2_child(input)),
                    '=>': () => [],
                    '^': (input) => {
                        const host = input.kids.length ? klass : parent;
                        return return_type.call(this, host.data(host.type), input.kids.length ? input.kids[0] : prop);
                    },
                    '=': (input) => {
                        const left = input.kids[0];
                        const right = left.kids[0];
                        const left_parts = this.$mol_view_tree2_prop_parts(left);
                        const right_parts = this.$mol_view_tree2_prop_parts(right);
                        let conflict;
                        if (left_parts.key && right_parts.key)
                            conflict = 'key';
                        if (conflict) {
                            this.$mol_fail(err `Only one "${conflict}" allowed: ${left_parts[conflict]} at ${left.span} or ${right_parts[conflict]} at ${right.span}`);
                        }
                        const main = klass.data(klass.type);
                        const prop_parts = this.$mol_view_tree2_prop_parts(prop);
                        const method = prop.data(`${klass.type}_${prop_parts.name}`);
                        const second_main = left_parts.key || left_parts.next ? main : left.struct('line', return_type.call(this, main, left));
                        const second_key = left_parts.next || left_parts.key ? left : right;
                        if (prop_parts.key) {
                            types.push(type_enforce.call(this, method.data(`${method.type}__${klass_name}_${++assert_count}`), parameters.call(this, main, prop, 0), parameters.call(this, second_main, second_key, 0)));
                        }
                        if (prop_parts.next) {
                            types.push(type_enforce.call(this, method.data(`${method.type}__${klass_name}_${++assert_count}`), parameters.call(this, main, prop, prop_parts.key ? 1 : 0), parameters.call(this, second_main, second_key, (left_parts.next ? left_parts : right_parts).key ? 1 : 0)));
                        }
                        return return_type.call(this, left.struct('line', return_type.call(this, main, left)), name_of.call(this, right));
                    },
                    '': (input, belt, context) => {
                        if (input.type[0] === '*') {
                            let unions = [];
                            const hacked = [].concat(...input.kids.map(kid => {
                                if (kid.type[0] === '^') {
                                    unions = unions.concat(kid.data(' & '), kid.hack_self(belt, context));
                                    return [];
                                }
                                const child = this.$mol_view_tree2_child(kid);
                                const ret = child.hack_self(belt);
                                return kid.struct('line', kid.type.match(/(?:\*|\?)/)
                                    ? [
                                        channel_signature.call(this, kid, ...ret),
                                        kid.data(': '),
                                        ...ret,
                                        kid.data(','),
                                    ]
                                    : [
                                        kid.data('\''),
                                        kid.data(kid.type || kid.value),
                                        kid.data('\': '),
                                        ...ret,
                                        kid.data(','),
                                    ]);
                            }));
                            if (input.type.length > 1 || !hacked.length) {
                                return [
                                    input.data('Record<string, '),
                                    input.data(input.type.slice(1) || 'any'),
                                    input.data('>'),
                                    ...unions
                                ];
                            }
                            return [
                                input.data('({ '),
                                input.struct('indent', hacked),
                                input.data('}) '),
                                ...unions
                            ];
                        }
                        if (input.type[0] === '/') {
                            const array_type = [
                                input.type.length > 1
                                    ? input.data(input.type.slice(1))
                                    : input.data('any')
                            ];
                            if (array_type[0].value === 'any') {
                                return readonly_arr(input, array_type);
                            }
                            for (const kid of input.kids) {
                                let result = kid.hack_self(belt, context);
                                const val = result[0].value;
                                if (val === 'string') {
                                    result = kid.value.includes('`')
                                        ? [kid.data(JSON.stringify(kid.value))]
                                        : [kid.data('`'), kid, kid.data('`')];
                                }
                                else if (val === 'boolean')
                                    result = [kid.data(kid.type)];
                                else if (kid.type[0] === '^') {
                                    result.push((kid.kids[0] ?? prop).data('[number]'));
                                }
                                else
                                    continue;
                                types.push(type_enforce.call(this, input.data(`${klass.type}_${prop.type.replace(/[\?\*]*/g, '')}__${++assert_count}`), result, array_type));
                            }
                            return readonly_arr(input, array_type);
                        }
                        if ($mol_view_tree2_class_match(input)) {
                            const first = input.kids[0];
                            if (first?.type[0] === '/') {
                                const args = first.kids.map((kid, index) => {
                                    const result = kid.hack_self(belt, context);
                                    if (index !== 0)
                                        result.unshift(kid.data(', '));
                                    return kid.struct('line', result);
                                });
                                types.push(type_enforce.call(this, first.data(`${input.type}__${klass_name}_${++assert_count}`), [
                                    first.data('[ '),
                                    ...args,
                                    first.data(' ]'),
                                ], [
                                    input.data(`ConstructorParameters< typeof `),
                                    input.data(input.type),
                                    input.data(` >`),
                                ]));
                            }
                            else
                                for (const over of input.kids) {
                                    const name = name_of.call(this, over);
                                    const bind = this.$mol_view_tree2_child(over);
                                    if (bind.type === '=>')
                                        continue;
                                    types.push(type_enforce.call(this, over.data(`${input.type}__${name.value}_${klass_name}_${++assert_count}`), over.hack(belt), return_type.call(this, input.data(input.type), over)));
                                }
                            return [
                                input.data(input.type),
                            ];
                        }
                        return [
                            primitive_type(input)
                        ];
                    },
                }, context);
                return prop.struct('indent', [
                    prop.struct('line', [
                        channel_signature.call(this, prop, ...val),
                        prop.data(': '),
                        ...val,
                    ])
                ]);
            }).filter($mol_guard_defined), ...aliases, klass.data('}'), descr.data(''));
        }
        return descr.list([
            descr.data('declare namespace $ {'),
            descr.data(''),
            descr.struct('indent', types),
            descr.data('}'),
        ]);
    }
    $.$mol_view_tree2_to_dts = $mol_view_tree2_to_dts;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const marker2name = {
        '**': 'strong',
        '//': 'emphasis',
        '++': 'insertion',
        '--': 'deletion',
        ';;': 'code',
        '\\\\': 'link',
        '""': 'embed',
    };
    function $hyoo_marked_tree_from_line(code, span_entire = $mol_span.entire('unknown', code)) {
        let span = span_entire.slice(0, 0);
        const nodes = [];
        for (const found of code.matchAll($hyoo_marked_line)) {
            const token = found.groups;
            if (token) {
                const uri_sep_length = token.uri.length + (token.uri && token.content ? 1 : 0);
                span = span.after(token.marker.length * 2 + token.content.length + uri_sep_length);
                const span_content = span.slice(token.marker.length, -token.marker.length);
                const content = token.code
                    ? [$mol_tree2.data(token.content, [], span_content)]
                    : [
                        ...token.uri ? [
                            $mol_tree2.data(token.uri, [], span_content.slice(-uri_sep_length))
                        ] : [],
                        ...token.content ? this.$hyoo_marked_tree_from_line(token.content, span_content.slice(0, -uri_sep_length)).kids : [],
                    ];
                const name = marker2name[token.marker];
                if (!name)
                    this.$mol_fail(`Undefined name for marker ${token.marker}`);
                nodes.push($mol_tree2.struct(name, content, span));
            }
            else {
                span = span.after(found[0].length);
                nodes.push($mol_tree2.data(found[0], [], span));
            }
        }
        return $mol_tree2.list(nodes, span_entire);
    }
    $.$hyoo_marked_tree_from_line = $hyoo_marked_tree_from_line;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const templates = $$.$mol_tree2_from_string(`
		body {;}
			var
				parent
				(||)
					parent
					()
						document
						[] \\createElement
						(,) \\body
			%body
		element const
			child
			()
				document
				[] \\createElement
				(,) %name
		attr ()
			child
			[] \\setAttribute
			(,)
				%name
				%value
		text const
			child
			()
				document
				[] \\createTextNode
				(,) %text
		content ()
			(,) =>
				parent
				%content
			(,) child
		append ()
			parent
			[] \\appendChild
			(,) child
	`, '$hyoo_marked_tree_to_js_templates');
    const wrap_body = templates.select('body', null);
    const wrap_element = templates.select('element', null);
    const wrap_attr = templates.select('attr', null);
    const wrap_text = templates.select('text', null);
    const wrap_content = templates.select('content', null);
    const append_child = templates.select('append', null);
    function hack_inline(name, link_attr) {
        return (input, belt, context) => {
            const uri = link_attr ? input.kids[0] : null;
            const content = link_attr ? input.kids.slice(1) : input.kids;
            return [
                input.struct('{;}', [
                    ...wrap_element.hack({ '%name': () => [input.data(name)] }, { ...context, span: input.span }),
                    ...uri ? [
                        ...wrap_attr.hack({
                            '%name': () => [uri.data(link_attr)],
                            '%value': () => [uri],
                        }, { ...context, span: input.span }),
                    ] : [],
                    ...content.length ? [
                        ...wrap_content.hack({ '%content': () => input.list(content).hack(belt, context) }, { ...context, span: input.span }),
                    ] : [],
                    ...append_child.hack({}, { ...context, span: input.span.slice(-2, -1) }),
                ])
            ];
        };
    }
    function hack_text(input, belt, context) {
        return [
            input.struct('{;}', [
                ...wrap_text.hack({ '%text': () => [input] }, { ...context, span: input.span }),
                ...append_child.hack({}, { ...context, span: input.span }),
            ]),
        ];
    }
    function $hyoo_marked_tree_to_js(mt) {
        return mt.list(wrap_body.hack({
            '%body': () => mt.hack({
                'strong': hack_inline('strong'),
                'emphasis': hack_inline('em'),
                'insertion': hack_inline('ins'),
                'deletion': hack_inline('del'),
                'code': hack_inline('code'),
                'link': hack_inline('a', 'href'),
                'embed': hack_inline('object', 'data'),
                '': hack_text,
            }),
        }));
    }
    $.$hyoo_marked_tree_to_js = $hyoo_marked_tree_to_js;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_json_from_string(str) {
        return JSON.parse(str);
    }
    $.$mol_json_from_string = $mol_json_from_string;
    function $mol_json_to_string(str) {
        return JSON.stringify(str, null, '\t');
    }
    $.$mol_json_to_string = $mol_json_to_string;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_jack = {
        no: (input, belt) => [],
        list: (input, belt) => input.hack(belt),
        tree: input => input.kids,
        type: (input, belt) => input.hack(belt).map(kid => kid.data(kid.type)),
        kids: (input, belt) => [].concat(...input.hack(belt).map(kid => kid.kids)),
        head: (input, belt) => input.hack(belt).slice(0, 1),
        headless: (input, belt) => input.hack(belt).slice(1),
        reversed: (input, belt) => input.hack(belt).reverse(),
        count: (input, belt) => [input.struct(input.hack(belt).length.toString())],
        struct: (input, belt) => {
            const res = input.hack(belt);
            return [res[0].struct(res[0].value, res.slice(1))];
        },
        data: (input, belt) => {
            const res = input.hack(belt);
            return [res[0].data(res[0].value, res.slice(1))];
        },
        jack: (input, belt) => input.hack(Object.create(belt)),
        hack: (input, belt) => {
            const def = input.kids[0];
            if (Reflect.getOwnPropertyDescriptor(belt, def.type)) {
                $mol_fail(def.error('Already hacked'));
            }
            belt[def.type] = (arg, belt_inner, context) => {
                return def.hack(Object.create(Object.assign(Object.create(belt), {
                    from: (input, b, c) => {
                        return arg.hack(Object.assign(Object.create(belt_inner), b), c);
                    },
                    clone: (input, b, c) => [
                        arg.clone(input.hack(b, c)),
                    ],
                })), { ...context, span: arg.span });
            };
            return [];
        },
        test: (input, belt) => {
            const cases = input.select('case').kids;
            const results = cases.map(Case => Case.hack(belt));
            $mol_assert_equal(...results.map(String));
            return [input];
        },
        '+math': (input, belt, context) => input.hack(Object.assign(Object.create(belt), {
            ...belt,
            sum: (input, belt) => [
                input.struct(input.hack(belt, context)
                    .reduce((s, k) => s + Number(k.type), 0)
                    .toString())
            ],
        }), context),
    };
    function $mol_jack_transform(code) {
        return code.list(code.hack(Object.create($.$mol_jack)));
    }
    $.$mol_jack_transform = $mol_jack_transform;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wasm_instance extends $mol_object2 {
        module;
        imports;
        native;
        constructor(module, imports) {
            super();
            this.module = module;
            this.imports = imports;
            this.native = new WebAssembly.Instance(module, imports);
        }
        memory(offset, length) {
            const memory = this.native['exports'].memory;
            return new Uint8Array(memory.buffer, offset, length);
        }
        string(offset, length, encoding = 'utf-8') {
            return new TextDecoder(encoding).decode(this.memory(offset, length));
        }
        get(name) {
            return this.native.exports[name];
        }
    }
    $.$mol_wasm_instance = $mol_wasm_instance;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wasm_module extends $mol_object2 {
        buffer;
        native;
        constructor(buffer) {
            super();
            this.buffer = buffer;
            this.native = new WebAssembly.Module(buffer);
        }
        instance(imports) {
            return new $mol_wasm_instance(this.native, imports);
        }
    }
    $.$mol_wasm_module = $mol_wasm_module;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_js_eval(code) {
        return new Function('', code)();
    }
    $.$mol_js_eval = $mol_js_eval;
})($ || ($ = {}));

;
	($.$hyoo_tree) = class $hyoo_tree extends ($.$mol_book2) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		pipeline_default(){
			return [];
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		Github(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ("https://github.com/hyoo-ru/tree.hyoo.ru/");
			return obj;
		}
		View2JS(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("view.tree ⇒ JS");
			(obj.uri) = () => ("#!source=%24my_app%20%24mol_page%0A%09spec%20%5Chttps%3A%2F%2Fgithub.com%2Fhyoo-ru%2Fmam_mol%2Ftree%2Fmaster%2Fview%23viewtree%0A%09params%20*%20foo%20<%3D%20changable%3Fval%20%2Fstring%0A%09body%20%2F%0A%09%09<%3D%20Info%20%24my_widget%0A%09%09%09empty%20%40%20%5CNo%20content%0A%09%09%09value%3Fval%20<%3D>%20info_value%3Fval%20NaN%0A%09%09%09kids%20<%3D%20info_kids%20%2F%24mol_view_content%0A/pipeline=%24mol_tree2_from_string~%24mol_view_tree2_to_js~%24mol_tree2_js_to_text~%24mol_tree2_text_to_string");
			return obj;
		}
		View2DTS(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("view.tree ⇒ D.TS");
			(obj.uri) = () => ("#!source=%24my_app%20%24mol_page%0A%09spec%20%5Chttps%3A%2F%2Fgithub.com%2Fhyoo-ru%2Fmam_mol%2Ftree%2Fmaster%2Fview%23viewtree%0A%09params%20*%20foo%20<%3D%20changable%3Fval%20%2Fstring%0A%09body%20%2F%0A%09%09<%3D%20Info%20%24my_widget%0A%09%09%09empty%20%40%20%5CNo%20content%0A%09%09%09value%3Fval%20<%3D>%20info_value%3Fval%20NaN%0A%09%09%09kids%20<%3D%20info_kids%20%2F%24mol_view_content%0A/pipeline=%24mol_tree2_from_string~%24mol_view_tree2_to_dts~%24mol_tree2_text_to_string");
			return obj;
		}
		View2L10n(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("view.tree ⇒ locale.json");
			(obj.uri) = () => ("#!source=%24my_app%20%24mol_page%0A%09spec%20%5Chttps%3A%2F%2Fgithub.com%2Fhyoo-ru%2Fmam_mol%2Ftree%2Fmaster%2Fview%23viewtree%0A%09params%20*%20foo%20<%3D%20changable%3Fval%20%2Fstring%0A%09body%20%2F%0A%09%09<%3D%20Info%20%24my_widget%0A%09%09%09empty%20%40%20%5CNo%20content%0A%09%09%09value%3Fval%20<%3D>%20info_value%3Fval%20NaN%0A%09%09%09kids%20<%3D%20info_kids%20%2F%24mol_view_content%0A/pipeline=%24mol_tree2_from_string~%24mol_view_tree2_to_locale");
			return obj;
		}
		Json(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("JSON ⇒ json.tree");
			(obj.uri) = () => ("#!source=%7B%0A%09\"primitives\"%3A%20%5B%0A%09%09\"https%3A%2F%2Fgithub.com%2Fnin-jin%2Ftree.d%2Fwiki%2Fjson.tree\"%2C%0A%09%09true%2C%0A%09%09777%2C%0A%09%09null%0A%09%5D%2C%0A%09\"foo%5Cnbar\"%3A\"xxx%5Cnyyy\"%0A%7D/pipeline=%24mol_json_from_string~%24mol_tree2_from_json");
			return obj;
		}
		Xml(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("xml.tree ⇒ XML");
			(obj.uri) = () => ("#!source=!%20doctype%20html%0A%3F%20xml%20version%20%5C1.0%0A--%20%5Centry%20point%0Ahtml%0A%09meta%20%40%20charset%20%5Cutf-8%0A%09body%0A%09%09a%0A%09%09%09%40%20href%20%5Chttps%3A%2F%2Fgithub.com%2Fnin-jin%2Ftree.d%2Fwiki%2Fxml.tree%0A%09%09%09%5Cxml.tree%0A/pipeline=%24mol_tree2_from_string~%24mol_tree2_xml_to_text~%24mol_tree2_text_to_string");
			return obj;
		}
		XmlTree(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("XML ⇒ xml.tree");
			(obj.uri) = () => ("#!pipeline=%24mol_dom_parse~%24mol_tree2_xml_from_dom/source=%3C!DOCTYPE%20html%3E%0A%3Chtml%20lang%3D%22en%22%3E%0A%09%3Ctitle%3EExample%3C%2Ftitle%3E%0A%3C%2Fhtml%3E");
			return obj;
		}
		Js(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("js.tree ⇒ JS");
			(obj.uri) = () => ("#!source=function%0A%09main%0A%09%28%2C%29%0A%09%09one%0A%09%09%3D%0A%09%09%09two%0A%09%09%092%0A%09%7B%3B%7D%0A%09%09const%0A%09%09%09%5B%2C%5D%0A%09%09%09%09self%0A%09%09%09%09samples%0A%09%09%09%5B%2C%5D%0A%09%09%09%09this%0A%09%09%09%09%7B%2C%7D%0A%09%09%09%09%09%3A%0A%09%09%09%09%09%09%5Cvoid%0A%09%09%09%09%09%09%5B%2C%5D%0A%09%09%09%09%09%09%09null%0A%09%09%09%09%09%09%09undefined%0A%09%09%09%09%09%3A%0A%09%09%09%09%09%09%5Cboolean%0A%09%09%09%09%09%09%5B%2C%5D%0A%09%09%09%09%09%09%09true%0A%09%09%09%09%09%09%09false%0A%09%09%09%09%09%3A%0A%09%09%09%09%09%09777%0A%09%09%09%09%09%09%5B%2C%5D%0A%09%09%09%09%09%09%091e%2B5%0A%09%09%09%09%09%09%09NaN%0A%09%09%09%09%09%09%09Infinity%0A%09%09%09%09%09%3A%0A%09%09%09%09%09%09%28%29%0A%09%09%09%09%09%09%09Symbol%0A%09%09%09%09%09%09%09%5B%5D%20%5CtoStringTag%0A%09%09%09%09%09%09%5Chttps%3A%2F%2Fgithub.com%2Fnin-jin%2Ftree.d%2Fwiki%2Fjs.tree%0A%09%09%09%09%09%3A%0A%09%09%09%09%09%09%5Ctemplate%0A%09%09%09%09%09%09%60%60%0A%09%09%09%09%09%09%09%5Cfoo%3D%20%0A%09%09%09%09%09%09%09foo%0A%09%09%09%09%09%09%09%5C!%0A%09%09%09%09%09%3A%0A%09%09%09%09%09%09%5Cregexp%0A%09%09%09%09%09%09%2F.%2F%0A%09%09%09%09%09%09%09.source%20%5C%5Ct%0A%09%09%09%09%09%09%09.multiline%0A%09%09%09%09%09%09%09.ignoreCase%0A%09%09%09%09%09%09%09.global%0A%09%09%09%09%09...%20foo%0A%09%09%2B%3D%0A%09%09%09two%0A%09%09%09%28*%29%0A%09%09%09%092%0A%09%09%09%093%0A%09%09%09%09%28%29%0A%09%09%09%09%09Math%0A%09%09%09%09%09%5B%5D%20%5Csin%0A%09%09%09%09%09%28%2C%29%200%0A%09%09delete%20samples%0A/pipeline=%24mol_tree2_from_string~%24mol_tree2_js_to_text~%24mol_tree2_text_to_string");
			return obj;
		}
		Wasm(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("wasm.tree ⇒ WASM");
			(obj.uri) = () => ("#!source=custom%20xxx%0A%0Atype%20xxx%0A%09%3D>%20i32%0A%09%3D>%20i64%0A%09%3D>%20f32%0A%09<%3D%20f64%0A%0Aimport%20foo.bar%20func%20xxx%0A/pipeline=%24mol_tree2_from_string~%24mol_tree2_wasm_to_bin~%24mol_tree2_bin_to_bytes~%24mol_wasm_module");
			return obj;
		}
		jack(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("jack.tree ⇒ JS eval");
			(obj.uri) = () => ("#!pipeline=%24mol_tree2_from_string~%24mol_jack_transform~%24mol_tree2_js_to_text~%24mol_tree2_text_to_string~%24mol_js_eval/source=hack%20%2Bpipe%0A%09hack%20%7C>%20var%0A%09%09pipe%0A%09%09from%0A%09hack%20<%7C%20pipe%0A%09from%0A%0Ahack%20%2Bmath%20%2Bpipe%0A%09hack%20square%20%28**%29%0A%09%09<%7C%0A%09%092%0A%09hack%20next%20%28%2B%29%0A%09%09<%7C%0A%09%091%0A%09from%0A%0Ahack%20%2Bdebug%0A%09hack%20log%20%28%29%0A%09%09console%0A%09%09%5B%5D%20%5Clog%0A%09%09%28%2C%29%20from%0A%09from%0A%0A%2Bmath%20%2Bdebug%20%7B%3B%7D%0A%09%7C>%203%0A%09%7C>%20square%0A%09%7C>%20next%0A%09log%20<%7C%0A%09return%20<%7C%0A");
			return obj;
		}
		Mt(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("MarkedText ⇒ JS + SM");
			(obj.uri) = () => ("#!source=%5C%5C**MarkedText**%5Chttps%3A%2F%2Fgithub.com%2Fnin-jin%2FHabHub%2Fissues%2F39%5C%5C/pipeline=%24hyoo_marked_tree_from_line~%24hyoo_marked_tree_to_js~%24mol_tree2_js_to_text~%24mol_tree2_text_to_sourcemap_vis");
			return obj;
		}
		Grammar(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("grammar.tree check");
			(obj.uri) = () => ("#!source=%5Chttps%3A%2F%2Fgithub.com%2Fnin-jin%2Ftree.d%2Fwiki%2Fgrammar.tree%0A%0Atree%20.optional%20.list_of%20line%0A%0Aline%20.sequence%0A%09.optional%20indent%0A%09.optional%20nodes%0A%09new_line%0A%0Anodes%20.sequence%0A%09.optional%20.list_of%20struct%0A%09.optional%20data%0A%09.with_delimiter%20space%0A%0Astruct%20.list_of%20.byte%0A%09.except%20special%0A%0Adata%20.sequence%0A%09data_prefix%0A%09.optional%20.list_of%20.byte%0A%09%09.except%20new_line%0A%0Aspecial%20.any_of%0A%09new_line%0A%09data_prefix%0A%09indent%0A%09space%0A%0Anew_line%20.byte%20%5C0A%0Aindent%20.list_of%20.byte%20%5C09%0Adata_prefix%20.byte%20%5C5C%0Aspace%20.byte%20%5C20%0A/pipeline=%24mol_tree2_from_string~%24mol_tree2_grammar_check");
			return obj;
		}
		Span(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("span.tree imprint/reuse");
			(obj.uri) = () => ("#!source=foo%0A%09bar%0A%09%09%5Chttps%3A%2F%2Fgithub.com%2Fnin-jin%2Ftree.d%2Fwiki%2Fspan.tree%0A/pipeline=%24mol_tree2_from_string~%24mol_tree2_span_imprint~%24mol_tree2_span_reuse~%24mol_tree2_span_imprint");
			return obj;
		}
		Presets_list(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.View2JS()), 
				(this.View2DTS()), 
				(this.View2L10n()), 
				(this.Json()), 
				(this.Xml()), 
				(this.XmlTree()), 
				(this.Js()), 
				(this.Wasm()), 
				(this.jack()), 
				(this.Mt()), 
				(this.Grammar()), 
				(this.Span())
			]);
			return obj;
		}
		Presets(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_tree_Presets_title")));
			(obj.tools) = () => ([(this.Lights()), (this.Github())]);
			(obj.body) = () => ([(this.Presets_list())]);
			return obj;
		}
		source_tools(){
			return [];
		}
		source_default(){
			return "";
		}
		source(next){
			if(next !== undefined) return next;
			return (this.source_default());
		}
		source_hint(){
			return (this.$.$mol_locale.text("$hyoo_tree_source_hint"));
		}
		Source_text(){
			const obj = new this.$.$mol_textarea();
			(obj.value) = (next) => ((this.source(next)));
			(obj.hint) = () => ((this.source_hint()));
			(obj.sidebar_showed) = () => (true);
			return obj;
		}
		Source(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_tree_Source_title")));
			(obj.tools) = () => ((this.source_tools()));
			(obj.body) = () => ([(this.Source_text())]);
			return obj;
		}
		result_title(){
			return (this.Pipeline().title());
		}
		transform_options(){
			return [];
		}
		add_hint(){
			return (this.$.$mol_locale.text("$hyoo_tree_add_hint"));
		}
		Pipeline(){
			const obj = new this.$.$mol_select_list();
			(obj.value) = (next) => ((this.pipeline(next)));
			(obj.options_pickable) = () => ((this.transform_options()));
			(obj.pick_hint) = () => ((this.add_hint()));
			return obj;
		}
		result_text(){
			return null;
		}
		Result_text(){
			const obj = new this.$.$mol_text_code();
			(obj.sidebar_showed) = () => (true);
			(obj.text) = () => ((this.result_text()));
			return obj;
		}
		Result(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.result_title()));
			(obj.head) = () => ([(this.Pipeline())]);
			(obj.body) = () => ([(this.Result_text())]);
			return obj;
		}
		transform_map(){
			return {
				"$mol_tree2_from_string": {"input": "text", "output": "tree"}, 
				"$mol_tree2_to_string": {"input": "tree", "output": "text"}, 
				"$mol_tree2_from_json": {"input": "json", "output": "tree"}, 
				"$mol_tree2_to_json": {"input": "tree", "output": "json"}, 
				"$mol_tree2_grammar_check": {"input": "grammar.tree", "output": "grammar.tree"}, 
				"$mol_dom_parse": {"input": "text", "output": "dom"}, 
				"$mol_tree2_xml_to_text": {"input": "xml.tree", "output": "text.tree"}, 
				"$mol_tree2_xml_from_dom": {"input": "dom", "output": "xml.tree"}, 
				"$mol_tree2_js_to_text": {"input": "js.tree", "output": "text.tree"}, 
				"$mol_tree2_text_to_string": {"input": "text.tree", "output": "text"}, 
				"$mol_tree2_text_to_string_mapped_js": {"input": "text.tree", "output": "text"}, 
				"$mol_tree2_text_to_string_mapped_css": {"input": "text.tree", "output": "text"}, 
				"$mol_tree2_text_to_sourcemap": {"input": "text.tree", "output": "map.json"}, 
				"$mol_tree2_text_to_sourcemap_vis": {"input": "text.tree", "output": "map.vis.url"}, 
				"$mol_tree2_span_imprint": {"input": "tree", "output": "span.tree"}, 
				"$mol_tree2_span_reuse": {"input": "span.tree", "output": "tree"}, 
				"$mol_tree2_wasm_to_bin": {"input": "wasm.tree", "output": "bin.tree"}, 
				"$mol_tree2_bin_from_string": {"input": "text", "output": "bin.tree"}, 
				"$mol_tree2_bin_from_bytes": {"input": "bytes.json", "output": "bin.tree"}, 
				"$mol_tree2_bin_to_bytes": {"input": "bin.tree", "output": "bin"}, 
				"$mol_view_tree2_to_text": {"input": "view.tree", "output": "text.tree"}, 
				"$mol_view_tree2_to_locale": {"input": "view.tree", "output": "json"}, 
				"$mol_view_tree2_to_dts": {"input": "view.tree", "output": "text.tree"}, 
				"$mol_view_tree2_to_js": {"input": "view.tree", "output": "js.tree"}, 
				"$hyoo_marked_tree_from_line": {"input": "text", "output": "marked.tree"}, 
				"$hyoo_marked_tree_to_js": {"input": "marked.tree", "output": "js.tree"}, 
				"$mol_json_from_string": {"input": "text", "output": "json"}, 
				"$mol_json_to_string": {"input": "json", "output": "text"}, 
				"$mol_jack_transform": {"input": "jack.tree", "output": "tree"}, 
				"$mol_wasm_module": {"input": "wasm.bin", "output": "wasm.module"}, 
				"$mol_js_eval": {"input": "text", "output": ""}
			};
		}
		plugins(){
			return [(this.Theme())];
		}
		pipeline(next){
			if(next !== undefined) return next;
			return (this.pipeline_default());
		}
		Placeholder(){
			return null;
		}
		pages(){
			return [
				(this.Presets()), 
				(this.Source()), 
				(this.Result())
			];
		}
	};
	($mol_mem(($.$hyoo_tree.prototype), "Theme"));
	($mol_mem(($.$hyoo_tree.prototype), "Lights"));
	($mol_mem(($.$hyoo_tree.prototype), "Github"));
	($mol_mem(($.$hyoo_tree.prototype), "View2JS"));
	($mol_mem(($.$hyoo_tree.prototype), "View2DTS"));
	($mol_mem(($.$hyoo_tree.prototype), "View2L10n"));
	($mol_mem(($.$hyoo_tree.prototype), "Json"));
	($mol_mem(($.$hyoo_tree.prototype), "Xml"));
	($mol_mem(($.$hyoo_tree.prototype), "XmlTree"));
	($mol_mem(($.$hyoo_tree.prototype), "Js"));
	($mol_mem(($.$hyoo_tree.prototype), "Wasm"));
	($mol_mem(($.$hyoo_tree.prototype), "jack"));
	($mol_mem(($.$hyoo_tree.prototype), "Mt"));
	($mol_mem(($.$hyoo_tree.prototype), "Grammar"));
	($mol_mem(($.$hyoo_tree.prototype), "Span"));
	($mol_mem(($.$hyoo_tree.prototype), "Presets_list"));
	($mol_mem(($.$hyoo_tree.prototype), "Presets"));
	($mol_mem(($.$hyoo_tree.prototype), "source"));
	($mol_mem(($.$hyoo_tree.prototype), "Source_text"));
	($mol_mem(($.$hyoo_tree.prototype), "Source"));
	($mol_mem(($.$hyoo_tree.prototype), "Pipeline"));
	($mol_mem(($.$hyoo_tree.prototype), "Result_text"));
	($mol_mem(($.$hyoo_tree.prototype), "Result"));
	($mol_mem(($.$hyoo_tree.prototype), "pipeline"));


;
"use strict";
var $;
(function ($) {
    function $mol_diff_path(...paths) {
        const limit = Math.min(...paths.map(path => path.length));
        lookup: for (var i = 0; i < limit; ++i) {
            const first = paths[0][i];
            for (let j = 1; j < paths.length; ++j) {
                if (paths[j][i] !== first)
                    break lookup;
            }
        }
        return {
            prefix: paths[0].slice(0, i),
            suffix: paths.map(path => path.slice(i)),
        };
    }
    $.$mol_diff_path = $mol_diff_path;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_tree extends $.$hyoo_tree {
            pipeline(next) {
                const str = this.$.$mol_state_arg.value('pipeline', next && next.join('~'));
                return str && str.split('~').filter(Boolean) || super.pipeline();
            }
            add(index, next) {
                if (next) {
                    this.pipeline([
                        ...this.pipeline().slice(0, index + 1),
                        next,
                    ]);
                }
                return '';
            }
            source(next) {
                return this.$.$mol_state_arg.value('source', next) ?? super.source();
            }
            transform(index, next) {
                let pipeline = this.pipeline();
                if (next)
                    pipeline = this.pipeline([
                        ...pipeline.slice(0, index),
                        next,
                        ...pipeline.slice(index + 1),
                    ]);
                return pipeline[index] ?? null;
            }
            transform_options() {
                const map = this.transform_map();
                const pipeline = this.pipeline();
                const last = pipeline[pipeline.length - 1];
                const type = last ? map[last].output.split('.').filter(Boolean).reverse() : ['text'];
                if (!type.length)
                    return Object.keys(map);
                return Object.keys(map).filter(id => {
                    const diff = $mol_diff_path(type, map[id].input.split('.').reverse());
                    if (!diff.prefix.length)
                        return false;
                    if (diff.suffix.every(s => s.length))
                        return false;
                    return true;
                });
            }
            result(index) {
                const func = this.pipeline()[index];
                if (!func)
                    return '';
                const arg = index ? this.result(index - 1) : this.source();
                const val = this.$[func];
                if ($mol_func_is_class(val)) {
                    return new val(arg);
                }
                else if (typeof val === 'function') {
                    return val.call(this.$, arg) ?? '';
                }
                else {
                    return '';
                }
            }
            result_text() {
                let res = $mol_try(() => this.result(this.pipeline().length - 1));
                if (res instanceof Promise)
                    $mol_fail_hidden(res);
                if (typeof res === 'string')
                    return res;
                if (Object(res) !== res)
                    return String(res);
                if (res instanceof $mol_dom_context.Node)
                    return $mol_dom_serialize(res);
                if (!Reflect.getPrototypeOf(Reflect.getPrototypeOf(res)))
                    return JSON.stringify(res, null, '\t');
                if (Array.isArray(res))
                    return JSON.stringify(res, null, '\t');
                let mime = 'application/octet-stream';
                if (res instanceof $mol_wasm_module) {
                    res = new Uint8Array(res.buffer);
                    mime = 'application/wasm';
                }
                if (res instanceof Uint8Array) {
                    return `data:${mime};base64,${$mol_base64_encode(res)}`;
                }
                return String(res);
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_tree.prototype, "pipeline", null);
        __decorate([
            $mol_mem
        ], $hyoo_tree.prototype, "source", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_tree.prototype, "transform", null);
        __decorate([
            $mol_mem
        ], $hyoo_tree.prototype, "transform_options", null);
        __decorate([
            $mol_mem_key
        ], $hyoo_tree.prototype, "result", null);
        __decorate([
            $mol_mem
        ], $hyoo_tree.prototype, "result_text", null);
        $$.$hyoo_tree = $hyoo_tree;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/tree/tree.view.css", "[hyoo_tree_presets] {\n\tflex: 0 0 20rem;\n}\n\n[hyoo_tree_source] {\n\tflex: 1 0 30rem;\n}\n\n[hyoo_tree_source_body] {\n\tflex-direction: row;\n}\n\n[hyoo_tree_result] {\n\tflex: 1 0 30rem;\n}\n\n[hyoo_tree_result_body] {\n\tflex-direction: row;\n}\n\n");
})($ || ($ = {}));

;
	($.$hyoo_mol) = class $hyoo_mol extends ($.$mol_book2_catalog) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		Sources(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ("https://github.com/hyoo-ru/mam_mol");
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		tools_root(){
			return [(this.Sources()), (this.Lights())];
		}
		Lang(){
			const obj = new this.$.$mol_locale_select();
			return obj;
		}
		Docs(){
			const obj = new this.$.$hyoo_page();
			(obj.side_main_id) = () => ("j0mafl_shvwnd");
			(obj.menu_title) = () => ((this.$.$mol_locale.text("$hyoo_mol_Docs_menu_title")));
			(obj.News) = () => (null);
			(obj.tools_ext) = () => ([(this.Spread_close())]);
			return obj;
		}
		Apps(){
			const obj = new this.$.$hyoo_apps();
			(obj.menu_title) = () => ((this.$.$mol_locale.text("$hyoo_mol_Apps_menu_title")));
			(obj.tools) = () => ([(this.Spread_close())]);
			return obj;
		}
		Demos(){
			const obj = new this.$.$mol_app_demo();
			(obj.menu_title) = () => ((this.$.$mol_locale.text("$hyoo_mol_Demos_menu_title")));
			(obj.tools) = () => ([(this.Spread_close())]);
			return obj;
		}
		Bench(){
			const obj = new this.$.$hyoo_mol_bench();
			(obj.menu_tools) = () => ([(this.Spread_close())]);
			return obj;
		}
		View_tree_syntax_icon(){
			const obj = new this.$.$mol_icon_help();
			return obj;
		}
		View_tree_syntax(){
			const obj = new this.$.$mol_link();
			(obj.hint) = () => ((this.$.$mol_locale.text("$hyoo_mol_View_tree_syntax_hint")));
			(obj.uri) = () => ("#!section=docs/=vv2nig_s5zr0f");
			(obj.sub) = () => ([(this.View_tree_syntax_icon())]);
			return obj;
		}
		tree_pipeline(){
			return [
				"$mol_tree2_from_string", 
				"$mol_view_tree2_to_js", 
				"$mol_tree2_js_to_text", 
				"$mol_tree2_text_to_string"
			];
		}
		tree_source(){
			return "$hyoo_mol_example_app $mol_page\n\tdictionary *\n\t\t^\n\t\tunits /\n\t\t\tnull\n\t\t\tfalse\n\t\t\ttrue\n\t\tnumbs /number\n\t\t\t+5\n\t\t\t+Infinity\n\t\t\t-Infinity\n\t\t\tNaN\n\t\ttext \\\n\t\t\t\\hello\n\t\t\t\\word\n\tbody /$mol_view\n\t\t<= Selector $hyoo_mol_example_selector\n\t\t\tempty @ \\Multilingual string\n\t\t\tvalue? <=> selector_value? \\bidi bind\n\t\t\toptions <= dictionary\n\t\t\tfocused => selector_focused\n";
		}
		View_tree(){
			const obj = new this.$.$hyoo_tree();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_mol_View_tree_title")));
			(obj.Presets) = () => (null);
			(obj.source_tools) = () => ([(this.View_tree_syntax()), (this.Spread_close())]);
			(obj.pipeline_default) = () => ((this.tree_pipeline()));
			(obj.source_default) = () => ((this.tree_source()));
			return obj;
		}
		Icons(){
			const obj = new this.$.$mol_frame();
			(obj.title) = () => ((this.$.$mol_locale.text("$hyoo_mol_Icons_title")));
			(obj.uri) = () => ("https://nin-jin.github.io/mol_icon/");
			return obj;
		}
		plugins(){
			return [(this.Theme())];
		}
		Placeholder(){
			return null;
		}
		menu_title(){
			return (this.$.$mol_locale.text("$hyoo_mol_menu_title"));
		}
		menu_tools(){
			return (this.tools_root());
		}
		menu_foot(){
			return [(this.Lang())];
		}
		param(){
			return "section";
		}
		spreads(){
			return {
				"docs": (this.Docs()), 
				"apps": (this.Apps()), 
				"demos": (this.Demos()), 
				"bench": (this.Bench()), 
				"view.tree": (this.View_tree()), 
				"icons": (this.Icons())
			};
		}
	};
	($mol_mem(($.$hyoo_mol.prototype), "Theme"));
	($mol_mem(($.$hyoo_mol.prototype), "Sources"));
	($mol_mem(($.$hyoo_mol.prototype), "Lights"));
	($mol_mem(($.$hyoo_mol.prototype), "Lang"));
	($mol_mem(($.$hyoo_mol.prototype), "Docs"));
	($mol_mem(($.$hyoo_mol.prototype), "Apps"));
	($mol_mem(($.$hyoo_mol.prototype), "Demos"));
	($mol_mem(($.$hyoo_mol.prototype), "Bench"));
	($mol_mem(($.$hyoo_mol.prototype), "View_tree_syntax_icon"));
	($mol_mem(($.$hyoo_mol.prototype), "View_tree_syntax"));
	($mol_mem(($.$hyoo_mol.prototype), "View_tree"));
	($mol_mem(($.$hyoo_mol.prototype), "Icons"));


;
	($.$mol_section) = class $mol_section extends ($.$mol_list) {
		title_dom_name(){
			return "h1";
		}
		Title(){
			const obj = new this.$.$mol_paragraph();
			(obj.dom_name) = () => ((this.title_dom_name()));
			(obj.title) = () => ((this.title()));
			return obj;
		}
		tools(){
			return [];
		}
		Tools(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.tools()));
			return obj;
		}
		head(){
			return [(this.Title()), (this.Tools())];
		}
		Head(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.head()));
			return obj;
		}
		content(){
			return [];
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.content()));
			return obj;
		}
		level(){
			return 1;
		}
		rows(){
			return [(this.Head()), (this.Content())];
		}
	};
	($mol_mem(($.$mol_section.prototype), "Title"));
	($mol_mem(($.$mol_section.prototype), "Tools"));
	($mol_mem(($.$mol_section.prototype), "Head"));
	($mol_mem(($.$mol_section.prototype), "Content"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_section extends $.$mol_section {
            title_dom_name() {
                return 'h' + this.level();
            }
        }
        $$.$mol_section = $mol_section;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/section/section.view.css", "[mol_section_head] {\n\tjustify-content: space-between;\n\talign-items: flex-end;\n\tflex-wrap: wrap;\n}\n\n[mol_section_title] {\n\tpadding: var(--mol_gap_text);\n\ttext-shadow: 0 0;\n\tfont-weight: normal;\n}\n\n[mol_section_title]:where(h1) {\n\tfont-size: 1.5rem;\n}\n\n[mol_section_title]:where(h2) {\n\tfont-size: 1.5rem;\n\tfont-style: italic;\n}\n\n[mol_section_title]:where(h3) {\n\tfont-size: 1.25rem;\n}\n\n[mol_section_title]:where(h4) {\n\tfont-size: 1.25rem;\n\tfont-style: italic;\n}\n\n[mol_section_title]:where(h5) {\n\tfont-size: 1rem;\n}\n\n[mol_section_title]:where(h6) {\n\tfont-size: 1rem;\n\tfont-style: italic;\n}\n");
})($ || ($ = {}));

;
	($.$hyoo_crowd_app) = class $hyoo_crowd_app extends ($.$mol_book2) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		sync_enabled(){
			return false;
		}
		sync(next){
			if(next !== undefined) return next;
			return null;
		}
		Sync(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Sync");
			(obj.enabled) = () => ((this.sync_enabled()));
			(obj.click) = (next) => ((this.sync(next)));
			return obj;
		}
		Left(){
			const obj = new this.$.$hyoo_crowd_app_peer();
			(obj.title) = () => ("CROWD Text Demo");
			(obj.hint) = () => ("Text of Alice");
			(obj.sync) = () => ((this.sync()));
			(obj.tools) = () => ([(this.Sync())]);
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		Source(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ("https://github.com/hyoo-ru/crowd.hyoo.ru/");
			return obj;
		}
		Right(){
			const obj = new this.$.$hyoo_crowd_app_peer();
			(obj.title) = () => ("");
			(obj.hint) = () => ("Text of Bob");
			(obj.sync) = () => ((this.sync()));
			(obj.tools) = () => ([(this.Lights()), (this.Source())]);
			return obj;
		}
		Placeholder(){
			return null;
		}
		plugins(){
			return [(this.Theme())];
		}
		pages(){
			return [(this.Left()), (this.Right())];
		}
	};
	($mol_mem(($.$hyoo_crowd_app.prototype), "Theme"));
	($mol_mem(($.$hyoo_crowd_app.prototype), "sync"));
	($mol_mem(($.$hyoo_crowd_app.prototype), "Sync"));
	($mol_mem(($.$hyoo_crowd_app.prototype), "Left"));
	($mol_mem(($.$hyoo_crowd_app.prototype), "Lights"));
	($mol_mem(($.$hyoo_crowd_app.prototype), "Source"));
	($mol_mem(($.$hyoo_crowd_app.prototype), "Right"));
	($.$hyoo_crowd_app_peer) = class $hyoo_crowd_app_peer extends ($.$mol_page) {
		hint(){
			return "";
		}
		text(next){
			if(next !== undefined) return next;
			return "";
		}
		Text(){
			const obj = new this.$.$mol_textarea();
			(obj.hint) = () => ((this.hint()));
			(obj.value) = (next) => ((this.text(next)));
			(obj.sidebar_showed) = () => (true);
			return obj;
		}
		stats(){
			return "# Stats\n\n~~Peer:~~ {peer}\n~~Changes:~~ {changes}\n\n| | ~~Alive~~ | ~~Dead~~ | ~~Total~~\n|--|--|--\n| ~~Units~~ | {units:alive} | {units:dead} | {units:total}\n\n| | ~~Now~~ | ~~Sync~~\n|--|--|--\n| ~~Time~~ | {stamp:now} | {stamp:sync}\n\n| | ~~Text~~ | ~~State~~ | ~~Delta~~\n|--|--|--|--\n| ~~Bin Size~~ | {size:text} | {size:state} | {size:delta}\n";
		}
		Stats(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.stats()));
			return obj;
		}
		delta_view(){
			return {};
		}
		Delta(){
			const obj = new this.$.$mol_grid();
			(obj.records) = () => ((this.delta_view()));
			return obj;
		}
		Delta_section(){
			const obj = new this.$.$mol_section();
			(obj.title) = () => ("Delta");
			(obj.content) = () => ([(this.Delta())]);
			return obj;
		}
		store(){
			const obj = new this.$.$hyoo_crowd_land();
			return obj;
		}
		sync(){
			return 0;
		}
		sync_clocks(next){
			if(next !== undefined) return next;
			return [];
		}
		changes(){
			return 0;
		}
		delta(){
			return [];
		}
		body(){
			return [
				(this.Text()), 
				(this.Stats()), 
				(this.Delta_section())
			];
		}
	};
	($mol_mem(($.$hyoo_crowd_app_peer.prototype), "text"));
	($mol_mem(($.$hyoo_crowd_app_peer.prototype), "Text"));
	($mol_mem(($.$hyoo_crowd_app_peer.prototype), "Stats"));
	($mol_mem(($.$hyoo_crowd_app_peer.prototype), "Delta"));
	($mol_mem(($.$hyoo_crowd_app_peer.prototype), "Delta_section"));
	($mol_mem(($.$hyoo_crowd_app_peer.prototype), "store"));
	($mol_mem(($.$hyoo_crowd_app_peer.prototype), "sync_clocks"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_crowd_app extends $.$hyoo_crowd_app {
            sync_enabled() {
                return this.Left().changes() + this.Right().changes() > 0;
            }
            sync(next) {
                if (next == undefined)
                    return 0;
                const left_delta = this.Left().delta();
                const right_delta = this.Right().delta();
                this.Left().store().apply(right_delta);
                this.Right().store().apply(left_delta);
                this.Left().sync_clocks(this.Left().store().clocks.map(clock => new $hyoo_crowd_clock(clock)));
                this.Right().sync_clocks(this.Right().store().clocks.map(clock => new $hyoo_crowd_clock(clock)));
                return Math.random();
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_crowd_app.prototype, "sync", null);
        $$.$hyoo_crowd_app = $hyoo_crowd_app;
        class $hyoo_crowd_app_peer extends $.$hyoo_crowd_app_peer {
            store() {
                return $hyoo_crowd_land.make({
                    peer: $mol_const($mol_wire_sync($hyoo_crowd_peer).generate()),
                });
            }
            sync_clocks(next = [new $hyoo_crowd_clock, new $hyoo_crowd_clock]) {
                return next;
            }
            text(next) {
                this.sync();
                return this.store().chief.as($hyoo_crowd_text).text(next);
            }
            delta() {
                this.text();
                return this.store().delta(this.sync_clocks());
            }
            delta_view() {
                return this.delta().slice().reverse().map(unit => ({
                    'kind': $hyoo_crowd_unit_kind[unit.kind()],
                    'Land': unit.land,
                    'Auth': unit.auth,
                    'Head': unit.head,
                    'Self': unit.self,
                    'Next': unit.next,
                    'Prev': unit.prev,
                    'Time': $hyoo_crowd_time_stamp(unit.time).toString(36),
                    'Data': unit.data instanceof Uint8Array
                        ? `Buffer(${unit.data.length})`
                        : JSON.stringify(unit.data),
                }));
            }
            changes() {
                return this.delta().length;
            }
            size_text() {
                return $mol_charset_encode(this.text()).length;
            }
            units_alive() {
                this.text();
                return [...this.store()._unit_all.values()]
                    .reduce((count, unit) => unit.data === null ? count : count + 1, 0);
            }
            units_total() {
                this.text();
                return this.store().size();
            }
            units_dead() {
                return this.units_total() - this.units_alive();
            }
            size_state_bin() {
                return this.store().delta().reduce((res, unit) => res + this.$.$hyoo_crowd_unit_bin.from_unit(unit).byteLength, 0);
            }
            size_delta_bin() {
                return this.delta().reduce((res, unit) => res + this.$.$hyoo_crowd_unit_bin.from_unit(unit).byteLength, 0);
            }
            stats() {
                this.text();
                return super.stats()
                    .replace('{peer}', this.store().peer_id())
                    .replace('{changes}', this.changes().toLocaleString())
                    .replace('{units:alive}', this.units_alive().toLocaleString())
                    .replace('{units:dead}', this.units_dead().toLocaleString())
                    .replace('{units:total}', this.units_total().toLocaleString())
                    .replace('{stamp:now}', this.store().last_stamp().toString(36))
                    .replace('{stamp:sync}', this.sync_clocks()[1].last_stamp().toString(36))
                    .replace('{size:text}', this.size_text().toLocaleString())
                    .replace('{size:state}', this.size_state_bin().toLocaleString())
                    .replace('{size:delta}', this.size_delta_bin().toLocaleString());
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_crowd_app_peer.prototype, "store", null);
        __decorate([
            $mol_mem
        ], $hyoo_crowd_app_peer.prototype, "sync_clocks", null);
        __decorate([
            $mol_mem
        ], $hyoo_crowd_app_peer.prototype, "text", null);
        __decorate([
            $mol_mem
        ], $hyoo_crowd_app_peer.prototype, "delta", null);
        __decorate([
            $mol_mem
        ], $hyoo_crowd_app_peer.prototype, "delta_view", null);
        __decorate([
            $mol_mem
        ], $hyoo_crowd_app_peer.prototype, "size_state_bin", null);
        __decorate([
            $mol_mem
        ], $hyoo_crowd_app_peer.prototype, "size_delta_bin", null);
        $$.$hyoo_crowd_app_peer = $hyoo_crowd_app_peer;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem } = $mol_style_unit;
        $mol_style_define($hyoo_crowd_app_peer, {
            flex: {
                grow: 1000,
                shrink: 0,
                basis: rem(20),
            },
            Body: {
                padding: 0,
            },
            Text: {
                margin: $mol_gap.block,
                flex: {
                    grow: 0,
                },
            },
            Stats: {
                margin: $mol_gap.block,
            },
            Delta_section: {
                padding: $mol_gap.block,
            },
            Delta: {
                font: {
                    size: rem(.875),
                    family: 'monospace',
                },
                Cell_text: {
                    whiteSpace: 'pre',
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$hyoo_crowd_text_demo) = class $hyoo_crowd_text_demo extends ($.$mol_example_large) {
		Sandbox(){
			const obj = new this.$.$hyoo_crowd_app();
			return obj;
		}
		title(){
			return "CROWD Text Merge";
		}
		sub(){
			return [(this.Sandbox())];
		}
		tags(){
			return ["text", "merge"];
		}
		aspects(){
			return [
				"Application", 
				"Type/String", 
				"Algorithm/Merge"
			];
		}
	};
	($mol_mem(($.$hyoo_crowd_text_demo.prototype), "Sandbox"));


;
"use strict";

;
	($.$mol_app_hello) = class $mol_app_hello extends ($.$mol_view) {
		name_hint(){
			return "Name";
		}
		name(next){
			if(next !== undefined) return next;
			return "";
		}
		Name(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ((this.name_hint()));
			(obj.value) = (next) => ((this.name(next)));
			return obj;
		}
		greeting(){
			return "";
		}
		Greeting(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.greeting())]);
			return obj;
		}
		sub(){
			return [(this.Name()), (this.Greeting())];
		}
	};
	($mol_mem(($.$mol_app_hello.prototype), "name"));
	($mol_mem(($.$mol_app_hello.prototype), "Name"));
	($mol_mem(($.$mol_app_hello.prototype), "Greeting"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_app_hello extends $.$mol_app_hello {
            greeting() {
                super.greeting;
                let name = this.name();
                return name && `Hello, ${name}!` || '';
            }
        }
        __decorate([
            $mol_mem
        ], $mol_app_hello.prototype, "greeting", null);
        $$.$mol_app_hello = $mol_app_hello;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/app/hello/hello.view.css", "/* Styling BEM-block by autogenerated attribute */\n[mol_app_hello] {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tfont: 1.5rem/1 sans-serif;\n\tbox-shadow: 0 0 0 1px var(--mol_theme_line);\n\tflex: 1 1 auto;\n\talign-self: stretch;\n\tmargin: 0;\n}\n\n/* Styling BEM-element by autogenerated attribute */\n[mol_app_hello_name] {\n\tflex-grow: 0;\n\tmargin: 1rem;\n\twidth: 14rem;\n}\n");
})($ || ($ = {}));

;
	($.$mol_app_hello_demo) = class $mol_app_hello_demo extends ($.$mol_example_large) {
		App(){
			const obj = new this.$.$mol_app_hello();
			return obj;
		}
		title(){
			return "Simpliest application";
		}
		sub(){
			return [(this.App())];
		}
		aspects(){
			return ["Application"];
		}
	};
	($mol_mem(($.$mol_app_hello_demo.prototype), "App"));


;
"use strict";

;
	($.$mol_icon_external) = class $mol_icon_external extends ($.$mol_icon) {
		path(){
			return "M14,3V5H17.59L7.76,14.83L9.17,16.24L19,6.41V10H21V3M19,19H5V5H12V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19Z";
		}
	};


;
"use strict";

;
	($.$mol_app_questions) = class $mol_app_questions extends ($.$mol_book2) {
		Themme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		title_default(){
			return (this.$.$mol_locale.text("$mol_app_questions_title_default"));
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		Source_link(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ("https://github.com/eigenmethod/mol/tree/master/app/questions");
			return obj;
		}
		menu_rows(){
			return [];
		}
		Menu_links(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.menu_rows()));
			return obj;
		}
		question_title(id){
			return "";
		}
		question_permalink(id){
			return "";
		}
		Details_permalink_icon(id){
			const obj = new this.$.$mol_icon_external();
			return obj;
		}
		Details_permalink(id){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ((this.question_permalink(id)));
			(obj.sub) = () => ([(this.Details_permalink_icon(id))]);
			return obj;
		}
		Details_close_icon(id){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Details_close(id){
			const obj = new this.$.$mol_link();
			(obj.sub) = () => ([(this.Details_close_icon(id))]);
			(obj.arg) = () => ({"question": null});
			return obj;
		}
		question_descr(id){
			return "";
		}
		Details_descr(id){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.question_descr(id)));
			return obj;
		}
		answers(id){
			return [];
		}
		Answers(id){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.answers(id)));
			return obj;
		}
		question_answer(id){
			return "";
		}
		question_arg_by_index(id){
			return {};
		}
		question_title_by_index(id){
			return "";
		}
		Question_title(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.question_title_by_index(id))]);
			return obj;
		}
		question_tags_by_index(id){
			return [];
		}
		Question_tags(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.question_tags_by_index(id)));
			return obj;
		}
		tag_name(id){
			return " ";
		}
		plugins(){
			return [(this.Themme())];
		}
		Menu(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.title_default()));
			(obj.tools) = () => ([(this.Lights()), (this.Source_link())]);
			(obj.body) = () => ([(this.Menu_links())]);
			return obj;
		}
		Details(id){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.question_title(id)));
			(obj.tools) = () => ([(this.Details_permalink(id)), (this.Details_close(id))]);
			(obj.body) = () => ([(this.Details_descr(id)), (this.Answers(id))]);
			return obj;
		}
		Answer(id){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.question_answer(id)));
			return obj;
		}
		Question_link(id){
			const obj = new this.$.$mol_link();
			(obj.minimal_width) = () => (64);
			(obj.minimal_height) = () => (64);
			(obj.arg) = () => ((this.question_arg_by_index(id)));
			(obj.sub) = () => ([(this.Question_title(id)), (this.Question_tags(id))]);
			return obj;
		}
		Tag(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.tag_name(id))]);
			return obj;
		}
	};
	($mol_mem(($.$mol_app_questions.prototype), "Themme"));
	($mol_mem(($.$mol_app_questions.prototype), "Lights"));
	($mol_mem(($.$mol_app_questions.prototype), "Source_link"));
	($mol_mem(($.$mol_app_questions.prototype), "Menu_links"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Details_permalink_icon"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Details_permalink"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Details_close_icon"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Details_close"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Details_descr"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Answers"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Question_title"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Question_tags"));
	($mol_mem(($.$mol_app_questions.prototype), "Menu"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Details"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Answer"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Question_link"));
	($mol_mem_key(($.$mol_app_questions.prototype), "Tag"));


;
"use strict";
var $;
(function ($) {
    function $mol_html_decode(text) {
        return text
            .replace(/&(?:#(\d+)|(lt|gt|quot|amp));/gi, (str, numb, name) => {
            if (numb)
                return String.fromCharCode(numb);
            const mapping = {
                'lt': '<',
                'gt': '>',
                'quot': '"',
                'amp': '&',
            };
            return mapping[name];
        });
    }
    $.$mol_html_decode = $mol_html_decode;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_app_questions extends $.$mol_app_questions {
            pages() {
                const question = this.question_cur_id();
                return [
                    this.Menu(),
                    ...question ? [this.Details(question)] : [],
                ];
            }
            Placeholder() {
                return this.question_cur_id() ? null : super.Placeholder();
            }
            menu_rows() {
                const res = [];
                const count = Math.min(1000, this.questions_count());
                for (let i = 0; i < count; ++i) {
                    res.push(this.Question_link(i));
                }
                return res;
            }
            question_cur_id() {
                return Number($mol_state_arg.value('question'));
            }
            question_tags_by_index(index) {
                return this.question_short(index).tags.map((name, i) => this.Tag({ row: index, tag: i }));
            }
            tag_name(id) {
                return this.question_short(id.row).tags[id.tag];
            }
            question_title_by_index(index) {
                return $mol_html_decode(this.question_short(index).title);
            }
            question_arg_by_index(index) {
                return {
                    question: this.question_short(index).question_id
                };
            }
            question_title(id) {
                return $mol_html_decode(this.question_full(id).title);
            }
            question_descr(id) {
                return $mol_html_decode(this.question_full(id).body_markdown);
            }
            question_permalink(id) {
                return this.question_full(id).link;
            }
            question_short(index) {
                let page_size = this.data_page_size();
                let page = Math.floor(index / page_size);
                return this.questions_data(page).items[index % page_size];
            }
            questions_count() {
                let uri = `https://api.stackexchange.com/2.2/questions?site=stackoverflow&filter=total`;
                return $mol_fetch.json(uri).total;
            }
            questions_data(page) {
                const uri = `https://api.stackexchange.com/2.2/questions?order=desc&sort=creation&site=stackoverflow&pagesize=${this.data_page_size()}&page=${page + 1}`;
                return $mol_fetch.json(uri);
            }
            data_page_size() {
                return 100;
            }
            question_full(id) {
                const uri = `https://api.stackexchange.com/2.2/questions/${id}?site=stackoverflow&filter=!9YdnSJ*_T`;
                return $mol_fetch.json(uri).items[0];
            }
            question_answers(id) {
                const uri = `https://api.stackexchange.com/2.2/questions/${id}/answers?order=desc&sort=votes&site=stackoverflow&filter=!-*f(6sFKn6ub`;
                return $mol_fetch.json(uri).items;
            }
            answers(id) {
                return this.question_answers(id).map((answer, index) => this.Answer({ question: id, answer: index }));
            }
            question_answer(id) {
                return this.question_answers(id.question)[id.answer].body_markdown;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_app_questions.prototype, "questions_count", null);
        __decorate([
            $mol_mem_key
        ], $mol_app_questions.prototype, "questions_data", null);
        __decorate([
            $mol_mem_key
        ], $mol_app_questions.prototype, "question_full", null);
        __decorate([
            $mol_mem_key
        ], $mol_app_questions.prototype, "question_answers", null);
        $$.$mol_app_questions = $mol_app_questions;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/app/questions/questions.view.css", "[mol_app_questions_menu] {\n\tflex: 0 0 40rem;\n}\n\n[mol_app_questions_question_link] {\n\tdisplay: block;\n\tjustify-content: flex-start;\n\talign-items: flex-start;\n}\n\n[mol_app_questions_question_tags] {\n\tflex: 1 0 auto;\n\tcolor: var(--mol_theme_shade);\n\tdisplay: flex;\n\tflex-wrap: wrap;\n}\n\n[mol_app_questions_tag] {\n\tmargin-right: .5rem;\n}\n\n[mol_app_questions_question_title] {\n\tflex: 1000 1 auto;\n}\n\n[mol_app_questions_details] {\n\tflex: 1 0 60rem;\n}\n\n[mol_app_questions_details_body] {\n\tpadding: 0;\n}\n\n[mol_app_questions_answer] {\n\tmargin: 1rem;\n}\n");
})($ || ($ = {}));

;
	($.$mol_app_questions_demo) = class $mol_app_questions_demo extends ($.$mol_example_large) {
		App(){
			const obj = new this.$.$mol_app_questions();
			return obj;
		}
		title(){
			return "New questions from StackOverflow";
		}
		sub(){
			return [(this.App())];
		}
		aspects(){
			return [
				"Application", 
				"Network/HTTP", 
				"Integration"
			];
		}
	};
	($mol_mem(($.$mol_app_questions_demo.prototype), "App"));


;
"use strict";

;
	($.$mol_app_quine) = class $mol_app_quine extends ($.$mol_page) {
		content(){
			return "";
		}
		Text(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.content()));
			return obj;
		}
		title(){
			return (this.$.$mol_locale.text("$mol_app_quine_title"));
		}
		body(){
			return [(this.Text())];
		}
		paths(){
			return [
				"mol/app/quine/quine.view.tree", 
				"mol/app/quine/quine.view.ts", 
				"mol/app/quine/index.html", 
				"mol/app/quine/quine.locale=ru.json"
			];
		}
	};
	($mol_mem(($.$mol_app_quine.prototype), "Text"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_app_quine extends $.$mol_app_quine {
            content() {
                const paths = this.paths();
                const sources = paths.map(path => {
                    return $mol_file.relative(path).text().toString();
                });
                const content = sources.map((source, index) => {
                    const header = `# ${paths[index].replace(/.*\//, '')}\n`;
                    const code = '```\n' + source.replace(/\n+$/, '') + '\n```\n';
                    return `${header}\n${code}`;
                }).join('\n');
                return content;
            }
        }
        $$.$mol_app_quine = $mol_app_quine;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_app_quine_demo) = class $mol_app_quine_demo extends ($.$mol_example_large) {
		App(){
			const obj = new this.$.$mol_app_quine();
			return obj;
		}
		sub(){
			return [(this.App())];
		}
		aspects(){
			return ["Application", "Network/HTTP"];
		}
	};
	($mol_mem(($.$mol_app_quine_demo.prototype), "App"));


;
"use strict";

;
	($.$mol_app_report) = class $mol_app_report extends ($.$mol_page) {
		description(){
			return "";
		}
		descriptor(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.description())]);
			return obj;
		}
		headCells(){
			return [];
		}
		headRower(){
			const obj = new this.$.$mol_app_report_rower();
			(obj.cells) = () => ((this.headCells()));
			return obj;
		}
		rows(){
			return [(this.headRower())];
		}
		tabler(){
			const obj = new this.$.$mol_app_report_tabler();
			(obj.rows) = () => ((this.rows()));
			return obj;
		}
		rowerCells(id){
			return [];
		}
		cell_content(id){
			return null;
		}
		cellrows(id){
			return 1;
		}
		cellCols(id){
			return 1;
		}
		cell_value(id, next){
			if(next !== undefined) return next;
			return null;
		}
		cell_options(id){
			return {};
		}
		title(){
			return (this.$.$mol_locale.text("$mol_app_report_title"));
		}
		body(){
			return [(this.descriptor()), (this.tabler())];
		}
		rower(id){
			const obj = new this.$.$mol_app_report_rower();
			(obj.cells) = () => ((this.rowerCells(id)));
			return obj;
		}
		cell(id){
			const obj = new this.$.$mol_app_report_cell();
			(obj.content) = () => ((this.cell_content(id)));
			(obj.rows) = () => ((this.cellrows(id)));
			(obj.cols) = () => ((this.cellCols(id)));
			return obj;
		}
		texter(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.cell_value(id))]);
			return obj;
		}
		select(id){
			const obj = new this.$.$mol_select();
			(obj.value) = (next) => ((this.cell_value(id, next)));
			(obj.dictionary) = () => ((this.cell_options(id)));
			return obj;
		}
		number(id){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.cell_value(id, next)));
			return obj;
		}
	};
	($mol_mem(($.$mol_app_report.prototype), "descriptor"));
	($mol_mem(($.$mol_app_report.prototype), "headRower"));
	($mol_mem(($.$mol_app_report.prototype), "tabler"));
	($mol_mem_key(($.$mol_app_report.prototype), "cell_value"));
	($mol_mem_key(($.$mol_app_report.prototype), "rower"));
	($mol_mem_key(($.$mol_app_report.prototype), "cell"));
	($mol_mem_key(($.$mol_app_report.prototype), "texter"));
	($mol_mem_key(($.$mol_app_report.prototype), "select"));
	($mol_mem_key(($.$mol_app_report.prototype), "number"));
	($.$mol_app_report_tabler) = class $mol_app_report_tabler extends ($.$mol_view) {
		rows(){
			return [];
		}
		dom_name(){
			return "table";
		}
		sub(){
			return (this.rows());
		}
	};
	($.$mol_app_report_rower) = class $mol_app_report_rower extends ($.$mol_view) {
		cells(){
			return [];
		}
		dom_name(){
			return "tr";
		}
		sub(){
			return (this.cells());
		}
	};
	($.$mol_app_report_cell) = class $mol_app_report_cell extends ($.$mol_view) {
		cols(){
			return 1;
		}
		rows(){
			return 1;
		}
		content(){
			return null;
		}
		dom_name(){
			return "td";
		}
		attr(){
			return {
				...(super.attr()), 
				"colspan": (this.cols()), 
				"rowspan": (this.rows())
			};
		}
		sub(){
			return [(this.content())];
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_app_report extends $.$mol_app_report {
            formatCols() {
                return [
                    {
                        title: '№ п/п',
                    },
                    {
                        title: 'Наименование',
                    },
                    {
                        title: 'Значение',
                    },
                ];
            }
            format_rows() {
                return [
                    {
                        title: 'Фундамент',
                        sub: [
                            {
                                title: 'Габаритный размер',
                                sub: [
                                    {
                                        field: 'base_length',
                                        title: 'Длинна',
                                    },
                                    {
                                        field: 'base_width',
                                        title: 'Ширина',
                                    },
                                    {
                                        field: 'base_height',
                                        title: 'Высота',
                                    },
                                ]
                            },
                            {
                                field: 'base_kind',
                                title: 'Вид',
                            },
                            {
                                field: 'base_type',
                                title: 'Тип',
                            },
                            {
                                field: 'base_release_year',
                                title: 'Год ввода в эксплуатацию',
                            },
                            {
                                field: 'base_weight_max',
                                title: 'Несущая способность',
                            },
                        ]
                    },
                    {
                        title: 'Кровля',
                        sub: [
                            {
                                title: 'Габаритный размер',
                                sub: [
                                    {
                                        field: 'roof_length',
                                        title: 'Длинна',
                                    },
                                    {
                                        field: 'roof_width',
                                        title: 'Ширина',
                                    },
                                    {
                                        field: 'roof_height',
                                        title: 'Высота',
                                    },
                                ]
                            },
                        ]
                    },
                ];
            }
            scheme() {
                return {
                    'base_length': {
                        type: 'number',
                        mask: 'XX',
                        unit: 'мм',
                    },
                    'base_width': {
                        type: 'number',
                        mask: 'XX',
                        unit: 'мм',
                    },
                    'base_height': {
                        type: 'number',
                        mask: 'XX',
                        unit: 'мм',
                    },
                    'base_kind': {
                        type: 'enum',
                        options: {
                            union: 'Единый',
                            separated: 'Раздельный насос и электродвигатель',
                        },
                    },
                    'base_type': {
                        type: 'enum',
                        options: {
                            ribbon: 'Ленточный',
                            ring: 'Кольцевой',
                            pile: 'Свайный',
                        },
                    },
                    'base_release_year': {
                        type: 'number',
                        mask: 'гггг',
                        unit: 'г.'
                    },
                    'base_weight_max': {
                        type: 'number',
                        mask: 'XX',
                        unit: 'кг',
                    },
                    'roof_length': {
                        type: 'number',
                        mask: 'XX',
                        unit: 'мм',
                    },
                    'roof_width': {
                        type: 'number',
                        mask: 'XX',
                        unit: 'мм',
                    },
                    'roof_height': {
                        type: 'number',
                        mask: 'XX',
                        unit: 'мм',
                    },
                };
            }
            data() {
                return {
                    base_length: '403300',
                    base_width: '22000',
                    base_height: '25000',
                    base_kind: 'union',
                    base_type: 'ribbon',
                    base_release_year: '1993',
                    base_weight_max: '30000',
                    roof_length: '413300',
                    roof_width: '23000',
                    roof_height: '26000',
                };
            }
            description() {
                return `Приложение №1\nПасспорт-формуляр\nМагистральный насосный агрегат\nMHA-1`;
            }
            headCells() {
                return [
                    this.cell([0, 0]),
                    this.cell([0, 1]),
                    this.cell([0, 2]),
                ];
            }
            rows() {
                const rows = super.rows().slice();
                const visit = (pos, format) => {
                    rows.push(this.rower(pos));
                    if (format.sub)
                        format.sub.forEach((format, index) => {
                            visit(pos.concat(index + 1), format);
                        });
                };
                this.format_rows().forEach((format, index) => {
                    visit([index + 1], format);
                });
                return rows;
            }
            formatRow(pos) {
                let format_rows = this.format_rows();
                let next = null;
                for (let index of pos) {
                    next = format_rows[index - 1];
                    format_rows = next.sub;
                }
                return next;
            }
            rowerCells(pos) {
                const formatRow = this.formatRow(pos);
                return [
                    this.cell(pos.concat(0)),
                    this.cell(pos.concat(1)),
                    ...formatRow.field ? [this.cell(pos.concat(2))] : [],
                ];
            }
            cellCols(pos) {
                if (pos[0] === 0) {
                    return 1;
                }
                const col = pos[pos.length - 1];
                if (col === 0)
                    return 1;
                const formatRow = this.formatRow(pos.slice(0, pos.length - 1));
                if (!formatRow.field) {
                    if (col === 1)
                        return 2;
                    else
                        return 0;
                }
                return 1;
            }
            cell_content(pos) {
                if (pos[0] === 0) {
                    return this.texter(pos);
                }
                const col = pos[pos.length - 1];
                if (col === 2) {
                    const field = this.formatRow(pos.slice(0, pos.length - 1)).field;
                    const scheme = this.scheme()[field];
                    switch (scheme.type) {
                        case 'number': return this.number(pos);
                        case 'enum': return this.select(pos);
                    }
                }
                else {
                    return this.texter(pos);
                }
            }
            cell_options(pos) {
                const field = this.formatRow(pos.slice(0, pos.length - 1)).field;
                const scheme = this.scheme()[field];
                if (scheme.type === 'enum')
                    return scheme.options;
                return [];
            }
            cell_value(pos, next) {
                if (next !== void 0)
                    return next;
                if (pos[0] === 0) {
                    return this.formatCols()[pos[1]].title;
                }
                const col = pos[pos.length - 1];
                switch (col) {
                    case 0: return pos.slice(0, pos.length - 1).join('.');
                    case 1: return this.cell_contentName(pos.slice(0, pos.length - 1));
                    case 2: return this.cell_contentValue(pos.slice(0, pos.length - 1));
                }
                return '';
            }
            cell_contentName(pos) {
                const formatRow = this.formatRow(pos);
                return formatRow.title;
            }
            cell_contentValue(pos) {
                const field = this.formatRow(pos).field;
                if (!field)
                    return '';
                const scheme = this.scheme()[field];
                switch (scheme.type) {
                    case 'number': return this.data()[field];
                    case 'enum': return scheme.options[this.data()[field]];
                }
                return '';
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_app_report.prototype, "cell_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_app_report.prototype, "cell_options", null);
        __decorate([
            $mol_mem_key
        ], $mol_app_report.prototype, "cell_value", null);
        $$.$mol_app_report = $mol_app_report;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/app/report/report.view.css", "[mol_app_report] {\n\tmargin: 0;\n}\n\n[mol_app_report_body] {\n\tflex-direction: column;\n}\n\n[mol_app_report_tabler] {\n\tmargin: 1rem;\n\tborder-collapse: collapse;\n\tdisplay: table;\n\twidth: max-content;\n}\n\n[mol_app_report_descriptor] {\n\tdisplay: block;\n\tmargin: 1rem;\n\twhite-space: pre-line;\n\tline-height: 2rem;\n}\n\n[mol_app_report_rower] {\n\tdisplay: table-row;\n}\n\n[mol_app_report_cell] {\n\tborder: 1px solid var(--mol_theme_line);\n\tpadding: 0;\n\tvertical-align: top;\n\tdisplay: table-cell;\n}\n\n[mol_app_report_cell]:not( [colspan=\"1\"] ) {\n\tfont-weight: 500;\n}\n\n[mol_app_report_texter] {\n\tdisplay: flex;\n\tpadding: .5rem 1rem;\n}\n\n[mol_app_report_stringer] {\n\twidth: 100%;\n\tmin-height: 100%;\n}\n");
})($ || ($ = {}));

;
	($.$mol_app_report_demo) = class $mol_app_report_demo extends ($.$mol_example_large) {
		App(){
			const obj = new this.$.$mol_app_report();
			return obj;
		}
		sub(){
			return [(this.App())];
		}
		aspects(){
			return ["Widget/Form"];
		}
	};
	($mol_mem(($.$mol_app_report_demo.prototype), "App"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_array_chunks(array, br) {
        let chunk = [];
        const chunks = [chunk];
        for (let i = 0; i < array.length; ++i) {
            const item = array[i];
            chunk.push(item);
            if (br(item, i)) {
                chunks.push(chunk = []);
            }
        }
        if (chunk.length === 0)
            chunks.pop();
        return chunks;
    }
    $.$mol_array_chunks = $mol_array_chunks;
})($ || ($ = {}));

;
	($.$mol_example_code) = class $mol_example_code extends ($.$mol_example) {
		code(next){
			if(next !== undefined) return next;
			return "";
		}
		Sandbox(){
			const obj = new this.$.$hyoo_js_eval();
			(obj.Menu_page) = () => (null);
			(obj.Perf) = () => (null);
			(obj.Bookmark) = () => (null);
			(obj.code) = (next) => ((this.code(next)));
			return obj;
		}
		sub(){
			return [(this.Sandbox())];
		}
		tags(){
			return [
				"sandbox", 
				"eval", 
				"js", 
				"javascript"
			];
		}
		aspects(){
			return ["Widget/Playground"];
		}
	};
	($mol_mem(($.$mol_example_code.prototype), "code"));
	($mol_mem(($.$mol_example_code.prototype), "Sandbox"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/example/code/code.view.css", "[mol_example_code] {\n\tflex: 1 1 auto;\n\tflex-direction: column;\n\tbox-shadow: 0 0 0 1px var(--mol_theme_line);\n\tborder-radius: var(--mol_gap_round);\n\tmax-width: 100%;\n\tmax-height: 100%;\n\toverflow: hidden;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_array_chunks_demo) = class $mol_array_chunks_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const res = $mol_array_chunks(\n\t[ 1, 2, 3, 4, 5 ],\n\tn => n % 2,\n)";
		}
		aspects(){
			return ["Type/List", "Algorithm/Transform"];
		}
	};
	($mol_mem(($.$mol_array_chunks_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_array_lottery(list) {
        return list[Math.floor(Math.random() * list.length)];
    }
    $.$mol_array_lottery = $mol_array_lottery;
})($ || ($ = {}));

;
	($.$mol_array_lottery_demo) = class $mol_array_lottery_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const rates = [ 1, 2, 3, 4, 5 ]\nconst vote = $mol_array_lottery( rates )";
		}
		aspects(){
			return ["Type/List", "Algorithm/Random"];
		}
	};
	($mol_mem(($.$mol_array_lottery_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_array_trim(array) {
        let last = array.length;
        while (last > 0) {
            --last;
            const value = array[last];
            if (value === undefined)
                array.pop();
            else
                break;
        }
        return array;
    }
    $.$mol_array_trim = $mol_array_trim;
})($ || ($ = {}));

;
	($.$mol_array_trim_demo) = class $mol_array_trim_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const res = $mol_array_trim([\n\tundefined,\n\tnull,\n\t0,\n\tfalse,\n\tnull,\n\tundefined,\n\tundefined,\n])";
		}
		aspects(){
			return ["Type/List"];
		}
	};
	($mol_mem(($.$mol_array_trim_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_assert_demo) = class $mol_assert_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "$mol_assert_unique( [1], [2], [3] )\n$mol_assert_equal( [7] , [7], [7] )\n$mol_assert_fail( ()=> { throw Error( 'test' ) }, 'test' )\n$mol_assert_fail( ()=> { throw RangeError( 'test' ) }, RangeError )";
		}
		aspects(){
			return ["Algorithm/Assert", "Testing"];
		}
	};
	($mol_mem(($.$mol_assert_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_icon_upload) = class $mol_icon_upload extends ($.$mol_icon) {
		path(){
			return "M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z";
		}
	};


;
"use strict";

;
	($.$mol_button_open) = class $mol_button_open extends ($.$mol_button_minor) {
		Icon(){
			const obj = new this.$.$mol_icon_upload();
			return obj;
		}
		files(next){
			if(next !== undefined) return next;
			return [];
		}
		accept(){
			return "";
		}
		multiple(){
			return true;
		}
		Native(){
			const obj = new this.$.$mol_button_open_native();
			(obj.files) = (next) => ((this.files(next)));
			(obj.accept) = () => ((this.accept()));
			(obj.multiple) = () => ((this.multiple()));
			return obj;
		}
		sub(){
			return [(this.Icon()), (this.Native())];
		}
	};
	($mol_mem(($.$mol_button_open.prototype), "Icon"));
	($mol_mem(($.$mol_button_open.prototype), "files"));
	($mol_mem(($.$mol_button_open.prototype), "Native"));
	($.$mol_button_open_native) = class $mol_button_open_native extends ($.$mol_view) {
		accept(){
			return "";
		}
		multiple(){
			return true;
		}
		picked(next){
			if(next !== undefined) return next;
			return null;
		}
		dom_name(){
			return "input";
		}
		files(next){
			if(next !== undefined) return next;
			return [];
		}
		attr(){
			return {
				"type": "file", 
				"accept": (this.accept()), 
				"multiple": (this.multiple())
			};
		}
		event(){
			return {"change": (next) => (this.picked(next))};
		}
	};
	($mol_mem(($.$mol_button_open_native.prototype), "picked"));
	($mol_mem(($.$mol_button_open_native.prototype), "files"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_button_open_native extends $.$mol_button_open_native {
            dom_node() {
                return super.dom_node();
            }
            picked() {
                const files = this.dom_node().files;
                if (!files || !files.length)
                    return;
                this.files([...files]);
            }
        }
        $$.$mol_button_open_native = $mol_button_open_native;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/button/open/open.view.css", "[mol_button_open_native] {\n\tposition: absolute;\n\tleft: 0;\n\ttop: -100%;\n\twidth: 100%;\n\theight: 200%;\n\tcursor: pointer;\n\topacity: 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_attach) = class $mol_attach extends ($.$mol_view) {
		content(){
			return [];
		}
		Content(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ((this.content()));
			return obj;
		}
		attach_title(){
			return "";
		}
		attach_new(next){
			if(next !== undefined) return next;
			return null;
		}
		item_drop(id, next){
			if(next !== undefined) return next;
			return null;
		}
		item_uri(id){
			return "";
		}
		Image(id){
			const obj = new this.$.$mol_image();
			(obj.title) = () => ("");
			(obj.uri) = () => ((this.item_uri(id)));
			return obj;
		}
		items(next){
			if(next !== undefined) return next;
			return [];
		}
		sub(){
			return [(this.Content())];
		}
		Add(){
			const obj = new this.$.$mol_button_open();
			(obj.title) = () => ((this.attach_title()));
			(obj.files) = (next) => ((this.attach_new(next)));
			return obj;
		}
		Item(id){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.item_drop(id, next)));
			(obj.sub) = () => ([(this.Image(id))]);
			return obj;
		}
	};
	($mol_mem(($.$mol_attach.prototype), "Content"));
	($mol_mem(($.$mol_attach.prototype), "attach_new"));
	($mol_mem_key(($.$mol_attach.prototype), "item_drop"));
	($mol_mem_key(($.$mol_attach.prototype), "Image"));
	($mol_mem(($.$mol_attach.prototype), "items"));
	($mol_mem(($.$mol_attach.prototype), "Add"));
	($mol_mem_key(($.$mol_attach.prototype), "Item"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_attach extends $.$mol_attach {
            attach_new(files) {
                this.items([
                    ...this.items(),
                    ...files.map(file => URL.createObjectURL(file)),
                ]);
            }
            content() {
                return [...this.items().map((_, i) => this.Item(i)), this.Add()];
            }
            item_uri(index) {
                return this.items()[index];
            }
            item_drop(index, event) {
                const items = this.items();
                this.items([
                    ...items.slice(0, index),
                    ...items.slice(index + 1),
                ]);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_attach.prototype, "content", null);
        $$.$mol_attach = $mol_attach;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/attach/attach.view.css", "[mol_attach_item] {\n\twidth: 6rem;\n\theight: 6rem;\n\tborder-radius: var(--mol_gap_round);\n\tpadding: 0;\n}\n\n[mol_attach_image] {\n\tbackground: var(--mol_theme_card);\n\twidth: 100%;\n\theight: 100%;\n}\n\n[mol_attach_add] {\n\tbackground: var(--mol_theme_card);\n\twidth: 6rem;\n\theight: 6rem;\n\talign-items: center;\n\tjustify-content: center;\n\toverflow: hidden;\n}\n\n[mol_attach_add_icon] {\n\twidth: 50%;\n\theight: 50%;\n}\n");
})($ || ($ = {}));

;
	($.$mol_attach_demo) = class $mol_attach_demo extends ($.$mol_example_small) {
		filled_items(next){
			if(next !== undefined) return next;
			return ["https://picsum.photos/200"];
		}
		Filled(){
			const obj = new this.$.$mol_attach();
			(obj.items) = (next) => ((this.filled_items(next)));
			return obj;
		}
		title(){
			return "Attach files an show them";
		}
		sub(){
			return [(this.Filled())];
		}
		tags(){
			return [
				"file", 
				"image", 
				"upload"
			];
		}
		aspects(){
			return ["Widget/Control", "Type/File"];
		}
	};
	($mol_mem(($.$mol_attach_demo.prototype), "filled_items"));
	($mol_mem(($.$mol_attach_demo.prototype), "Filled"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_audio_context extends $mol_object {
        time() {
            return this.native().currentTime;
        }
        native(reset) {
            const AudioContext = this.$.$mol_dom_context.AudioContext || this.$.$node['web-audio-api'].AudioContext;
            const ctx = new AudioContext();
            ctx.onstatechange = (e) => this.state(null);
            return $mol_wire_sync(ctx);
        }
        state(next) {
            const ctx = this.native();
            if (ctx.state === next)
                return next;
            if (next === 'closed')
                ctx.close();
            if (next === 'running')
                ctx.resume();
            if (next === 'suspended')
                ctx.suspend();
            return ctx.state;
        }
        active(next) {
            return this.state(next ? 'running' : next === false ? 'suspended' : undefined) === 'running';
        }
    }
    __decorate([
        $mol_mem
    ], $mol_audio_context.prototype, "native", null);
    __decorate([
        $mol_mem
    ], $mol_audio_context.prototype, "state", null);
    $.$mol_audio_context = $mol_audio_context;
    $.$mol_audio_context_main = new $mol_audio_context;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_audio_node extends $mol_object {
        context(next) {
            return next ?? this.$.$mol_audio_context_main;
        }
        input(next = []) { return next; }
        input_connected() {
            const node = this.node();
            const prev = $mol_wire_probe(() => this.input_connected()) ?? [];
            const next = this.input();
            for (const src of prev) {
                if (next.includes(src))
                    continue;
                $mol_wire_probe(() => src.output())?.disconnect(node);
            }
            const ctx = this.context();
            for (const src of next) {
                src.context(ctx);
                src.output().connect(node);
            }
            return next;
        }
        active(next) { return next ?? false; }
        inputs_active() {
            return this.input_connected().some(src => src.active());
        }
        node() {
            throw new Error('implement');
        }
        output() {
            this.input_connected();
            return this.node();
        }
        time_cut() { return this.context().time(); }
        destructor() {
            const inputs = $mol_wire_probe(() => this.input_connected());
            if (!inputs?.length)
                return;
            const node = $mol_wire_probe(() => this.node());
            if (!node)
                return;
            for (const src of inputs) {
                src.output().disconnect(node);
            }
        }
    }
    __decorate([
        $mol_mem
    ], $mol_audio_node.prototype, "context", null);
    __decorate([
        $mol_mem
    ], $mol_audio_node.prototype, "input", null);
    __decorate([
        $mol_mem
    ], $mol_audio_node.prototype, "input_connected", null);
    __decorate([
        $mol_mem
    ], $mol_audio_node.prototype, "active", null);
    __decorate([
        $mol_mem
    ], $mol_audio_node.prototype, "inputs_active", null);
    __decorate([
        $mol_mem
    ], $mol_audio_node.prototype, "node", null);
    __decorate([
        $mol_mem
    ], $mol_audio_node.prototype, "output", null);
    __decorate([
        $mol_action
    ], $mol_audio_node.prototype, "time_cut", null);
    $.$mol_audio_node = $mol_audio_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_audio_gain extends $mol_audio_node {
        node(reset) { return this.context().native().createGain(); }
        output() {
            this.gain();
            return super.output();
        }
        gain_default() { return 1; }
        gain(next) {
            this.node().gain.setValueAtTime(next ?? this.gain_default(), this.time_cut());
            return next;
        }
    }
    __decorate([
        $mol_mem
    ], $mol_audio_gain.prototype, "node", null);
    __decorate([
        $mol_mem
    ], $mol_audio_gain.prototype, "output", null);
    __decorate([
        $mol_mem
    ], $mol_audio_gain.prototype, "gain", null);
    $.$mol_audio_gain = $mol_audio_gain;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_audio_tone_indices = {
        'b#': 0,
        a: 1,
        'a#': 2,
        b: 3,
        c: 4,
        'c#': 5,
        d: 6,
        'd#': 7,
        e: 8,
        f: 9,
        'f#': 10,
        g: 11,
    };
    $.$mol_audio_tone_base_freq = 440;
    function $mol_audio_tone_key_freq(name, octave) {
        const index = $.$mol_audio_tone_indices[name] + 12 * (octave ?? 4);
        return $.$mol_audio_tone_base_freq * (2 ** ((index - 49) / 12));
    }
    $.$mol_audio_tone_key_freq = $mol_audio_tone_key_freq;
    function $mol_audio_tone_parse(raw) {
        const [, key, octave_str, duration_str] = raw.match(/((?:[a-g]#?)|_)(-?[0-4])?(?:\/(\d+))?/) ?? [];
        if (!key)
            throw new $mol_error_mix('Not a note', { note: raw });
        const octave = octave_str ? (3 + Number(octave_str)) : null;
        const duration = Number(duration_str || 1);
        return {
            key: key.startsWith('_') ? null : key,
            octave,
            duration
        };
    }
    $.$mol_audio_tone_parse = $mol_audio_tone_parse;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const started = new WeakMap();
    class $mol_audio_instrument extends $mol_audio_node {
        node(reset) {
            throw new Error('implement');
        }
        node_destruct() {
            const node = this.node();
            const destructor = node.onended = this.onended.bind(this, node);
            return Object.assign(node, { destructor });
        }
        output() {
            this.node_destruct();
            return super.output();
        }
        onended(node, e) {
            const state = started.get(node);
            if (state === false)
                return;
            if (state === true)
                node.stop();
            started.set(node, false);
            if (node !== $mol_wire_probe(() => this.node()))
                return;
            this.active(false);
            if (e)
                this.end();
        }
        end() { }
        node_started() {
            const prev = $mol_wire_probe(() => this.node());
            return prev ? (started.get(prev) ?? null) : null;
        }
        start_at(next) {
            if (next === -1)
                return next;
            if (this.node_started() !== null)
                this.node(null);
            if (next === undefined)
                return -1;
            this.output().start(next + this.time_cut());
            started.set(this.node(), true);
            return next;
        }
        note(next) { return next ?? null; }
        stop_at(next) {
            if (next === undefined || next < 0)
                return -1;
            if (!this.node_started())
                return next;
            this.node().stop(next + this.time_cut());
            return next;
        }
        active(next) {
            this.node();
            const start_at = this.start_at();
            this.stop_at();
            if (next) {
                this.context().active(true);
                this.start_at(0);
                this.stop_at(-1);
                return true;
            }
            if (next === false) {
                this.start_at(-1);
                this.stop_at(0);
                return false;
            }
            return start_at !== -1;
        }
        start() {
            this.node(null);
            this.active(true);
        }
    }
    __decorate([
        $mol_mem
    ], $mol_audio_instrument.prototype, "node_destruct", null);
    __decorate([
        $mol_mem
    ], $mol_audio_instrument.prototype, "output", null);
    __decorate([
        $mol_mem
    ], $mol_audio_instrument.prototype, "start_at", null);
    __decorate([
        $mol_mem
    ], $mol_audio_instrument.prototype, "note", null);
    __decorate([
        $mol_mem
    ], $mol_audio_instrument.prototype, "stop_at", null);
    __decorate([
        $mol_mem
    ], $mol_audio_instrument.prototype, "active", null);
    __decorate([
        $mol_action
    ], $mol_audio_instrument.prototype, "start", null);
    $.$mol_audio_instrument = $mol_audio_instrument;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_audio_vibe extends $mol_audio_instrument {
        node(reset) {
            return this.context().native().createOscillator();
        }
        freq_default() { return 440; }
        freq(next) {
            const note = this.note();
            if (!next) {
                if (!note)
                    next = this.freq_default();
                else if (note.key === null)
                    next = 0;
                else
                    next = $mol_audio_tone_key_freq(note.key, note.octave);
            }
            this.node().frequency.setValueAtTime(next, this.time_cut());
            return next;
        }
        shape_default() { return 'sine'; }
        shape(next) {
            return this.node().type = next ?? this.shape_default();
        }
        output() {
            this.freq();
            this.shape();
            return super.output();
        }
    }
    __decorate([
        $mol_mem
    ], $mol_audio_vibe.prototype, "node", null);
    __decorate([
        $mol_mem
    ], $mol_audio_vibe.prototype, "freq", null);
    __decorate([
        $mol_mem
    ], $mol_audio_vibe.prototype, "shape", null);
    __decorate([
        $mol_mem
    ], $mol_audio_vibe.prototype, "output", null);
    $.$mol_audio_vibe = $mol_audio_vibe;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_audio_melody extends $mol_audio_gain {
        notes(next) { return next ?? ''; }
        parse(note) {
            return $mol_audio_tone_parse(note);
        }
        notes_normalized() {
            return this.notes().split(' ').map(note => this.parse(note.trim()));
        }
        clips() {
            const default_length = this.note_length();
            const note_off = this.note_off();
            let start_at_prev = 0;
            let octave_last = 4;
            return this.notes_normalized().map((note, id) => {
                const duration = default_length / (note.duration ?? 1);
                const start_at = start_at_prev;
                const stop_at = start_at + duration - note_off;
                start_at_prev += duration;
                const octave = note.octave ?? octave_last;
                octave_last = octave;
                return { ...note, octave, start_at, stop_at, id };
            })
                .filter(note => note.key);
        }
        note_length(sec) { return sec ?? 0.25; }
        note_off_part() { return .4; }
        note_off() { return this.note_length() * this.note_off_part(); }
        duration() { return this.clips().reduce((acc, clip) => Math.max(acc, clip.stop_at), 0); }
        note(index) { return this.clips()[index]; }
        offset_cut(next) {
            let offset = this.offset();
            if (offset === null)
                offset = this.offset(0) ?? 0;
            if (offset === 0)
                this.start_at_absolute = this.time_cut() + next;
            return offset;
        }
        start_at(next) {
            if (next === undefined)
                return -1;
            const offset = this.offset_cut(next);
            const instruments = [];
            for (const clip of this.clips()) {
                if (clip.stop_at < offset)
                    continue;
                const instrument = this.instrument(clip.id);
                instrument.note(clip);
                instrument.start_at(next + clip.start_at - offset);
                const stop_at = next + clip.stop_at - offset;
                instrument.stop_at(stop_at);
                instrument.end = () => this.offset(null);
                instruments.push(instrument);
            }
            this.input(instruments);
            this.output();
            return next;
        }
        output() {
            this.offset();
            return super.output();
        }
        start_at_absolute = 0;
        input(next) { return next ?? []; }
        stop_at(next) {
            if (next === -1)
                return -1;
            if (next === undefined)
                return -1;
            if (next < this.start_at())
                return -1;
            const input_next = this.input().filter(instrument => instrument.stop_at() < next);
            this.input(input_next);
            if (input_next.length === 0)
                this.offset(null);
            return next;
        }
        start() {
            this.offset(0);
            this.active(true);
        }
        offset(next) {
            if (next === null)
                next = this.time_cut() - this.start_at_absolute;
            if (next === undefined)
                return null;
            if (next > this.duration())
                return null;
            if (next < 0)
                return null;
            return next;
        }
        active(next) {
            if (next) {
                this.context().active(true);
                this.start_at(0);
                return next;
            }
            if (next === false) {
                this.stop_at(0);
                return next;
            }
            return this.offset() !== null;
        }
        instrument(index) {
            return this.$.$mol_audio_vibe.make({});
        }
    }
    __decorate([
        $mol_mem
    ], $mol_audio_melody.prototype, "notes", null);
    __decorate([
        $mol_mem
    ], $mol_audio_melody.prototype, "notes_normalized", null);
    __decorate([
        $mol_mem
    ], $mol_audio_melody.prototype, "clips", null);
    __decorate([
        $mol_mem
    ], $mol_audio_melody.prototype, "duration", null);
    __decorate([
        $mol_action
    ], $mol_audio_melody.prototype, "offset_cut", null);
    __decorate([
        $mol_mem
    ], $mol_audio_melody.prototype, "start_at", null);
    __decorate([
        $mol_mem
    ], $mol_audio_melody.prototype, "input", null);
    __decorate([
        $mol_mem
    ], $mol_audio_melody.prototype, "stop_at", null);
    __decorate([
        $mol_action
    ], $mol_audio_melody.prototype, "start", null);
    __decorate([
        $mol_mem
    ], $mol_audio_melody.prototype, "offset", null);
    __decorate([
        $mol_mem
    ], $mol_audio_melody.prototype, "active", null);
    __decorate([
        $mol_mem_key
    ], $mol_audio_melody.prototype, "instrument", null);
    $.$mol_audio_melody = $mol_audio_melody;
})($ || ($ = {}));

;
	($.$mol_icon_power) = class $mol_icon_power extends ($.$mol_icon) {
		path(){
			return "M16.56,5.44L15.11,6.89C16.84,7.94 18,9.83 18,12A6,6 0 0,1 12,18A6,6 0 0,1 6,12C6,9.83 7.16,7.94 8.88,6.88L7.44,5.44C5.36,6.88 4,9.28 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12C20,9.28 18.64,6.88 16.56,5.44M13,3H11V13H13";
		}
	};


;
"use strict";

;
	($.$mol_icon_power_sleep) = class $mol_icon_power_sleep extends ($.$mol_icon) {
		path(){
			return "M18.73,18C15.4,21.69 9.71,22 6,18.64C2.33,15.31 2.04,9.62 5.37,5.93C6.9,4.25 9,3.2 11.27,3C7.96,6.7 8.27,12.39 12,15.71C13.63,17.19 15.78,18 18,18C18.25,18 18.5,18 18.73,18Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_alert) = class $mol_icon_alert extends ($.$mol_icon) {
		path(){
			return "M13 14H11V9H13M13 18H11V16H13M1 21H23L12 2L1 21Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_sleep) = class $mol_icon_sleep extends ($.$mol_icon) {
		path(){
			return "M23,12H17V10L20.39,6H17V4H23V6L19.62,10H23V12M15,16H9V14L12.39,10H9V8H15V10L11.62,14H15V16M7,20H1V18L4.39,14H1V12H7V14L3.62,18H7V20Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_pause) = class $mol_icon_pause extends ($.$mol_icon) {
		path(){
			return "M14,19H18V5H14M6,19H10V5H6V19Z";
		}
	};


;
"use strict";

;
	($.$mol_audio_status) = class $mol_audio_status extends ($.$mol_view) {
		Closed(){
			const obj = new this.$.$mol_icon_power_sleep();
			return obj;
		}
		Error(){
			const obj = new this.$.$mol_icon_alert();
			return obj;
		}
		Suspended(){
			const obj = new this.$.$mol_icon_sleep();
			return obj;
		}
		Playing(){
			const obj = new this.$.$mol_icon_play();
			return obj;
		}
		Running(){
			const obj = new this.$.$mol_icon_pause();
			return obj;
		}
		wakeup(next){
			if(next !== undefined) return next;
			return null;
		}
		wakeup_enabled(){
			return false;
		}
		status_name(){
			return (this.status());
		}
		Icon(){
			const obj = new this.$.$mol_icon_play();
			return obj;
		}
		Wakeup(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.wakeup(next)));
			(obj.enabled) = () => ((this.wakeup_enabled()));
			(obj.hint) = () => ((this.status_name()));
			(obj.sub) = () => ([(this.Icon())]);
			return obj;
		}
		icons(){
			return {
				"closed": (this.Closed()), 
				"error": (this.Error()), 
				"suspended": (this.Suspended()), 
				"playing": (this.Playing()), 
				"running": (this.Running())
			};
		}
		status(next){
			if(next !== undefined) return next;
			return "suspended";
		}
		status_template(){
			return "Audio status: {status}";
		}
		sub(){
			return [(this.Wakeup())];
		}
	};
	($mol_mem(($.$mol_audio_status.prototype), "Closed"));
	($mol_mem(($.$mol_audio_status.prototype), "Error"));
	($mol_mem(($.$mol_audio_status.prototype), "Suspended"));
	($mol_mem(($.$mol_audio_status.prototype), "Playing"));
	($mol_mem(($.$mol_audio_status.prototype), "Running"));
	($mol_mem(($.$mol_audio_status.prototype), "wakeup"));
	($mol_mem(($.$mol_audio_status.prototype), "Icon"));
	($mol_mem(($.$mol_audio_status.prototype), "Wakeup"));
	($mol_mem(($.$mol_audio_status.prototype), "status"));


;
"use strict";
var $;
(function ($) {
    class $mol_audio_room extends $mol_audio_node {
        node() {
            return this.context().native().destination;
        }
        active(next) {
            return this.context().active(next);
        }
        suspend_time(sec) {
            return sec ?? 5;
        }
        suspend_timer() {
            const time = this.suspend_time();
            if (!time)
                return null;
            if (!this.active())
                return null;
            return new this.$.$mol_after_timeout(time * 1000, () => $mol_wire_async(this).active(false));
        }
        error() {
            try {
                this.output();
            }
            catch (e) {
                if (!$mol_promise_like(e))
                    return { value: e };
            }
            return null;
        }
        status(next) {
            if (next === 'playing')
                next = 'running';
            if (next === 'error')
                next = 'closed';
            const state = this.context().state(next);
            if (state === 'closed')
                return state;
            if (this.error())
                return 'error';
            if (this.inputs_active() && state === 'running')
                return 'playing';
            this.suspend_timer();
            return state;
        }
    }
    __decorate([
        $mol_mem
    ], $mol_audio_room.prototype, "node", null);
    __decorate([
        $mol_mem
    ], $mol_audio_room.prototype, "suspend_time", null);
    __decorate([
        $mol_mem
    ], $mol_audio_room.prototype, "suspend_timer", null);
    __decorate([
        $mol_mem
    ], $mol_audio_room.prototype, "error", null);
    __decorate([
        $mol_mem
    ], $mol_audio_room.prototype, "status", null);
    $.$mol_audio_room = $mol_audio_room;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_audio_status extends $.$mol_audio_status {
            status(next) {
                return super.status(next);
            }
            wakeup() {
                this.status('running');
            }
            Icon() {
                return this.icons()[this.status()] ?? super.Icon();
            }
            wakeup_enabled() {
                return this.status() === 'suspended';
            }
            status_name() {
                return this.status_template().replace('{status}', this.status());
            }
        }
        $$.$mol_audio_status = $mol_audio_status;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_audio_demo) = class $mol_audio_demo extends ($.$mol_example_small) {
		beep_status(next){
			return (this.Beep_room().status(next));
		}
		beep_play(){
			return (this.Beep_track().start());
		}
		Beep_track(){
			const obj = new this.$.$mol_audio_melody();
			(obj.note_length) = () => (.5);
			(obj.notes) = () => ("e");
			return obj;
		}
		noise_status(next){
			return (this.Noise_room().status(next));
		}
		noise_active(next){
			return (this.Noise().active(next));
		}
		noise_stop_at(next){
			return (this.Noise().stop_at(next));
		}
		noise_freq(){
			return 0;
		}
		Noise(){
			const obj = new this.$.$mol_audio_vibe();
			(obj.freq_default) = () => ((this.noise_freq()));
			return obj;
		}
		beep_play_click(next){
			if(next !== undefined) return next;
			return null;
		}
		Beep_play(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.beep_play_click(next)));
			(obj.title) = () => ("Beep");
			return obj;
		}
		Beep_status(){
			const obj = new this.$.$mol_audio_status();
			(obj.status) = (next) => ((this.beep_status(next)));
			return obj;
		}
		Beep_row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Beep_play()), (this.Beep_status())]);
			return obj;
		}
		noise_play_click(next){
			if(next !== undefined) return next;
			return null;
		}
		Noise_play(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.noise_play_click(next)));
			(obj.title) = () => ("Noise");
			return obj;
		}
		Noise_status(){
			const obj = new this.$.$mol_audio_status();
			(obj.status) = (next) => ((this.noise_status(next)));
			return obj;
		}
		Nouse_row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Noise_play()), (this.Noise_status())]);
			return obj;
		}
		List(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Beep_row()), (this.Nouse_row())]);
			return obj;
		}
		title(){
			return "WebAudio API example";
		}
		Beep_room(){
			const obj = new this.$.$mol_audio_room();
			(obj.input) = () => ([(this.Beep_track())]);
			return obj;
		}
		Noise_room(){
			const obj = new this.$.$mol_audio_room();
			(obj.input) = () => ([(this.Noise())]);
			return obj;
		}
		sub(){
			return [(this.List())];
		}
		tags(){
			return ["sound"];
		}
		aspects(){
			return ["Media/Audio"];
		}
	};
	($mol_mem(($.$mol_audio_demo.prototype), "Beep_track"));
	($mol_mem(($.$mol_audio_demo.prototype), "Noise"));
	($mol_mem(($.$mol_audio_demo.prototype), "beep_play_click"));
	($mol_mem(($.$mol_audio_demo.prototype), "Beep_play"));
	($mol_mem(($.$mol_audio_demo.prototype), "Beep_status"));
	($mol_mem(($.$mol_audio_demo.prototype), "Beep_row"));
	($mol_mem(($.$mol_audio_demo.prototype), "noise_play_click"));
	($mol_mem(($.$mol_audio_demo.prototype), "Noise_play"));
	($mol_mem(($.$mol_audio_demo.prototype), "Noise_status"));
	($mol_mem(($.$mol_audio_demo.prototype), "Nouse_row"));
	($mol_mem(($.$mol_audio_demo.prototype), "List"));
	($mol_mem(($.$mol_audio_demo.prototype), "Beep_room"));
	($mol_mem(($.$mol_audio_demo.prototype), "Noise_room"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_audio_demo extends $.$mol_audio_demo {
            noise_freq() {
                $mol_wire_watch();
                return Math.random() * 1000;
            }
            beep_play_click(e) { this.beep_play(); }
            noise_play_click(e) {
                this.noise_active(true);
                this.noise_stop_at(1);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_audio_demo.prototype, "noise_freq", null);
        $$.$mol_audio_demo = $mol_audio_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_audio_demo_vibe) = class $mol_audio_demo_vibe extends ($.$mol_example_small) {
		room_status(next){
			return (this.Room().status(next));
		}
		active(next){
			return (this.Beep_vibe().active(next));
		}
		stop_at(next){
			return (this.Beep_vibe().stop_at(next));
		}
		freq(next){
			if(next !== undefined) return next;
			return 700;
		}
		Beep_vibe(){
			const obj = new this.$.$mol_audio_vibe();
			(obj.freq_default) = () => ((this.freq()));
			(obj.shape_default) = () => ((this.shape()));
			return obj;
		}
		duration_label(){
			return "Duration, s";
		}
		duration(next){
			if(next !== undefined) return next;
			return 0.5;
		}
		Duration_num(){
			const obj = new this.$.$mol_number();
			(obj.precision_change) = () => (0.05);
			(obj.value) = (next) => ((this.duration(next)));
			return obj;
		}
		Duration(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.duration_label()));
			(obj.content) = () => ([(this.Duration_num())]);
			return obj;
		}
		frequency_label(){
			return "Frequency, Hz";
		}
		Frequency_num(){
			const obj = new this.$.$mol_number();
			(obj.precision_change) = () => (50);
			(obj.value) = (next) => ((this.freq(next)));
			return obj;
		}
		Frequency(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.frequency_label()));
			(obj.content) = () => ([(this.Frequency_num())]);
			return obj;
		}
		shape_label(){
			return "Shape";
		}
		shape(next){
			if(next !== undefined) return next;
			return null;
		}
		Shape_select(){
			const obj = new this.$.$mol_select();
			(obj.Filter) = () => (null);
			(obj.value) = (next) => ((this.shape(next)));
			(obj.options) = () => ([
				"sine", 
				"square", 
				"sawtooth", 
				"triangle"
			]);
			return obj;
		}
		Shape(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.shape_label()));
			(obj.content) = () => ([(this.Shape_select())]);
			return obj;
		}
		beep_vibe_start_click(next){
			if(next !== undefined) return next;
			return null;
		}
		Play_icon(){
			const obj = new this.$.$mol_icon_play();
			return obj;
		}
		Play_button(){
			const obj = new this.$.$mol_button_major();
			(obj.click) = (next) => ((this.beep_vibe_start_click(next)));
			(obj.sub) = () => ([(this.Play_icon()), "Play"]);
			return obj;
		}
		Room_status(){
			const obj = new this.$.$mol_audio_status();
			(obj.status) = (next) => ((this.room_status(next)));
			return obj;
		}
		Button_row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Play_button()), (this.Room_status())]);
			return obj;
		}
		List(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Duration()), 
				(this.Frequency()), 
				(this.Shape()), 
				(this.Button_row())
			]);
			return obj;
		}
		title(){
			return "WebAudio API complex example";
		}
		Room(){
			const obj = new this.$.$mol_audio_room();
			(obj.input) = () => ([(this.Beep_vibe())]);
			return obj;
		}
		sub(){
			return [(this.List())];
		}
		tags(){
			return ["sound"];
		}
		aspects(){
			return ["Media/Audio"];
		}
	};
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "freq"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Beep_vibe"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "duration"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Duration_num"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Duration"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Frequency_num"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Frequency"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "shape"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Shape_select"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Shape"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "beep_vibe_start_click"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Play_icon"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Play_button"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Room_status"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Button_row"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "List"));
	($mol_mem(($.$mol_audio_demo_vibe.prototype), "Room"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_audio_demo_vibe extends $.$mol_audio_demo_vibe {
            shape(next) {
                return next !== undefined ? next : 'sine';
            }
            beep_vibe_start_click(e) {
                this.active(true);
                this.stop_at(this.duration());
            }
        }
        __decorate([
            $mol_mem
        ], $mol_audio_demo_vibe.prototype, "shape", null);
        $$.$mol_audio_demo_vibe = $mol_audio_demo_vibe;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_audio_sample extends $mol_audio_instrument {
        duration() {
            return this.audio_buffer()?.duration ?? 0;
        }
        buffer() {
            return null;
        }
        audio_buffer() {
            const buffer = this.buffer();
            return buffer ? this.context().native().decodeAudioData(buffer) : null;
        }
        loop_default() { return false; }
        loop(next) {
            return this.node().loop = next ?? this.loop_default();
        }
        loop_start_default() { return 0; }
        loop_start(next) {
            return this.node().loopStart = next ?? this.loop_start_default();
        }
        loop_end_default() { return this.duration(); }
        loop_end(next) {
            return this.node().loopEnd = next ?? this.loop_end_default();
        }
        rate_default() {
            return this.node().playbackRate.defaultValue;
        }
        rate(next) {
            return this.node().playbackRate.value = next ?? this.rate_default();
        }
        node(reset) {
            const node = this.context().native().createBufferSource();
            node.buffer = this.audio_buffer();
            return node;
        }
        active(next) {
            const prev = super.active(next);
            if (this.node_started()) {
                if (next)
                    this.context().active(true);
                this.rate(next ? null : 0);
                return next ?? false;
            }
            return prev;
        }
        output() {
            this.loop();
            this.loop_start();
            this.loop_end();
            this.rate();
            return super.output();
        }
    }
    __decorate([
        $mol_mem
    ], $mol_audio_sample.prototype, "audio_buffer", null);
    __decorate([
        $mol_mem
    ], $mol_audio_sample.prototype, "loop", null);
    __decorate([
        $mol_mem
    ], $mol_audio_sample.prototype, "loop_start", null);
    __decorate([
        $mol_mem
    ], $mol_audio_sample.prototype, "loop_end", null);
    __decorate([
        $mol_mem
    ], $mol_audio_sample.prototype, "rate", null);
    __decorate([
        $mol_mem
    ], $mol_audio_sample.prototype, "node", null);
    __decorate([
        $mol_mem
    ], $mol_audio_sample.prototype, "active", null);
    __decorate([
        $mol_mem
    ], $mol_audio_sample.prototype, "output", null);
    $.$mol_audio_sample = $mol_audio_sample;
})($ || ($ = {}));

;
	($.$mol_icon_loop) = class $mol_icon_loop extends ($.$mol_icon) {
		path(){
			return "M9,14V21H2V19H5.57C4,17.3 3,15 3,12.5C3,7.25 7.25,3 12.5,3C17.75,3 22,7.25 22,12.5C22,17.75 17.75,22 12.5,22H12V20H12.5C16.64,20 20,16.64 20,12.5C20,8.36 16.64,5 12.5,5C8.36,5 5,8.36 5,12.5C5,14.47 5.76,16.26 7,17.6V14H9Z";
		}
	};


;
"use strict";

;
	($.$mol_audio_demo_sample) = class $mol_audio_demo_sample extends ($.$mol_example_small) {
		room_status(next){
			return (this.Room().status(next));
		}
		sample_active(next){
			return (this.Sample().active(next));
		}
		start(){
			return (this.Sample().start());
		}
		loop(next){
			return (this.Sample().loop(next));
		}
		sample_buffer(){
			return null;
		}
		Sample(){
			const obj = new this.$.$mol_audio_sample();
			(obj.loop_default) = () => (true);
			(obj.buffer) = () => ((this.sample_buffer()));
			return obj;
		}
		sample_url(next){
			if(next !== undefined) return next;
			return "/mol/audio/demo/sample/drumloop.ogg";
		}
		Sample_url(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.sample_url(next)));
			return obj;
		}
		Sample_url_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Sample url");
			(obj.control) = () => ((this.Sample_url()));
			return obj;
		}
		Active_icon(){
			const obj = new this.$.$mol_icon_play();
			return obj;
		}
		Active(){
			const obj = new this.$.$mol_check_icon();
			(obj.checked) = (next) => ((this.sample_active(next)));
			(obj.title) = () => ("Active");
			(obj.Icon) = () => ((this.Active_icon()));
			return obj;
		}
		start_click(next){
			if(next !== undefined) return next;
			return null;
		}
		Start(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.start_click(next)));
			(obj.title) = () => ("Start");
			return obj;
		}
		Loop_icon(){
			const obj = new this.$.$mol_icon_loop();
			return obj;
		}
		Loop(){
			const obj = new this.$.$mol_check_icon();
			(obj.checked) = (next) => ((this.loop(next)));
			(obj.title) = () => ("Loop");
			(obj.Icon) = () => ((this.Loop_icon()));
			return obj;
		}
		Controls(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([
				(this.Active()), 
				(this.Start()), 
				(this.Loop())
			]);
			return obj;
		}
		Room_status(){
			const obj = new this.$.$mol_audio_status();
			(obj.status) = (next) => ((this.room_status(next)));
			return obj;
		}
		List(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Sample_url_field()), 
				(this.Controls()), 
				(this.Room_status())
			]);
			return obj;
		}
		title(){
			return "WebAudio API sample example";
		}
		Room(){
			const obj = new this.$.$mol_audio_room();
			(obj.input) = () => ([(this.Sample())]);
			return obj;
		}
		sub(){
			return [(this.List())];
		}
		tags(){
			return ["sound", "sample"];
		}
		aspects(){
			return ["Media/Audio"];
		}
	};
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Sample"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "sample_url"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Sample_url"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Sample_url_field"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Active_icon"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Active"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "start_click"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Start"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Loop_icon"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Loop"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Controls"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Room_status"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "List"));
	($mol_mem(($.$mol_audio_demo_sample.prototype), "Room"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_audio_demo_sample extends $.$mol_audio_demo_sample {
            sample_buffer() {
                $mol_wire_solid();
                return this.$.$mol_fetch.response(this.sample_url()).buffer();
            }
            start_click(e) {
                this.start();
            }
        }
        $$.$mol_audio_demo_sample = $mol_audio_demo_sample;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_play_pause) = class $mol_icon_play_pause extends ($.$mol_icon) {
		path(){
			return "M3,5V19L11,12M13,19H16V5H13M18,5V19H21V5";
		}
	};


;
"use strict";

;
	($.$mol_audio_demo_sequencer) = class $mol_audio_demo_sequencer extends ($.$mol_example_small) {
		room_status(next){
			return (this.Room().status(next));
		}
		room_active(next){
			return (this.Room().active(next));
		}
		beep_track_start(){
			return (this.Beep_track().start());
		}
		beep_track_active(next){
			return (this.Beep_track().active(next));
		}
		notes(next){
			if(next !== undefined) return next;
			return "e e e _ e e e _ e g c d e _ _ _/2 f f f f f e e e e/2 e/2 d d e d _ g _";
		}
		note_length(next){
			if(next !== undefined) return next;
			return .25;
		}
		note_off_part(next){
			if(next !== undefined) return next;
			return .4;
		}
		Beep_track(){
			const obj = new this.$.$mol_audio_melody();
			(obj.notes) = (next) => ((this.notes(next)));
			(obj.note_length) = (next) => ((this.note_length(next)));
			(obj.note_off_part) = (next) => ((this.note_off_part(next)));
			return obj;
		}
		Note_length(){
			const obj = new this.$.$mol_number();
			(obj.precision) = () => (.05);
			(obj.value_min) = () => (.05);
			(obj.value) = (next) => ((this.note_length(next)));
			return obj;
		}
		Note_length_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Note length, sec");
			(obj.control) = () => ((this.Note_length()));
			return obj;
		}
		Note_off_part(){
			const obj = new this.$.$mol_number();
			(obj.precision) = () => (.1);
			(obj.value_min) = () => (.1);
			(obj.value) = (next) => ((this.note_off_part(next)));
			return obj;
		}
		Note_off_part_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Note off, part of length");
			(obj.control) = () => ((this.Note_off_part()));
			return obj;
		}
		Note_settings(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Note_length_field()), (this.Note_off_part_field())]);
			return obj;
		}
		Notes(){
			const obj = new this.$.$mol_textarea();
			(obj.hint) = () => ("Example: e _ c#5/2 _/2");
			(obj.value) = (next) => ((this.notes(next)));
			return obj;
		}
		Notes_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Notes");
			(obj.control) = () => ((this.Notes()));
			return obj;
		}
		Beep_active_icon(){
			const obj = new this.$.$mol_icon_play_pause();
			return obj;
		}
		Beep_active(){
			const obj = new this.$.$mol_check_icon();
			(obj.hint) = () => ("Play / Pause");
			(obj.Icon) = () => ((this.Beep_active_icon()));
			(obj.checked) = (next) => ((this.beep_track_active(next)));
			return obj;
		}
		Beep_play(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.beep_track_start(next)));
			(obj.title) = () => ("Play");
			return obj;
		}
		Beep_status(){
			const obj = new this.$.$mol_audio_status();
			(obj.status) = (next) => ((this.room_status(next)));
			return obj;
		}
		Beep_row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([
				(this.Beep_active()), 
				(this.Beep_play()), 
				(this.Beep_status())
			]);
			return obj;
		}
		List(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Note_settings()), 
				(this.Notes_field()), 
				(this.Beep_row())
			]);
			return obj;
		}
		title(){
			return "WebAudio API example sequencer";
		}
		Room(){
			const obj = new this.$.$mol_audio_room();
			(obj.input) = () => ([(this.Beep_track())]);
			return obj;
		}
		sub(){
			return [(this.List())];
		}
		tags(){
			return ["sound", "sequencer"];
		}
		aspects(){
			return ["Media/Audio"];
		}
	};
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "notes"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "note_length"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "note_off_part"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Beep_track"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Note_length"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Note_length_field"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Note_off_part"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Note_off_part_field"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Note_settings"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Notes"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Notes_field"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Beep_active_icon"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Beep_active"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Beep_play"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Beep_status"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Beep_row"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "List"));
	($mol_mem(($.$mol_audio_demo_sequencer.prototype), "Room"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_audio_demo_sequencer extends $.$mol_audio_demo_sequencer {
        }
        $$.$mol_audio_demo_sequencer = $mol_audio_demo_sequencer;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_avatar_demo) = class $mol_avatar_demo extends ($.$mol_example_small) {
		avatar_id(next){
			if(next !== undefined) return next;
			return "$mol_avatar";
		}
		Avatar_id_value(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.avatar_id(next)));
			return obj;
		}
		Avatar_id_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Id");
			(obj.content) = () => ([(this.Avatar_id_value())]);
			return obj;
		}
		Avatar(){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.avatar_id()));
			return obj;
		}
		Avatar_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Avatar");
			(obj.content) = () => ([(this.Avatar())]);
			return obj;
		}
		title(){
			return "Avatar uniquely-generated by id";
		}
		sub(){
			return [(this.Avatar_id_label()), (this.Avatar_label())];
		}
		tags(){
			return [
				"generated", 
				"identity", 
				"user"
			];
		}
		aspects(){
			return ["Widget/Draw", "Algorithm/Hash"];
		}
	};
	($mol_mem(($.$mol_avatar_demo.prototype), "avatar_id"));
	($mol_mem(($.$mol_avatar_demo.prototype), "Avatar_id_value"));
	($mol_mem(($.$mol_avatar_demo.prototype), "Avatar_id_label"));
	($mol_mem(($.$mol_avatar_demo.prototype), "Avatar"));
	($mol_mem(($.$mol_avatar_demo.prototype), "Avatar_label"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem } = $mol_style_unit;
        $mol_style_define($mol_avatar_demo, {
            Avatar: {
                width: rem(2),
                height: rem(2)
            }
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_bar_demo) = class $mol_bar_demo extends ($.$mol_example_small) {
		mail_hint(){
			return "E-mail";
		}
		mail(next){
			if(next !== undefined) return next;
			return "";
		}
		Two_mail(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ((this.mail_hint()));
			(obj.value) = (next) => ((this.mail(next)));
			return obj;
		}
		submit_title(){
			return "Submit";
		}
		Two_submit(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.submit_title()));
			return obj;
		}
		Two(){
			const obj = new this.$.$mol_bar();
			(obj.sub) = () => ([(this.Two_mail()), (this.Two_submit())]);
			return obj;
		}
		Three_mail(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ((this.mail_hint()));
			(obj.value) = (next) => ((this.mail(next)));
			return obj;
		}
		confirm_title(){
			return "Confirm";
		}
		confirmed(next){
			if(next !== undefined) return next;
			return false;
		}
		Three_confirm(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.confirm_title()));
			(obj.checked) = (next) => ((this.confirmed(next)));
			return obj;
		}
		Three(){
			const obj = new this.$.$mol_bar();
			(obj.sub) = () => ([(this.Three_mail()), (this.Three_confirm())]);
			return obj;
		}
		title(){
			return "Group of controls as one control";
		}
		sub(){
			return [(this.Two()), (this.Three())];
		}
		tags(){
			return ["group", "container"];
		}
		aspects(){
			return ["Widget/Layout", "Widget/Island"];
		}
	};
	($mol_mem(($.$mol_bar_demo.prototype), "mail"));
	($mol_mem(($.$mol_bar_demo.prototype), "Two_mail"));
	($mol_mem(($.$mol_bar_demo.prototype), "Two_submit"));
	($mol_mem(($.$mol_bar_demo.prototype), "Two"));
	($mol_mem(($.$mol_bar_demo.prototype), "Three_mail"));
	($mol_mem(($.$mol_bar_demo.prototype), "confirmed"));
	($mol_mem(($.$mol_bar_demo.prototype), "Three_confirm"));
	($mol_mem(($.$mol_bar_demo.prototype), "Three"));


;
"use strict";

;
	($.$mol_bench_demo) = class $mol_bench_demo extends ($.$mol_example_small) {
		col_sort(next){
			if(next !== undefined) return next;
			return "mid";
		}
		result(){
			return {};
		}
		View(){
			const obj = new this.$.$mol_bench();
			(obj.col_sort) = (next) => ((this.col_sort(next)));
			(obj.result) = () => ((this.result()));
			return obj;
		}
		title(){
			return "Benchmarking results visualization";
		}
		sub(){
			return [(this.View())];
		}
		tags(){
			return ["perfomance", "comparison"];
		}
		aspects(){
			return ["Widget/Grid"];
		}
	};
	($mol_mem(($.$mol_bench_demo.prototype), "col_sort"));
	($mol_mem(($.$mol_bench_demo.prototype), "View"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_bench_demo extends $.$mol_bench_demo {
            result() {
                return {
                    'bubble': {
                        'algorithm': 'bubble',
                        'min': '1 ms',
                        'mid': '11 ms',
                        'max': '99 ms',
                    },
                    'qsort': {
                        'algorithm': 'qsort',
                        'min': '2 ms',
                        'mid': '5 ms',
                        'max': '10 ms',
                    },
                };
            }
        }
        $$.$mol_bench_demo = $mol_bench_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_book2_demo) = class $mol_book2_demo extends ($.$mol_example_large) {
		Side(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Side"]);
			return obj;
		}
		First(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["First"]);
			return obj;
		}
		Second(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Second"]);
			return obj;
		}
		Third(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Third"]);
			return obj;
		}
		View(){
			const obj = new this.$.$mol_book2();
			(obj.Placeholder) = () => ((this.Side()));
			(obj.pages) = () => ([
				(this.First()), 
				(this.Second()), 
				(this.Third())
			]);
			return obj;
		}
		title(){
			return "Adaprive layout for various sizes of screen";
		}
		sub(){
			return [(this.View())];
		}
		tags(){
			return [
				"app", 
				"page", 
				"navigation", 
				"transition", 
				"multipage", 
				"dialog", 
				"breadcrumbs", 
				"drawer"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_book2_demo.prototype), "Side"));
	($mol_mem(($.$mol_book2_demo.prototype), "First"));
	($mol_mem(($.$mol_book2_demo.prototype), "Second"));
	($mol_mem(($.$mol_book2_demo.prototype), "Third"));
	($mol_mem(($.$mol_book2_demo.prototype), "View"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/book2/demo/demo.view.css", "[mol_book2_demo_first],\n[mol_book2_demo_second],\n[mol_book2_demo_third],\n[mol_book2_demo_side] { \n\talign-items: center;\n\tjustify-content: center;\n\tfont-size: 2rem;\n\tdisplay: flex;\n}\n\n\n[mol_book2_demo_first] {\n\tflex: 1 0 20rem;\n\tbackground-color: hsla(90, 100%, 50%, .2);\n}\n\n[mol_book2_demo_second] {\n\tflex: 1 0 100%;\n\tbackground-color: hsla(180, 100%, 50%, .2);\n}\n\n[mol_book2_demo_third] {\n\tflex: 1 0 60rem;\n\tbackground-color: hsla(270, 100%, 50%, .2);\n}\n\n[mol_book2_demo_side] {\n\tflex: 0 0 20rem;\n\tbackground-color: hsla(0, 100%, 50%, .2);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_filler) = class $mol_filler extends ($.$mol_paragraph) {
		filler_lines(){
			return [
				"Lorem ipsum dolor sit amet, consectetur adipiscing elit. ", 
				"Donec a diam lectus. ", 
				"Sed sit amet ipsum mauris. ", 
				"Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. ", 
				"Donec et mollis dolor. ", 
				"Praesent et diam eget libero egestas mattis sit amet vitae augue. ", 
				"Nam tincidunt congue enim, ut porta lorem lacinia consectetur. ", 
				"Donec ut libero sed arcu vehicula ultricies a non tortor. ", 
				"Lorem ipsum dolor sit amet, consectetur adipiscing elit. ", 
				"Aenean ut gravida lorem. ", 
				"Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. ", 
				"Pellentesque auctor nisi id magna consequat sagittis. ", 
				"Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. ", 
				"Ut convallis libero in urna ultrices accumsan. ", 
				"Donec sed odio eros. ", 
				"Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. ", 
				"Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. ", 
				"In rutrum accumsan ultricies. ", 
				"Mauris vitae nisi at sem facilisis semper ac in est. ", 
				"Vivamus fermentum semper porta. ", 
				"Nunc diam velit, adipiscing ut tristique vitae, sagittis vel odio. ", 
				"Maecenas convallis ullamcorper ultricies. ", 
				"Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, id fringilla sem nunc vel mi. ", 
				"Nam dictum, odio nec pretium volutpat, arcu ante placerat erat, non tristique elit urna et turpis. ", 
				"Quisque mi metus, ornare sit amet fermentum et, tincidunt et orci. ", 
				"Fusce eget orci a orci congue vestibulum. ", 
				"Ut dolor diam, elementum et vestibulum eu, porttitor vel elit. ", 
				"Curabitur venenatis pulvinar tellus gravida ornare. ", 
				"Sed et erat faucibus nunc euismod ultricies ut id justo. ", 
				"Nullam cursus suscipit nisi, et ultrices justo sodales nec. ", 
				"Fusce venenatis facilisis lectus ac semper. ", 
				"Aliquam at massa ipsum. ", 
				"Quisque bibendum purus convallis nulla ultrices ultricies. ", 
				"Nullam aliquam, mi eu aliquam tincidunt, purus velit laoreet tortor, viverra pretium nisi quam vitae mi. ", 
				"Fusce vel volutpat elit. ", 
				"Nam sagittis nisi dui. ", 
				"Suspendisse lectus leo, consectetur in tempor sit amet, placerat quis neque. ", 
				"Etiam luctus porttitor lorem, sed suscipit est rutrum non. ", 
				"Curabitur lobortis nisl a enim congue semper. ", 
				"Aenean commodo ultrices imperdiet. ", 
				"Vestibulum ut justo vel sapien venenatis tincidunt. ", 
				"Phasellus eget dolor sit amet ipsum dapibus condimentum vitae quis lectus. ", 
				"Aliquam ut massa in turpis dapibus convallis. ", 
				"Praesent elit lacus, vestibulum at malesuada et, ornare et est. ", 
				"Ut augue nunc, sodales ut euismod non, adipiscing vitae orci. ", 
				"Mauris ut placerat justo. ", 
				"Mauris in ultricies enim. ", 
				"Quisque nec est eleifend nulla ultrices egestas quis ut quam. ", 
				"Donec sollicitudin lectus a mauris pulvinar id aliquam urna cursus. ", 
				"Cras quis ligula sem, vel elementum mi. ", 
				"Phasellus non ullamcorper urna. ", 
				"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. ", 
				"In euismod ultrices facilisis. ", 
				"Vestibulum porta sapien adipiscing augue congue id pretium lectus molestie. ", 
				"Proin quis dictum nisl. ", 
				"Morbi id quam sapien, sed vestibulum sem. ", 
				"Duis elementum rutrum mauris sed convallis. ", 
				"Proin vestibulum magna mi. ", 
				"Aenean tristique hendrerit magna, ac facilisis nulla hendrerit ut. ", 
				"Sed non tortor sodales quam auctor elementum. ", 
				"Donec hendrerit nunc eget elit pharetra pulvinar. ", 
				"Suspendisse id tempus tortor. ", 
				"Aenean luctus, elit commodo laoreet commodo, justo nisi consequat massa, sed vulputate quam urna quis eros. ", 
				"Donec vel. ", 
				"Lorem ipsum dolor sit amet, consectetur adipiscing elit. ", 
				"Donec a diam lectus. ", 
				"Sed sit amet ipsum mauris. ", 
				"Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. ", 
				"Donec et mollis dolor. ", 
				"Praesent et diam eget libero egestas mattis sit amet vitae augue. ", 
				"Nam tincidunt congue enim, ut porta lorem lacinia consectetur. ", 
				"Donec ut libero sed arcu vehicula ultricies a non tortor. ", 
				"Lorem ipsum dolor sit amet, consectetur adipiscing elit. ", 
				"Aenean ut gravida lorem. ", 
				"Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. ", 
				"Pellentesque auctor nisi id magna consequat sagittis. ", 
				"Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. ", 
				"Ut convallis libero in urna ultrices accumsan. ", 
				"Donec sed odio eros. ", 
				"Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. ", 
				"Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. ", 
				"In rutrum accumsan ultricies. ", 
				"Mauris vitae nisi at sem facilisis semper ac in est. ", 
				"Vivamus fermentum semper porta. ", 
				"Nunc diam velit, adipiscing ut tristique vitae, sagittis vel odio. ", 
				"Maecenas convallis ullamcorper ultricies. ", 
				"Curabitur ornare, ligula semper consectetur sagittis, nisi diam iaculis velit, id fringilla sem nunc vel mi. ", 
				"Nam dictum, odio nec pretium volutpat, arcu ante placerat erat, non tristique elit urna et turpis. ", 
				"Quisque mi metus, ornare sit amet fermentum et, tincidunt et orci. ", 
				"Fusce eget orci a orci congue vestibulum. ", 
				"Ut dolor diam, elementum et vestibulum eu, porttitor vel elit. ", 
				"Curabitur venenatis pulvinar tellus gravida ornare. ", 
				"Sed et erat faucibus nunc euismod ultricies ut id justo. ", 
				"Nullam cursus suscipit nisi, et ultrices justo sodales nec. ", 
				"Fusce venenatis facilisis lectus ac semper. ", 
				"Aliquam at massa ipsum. ", 
				"Quisque bibendum purus convallis nulla ultrices ultricies. ", 
				"Nullam aliquam, mi eu aliquam tincidunt, purus velit laoreet tortor, viverra pretium nisi quam vitae mi. ", 
				"Fusce vel volutpat elit. ", 
				"Nam sagittis nisi dui. ", 
				"Suspendisse lectus leo, consectetur in tempor sit amet, placerat quis neque. ", 
				"Etiam luctus porttitor lorem, sed suscipit est rutrum non. ", 
				"Curabitur lobortis nisl a enim congue semper. ", 
				"Aenean commodo ultrices imperdiet. ", 
				"Vestibulum ut justo vel sapien venenatis tincidunt. ", 
				"Phasellus eget dolor sit amet ipsum dapibus condimentum vitae quis lectus. ", 
				"Aliquam ut massa in turpis dapibus convallis. ", 
				"Praesent elit lacus, vestibulum at malesuada et, ornare et est. ", 
				"Ut augue nunc, sodales ut euismod non, adipiscing vitae orci. ", 
				"Mauris ut placerat justo. ", 
				"Mauris in ultricies enim. ", 
				"Quisque nec est eleifend nulla ultrices egestas quis ut quam. ", 
				"Donec sollicitudin lectus a mauris pulvinar id aliquam urna cursus. ", 
				"Cras quis ligula sem, vel elementum mi. ", 
				"Phasellus non ullamcorper urna. ", 
				"Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. ", 
				"In euismod ultrices facilisis. ", 
				"Vestibulum porta sapien adipiscing augue congue id pretium lectus molestie. ", 
				"Proin quis dictum nisl. ", 
				"Morbi id quam sapien, sed vestibulum sem. ", 
				"Duis elementum rutrum mauris sed convallis. ", 
				"Proin vestibulum magna mi. ", 
				"Aenean tristique hendrerit magna, ac facilisis nulla hendrerit ut. ", 
				"Sed non tortor sodales quam auctor elementum. ", 
				"Donec hendrerit nunc eget elit pharetra pulvinar. ", 
				"Suspendisse id tempus tortor. ", 
				"Aenean luctus, elit commodo laoreet commodo, justo nisi consequat massa, sed vulputate quam urna quis eros. ", 
				"Donec vel. "
			];
		}
		min_symbols(){
			return 7000;
		}
		sub(){
			return (this.filler_lines());
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/filler/filler.view.css", "[mol_filler] {\n\ttext-align: left;\n\tpadding: var(--mol_gap_text);\n\tflex-shrink: 0;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_filler extends $.$mol_filler {
            filler_lines() {
                const lines = [];
                let len_cur = 0;
                while (len_cur < this.min_symbols()) {
                    const line = this.$.$mol_array_lottery(super.filler_lines());
                    len_cur += line.length;
                    lines.push(line);
                }
                return lines;
            }
        }
        $$.$mol_filler = $mol_filler;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_book2_catalog_demo) = class $mol_book2_catalog_demo extends ($.$mol_example_large) {
		Spread_close(){
			return (this.Calatog().Spread_close());
		}
		Foods_spread_close(){
			return (this.Foods().Spread_close());
		}
		Pizza(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🍕 Pizzas");
			(obj.tools) = () => ([(this.Foods_spread_close())]);
			(obj.body) = () => ([(this.Empty())]);
			return obj;
		}
		Hot_dogs(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🌭 Hot Dogs");
			(obj.tools) = () => ([(this.Foods_spread_close())]);
			(obj.body) = () => ([(this.Empty())]);
			return obj;
		}
		Fries(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🍟 Fries");
			(obj.tools) = () => ([(this.Foods_spread_close())]);
			(obj.body) = () => ([(this.Empty())]);
			return obj;
		}
		Foods(){
			const obj = new this.$.$mol_book2_catalog();
			(obj.param) = () => ("mol_book2_catalog_demo_foods");
			(obj.menu_title) = () => ("Foods");
			(obj.menu_tools) = () => ([(this.Spread_close())]);
			(obj.spreads) = () => ({
				"pizza": (this.Pizza()), 
				"hot_dogs": (this.Hot_dogs()), 
				"fries": (this.Fries())
			});
			return obj;
		}
		Animals_spread_close(){
			return (this.Animals().Spread_close());
		}
		Cats(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🐱 Cats");
			(obj.tools) = () => ([(this.Animals_spread_close())]);
			(obj.body) = () => ([(this.Content())]);
			return obj;
		}
		Dogs(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🐶 Dogs");
			(obj.tools) = () => ([(this.Animals_spread_close())]);
			(obj.body) = () => ([(this.Content())]);
			return obj;
		}
		Horses(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🐴 Horses");
			(obj.tools) = () => ([(this.Animals_spread_close())]);
			(obj.body) = () => ([(this.Content())]);
			return obj;
		}
		Racoons(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🦝 Racoons");
			(obj.tools) = () => ([(this.Animals_spread_close())]);
			(obj.body) = () => ([(this.Content())]);
			return obj;
		}
		Pigs(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🐷 Pigs ");
			(obj.tools) = () => ([(this.Animals_spread_close())]);
			(obj.body) = () => ([(this.Content())]);
			return obj;
		}
		Rabbits(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🐰 Rabbits");
			(obj.tools) = () => ([(this.Animals_spread_close())]);
			(obj.body) = () => ([(this.Content())]);
			return obj;
		}
		Wolfs(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🐺 Wolfs");
			(obj.tools) = () => ([(this.Animals_spread_close())]);
			(obj.body) = () => ([(this.Content())]);
			return obj;
		}
		Mice(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🐭 Mice");
			(obj.tools) = () => ([(this.Animals_spread_close())]);
			(obj.body) = () => ([(this.Content())]);
			return obj;
		}
		Ants(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🐜 Ants");
			(obj.tools) = () => ([(this.Animals_spread_close())]);
			(obj.body) = () => ([(this.Content())]);
			return obj;
		}
		Bugs(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("🐛 Bugs");
			(obj.tools) = () => ([(this.Animals_spread_close())]);
			(obj.body) = () => ([(this.Content())]);
			return obj;
		}
		Animals(){
			const obj = new this.$.$mol_book2_catalog();
			(obj.param) = () => ("mol_book2_catalog_demo_animals");
			(obj.menu_title) = () => ("Animals");
			(obj.menu_tools) = () => ([(this.Spread_close())]);
			(obj.spreads) = () => ({
				"cats": (this.Cats()), 
				"dogs": (this.Dogs()), 
				"horses": (this.Horses()), 
				"racoons": (this.Racoons()), 
				"pigs": (this.Pigs()), 
				"rabbits": (this.Rabbits()), 
				"wolfs": (this.Wolfs()), 
				"mice": (this.Mice()), 
				"ants": (this.Ants()), 
				"bugs": (this.Bugs())
			});
			return obj;
		}
		Calatog(){
			const obj = new this.$.$mol_book2_catalog();
			(obj.param) = () => ("mol_book2_catalog_demo");
			(obj.menu_title) = () => ("Catalog");
			(obj.spreads) = () => ({"foods": (this.Foods()), "animals": (this.Animals())});
			return obj;
		}
		title(){
			return "Catalog of pages";
		}
		Content(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Empty(){
			const obj = new this.$.$mol_status();
			return obj;
		}
		sub(){
			return [(this.Calatog())];
		}
		tags(){
			return [
				"app", 
				"page", 
				"menu", 
				"navigation", 
				"transition", 
				"multipage"
			];
		}
		aspects(){
			return ["Navigation", "Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Pizza"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Hot_dogs"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Fries"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Foods"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Cats"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Dogs"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Horses"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Racoons"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Pigs"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Rabbits"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Wolfs"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Mice"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Ants"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Bugs"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Animals"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Calatog"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Content"));
	($mol_mem(($.$mol_book2_catalog_demo.prototype), "Empty"));


;
"use strict";

;
	($.$mol_icon_cursor_default) = class $mol_icon_cursor_default extends ($.$mol_icon) {
		path(){
			return "M13.64,21.97C13.14,22.21 12.54,22 12.31,21.5L10.13,16.76L7.62,18.78C7.45,18.92 7.24,19 7,19A1,1 0 0,1 6,18V3A1,1 0 0,1 7,2C7.24,2 7.47,2.09 7.64,2.23L7.65,2.22L19.14,11.86C19.57,12.22 19.62,12.85 19.27,13.27C19.12,13.45 18.91,13.57 18.7,13.61L15.54,14.23L17.74,18.96C18,19.46 17.76,20.05 17.26,20.28L13.64,21.97Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_cursor_default_click) = class $mol_icon_cursor_default_click extends ($.$mol_icon) {
		path(){
			return "M10.76,8.69A0.76,0.76 0 0,0 10,9.45V20.9C10,21.32 10.34,21.66 10.76,21.66C10.95,21.66 11.11,21.6 11.24,21.5L13.15,19.95L14.81,23.57C14.94,23.84 15.21,24 15.5,24C15.61,24 15.72,24 15.83,23.92L18.59,22.64C18.97,22.46 19.15,22 18.95,21.63L17.28,18L19.69,17.55C19.85,17.5 20,17.43 20.12,17.29C20.39,16.97 20.35,16.5 20,16.21L11.26,8.86L11.25,8.87C11.12,8.76 10.95,8.69 10.76,8.69M15,10V8H20V10H15M13.83,4.76L16.66,1.93L18.07,3.34L15.24,6.17L13.83,4.76M10,0H12V5H10V0M3.93,14.66L6.76,11.83L8.17,13.24L5.34,16.07L3.93,14.66M3.93,3.34L5.34,1.93L8.17,4.76L6.76,6.17L3.93,3.34M7,10H2V8H7V10";
		}
	};


;
"use strict";

;
	($.$mol_icon_cursor_default_click_outline) = class $mol_icon_cursor_default_click_outline extends ($.$mol_icon) {
		path(){
			return "M11.5,11L17.88,16.37L17,16.55L16.36,16.67C15.73,16.8 15.37,17.5 15.65,18.07L15.92,18.65L17.28,21.59L15.86,22.25L14.5,19.32L14.24,18.74C13.97,18.15 13.22,17.97 12.72,18.38L12.21,18.78L11.5,19.35V11M10.76,8.69A0.76,0.76 0 0,0 10,9.45V20.9C10,21.32 10.34,21.66 10.76,21.66C10.95,21.66 11.11,21.6 11.24,21.5L13.15,19.95L14.81,23.57C14.94,23.84 15.21,24 15.5,24C15.61,24 15.72,24 15.83,23.92L18.59,22.64C18.97,22.46 19.15,22 18.95,21.63L17.28,18L19.69,17.55C19.85,17.5 20,17.43 20.12,17.29C20.39,16.97 20.35,16.5 20,16.21L11.26,8.86L11.25,8.87C11.12,8.76 10.95,8.69 10.76,8.69M15,10V8H20V10H15M13.83,4.76L16.66,1.93L18.07,3.34L15.24,6.17L13.83,4.76M10,0H12V5H10V0M3.93,14.66L6.76,11.83L8.17,13.24L5.34,16.07L3.93,14.66M3.93,3.34L5.34,1.93L8.17,4.76L6.76,6.17L3.93,3.34M7,10H2V8H7V10";
		}
	};


;
"use strict";

;
	($.$mol_button_demo) = class $mol_button_demo extends ($.$mol_example_small) {
		fail(next){
			if(next !== undefined) return next;
			return null;
		}
		Major_enabled(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Enabled Major");
			(obj.click) = (next) => ((this.fail(next)));
			return obj;
		}
		Major_disabled(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Disabled Major");
			(obj.enabled) = () => (false);
			return obj;
		}
		Minor_enabled(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Enabled Minor");
			(obj.click) = (next) => ((this.fail(next)));
			return obj;
		}
		Minor_disabled(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Disabled Minor");
			(obj.enabled) = () => (false);
			return obj;
		}
		Minor_icon_only_icon(){
			const obj = new this.$.$mol_icon_cursor_default_click_outline();
			return obj;
		}
		Minor_icon_only(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.fail(next)));
			(obj.sub) = () => ([(this.Minor_icon_only_icon())]);
			return obj;
		}
		Minor_iconed_icon(){
			const obj = new this.$.$mol_icon_cursor_default_click_outline();
			return obj;
		}
		Minor_iconed(){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.fail(next)));
			(obj.sub) = () => ([(this.Minor_iconed_icon()), "Minor with Icon"]);
			return obj;
		}
		title(){
			return "All types of buttons in every states";
		}
		sub(){
			return [
				(this.Major_enabled()), 
				(this.Major_disabled()), 
				(this.Minor_enabled()), 
				(this.Minor_disabled()), 
				(this.Minor_icon_only()), 
				(this.Minor_iconed())
			];
		}
		aspects(){
			return ["Widget/Control/Button"];
		}
	};
	($mol_mem(($.$mol_button_demo.prototype), "fail"));
	($mol_mem(($.$mol_button_demo.prototype), "Major_enabled"));
	($mol_mem(($.$mol_button_demo.prototype), "Major_disabled"));
	($mol_mem(($.$mol_button_demo.prototype), "Minor_enabled"));
	($mol_mem(($.$mol_button_demo.prototype), "Minor_disabled"));
	($mol_mem(($.$mol_button_demo.prototype), "Minor_icon_only_icon"));
	($mol_mem(($.$mol_button_demo.prototype), "Minor_icon_only"));
	($mol_mem(($.$mol_button_demo.prototype), "Minor_iconed_icon"));
	($mol_mem(($.$mol_button_demo.prototype), "Minor_iconed"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_button_demo extends $.$mol_button_demo {
            fail() {
                this.$.$mol_wait_timeout(2000);
                throw new Error('Demonstration Error');
            }
        }
        $$.$mol_button_demo = $mol_button_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_button_share_demo) = class $mol_button_share_demo extends ($.$mol_example_small) {
		Share_page(){
			const obj = new this.$.$mol_button_share();
			(obj.title) = () => ((this.title()));
			(obj.hint) = () => ("Share this page with screenshot");
			return obj;
		}
		Share_screenshot(){
			const obj = new this.$.$mol_button_share();
			(obj.title) = () => ("Component screensht");
			(obj.hint) = () => ("Share screenshot of component");
			(obj.uri) = () => (null);
			(obj.capture) = () => ((this.Share_hyoo()));
			return obj;
		}
		Share_hyoo(){
			const obj = new this.$.$mol_button_share();
			(obj.title) = () => ("$hyoo");
			(obj.hint) = () => ("Share hyoo.ru");
			(obj.uri) = () => ("https://hyoo.ru");
			(obj.capture) = () => (null);
			return obj;
		}
		title(){
			return "Share button demo";
		}
		sub(){
			return [
				(this.Share_page()), 
				(this.Share_screenshot()), 
				(this.Share_hyoo())
			];
		}
		aspects(){
			return ["Widget/Control/Button"];
		}
	};
	($mol_mem(($.$mol_button_share_demo.prototype), "Share_page"));
	($mol_mem(($.$mol_button_share_demo.prototype), "Share_screenshot"));
	($mol_mem(($.$mol_button_share_demo.prototype), "Share_hyoo"));


;
"use strict";

;
	($.$mol_calendar_demo_holiday) = class $mol_calendar_demo_holiday extends ($.$mol_example_small) {
		month(){
			return "2018-01";
		}
		holiday(id){
			return false;
		}
		Calendar(){
			const obj = new this.$.$mol_calendar();
			(obj.month_string) = () => ((this.month()));
			(obj.day_holiday) = (id) => ((this.holiday(id)));
			return obj;
		}
		title(){
			return "Days of month 2018-01 with custom holidays";
		}
		holidays(){
			return [
				"2018-01-01", 
				"2018-01-02", 
				"2018-01-03", 
				"2018-01-04", 
				"2018-01-05", 
				"2018-01-06", 
				"2018-01-07", 
				"2018-01-08", 
				"2018-01-13", 
				"2018-01-14", 
				"2018-01-20", 
				"2018-01-21", 
				"2018-01-27", 
				"2018-01-28"
			];
		}
		sub(){
			return [(this.Calendar())];
		}
		tags(){
			return ["month"];
		}
		aspects(){
			return ["Widget/Grid", "Type/Date"];
		}
	};
	($mol_mem(($.$mol_calendar_demo_holiday.prototype), "Calendar"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_calendar_demo_holiday extends $.$mol_calendar_demo_holiday {
            holiday(day) {
                return this.holidays().indexOf(day) >= 0;
            }
        }
        $$.$mol_calendar_demo_holiday = $mol_calendar_demo_holiday;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_calendar_demo_selection) = class $mol_calendar_demo_selection extends ($.$mol_example_small) {
		month(){
			return "2018-01";
		}
		selected(id){
			return false;
		}
		Calendar(){
			const obj = new this.$.$mol_calendar();
			(obj.month_string) = () => ((this.month()));
			(obj.day_selected) = (id) => ((this.selected(id)));
			return obj;
		}
		title(){
			return "Days of month 2018-01 with custom selection";
		}
		interval_config(){
			return {"start": "2018-01-05", "end": "2018-01-10"};
		}
		days(){
			return [
				"2018-01-18", 
				"2018-01-20", 
				"2018-01-26", 
				"2018-02-01", 
				"2018-02-03"
			];
		}
		sub(){
			return [(this.Calendar())];
		}
		tags(){
			return ["month"];
		}
		aspects(){
			return ["Widget/Grid", "Type/Date"];
		}
	};
	($mol_mem(($.$mol_calendar_demo_selection.prototype), "Calendar"));


;
"use strict";
var $;
(function ($) {
    class $mol_time_interval extends $mol_time_base {
        constructor(config) {
            super();
            if (typeof config === 'string') {
                var chunks = config.split('/');
                if (chunks[0]) {
                    if (chunks[0][0].toUpperCase() === 'P') {
                        this._duration = new $mol_time_duration(chunks[0]);
                    }
                    else {
                        this._start = new $mol_time_moment(chunks[0]);
                    }
                }
                else {
                    this._start = new $mol_time_moment();
                }
                if (chunks[1]) {
                    if (chunks[1][0].toUpperCase() === 'P') {
                        this._duration = new $mol_time_duration(chunks[1]);
                    }
                    else {
                        this._end = new $mol_time_moment(chunks[1]);
                    }
                }
                else {
                    this._end = new $mol_time_moment();
                }
                return;
            }
            if (config.start !== undefined)
                this._start = new $mol_time_moment(config.start);
            if (config.end !== undefined)
                this._end = new $mol_time_moment(config.end);
            if (config.duration !== undefined)
                this._duration = new $mol_time_duration(config.duration);
        }
        _start;
        get start() {
            if (this._start)
                return this._start;
            return this._start = this._end.shift(this._duration.mult(-1));
        }
        _end;
        get end() {
            if (this._end)
                return this._end;
            return this._end = this._start.shift(this._duration);
        }
        _duration;
        get duration() {
            if (this._duration)
                return this._duration;
            return this._duration = new $mol_time_duration(this._end.valueOf() - this._start.valueOf());
        }
        toJSON() { return this.toString(); }
        toString() {
            return (this._start || this._duration || '').toString() + '/' + (this._end || this._duration || '').toString();
        }
        [Symbol.toPrimitive](mode) {
            return this.toString();
        }
    }
    $.$mol_time_interval = $mol_time_interval;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_calendar_demo_selection extends $.$mol_calendar_demo_selection {
            interval() {
                return new $mol_time_interval(this.interval_config());
            }
            selected(day) {
                const interval = this.interval();
                if ((day >= interval.start.toString()) && (day < interval.end.toString()))
                    return true;
                if (this.days().includes(day))
                    return true;
                return false;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_calendar_demo_selection.prototype, "interval", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar_demo_selection.prototype, "selected", null);
        $$.$mol_calendar_demo_selection = $mol_calendar_demo_selection;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_calendar_demo_simple) = class $mol_calendar_demo_simple extends ($.$mol_example_small) {
		today(){
			const obj = new this.$.$mol_time_moment();
			return obj;
		}
		Calendar(){
			const obj = new this.$.$mol_calendar();
			(obj.month_moment) = () => ((this.today()));
			return obj;
		}
		title(){
			return "Days of curret month";
		}
		sub(){
			return [(this.Calendar())];
		}
		tags(){
			return ["month"];
		}
		aspects(){
			return ["Widget/Grid", "Type/Date"];
		}
	};
	($mol_mem(($.$mol_calendar_demo_simple.prototype), "today"));
	($mol_mem(($.$mol_calendar_demo_simple.prototype), "Calendar"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_calendar_demo_simple extends $.$mol_calendar_demo_simple {
            month_name() {
                return this.today().toString('Month YYYY');
            }
        }
        $$.$mol_calendar_demo_simple = $mol_calendar_demo_simple;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_card) = class $mol_card extends ($.$mol_list) {
		status(){
			return "";
		}
		content(){
			return [(this.title())];
		}
		Content(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.content()));
			return obj;
		}
		status_text(){
			return (this.status());
		}
		Status(){
			const obj = new this.$.$mol_view();
			(obj.minimal_height) = () => (30);
			(obj.sub) = () => ([(this.status_text())]);
			return obj;
		}
		attr(){
			return {...(super.attr()), "mol_card_status_type": (this.status())};
		}
		rows(){
			return [(this.Content()), (this.Status())];
		}
	};
	($mol_mem(($.$mol_card.prototype), "Content"));
	($mol_mem(($.$mol_card.prototype), "Status"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_card extends $.$mol_card {
            rows() {
                return [
                    this.Content(),
                    ...this.status_text() ? [this.Status()] : [],
                ];
            }
        }
        $$.$mol_card = $mol_card;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/card/card.view.css", "[mol_card] {\n\tbackground: var(--mol_theme_card);\n\tcolor: var(--mol_theme_text);\n\tborder-radius: var(--mol_gap_round);\n\tdisplay: flex;\n\tflex: 0 1 auto;\n\tflex-direction: column;\n\tposition: relative;\n\tbox-shadow: 0 0 0.5rem 0rem hsla(0,0%,0%,.125);\n\t/* overflow: hidden; */\n}\n\n[mol_card_content] {\n\tflex: 1 1 auto;\n\tborder-radius: var(--mol_gap_round);\n\tmargin: 0;\n\tpadding: var(--mol_gap_block);\n}\n\n[mol_card_status] {\n\tbackground: var(--mol_theme_line);\n\ttext-transform: capitalize;\n\tpadding: var(--mol_gap_text);\n\tmargin: 0;\n}\n\n[mol_card_status] {\n\tbackground: var(--mol_theme_line);\n}\n");
})($ || ($ = {}));

;
	($.$mol_card_demo) = class $mol_card_demo extends ($.$mol_example_small) {
		Simple(){
			const obj = new this.$.$mol_card();
			(obj.content) = () => (["Hello world!"]);
			return obj;
		}
		Pending(){
			const obj = new this.$.$mol_card();
			(obj.title) = () => ("Hello pending!");
			(obj.status) = () => ("pending");
			return obj;
		}
		title(){
			return "Cards with optional status";
		}
		sub(){
			return [(this.Simple()), (this.Pending())];
		}
		tags(){
			return [
				"status", 
				"container", 
				"sticker"
			];
		}
		aspects(){
			return ["Widget/Layout", "Widget/Island"];
		}
	};
	($mol_mem(($.$mol_card_demo.prototype), "Simple"));
	($mol_mem(($.$mol_card_demo.prototype), "Pending"));


;
"use strict";

;
	($.$mol_gallery) = class $mol_gallery extends ($.$mol_view) {
		items(){
			return [];
		}
		side_size(id){
			return "1";
		}
		side_items(id){
			return [];
		}
		sub(){
			return (this.items());
		}
		Side(id){
			const obj = new this.$.$mol_gallery();
			(obj.style) = () => ({"flexGrow": (this.side_size(id))});
			(obj.items) = () => ((this.side_items(id)));
			return obj;
		}
	};
	($mol_mem_key(($.$mol_gallery.prototype), "Side"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_gallery extends $.$mol_gallery {
            sub() {
                const items = this.items();
                if (items.length <= 3)
                    return items;
                return [
                    this.Side(0),
                    this.Side(1),
                ];
            }
            side_items(id) {
                const items = this.items();
                const middle = items.length % 2
                    ? Math.ceil(items.length / 3)
                    : items.length / 2;
                return id
                    ? items.slice(middle)
                    : items.slice(0, middle);
            }
            side_size(id) {
                return String(this.side_items(id).length);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_gallery.prototype, "sub", null);
        __decorate([
            $mol_mem_key
        ], $mol_gallery.prototype, "side_items", null);
        $$.$mol_gallery = $mol_gallery;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/gallery/gallery.view.css", "[mol_gallery] {\n\tflex-wrap: wrap;\n\tflex: 1 1 auto;\n\talign-items: stretch;\n    align-content: stretch;\n}\n");
})($ || ($ = {}));

;
	($.$mol_chart_legend) = class $mol_chart_legend extends ($.$mol_scroll) {
		graph_legends(){
			return [];
		}
		Gallery(){
			const obj = new this.$.$mol_gallery();
			(obj.items) = () => ((this.graph_legends()));
			return obj;
		}
		Graph_sample(id){
			return null;
		}
		Graph_sample_box(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Graph_sample(id))]);
			return obj;
		}
		graph_title(id){
			return "";
		}
		Graph_title(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.graph_title(id))]);
			return obj;
		}
		graphs(){
			return [];
		}
		graphs_front(){
			return [];
		}
		sub(){
			return [(this.Gallery())];
		}
		Graph_legend(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Graph_sample_box(id)), (this.Graph_title(id))]);
			return obj;
		}
	};
	($mol_mem(($.$mol_chart_legend.prototype), "Gallery"));
	($mol_mem_key(($.$mol_chart_legend.prototype), "Graph_sample_box"));
	($mol_mem_key(($.$mol_chart_legend.prototype), "Graph_title"));
	($mol_mem_key(($.$mol_chart_legend.prototype), "Graph_legend"));


;
	($.$mol_svg_group) = class $mol_svg_group extends ($.$mol_svg) {
		dom_name(){
			return "g";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_vector extends Array {
        get length() {
            return super.length;
        }
        constructor(...values) { super(...values); }
        map(convert, self) {
            return super.map(convert, self);
        }
        merged(patches, combine) {
            return this.map((value, index) => combine(value, patches[index]));
        }
        limited(limits) {
            return this.merged(limits, (value, [min, max]) => (value < min) ? min : (value > max) ? max : value);
        }
        added0(diff) {
            return this.map(value => value + diff);
        }
        added1(diff) {
            return this.merged(diff, (a, b) => a + b);
        }
        multed0(mult) {
            return this.map(value => value * mult);
        }
        multed1(mults) {
            return this.merged(mults, (a, b) => a * b);
        }
        powered0(mult) {
            return this.map(value => value ** mult);
        }
        expanded1(point) {
            return this.merged(point, (range, value) => range.expanded0(value));
        }
        expanded2(point) {
            return this.merged(point, (range1, range2) => {
                let next = range1;
                const Range = range1.constructor;
                if (range1[0] > range2[0])
                    next = new Range(range2[0], next.max);
                if (range1[1] < range2[1])
                    next = new Range(next.min, range2[1]);
                return next;
            });
        }
        center() {
            const Result = this[0].constructor;
            return new Result(...this[0].map((_, i) => this.reduce((sum, point) => sum + point[i], 0) / this.length));
        }
        distance() {
            let distance = 0;
            for (let i = 1; i < this.length; ++i) {
                distance += this[i - 1].reduce((sum, min, j) => sum + (min - this[i][j]) ** 2, 0) ** (1 / this[i].length);
            }
            return distance;
        }
        transponed() {
            return this[0].map((_, i) => this.map(row => row[i]));
        }
        get x() { return this[0]; }
        set x(next) { this[0] = next; }
        get y() { return this[1]; }
        set y(next) { this[1] = next; }
        get z() { return this[2]; }
        set z(next) { this[2] = next; }
    }
    $.$mol_vector = $mol_vector;
    class $mol_vector_1d extends $mol_vector {
    }
    $.$mol_vector_1d = $mol_vector_1d;
    class $mol_vector_2d extends $mol_vector {
    }
    $.$mol_vector_2d = $mol_vector_2d;
    class $mol_vector_3d extends $mol_vector {
    }
    $.$mol_vector_3d = $mol_vector_3d;
    class $mol_vector_range extends $mol_vector {
        0;
        1;
        constructor(min, max = min) {
            super(min, max);
            this[0] = min;
            this[1] = max;
        }
        get min() { return this[0]; }
        set min(next) { this[0] = next; }
        get max() { return this[1]; }
        set max(next) { this[1] = next; }
        get inversed() {
            return new this.constructor(this.max, this.min);
        }
        expanded0(value) {
            const Range = this.constructor;
            let range = this;
            if (value > range.max)
                range = new Range(range.min, value);
            if (value < range.min)
                range = new Range(value, range.max);
            return range;
        }
    }
    $.$mol_vector_range = $mol_vector_range;
    $.$mol_vector_range_full = new $mol_vector_range(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);
    class $mol_vector_matrix extends $mol_vector {
        added2(diff) {
            return this.merged(diff, (a, b) => a.map((a2, index) => a2 + b[index]));
        }
        multed2(diff) {
            return this.merged(diff, (a, b) => a.map((a2, index) => a2 * b[index]));
        }
    }
    $.$mol_vector_matrix = $mol_vector_matrix;
})($ || ($ = {}));

;
	($.$mol_svg_title) = class $mol_svg_title extends ($.$mol_svg) {
		dom_name(){
			return "title";
		}
		sub(){
			return [(this.title())];
		}
	};


;
"use strict";

;
	($.$mol_plot_graph) = class $mol_plot_graph extends ($.$mol_svg_group) {
		type(){
			return "solid";
		}
		color(){
			return "";
		}
		viewport_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		viewport_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_pane_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_pane_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		gap_x(){
			const obj = new this.$.$mol_vector_range(0, 0);
			return obj;
		}
		gap_y(){
			const obj = new this.$.$mol_vector_range(0, 0);
			return obj;
		}
		title(){
			return "";
		}
		hint(){
			return (this.title());
		}
		series_x(){
			return [];
		}
		series_y(){
			return [];
		}
		attr(){
			return {...(super.attr()), "mol_plot_graph_type": (this.type())};
		}
		style(){
			return {...(super.style()), "color": (this.color())};
		}
		viewport(){
			const obj = new this.$.$mol_vector_2d((this.viewport_x()), (this.viewport_y()));
			return obj;
		}
		shift(){
			return [0, 0];
		}
		scale(){
			return [1, 1];
		}
		cursor_position(){
			const obj = new this.$.$mol_vector_2d(NaN, NaN);
			return obj;
		}
		dimensions_pane(){
			const obj = new this.$.$mol_vector_2d((this.dimensions_pane_x()), (this.dimensions_pane_y()));
			return obj;
		}
		dimensions(){
			const obj = new this.$.$mol_vector_2d((this.dimensions_x()), (this.dimensions_y()));
			return obj;
		}
		size_real(){
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		gap(){
			const obj = new this.$.$mol_vector_2d((this.gap_x()), (this.gap_y()));
			return obj;
		}
		repos_x(id){
			return 0;
		}
		repos_y(id){
			return 0;
		}
		indexes(){
			return [];
		}
		points(){
			return [];
		}
		front(){
			return [];
		}
		back(){
			return [];
		}
		Hint(){
			const obj = new this.$.$mol_svg_title();
			(obj.title) = () => ((this.hint()));
			return obj;
		}
		hue(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		Sample(){
			return null;
		}
	};
	($mol_mem(($.$mol_plot_graph.prototype), "viewport_x"));
	($mol_mem(($.$mol_plot_graph.prototype), "viewport_y"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions_pane_x"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions_pane_y"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions_x"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions_y"));
	($mol_mem(($.$mol_plot_graph.prototype), "gap_x"));
	($mol_mem(($.$mol_plot_graph.prototype), "gap_y"));
	($mol_mem(($.$mol_plot_graph.prototype), "viewport"));
	($mol_mem(($.$mol_plot_graph.prototype), "cursor_position"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions_pane"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions"));
	($mol_mem(($.$mol_plot_graph.prototype), "size_real"));
	($mol_mem(($.$mol_plot_graph.prototype), "gap"));
	($mol_mem(($.$mol_plot_graph.prototype), "Hint"));
	($mol_mem(($.$mol_plot_graph.prototype), "hue"));
	($.$mol_plot_graph_sample) = class $mol_plot_graph_sample extends ($.$mol_view) {
		type(){
			return "solid";
		}
		color(){
			return "black";
		}
		attr(){
			return {...(super.attr()), "mol_plot_graph_type": (this.type())};
		}
		style(){
			return {...(super.style()), "color": (this.color())};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_graph extends $.$mol_plot_graph {
            viewport() {
                const size = this.size_real();
                return new this.$.$mol_vector_2d(new this.$.$mol_vector_range(0, size.x), new this.$.$mol_vector_range(0, size.y));
            }
            indexes() {
                return this.series_x().map((_, i) => i);
            }
            repos_x(val) {
                return val;
            }
            repos_y(val) {
                return val;
            }
            points() {
                const [shift_x, shift_y] = this.shift();
                const [scale_x, scale_y] = this.scale();
                const series_x = this.series_x();
                const series_y = this.series_y();
                return this.indexes().map(index => {
                    let point_x = Math.round(shift_x + this.repos_x(series_x[index]) * scale_x);
                    let point_y = Math.round(shift_y + this.repos_y(series_y[index]) * scale_y);
                    point_x = Math.max(Number.MIN_SAFE_INTEGER, Math.min(point_x, Number.MAX_SAFE_INTEGER));
                    point_y = Math.max(Number.MIN_SAFE_INTEGER, Math.min(point_y, Number.MAX_SAFE_INTEGER));
                    return [point_x, point_y];
                });
            }
            series_x() {
                return this.series_y().map((val, index) => index);
            }
            dimensions() {
                let next = new this.$.$mol_vector_2d($mol_vector_range_full.inversed, $mol_vector_range_full.inversed);
                const series_x = this.series_x();
                const series_y = this.series_y();
                for (let i = 0; i < series_x.length; i++) {
                    if (series_x[i] > next.x.max)
                        next.x.max = this.repos_x(series_x[i]);
                    if (series_x[i] < next.x.min)
                        next.x.min = this.repos_x(series_x[i]);
                    if (series_y[i] > next.y.max)
                        next.y.max = this.repos_y(series_y[i]);
                    if (series_y[i] < next.y.min)
                        next.y.min = this.repos_y(series_y[i]);
                }
                return next;
            }
            color() {
                const hue = this.hue();
                return hue ? `hsl( ${hue} , 100% , 35% )` : '';
            }
            front() {
                return [this];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_graph.prototype, "indexes", null);
        __decorate([
            $mol_mem
        ], $mol_plot_graph.prototype, "series_x", null);
        __decorate([
            $mol_mem
        ], $mol_plot_graph.prototype, "dimensions", null);
        $$.$mol_plot_graph = $mol_plot_graph;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/graph/graph.view.css", "[mol_plot_graph] {\n\tstroke: currentColor;\n}\n\n[mol_plot_graph_sample] {\n\tborder-width: 0;\n\tborder-style: solid;\n}\n\n[mol_plot_graph_type=\"dashed\"] {\n\tstroke-dasharray: 4 4;\n\tborder-style: dashed;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_chart_legend extends $.$mol_chart_legend {
            graphs_front() {
                return this.graphs().filter(graph => graph.Sample());
            }
            graph_legends() {
                return this.graphs_front().map((graph, index) => this.Graph_legend(index));
            }
            graph_title(index) {
                return this.graphs_front()[index].title();
            }
            Graph_sample(index) {
                return this.graphs_front()[index].Sample();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_chart_legend.prototype, "graphs_front", null);
        $$.$mol_chart_legend = $mol_chart_legend;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/chart/legend/legend.view.css", "[mol_chart_legend] {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tflex-direction: row;\n\tflex: 0 1 auto;\n}\n\n[mol_chart_legend_graph_legend] {\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tflex: 1 1 8rem;\n\tpadding: .5rem;\n}\n\n[mol_chart_legend_graph_title] {\n\tmargin: 0 .25rem;\n\tflex: 1 1 auto;\n}\n\n[mol_chart_legend_graph_sample_box] {\n\tposition: relative;\n\twidth: 1.5rem;\n\tflex: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_touch) = class $mol_touch extends ($.$mol_plugin) {
		event_start(next){
			if(next !== undefined) return next;
			return null;
		}
		event_move(next){
			if(next !== undefined) return next;
			return null;
		}
		event_end(next){
			if(next !== undefined) return next;
			return null;
		}
		event_leave(next){
			if(next !== undefined) return next;
			return null;
		}
		event_wheel(next){
			if(next !== undefined) return next;
			return null;
		}
		start_zoom(next){
			if(next !== undefined) return next;
			return 0;
		}
		start_distance(next){
			if(next !== undefined) return next;
			return 0;
		}
		zoom(next){
			if(next !== undefined) return next;
			return 1;
		}
		allow_draw(){
			return true;
		}
		allow_pan(){
			return true;
		}
		allow_zoom(){
			return true;
		}
		action_type(next){
			if(next !== undefined) return next;
			return "";
		}
		action_point(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_vector_2d(NaN, NaN);
			return obj;
		}
		start_pan(next){
			if(next !== undefined) return next;
			return [0, 0];
		}
		pan(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		pointer_center(){
			const obj = new this.$.$mol_vector_2d(NaN, NaN);
			return obj;
		}
		start_pos(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_precision(){
			return 16;
		}
		swipe_right(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_bottom(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_left(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_top(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_from_right(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_from_bottom(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_from_left(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_from_top(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_to_right(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_to_bottom(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_to_left(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_to_top(next){
			if(next !== undefined) return next;
			return null;
		}
		draw_start(next){
			if(next !== undefined) return next;
			return null;
		}
		draw(next){
			if(next !== undefined) return next;
			return null;
		}
		draw_end(next){
			if(next !== undefined) return next;
			return null;
		}
		style(){
			return {
				...(super.style()), 
				"touch-action": "none", 
				"overscroll-behavior": "none"
			};
		}
		event(){
			return {
				...(super.event()), 
				"pointerdown": (next) => (this.event_start(next)), 
				"pointermove": (next) => (this.event_move(next)), 
				"pointerup": (next) => (this.event_end(next)), 
				"pointerleave": (next) => (this.event_leave(next)), 
				"wheel": (next) => (this.event_wheel(next))
			};
		}
	};
	($mol_mem(($.$mol_touch.prototype), "event_start"));
	($mol_mem(($.$mol_touch.prototype), "event_move"));
	($mol_mem(($.$mol_touch.prototype), "event_end"));
	($mol_mem(($.$mol_touch.prototype), "event_leave"));
	($mol_mem(($.$mol_touch.prototype), "event_wheel"));
	($mol_mem(($.$mol_touch.prototype), "start_zoom"));
	($mol_mem(($.$mol_touch.prototype), "start_distance"));
	($mol_mem(($.$mol_touch.prototype), "zoom"));
	($mol_mem(($.$mol_touch.prototype), "action_type"));
	($mol_mem(($.$mol_touch.prototype), "action_point"));
	($mol_mem(($.$mol_touch.prototype), "start_pan"));
	($mol_mem(($.$mol_touch.prototype), "pan"));
	($mol_mem(($.$mol_touch.prototype), "pointer_center"));
	($mol_mem(($.$mol_touch.prototype), "start_pos"));
	($mol_mem(($.$mol_touch.prototype), "swipe_right"));
	($mol_mem(($.$mol_touch.prototype), "swipe_bottom"));
	($mol_mem(($.$mol_touch.prototype), "swipe_left"));
	($mol_mem(($.$mol_touch.prototype), "swipe_top"));
	($mol_mem(($.$mol_touch.prototype), "swipe_from_right"));
	($mol_mem(($.$mol_touch.prototype), "swipe_from_bottom"));
	($mol_mem(($.$mol_touch.prototype), "swipe_from_left"));
	($mol_mem(($.$mol_touch.prototype), "swipe_from_top"));
	($mol_mem(($.$mol_touch.prototype), "swipe_to_right"));
	($mol_mem(($.$mol_touch.prototype), "swipe_to_bottom"));
	($mol_mem(($.$mol_touch.prototype), "swipe_to_left"));
	($mol_mem(($.$mol_touch.prototype), "swipe_to_top"));
	($mol_mem(($.$mol_touch.prototype), "draw_start"));
	($mol_mem(($.$mol_touch.prototype), "draw"));
	($mol_mem(($.$mol_touch.prototype), "draw_end"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_touch extends $.$mol_touch {
            auto() {
                this.pointer_events();
                this.start_pan();
                this.start_pos();
                this.start_distance();
                this.start_zoom();
                this.action_type();
                this.view_rect();
            }
            pointer_events(next = []) {
                return next;
            }
            pointer_coords() {
                const events = this.pointer_events();
                const touches = events.filter(e => e.pointerType === 'touch');
                const pens = events.filter(e => e.pointerType === 'pen');
                const mouses = events.filter(e => !e.pointerType || e.pointerType === 'mouse');
                const choosen = touches.length ? touches : pens.length ? pens : mouses;
                return new $mol_vector(...choosen.map(event => this.event_coords(event)));
            }
            pointer_center() {
                const coords = this.pointer_coords();
                return coords.length ? coords.center() : new $mol_vector_2d(NaN, NaN);
            }
            event_coords(event) {
                const { left, top } = this.view_rect();
                return new $mol_vector_2d(Math.round(event.pageX - left), Math.round(event.pageY - top));
            }
            action_point() {
                const coord = this.pointer_center();
                if (!coord)
                    return null;
                const zoom = this.zoom();
                const pan = this.pan();
                return new $mol_vector_2d((coord.x - pan.x) / zoom, (coord.y - pan.y) / zoom);
            }
            event_eat(event) {
                if (event instanceof PointerEvent) {
                    const events = this.pointer_events()
                        .filter(e => e instanceof PointerEvent)
                        .filter(e => e.pointerId !== event.pointerId);
                    if (event.type !== 'pointerup' && event.type !== 'pointerleave')
                        events.push(event);
                    this.pointer_events(events);
                    const touch_count = events.filter(e => e.pointerType === 'touch').length;
                    if (this.allow_zoom() && touch_count === 2) {
                        return this.action_type('zoom');
                    }
                    if (this.action_type() === 'zoom' && touch_count === 1) {
                        return this.action_type('zoom');
                    }
                    let button;
                    (function (button) {
                        button[button["left"] = 1] = "left";
                        button[button["right"] = 2] = "right";
                        button[button["middle"] = 4] = "middle";
                    })(button || (button = {}));
                    if (events.length > 0) {
                        if (event.ctrlKey && this.allow_zoom())
                            return this.action_type('zoom');
                        if (event.buttons === button.left && this.allow_draw())
                            return this.action_type('draw');
                        if (event.buttons && this.allow_pan())
                            return this.action_type('pan');
                    }
                    return this.action_type('');
                }
                if (event instanceof WheelEvent) {
                    this.pointer_events([event]);
                    if (event.shiftKey)
                        return this.action_type('pan');
                    return this.action_type('zoom');
                }
                return this.action_type('');
            }
            event_start(event) {
                if (event.defaultPrevented)
                    return;
                this.start_pan(this.pan());
                const action_type = this.event_eat(event);
                if (!action_type)
                    return;
                const coords = this.pointer_coords();
                this.start_pos(coords.center());
                if (action_type === 'draw') {
                    this.draw_start(event);
                    return;
                }
                this.start_distance(coords.distance());
                this.start_zoom(this.zoom());
            }
            event_move(event) {
                if (event.defaultPrevented)
                    return;
                const rect = this.view_rect();
                if (!rect)
                    return;
                const start_pan = this.start_pan();
                const action_type = this.event_eat(event);
                const start_pos = this.start_pos();
                let pos = this.pointer_center();
                if (!action_type)
                    return;
                if (!start_pos)
                    return;
                if (action_type === 'draw') {
                    const distance = new $mol_vector(start_pos, pos).distance();
                    if (distance >= 4) {
                        this.draw(event);
                    }
                    return;
                }
                if (action_type === 'pan') {
                    this.dom_node().setPointerCapture(event.pointerId);
                    this.pan(new $mol_vector_2d(start_pan[0] + pos[0] - start_pos[0], start_pan[1] + pos[1] - start_pos[1]));
                }
                const precision = this.swipe_precision();
                if ((this.swipe_right !== $mol_touch.prototype.swipe_right
                    || this.swipe_from_left !== $mol_touch.prototype.swipe_from_left
                    || this.swipe_to_right !== $mol_touch.prototype.swipe_to_right)
                    && pos[0] - start_pos[0] > precision * 2
                    && Math.abs(pos[1] - start_pos[1]) < precision) {
                    this.swipe_right(event);
                }
                if ((this.swipe_left !== $mol_touch.prototype.swipe_left
                    || this.swipe_from_right !== $mol_touch.prototype.swipe_from_right
                    || this.swipe_to_left !== $mol_touch.prototype.swipe_to_left)
                    && start_pos[0] - pos[0] > precision * 2
                    && Math.abs(pos[1] - start_pos[1]) < precision) {
                    this.swipe_left(event);
                }
                if ((this.swipe_bottom !== $mol_touch.prototype.swipe_bottom
                    || this.swipe_from_top !== $mol_touch.prototype.swipe_from_top
                    || this.swipe_to_bottom !== $mol_touch.prototype.swipe_to_bottom)
                    && pos[1] - start_pos[1] > precision * 2
                    && Math.abs(pos[0] - start_pos[0]) < precision) {
                    this.swipe_bottom(event);
                }
                if ((this.swipe_top !== $mol_touch.prototype.swipe_top
                    || this.swipe_from_bottom !== $mol_touch.prototype.swipe_from_bottom
                    || this.swipe_to_top !== $mol_touch.prototype.swipe_to_top)
                    && start_pos[1] - pos[1] > precision * 2
                    && Math.abs(pos[0] - start_pos[0]) < precision) {
                    this.swipe_top(event);
                }
                if (action_type === 'zoom') {
                    const coords = this.pointer_coords();
                    const distance = coords.distance();
                    const start_distance = this.start_distance();
                    const center = coords.center();
                    const start_zoom = this.start_zoom();
                    let mult = Math.abs(distance - start_distance) < 32 ? 1 : distance / start_distance;
                    this.zoom(start_zoom * mult);
                    const pan = new $mol_vector_2d((start_pan[0] - center[0] + pos[0] - start_pos[0]) * mult + center[0], (start_pan[1] - center[1] + pos[1] - start_pos[1]) * mult + center[1]);
                    this.pan(pan);
                }
            }
            event_end(event) {
                const action = this.action_type();
                if (action === 'draw') {
                    this.draw_end(event);
                }
                this.event_leave(event);
            }
            event_leave(event) {
                this.event_eat(event);
                this.dom_node().releasePointerCapture(event.pointerId);
                this.start_pos(null);
            }
            swipe_left(event) {
                if (this.view_rect().right - this.start_pos()[0] < this.swipe_precision() * 2)
                    this.swipe_from_right(event);
                else
                    this.swipe_to_left(event);
                this.event_end(event);
            }
            swipe_right(event) {
                if (this.start_pos()[0] - this.view_rect().left < this.swipe_precision() * 2)
                    this.swipe_from_left(event);
                else
                    this.swipe_to_right(event);
                this.event_end(event);
            }
            swipe_top(event) {
                if (this.view_rect().bottom - this.start_pos()[1] < this.swipe_precision() * 2)
                    this.swipe_from_bottom(event);
                else
                    this.swipe_to_top(event);
                this.event_end(event);
            }
            swipe_bottom(event) {
                if (this.start_pos()[1] - this.view_rect().top < this.swipe_precision() * 2)
                    this.swipe_from_top(event);
                else
                    this.swipe_to_bottom(event);
                this.event_end(event);
            }
            event_wheel(event) {
                if (event.defaultPrevented)
                    return;
                if (this.pan === $mol_touch.prototype.pan && this.zoom === $mol_touch.prototype.zoom)
                    return;
                if (this.pan !== $mol_touch.prototype.pan) {
                    event.preventDefault();
                }
                const action_type = this.event_eat(event);
                if (action_type === 'zoom') {
                    const zoom_prev = this.zoom() || 0.001;
                    const zoom_next = zoom_prev * (1 - .001 * Math.min(event.deltaY, 100));
                    const mult = zoom_next / zoom_prev;
                    this.zoom(zoom_next);
                    const pan_prev = this.pan();
                    const center = this.pointer_center();
                    const pan_next = pan_prev.multed0(mult).added1(center.multed0(1 - mult));
                    this.pan(pan_next);
                }
                if (action_type === 'pan') {
                    const pan_prev = this.pan();
                    const pan_next = new $mol_vector_2d(pan_prev.x - event.deltaX, pan_prev.y - event.deltaY);
                    this.pan(pan_next);
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_touch.prototype, "pointer_events", null);
        __decorate([
            $mol_mem
        ], $mol_touch.prototype, "pointer_coords", null);
        __decorate([
            $mol_mem
        ], $mol_touch.prototype, "pointer_center", null);
        __decorate([
            $mol_mem
        ], $mol_touch.prototype, "action_point", null);
        $$.$mol_touch = $mol_touch;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_plot_pane) = class $mol_plot_pane extends ($.$mol_svg_root) {
		gap_x(){
			const obj = new this.$.$mol_vector_range((this.gap_left()), (this.gap_right()));
			return obj;
		}
		gap_y(){
			const obj = new this.$.$mol_vector_range((this.gap_bottom()), (this.gap_top()));
			return obj;
		}
		shift_limit_x(){
			const obj = new this.$.$mol_vector_range(0, 0);
			return obj;
		}
		shift_limit_y(){
			const obj = new this.$.$mol_vector_range(0, 0);
			return obj;
		}
		scale_limit_x(){
			const obj = new this.$.$mol_vector_range(0, Infinity);
			return obj;
		}
		scale_limit_y(){
			const obj = new this.$.$mol_vector_range(0, -Infinity);
			return obj;
		}
		dimensions_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_viewport_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_viewport_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		graphs_sorted(){
			return [];
		}
		graphs(){
			return [];
		}
		graphs_positioned(){
			return (this.graphs());
		}
		graphs_visible(){
			return (this.graphs_positioned());
		}
		zoom(next){
			if(next !== undefined) return next;
			return 1;
		}
		cursor_position(){
			return (this.Touch().pointer_center());
		}
		allow_draw(){
			return true;
		}
		allow_pan(){
			return true;
		}
		allow_zoom(){
			return true;
		}
		action_type(){
			return (this.Touch().action_type());
		}
		action_point(){
			return (this.Touch().action_point());
		}
		draw_start(next){
			if(next !== undefined) return next;
			return null;
		}
		draw(next){
			if(next !== undefined) return next;
			return null;
		}
		draw_end(next){
			if(next !== undefined) return next;
			return null;
		}
		Touch(){
			const obj = new this.$.$mol_touch();
			(obj.zoom) = (next) => ((this.zoom(next)));
			(obj.pan) = (next) => ((this.shift(next)));
			(obj.allow_draw) = () => ((this.allow_draw()));
			(obj.allow_pan) = () => ((this.allow_pan()));
			(obj.allow_zoom) = () => ((this.allow_zoom()));
			(obj.draw_start) = (next) => ((this.draw_start(next)));
			(obj.draw) = (next) => ((this.draw(next)));
			(obj.draw_end) = (next) => ((this.draw_end(next)));
			return obj;
		}
		aspect(){
			return "none";
		}
		hue_base(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		hue_shift(next){
			if(next !== undefined) return next;
			return 111;
		}
		gap_hor(){
			return 48;
		}
		gap_vert(){
			return 24;
		}
		gap_left(){
			return (this.gap_hor());
		}
		gap_right(){
			return (this.gap_hor());
		}
		gap_top(){
			return (this.gap_vert());
		}
		gap_bottom(){
			return (this.gap_vert());
		}
		gap(){
			const obj = new this.$.$mol_vector_2d((this.gap_x()), (this.gap_y()));
			return obj;
		}
		shift_limit(){
			const obj = new this.$.$mol_vector_2d((this.shift_limit_x()), (this.shift_limit_y()));
			return obj;
		}
		shift_default(){
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		shift(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		scale_limit(){
			const obj = new this.$.$mol_vector_2d((this.scale_limit_x()), (this.scale_limit_y()));
			return obj;
		}
		scale_default(){
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		scale(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_vector_2d(1, -1);
			return obj;
		}
		scale_x(next){
			if(next !== undefined) return next;
			return 1;
		}
		scale_y(next){
			if(next !== undefined) return next;
			return -1;
		}
		size(){
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		size_real(){
			const obj = new this.$.$mol_vector_2d(1, 1);
			return obj;
		}
		dimensions(){
			const obj = new this.$.$mol_vector_2d((this.dimensions_x()), (this.dimensions_y()));
			return obj;
		}
		dimensions_viewport(){
			const obj = new this.$.$mol_vector_2d((this.dimensions_viewport_x()), (this.dimensions_viewport_y()));
			return obj;
		}
		sub(){
			return (this.graphs_sorted());
		}
		graphs_colored(){
			return (this.graphs_visible());
		}
		plugins(){
			return [...(super.plugins()), (this.Touch())];
		}
	};
	($mol_mem(($.$mol_plot_pane.prototype), "gap_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "gap_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "shift_limit_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "shift_limit_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_limit_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_limit_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions_viewport_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions_viewport_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "zoom"));
	($mol_mem(($.$mol_plot_pane.prototype), "draw_start"));
	($mol_mem(($.$mol_plot_pane.prototype), "draw"));
	($mol_mem(($.$mol_plot_pane.prototype), "draw_end"));
	($mol_mem(($.$mol_plot_pane.prototype), "Touch"));
	($mol_mem(($.$mol_plot_pane.prototype), "hue_base"));
	($mol_mem(($.$mol_plot_pane.prototype), "hue_shift"));
	($mol_mem(($.$mol_plot_pane.prototype), "gap"));
	($mol_mem(($.$mol_plot_pane.prototype), "shift_limit"));
	($mol_mem(($.$mol_plot_pane.prototype), "shift_default"));
	($mol_mem(($.$mol_plot_pane.prototype), "shift"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_limit"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_default"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "size"));
	($mol_mem(($.$mol_plot_pane.prototype), "size_real"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions_viewport"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_pane extends $.$mol_plot_pane {
            dimensions() {
                const graphs = this.graphs();
                let next = new this.$.$mol_vector_2d($mol_vector_range_full.inversed, $mol_vector_range_full.inversed);
                for (let graph of graphs) {
                    next = next.expanded2(graph.dimensions());
                }
                return next;
            }
            size() {
                const dims = this.dimensions();
                return new this.$.$mol_vector_2d((dims.x.max - dims.x.min) || 1, (dims.y.max - dims.y.min) || 1);
            }
            graph_hue(index) {
                return (360 + (this.hue_base() + this.hue_shift() * index) % 360) % 360;
            }
            graphs_colored() {
                const graphs = this.graphs_visible();
                for (let index = 0; index < graphs.length; index++) {
                    graphs[index].hue(this.graph_hue(index));
                }
                return graphs;
            }
            size_real() {
                const rect = this.view_rect();
                if (!rect)
                    return new this.$.$mol_vector_2d(1, 1);
                return new this.$.$mol_vector_2d(rect.width, rect.height);
            }
            view_box() {
                const size = this.size_real();
                return `0 0 ${size.x} ${size.y}`;
            }
            scale_limit() {
                const { x: { max: right }, y: { max: top } } = super.scale_limit();
                const gap = this.gap();
                const size = this.size();
                const real = this.size_real();
                const left = +(real.x - gap.x.min - gap.x.max) / size.x;
                const bottom = -(real.y - gap.y.max - gap.y.min) / size.y;
                return new this.$.$mol_vector_2d(new this.$.$mol_vector_range(left, right), new this.$.$mol_vector_range(top, bottom));
            }
            scale_default() {
                const limits = this.scale_limit();
                return new $mol_vector_2d(limits.x.min, limits.y.max);
            }
            scale(next) {
                if (next === undefined) {
                    if (!this.graph_touched)
                        return this.scale_default();
                    next = $mol_mem_cached(() => this.scale()) ?? this.scale_default();
                }
                this.graph_touched = true;
                return next.limited(this.scale_limit());
            }
            scale_x(next) {
                return this.scale(next === undefined
                    ? undefined
                    : new $mol_vector_2d(next, this.scale().y)).x;
            }
            scale_y(next) {
                return this.scale(next === undefined
                    ? undefined
                    : new $mol_vector_2d(this.scale().x, next)).y;
            }
            shift_limit() {
                const dims = this.dimensions();
                const [scale_x, scale_y] = this.scale();
                const size = this.size_real();
                const gap = this.gap();
                const left = gap.x.min - dims.x.min * scale_x;
                const right = size.x - gap.x.max - dims.x.max * scale_x;
                const top = gap.y.max - dims.y.max * scale_y;
                const bottom = size.y - gap.y.min - dims.y.min * scale_y;
                return new this.$.$mol_vector_2d(new this.$.$mol_vector_range(right, left), new this.$.$mol_vector_range(bottom, top));
            }
            shift_default() {
                const limits = this.shift_limit();
                return new $mol_vector_2d(limits.x.min, limits.y.min);
            }
            graph_touched = false;
            shift(next) {
                if (next === undefined) {
                    if (!this.graph_touched)
                        return this.shift_default();
                    next = $mol_mem_cached(() => this.shift()) ?? this.shift_default();
                }
                this.graph_touched = true;
                return next.limited(this.shift_limit());
            }
            reset(event) {
                this.graph_touched = false;
                this.scale(this.scale_default());
                this.shift(this.shift_default());
            }
            graphs_visible() {
                const viewport = this.dimensions_viewport();
                const size_real = this.size_real();
                const max_x = (viewport.x.max - viewport.x.min) / size_real.x;
                const max_y = (viewport.y.max - viewport.y.min) / size_real.y;
                return this.graphs_positioned().filter(graph => {
                    const dims = graph.dimensions();
                    if (dims.x.min > dims.x.max)
                        return true;
                    if (dims.y.min > dims.y.max)
                        return true;
                    const size_x = dims.x.max - dims.x.min;
                    const size_y = dims.y.max - dims.y.min;
                    if ((size_x || size_y) && size_x < max_x && size_y < max_y)
                        return false;
                    if (dims.x.min > viewport.x.max)
                        return false;
                    if (dims.x.max < viewport.x.min)
                        return false;
                    if (dims.y.min > viewport.y.max)
                        return false;
                    if (dims.y.max < viewport.y.min)
                        return false;
                    return true;
                });
            }
            graphs_positioned() {
                const graphs = this.graphs();
                for (let graph of graphs) {
                    graph.shift = () => this.shift();
                    graph.scale = () => this.scale();
                    graph.dimensions_pane = () => this.dimensions_viewport();
                    graph.viewport = () => this.viewport();
                    graph.size_real = () => this.size_real();
                    graph.cursor_position = () => this.cursor_position();
                    graph.gap = () => this.gap();
                }
                return graphs;
            }
            dimensions_viewport() {
                const shift = this.shift().multed0(-1);
                const scale = this.scale().powered0(-1);
                return this.viewport().map((range, i) => range.added0(shift[i]).multed0(scale[i]).sort((a, b) => a - b));
            }
            viewport() {
                const size = this.size_real();
                return new this.$.$mol_vector_2d(new this.$.$mol_vector_range(0, size.x), new this.$.$mol_vector_range(0, size.y));
            }
            graphs_sorted() {
                const graphs = this.graphs_colored();
                const sorted = [];
                for (let graph of graphs)
                    sorted.push(...graph.back());
                for (let graph of graphs)
                    sorted.push(...graph.front());
                return sorted;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "dimensions", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "size", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "graphs_colored", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "scale_limit", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "scale", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "shift_limit", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "shift_default", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "shift", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "graphs_visible", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "graphs_positioned", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "dimensions_viewport", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "viewport", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "graphs_sorted", null);
        $$.$mol_plot_pane = $mol_plot_pane;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/pane/pane.view.css", "[mol_plot_pane] {\n\tcolor: var(--mol_theme_control);\n\tflex: 1 1 auto;\n\talign-self: stretch;\n\tstroke-width: 2px;\n\tuser-select: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_chart) = class $mol_chart extends ($.$mol_view) {
		Legend(){
			const obj = new this.$.$mol_chart_legend();
			(obj.graphs) = () => ((this.graphs_colored()));
			return obj;
		}
		zoom(next){
			return (this.Plot().scale_x(next));
		}
		graphs_colored(){
			return (this.Plot().graphs_colored());
		}
		hue_base(){
			return 210;
		}
		hue_shift(){
			return 163;
		}
		Plot(){
			const obj = new this.$.$mol_plot_pane();
			(obj.zoom) = (next) => ((this.zoom(next)));
			(obj.gap_left) = () => ((this.gap_left()));
			(obj.gap_right) = () => ((this.gap_right()));
			(obj.gap_bottom) = () => ((this.gap_bottom()));
			(obj.gap_top) = () => ((this.gap_top()));
			(obj.graphs) = () => ((this.graphs()));
			(obj.hue_base) = () => ((this.hue_base()));
			(obj.hue_shift) = () => ((this.hue_shift()));
			return obj;
		}
		gap_hor(){
			return 48;
		}
		gap_vert(){
			return 24;
		}
		gap_left(){
			return (this.gap_hor());
		}
		gap_right(){
			return (this.gap_hor());
		}
		gap_bottom(){
			return (this.gap_vert());
		}
		gap_top(){
			return (this.gap_vert());
		}
		graphs(){
			return [];
		}
		sub(){
			return [(this.Legend()), (this.Plot())];
		}
	};
	($mol_mem(($.$mol_chart.prototype), "Legend"));
	($mol_mem(($.$mol_chart.prototype), "Plot"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/chart/chart.view.css", "[mol_chart] {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-self: stretch;\n\tflex: 1 1 auto;\n}\n\n[mol_chart_plot] {\n\tflex: 1 0 50%;\n\tmargin: .5rem;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_plot_bar) = class $mol_plot_bar extends ($.$mol_plot_graph) {
		stroke_width(){
			return "1rem";
		}
		curve(){
			return "";
		}
		Curve(){
			const obj = new this.$.$mol_svg_path();
			(obj.geometry) = () => ((this.curve()));
			return obj;
		}
		style(){
			return {...(super.style()), "stroke-width": (this.stroke_width())};
		}
		sub(){
			return [(this.Hint()), (this.Curve())];
		}
		Sample(){
			const obj = new this.$.$mol_plot_graph_sample();
			(obj.color) = () => ((this.color()));
			return obj;
		}
	};
	($mol_mem(($.$mol_plot_bar.prototype), "Curve"));
	($mol_mem(($.$mol_plot_bar.prototype), "Sample"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_bar extends $.$mol_plot_bar {
            indexes() {
                const { x: { min: viewport_left, max: viewport_right }, y: { min: viewport_bottom, max: viewport_top }, } = this.viewport();
                const [shift_x, shift_y] = this.shift();
                const [scale_x, scale_y] = this.scale();
                const indexes = [];
                const series_x = this.series_x();
                const series_y = this.series_y();
                let first_x = null;
                let last_x = null;
                for (let i = 0; i < series_x.length; i++) {
                    const scaled = [
                        Math.round(shift_x + series_x[i] * scale_x),
                        Math.round(shift_y + series_y[i] * scale_y),
                    ];
                    if (scaled[0] < viewport_left) {
                        first_x = i;
                        continue;
                    }
                    if (scaled[0] > viewport_right) {
                        if (last_x === null)
                            last_x = i;
                        continue;
                    }
                    if (scaled[1] < viewport_bottom)
                        continue;
                    if (scaled[1] > viewport_top)
                        continue;
                    if (first_x !== null)
                        indexes.push(first_x);
                    indexes.push(i);
                    if (last_x !== null)
                        indexes.push(last_x);
                    first_x = last_x = null;
                }
                if (first_x !== null)
                    indexes.push(first_x);
                if (last_x !== null)
                    indexes.push(last_x);
                return indexes;
            }
            curve() {
                const points = this.points();
                if (points.length === 0)
                    return '';
                const [, shift_y] = this.shift();
                return points.map(point => `M ${point[0]} ${shift_y} V ${point[1]}`).join(' ');
            }
            stroke_width() {
                return (8 / Math.sqrt(this.indexes().length)).toPrecision(2) + '%';
            }
            color() {
                return `hsl( ${this.hue()} , 80% , 80% )`;
            }
            dimensions() {
                let next = new this.$.$mol_vector_2d($mol_vector_range_full.inversed, new this.$.$mol_vector_range(0, 0));
                const series_x = this.series_x();
                const series_y = this.series_y();
                for (let i = 0; i < series_x.length; i++) {
                    next = next.expanded1([series_x[i], series_y[i]]);
                }
                const gap = (next.x.max - next.x.min) / series_x.length || 0.00000001;
                next[0] = next.x.added1([-gap, gap]);
                return next;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_bar.prototype, "indexes", null);
        __decorate([
            $mol_mem
        ], $mol_plot_bar.prototype, "dimensions", null);
        $$.$mol_plot_bar = $mol_plot_bar;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/bar/bar.view.css", "[mol_plot_bar] {\n\tstroke-linecap: butt;\n\tstroke-width: 1rem;\n}\n\n[mol_plot_bar_sample] {\n\tbackground: currentColor;\n\tposition: absolute;\n\ttop:0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_line) = class $mol_plot_line extends ($.$mol_plot_graph) {
		curve(){
			return "";
		}
		threshold(){
			return 1;
		}
		spacing(){
			return 2;
		}
		color_fill(){
			return "none";
		}
		dom_name(){
			return "path";
		}
		attr(){
			return {...(super.attr()), "d": (this.curve())};
		}
		sub(){
			return [(this.Hint())];
		}
		Sample(){
			const obj = new this.$.$mol_plot_graph_sample();
			(obj.color) = () => ((this.color()));
			(obj.type) = () => ((this.type()));
			return obj;
		}
	};
	($mol_mem(($.$mol_plot_line.prototype), "Sample"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_line extends $.$mol_plot_line {
            sub() {
                return this.hint() ? super.sub() : [];
            }
            indexes() {
                const threshold = this.threshold();
                const { x: { min: viewport_left, max: viewport_right }, y: { min: viewport_bottom, max: viewport_top }, } = this.viewport();
                const [shift_x, shift_y] = this.shift();
                const [scale_x, scale_y] = this.scale();
                const indexes = [];
                let last = new $mol_vector_2d(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
                let last_zone = new $mol_vector_2d(0, 0);
                const series_x = this.series_x();
                const series_y = this.series_y();
                const zone_of = (point) => new $mol_vector_2d(point.x < viewport_left ? -1
                    : point.x > viewport_right ? 1
                        : 0, point.y < viewport_bottom ? -1
                    : point.y > viewport_top ? 1
                        : 0);
                for (let i = 0; i < series_x.length - 1; i++) {
                    const scaled = new $mol_vector_2d(Math.round(shift_x + this.repos_x(series_x[i]) * scale_x), Math.round(shift_y + this.repos_y(series_y[i]) * scale_y));
                    if (Math.abs(scaled.x - last.x) < threshold
                        && Math.abs(scaled.y - last.y) < threshold)
                        continue;
                    const zone = zone_of(scaled);
                    last = scaled;
                    if (zone.x !== 0 && zone.x === last_zone.x || zone.y !== 0 && zone.y === last_zone.y) {
                        continue;
                    }
                    if (last_zone.x !== 0 || last_zone.y !== 0) {
                        indexes.push(i - 1);
                    }
                    last_zone = zone;
                    indexes.push(i);
                }
                indexes.push(series_x.length - 1);
                return indexes;
            }
            curve() {
                const points = this.points();
                if (points.length === 0)
                    return '';
                const main = points.map(point => `L ${point.join(' ')}`).join(' ');
                return `M ${points[0].join(' ')} ${main}`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_line.prototype, "indexes", null);
        $$.$mol_plot_line = $mol_plot_line;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/line/line.view.css", "[mol_plot_line] {\n\tfill: none;\n\tstroke-linejoin: round;\n}\n\n[mol_plot_line_sample] {\n\theight: 0;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n\tborder-width: 2px 0 0;\n\tposition: absolute;\n\ttop: .75em;\n\ttransform: translateY(-50%);\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_dot) = class $mol_plot_dot extends ($.$mol_plot_graph) {
		diameter(){
			return 8;
		}
		curve(){
			return "";
		}
		Curve(){
			const obj = new this.$.$mol_svg_path();
			(obj.geometry) = () => ((this.curve()));
			return obj;
		}
		points_max(){
			return +Infinity;
		}
		aspect(){
			return 1;
		}
		style(){
			return {...(super.style()), "stroke-width": (this.diameter())};
		}
		sub(){
			return [(this.Hint()), (this.Curve())];
		}
		Sample(){
			const obj = new this.$.$mol_plot_graph_sample();
			(obj.color) = () => ((this.color()));
			return obj;
		}
	};
	($mol_mem(($.$mol_plot_dot.prototype), "Curve"));
	($mol_mem(($.$mol_plot_dot.prototype), "Sample"));


;
"use strict";
var $;
(function ($) {
    const mask = 0b11111_11111_11111;
    function $mol_coord_pack(high, low) {
        return (high << 17 >>> 2) | (low & mask);
    }
    $.$mol_coord_pack = $mol_coord_pack;
    function $mol_coord_high(pack) {
        return pack << 2 >> 17;
    }
    $.$mol_coord_high = $mol_coord_high;
    function $mol_coord_low(pack) {
        return (pack << 17) >> 17;
    }
    $.$mol_coord_low = $mol_coord_low;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_dot extends $.$mol_plot_dot {
            filled() {
                return new Set();
            }
            indexes() {
                const radius = this.diameter() / 2;
                const points_max = this.points_max();
                const viewport = this.viewport();
                const viewport_left = viewport.x.min - radius;
                const viewport_right = viewport.x.max + radius;
                const viewport_bottom = viewport.y.min - radius;
                const viewport_top = viewport.y.max + radius;
                const [shift_x, shift_y] = this.shift();
                const [scale_x, scale_y] = this.scale();
                let last_x = Number.NEGATIVE_INFINITY;
                let last_y = Number.NEGATIVE_INFINITY;
                let spacing = 0;
                let filled = this.filled();
                let indexes;
                const series_x = this.series_x();
                const series_y = this.series_y();
                do {
                    indexes = [];
                    for (let i = 0; i < series_x.length; i++) {
                        const point_x = this.repos_x(series_x[i]);
                        const point_y = this.repos_y(series_y[i]);
                        const scaled_x = Math.round(shift_x + point_x * scale_x);
                        const scaled_y = Math.round(shift_y + point_y * scale_y);
                        if (Math.abs(scaled_x - last_x) < radius
                            && Math.abs(scaled_y - last_y) < radius)
                            continue;
                        last_x = scaled_x;
                        last_y = scaled_y;
                        if (scaled_x < viewport_left)
                            continue;
                        if (scaled_y < viewport_bottom)
                            continue;
                        if (scaled_x > viewport_right)
                            continue;
                        if (scaled_y > viewport_top)
                            continue;
                        if (spacing !== 0) {
                            const key = $mol_coord_pack(Math.round(point_x * scale_x / spacing) * spacing, Math.round(point_y * scale_y / spacing) * spacing);
                            if (filled.has(key))
                                continue;
                            filled.add(key);
                        }
                        indexes.push(i);
                        if (indexes.length > points_max)
                            break;
                    }
                    spacing += Math.ceil(radius);
                    filled.clear();
                } while (indexes.length > points_max);
                return indexes;
            }
            curve() {
                const points = this.points();
                if (points.length === 0)
                    return '';
                const diameter = this.diameter();
                const aspect = this.aspect();
                const shift_y = Math.max(0, Math.floor((aspect - 1) * diameter / 2));
                const shift_x = Math.max(0, Math.floor((1 / aspect - 1) * diameter / 2));
                const size_y = Math.max(0, Math.ceil((aspect - 1) * diameter));
                const size_x = Math.max(0, Math.ceil((1 / aspect - 1) * diameter));
                return points.map(point => `M ${point[0] - shift_x} ${point[1] - shift_y} l ${size_x} ${size_y}`).join(' ');
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_dot.prototype, "filled", null);
        __decorate([
            $mol_mem
        ], $mol_plot_dot.prototype, "indexes", null);
        $$.$mol_plot_dot = $mol_plot_dot;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/dot/dot.view.css", "[mol_plot_dot] {\n\tstroke-linecap: round;\n\tfill: none;\n}\n\n[mol_plot_dot_sample] {\n\twidth: .5rem;\n\theight: .5rem;\n\tborder-radius: 1rem;\n\tbackground: currentColor;\n\tposition: absolute;\n\ttop: .75em;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_group) = class $mol_plot_group extends ($.$mol_plot_graph) {
		graphs(){
			return [];
		}
		graphs_enriched(){
			return (this.graphs());
		}
		graph_samples(){
			return [];
		}
		sub(){
			return (this.graphs_enriched());
		}
		Sample(){
			const obj = new this.$.$mol_plot_graph_sample();
			(obj.sub) = () => ((this.graph_samples()));
			return obj;
		}
	};
	($mol_mem(($.$mol_plot_group.prototype), "Sample"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_group extends $.$mol_plot_group {
            graphs_enriched() {
                const graphs = this.graphs();
                for (let graph of graphs) {
                    graph.shift = () => this.shift();
                    graph.scale = () => this.scale();
                    graph.size_real = () => this.size_real();
                    graph.hue = () => this.hue();
                    graph.series_x = () => this.series_x();
                    graph.series_y = () => this.series_y();
                    graph.dimensions_pane = () => this.dimensions_pane();
                    graph.viewport = () => this.viewport();
                    graph.cursor_position = () => this.cursor_position();
                    graph.gap = () => this.gap();
                    graph.title = () => this.title();
                    graph.repos_x = val => this.repos_x(val);
                    graph.repos_y = val => this.repos_y(val);
                }
                return graphs;
            }
            dimensions() {
                const graphs = this.graphs_enriched();
                let next = new this.$.$mol_vector_2d($mol_vector_range_full.inversed, $mol_vector_range_full.inversed);
                for (let graph of graphs) {
                    next = next.expanded2(graph.dimensions());
                }
                return next;
            }
            graph_samples() {
                return this.graphs_enriched().map(graph => graph.Sample());
            }
            back() {
                const graphs = this.graphs_enriched();
                const next = [];
                for (let graph of graphs)
                    next.push(...graph.back());
                return next;
            }
            front() {
                const graphs = this.graphs_enriched();
                const next = [];
                for (let graph of graphs)
                    next.push(...graph.front());
                return next;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_group.prototype, "graphs_enriched", null);
        __decorate([
            $mol_mem
        ], $mol_plot_group.prototype, "dimensions", null);
        __decorate([
            $mol_mem
        ], $mol_plot_group.prototype, "graph_samples", null);
        $$.$mol_plot_group = $mol_plot_group;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_svg_rect) = class $mol_svg_rect extends ($.$mol_svg) {
		width(){
			return "0";
		}
		height(){
			return "0";
		}
		pos_x(){
			return "";
		}
		pos_y(){
			return "";
		}
		dom_name(){
			return "rect";
		}
		pos(){
			return [];
		}
		attr(){
			return {
				...(super.attr()), 
				"width": (this.width()), 
				"height": (this.height()), 
				"x": (this.pos_x()), 
				"y": (this.pos_y())
			};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_svg_rect extends $.$mol_svg_rect {
            pos_x() {
                return this.pos()[0];
            }
            pos_y() {
                return this.pos()[1];
            }
        }
        $$.$mol_svg_rect = $mol_svg_rect;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_svg_text) = class $mol_svg_text extends ($.$mol_svg) {
		pos_x(){
			return "";
		}
		pos_y(){
			return "";
		}
		align(){
			return "middle";
		}
		align_hor(){
			return (this.align());
		}
		align_vert(){
			return "baseline";
		}
		text(){
			return "";
		}
		dom_name(){
			return "text";
		}
		pos(){
			return [];
		}
		attr(){
			return {
				...(super.attr()), 
				"x": (this.pos_x()), 
				"y": (this.pos_y()), 
				"text-anchor": (this.align_hor()), 
				"alignment-baseline": (this.align_vert())
			};
		}
		sub(){
			return [(this.text())];
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_svg_text extends $.$mol_svg_text {
            pos_x() {
                return this.pos()[0];
            }
            pos_y() {
                return this.pos()[1];
            }
        }
        $$.$mol_svg_text = $mol_svg_text;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/svg/text/text.view.css", "[mol_svg_text] {\n\tfill: currentColor;\n\tstroke: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_ruler) = class $mol_plot_ruler extends ($.$mol_plot_graph) {
		background_x(){
			return "0";
		}
		background_y(){
			return "0";
		}
		background_width(){
			return "100%";
		}
		background_height(){
			return "14";
		}
		Background(){
			const obj = new this.$.$mol_svg_rect();
			(obj.pos_x) = () => ((this.background_x()));
			(obj.pos_y) = () => ((this.background_y()));
			(obj.width) = () => ((this.background_width()));
			(obj.height) = () => ((this.background_height()));
			return obj;
		}
		curve(){
			return "";
		}
		Curve(){
			const obj = new this.$.$mol_svg_path();
			(obj.geometry) = () => ((this.curve()));
			return obj;
		}
		labels_formatted(){
			return [];
		}
		title_pos_x(){
			return "0";
		}
		title_pos_y(){
			return "100%";
		}
		title_align(){
			return "start";
		}
		Title(){
			const obj = new this.$.$mol_svg_text();
			(obj.pos_x) = () => ((this.title_pos_x()));
			(obj.pos_y) = () => ((this.title_pos_y()));
			(obj.align) = () => ((this.title_align()));
			(obj.text) = () => ((this.title()));
			return obj;
		}
		label_pos_x(id){
			return "";
		}
		label_pos_y(id){
			return "";
		}
		label_pos(id){
			return [(this.label_pos_x(id)), (this.label_pos_y(id))];
		}
		label_text(id){
			return "";
		}
		label_align(){
			return "";
		}
		step(){
			return 0;
		}
		scale_axis(){
			return 1;
		}
		scale_step(){
			return 1;
		}
		shift_axis(){
			return 1;
		}
		dimensions_axis(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		viewport_axis(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		axis_points(){
			return [];
		}
		normalize(next){
			if(next !== undefined) return next;
			return 0;
		}
		precision(){
			return 1;
		}
		sub(){
			return [
				(this.Background()), 
				(this.Curve()), 
				(this.labels_formatted()), 
				(this.Title())
			];
		}
		Label(id){
			const obj = new this.$.$mol_svg_text();
			(obj.pos) = () => ((this.label_pos(id)));
			(obj.text) = () => ((this.label_text(id)));
			(obj.align) = () => ((this.label_align()));
			return obj;
		}
	};
	($mol_mem(($.$mol_plot_ruler.prototype), "Background"));
	($mol_mem(($.$mol_plot_ruler.prototype), "Curve"));
	($mol_mem(($.$mol_plot_ruler.prototype), "Title"));
	($mol_mem(($.$mol_plot_ruler.prototype), "dimensions_axis"));
	($mol_mem(($.$mol_plot_ruler.prototype), "viewport_axis"));
	($mol_mem(($.$mol_plot_ruler.prototype), "normalize"));
	($mol_mem_key(($.$mol_plot_ruler.prototype), "Label"));


;
"use strict";
var $;
(function ($) {
    function $mol_math_round_expand(val, gap = 1) {
        if (val === 0)
            return 0;
        const val_abs = Math.abs(val);
        const val_sign = val ? Math.round(val / val_abs) : 0;
        const digits = Math.floor(Math.log(val_abs) / Math.log(10));
        const precission = Math.pow(10, digits - gap);
        const val_expanded = precission * Math.ceil(val_abs / precission);
        return val_sign * val_expanded;
    }
    $.$mol_math_round_expand = $mol_math_round_expand;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_ruler extends $.$mol_plot_ruler {
            labels_formatted() {
                return this.axis_points().map((point, index) => this.Label(index));
            }
            step() {
                const scale = Math.abs(this.scale_step());
                const dims = this.dimensions_axis();
                const range = dims.max - dims.min;
                const min_width = (Math.abs(Math.log10(range)) + 2) * 15;
                const size = $mol_math_round_expand(range, -1);
                const count = Math.max(1, Math.pow(10, Math.floor(Math.log(size * scale / min_width) / Math.log(10))));
                let step = size / count;
                const step_max = min_width * 2 / scale;
                if (step > step_max)
                    step /= 2;
                if (step > step_max)
                    step /= 2;
                return Math.max(step, Math.abs(dims.min) / 1e10, Math.abs(dims.max) / 1e10);
            }
            snap_to_grid(coord) {
                const viewport = this.viewport_axis();
                const scale = this.scale_axis();
                const shift = this.shift_axis();
                const step = this.step();
                const val = Math.round(coord / step) * step;
                if (scale == 0)
                    return val;
                const step_scaled = step * scale;
                const scaled = val * scale + shift;
                let count = 0;
                if (scaled < viewport.min)
                    count = (scaled - viewport.min) / step_scaled;
                if (scaled > viewport.max)
                    count = (scaled - viewport.max) / step_scaled;
                return val - Math.floor(count) * step;
            }
            axis_points() {
                const dims = this.dimensions_axis();
                const start = this.snap_to_grid(dims.min);
                const end = this.snap_to_grid(dims.max);
                const step = this.step();
                const next = [];
                for (let val = start; val <= end; val += step) {
                    next.push(val);
                }
                return next;
            }
            precision() {
                const step = this.step();
                return Math.max(0, Math.min(15, (step - Math.floor(step)).toString().length - 2));
            }
            label_text(index) {
                const point = this.axis_points()[index];
                return point.toFixed(this.precision());
            }
            font_size() {
                return this.Background().font_size();
            }
            back() {
                return [this.Curve()];
            }
            front() {
                return [
                    ...this.labels_formatted(),
                    this.Title()
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_ruler.prototype, "step", null);
        __decorate([
            $mol_mem
        ], $mol_plot_ruler.prototype, "axis_points", null);
        __decorate([
            $mol_mem
        ], $mol_plot_ruler.prototype, "precision", null);
        $$.$mol_plot_ruler = $mol_plot_ruler;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/ruler/ruler.view.css", "[mol_plot_ruler_curve] {\n\tcolor: var(--mol_theme_line);\n\tstroke-width: 1px;\n\tstroke: currentColor;\n}\n\n[mol_plot_ruler_label] {\n\tcolor: var(--mol_theme_text);\n\ttext-shadow: 0 -1px var(--mol_theme_back), 0px 1px var(--mol_theme_back);\n}\n\n[mol_plot_ruler_title] {\n\tcolor: var(--mol_theme_shade);\n\tbackground-color: var(--mol_theme_back);\n\ttext-shadow: 0 -1px var(--mol_theme_back), 0px 1px var(--mol_theme_back);\n}\n\n[mol_plot_ruler_background] {\n\tstroke: none;\n\tfill: var(--mol_theme_back);\n\topacity: 0.8;\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_ruler_vert) = class $mol_plot_ruler_vert extends ($.$mol_plot_ruler) {
		title_align(){
			return "end";
		}
		label_align(){
			return "end";
		}
		title_pos_y(){
			return "14";
		}
		label_pos_x(id){
			return (this.title_pos_x());
		}
		background_height(){
			return "100%";
		}
		background_width(){
			return (this.title_pos_x());
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_ruler_vert extends $.$mol_plot_ruler_vert {
            dimensions_axis() {
                return this.dimensions_pane().y;
            }
            viewport_axis() {
                return new this.$.$mol_vector_range(0, this.size_real().y);
            }
            scale_axis() {
                return this.scale()[1];
            }
            scale_step() {
                return -this.scale()[1];
            }
            shift_axis() {
                return this.shift()[1];
            }
            curve() {
                const [, shift] = this.shift();
                const [, scale] = this.scale();
                return this.axis_points().map(point => {
                    let scaled = Math.round(point * scale + shift);
                    scaled = Math.max(Number.MIN_SAFE_INTEGER, Math.min(scaled, Number.MAX_SAFE_INTEGER));
                    return `M 0 ${scaled} H 2000`;
                }).join(' ');
            }
            title_pos_x() {
                return String(this.gap().x.min);
            }
            label_pos_y(index) {
                return (this.axis_points()[index] * this.scale()[1] + this.shift()[1]).toFixed(3);
            }
        }
        $$.$mol_plot_ruler_vert = $mol_plot_ruler_vert;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/ruler/vert/vert.view.css", "[mol_plot_ruler_vert_label] {\n\ttransform: translateY( 4px );\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_ruler_hor) = class $mol_plot_ruler_hor extends ($.$mol_plot_ruler) {
		title_align(){
			return "start";
		}
		label_align(){
			return "middle";
		}
		title_pos_x(){
			return "0";
		}
		title_pos_y(){
			return "100%";
		}
		label_pos_y(id){
			return (this.title_pos_y());
		}
		background_width(){
			return "100%";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_ruler_hor extends $.$mol_plot_ruler_hor {
            dimensions_axis() {
                return this.dimensions_pane().x;
            }
            viewport_axis() {
                return new this.$.$mol_vector_range(0, this.size_real().x);
            }
            scale_axis() {
                return this.scale()[0];
            }
            scale_step() {
                return this.scale()[0];
            }
            shift_axis() {
                return this.shift()[0];
            }
            curve() {
                const [shift] = this.shift();
                const [scale] = this.scale();
                return this.axis_points().map(point => {
                    let scaled = Math.round(point * scale + shift);
                    scaled = Math.max(Number.MIN_SAFE_INTEGER, Math.min(scaled, Number.MAX_SAFE_INTEGER));
                    return `M ${scaled} 1000 V 0`;
                }).join(' ');
            }
            label_pos_x(index) {
                return (this.axis_points()[index] * this.scale()[0] + this.shift()[0]).toFixed(3);
            }
            background_y() {
                return String(this.size_real()[1] - this.font_size());
            }
            title_pos_y() {
                return String(this.size_real()[1]);
            }
            background_height() {
                return String(this.font_size());
            }
        }
        $$.$mol_plot_ruler_hor = $mol_plot_ruler_hor;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/ruler/hor/hor.view.css", "[mol_plot_ruler_hor_label] {\n\ttransform: translateY( -4px );\n}\n\n[mol_plot_ruler_hor_title] {\n\ttransform: translateY( -4px );\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_mark_hor) = class $mol_plot_mark_hor extends ($.$mol_plot_ruler_hor) {
		labels(){
			return [];
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_mark_hor extends $.$mol_plot_mark_hor {
            series_x() {
                return this.labels().map((val, index) => index);
            }
            labels() {
                return this.series_x().map(val => String(val));
            }
            visible_indexes() {
                const series_x = this.series_x();
                const labels = this.labels();
                const [shift_x,] = this.shift();
                const [scale_x,] = this.scale();
                let step = this.step() * scale_x;
                const [[viewport_left, viewport_right]] = this.viewport();
                const size_x = viewport_right - viewport_left;
                const font_size = this.font_size();
                let indexes;
                let labels_width;
                do {
                    indexes = [];
                    labels_width = 0;
                    let last = 0;
                    let current = 0;
                    for (let i = 0; i < series_x.length; i++) {
                        const point_x = series_x[i];
                        const scaled_x = (shift_x + point_x * scale_x);
                        if (scaled_x < viewport_left)
                            continue;
                        if (scaled_x > viewport_right)
                            continue;
                        if (current === 0)
                            current = scaled_x;
                        if (scaled_x < current) {
                            last = i;
                            continue;
                        }
                        indexes.push(i);
                        current += step;
                        last = 0;
                        labels_width += font_size * (labels[i].length + 1);
                        if (labels_width > size_x)
                            break;
                    }
                    if (last !== 0) {
                        indexes.push(last);
                        labels_width += font_size * (labels[last].length + 1);
                    }
                    step *= 1.5;
                } while (labels_width > size_x && indexes.length > 2);
                return indexes;
            }
            curve() {
                const [shift] = this.shift();
                const [scale] = this.scale();
                const series_x = this.series_x();
                return this.visible_indexes().map(index => {
                    const scaled = series_x[index] * scale + shift;
                    return `M ${scaled.toFixed(3)} 1000 V 0`;
                }).join(' ');
            }
            label_text(index) {
                return this.labels()[index];
            }
            labels_formatted() {
                return this.visible_indexes().map(index => this.Label(index));
            }
            label_pos_x(index) {
                return (this.series_x()[index] * this.scale()[0] + this.shift()[0]).toFixed(3);
            }
            label_pos_y(index) {
                return this.title_pos_y();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_mark_hor.prototype, "series_x", null);
        __decorate([
            $mol_mem
        ], $mol_plot_mark_hor.prototype, "labels", null);
        __decorate([
            $mol_mem
        ], $mol_plot_mark_hor.prototype, "visible_indexes", null);
        $$.$mol_plot_mark_hor = $mol_plot_mark_hor;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/mark/hor/hor.view.css", "[mol_plot_mark_hor_curve] {\n\tcolor: var(--mol_theme_line);\n\tstroke-width: .1%;\n\tstroke: currentColor;\n\tpointer-events: none;\n}\n\n[mol_plot_mark_hor_label] {\n\tcolor: var(--mol_theme_text);\n\ttransform: translateY( -4px );\n}\n\n[mol_plot_mark_hor_title] {\n\tcolor: var(--mol_theme_shade);\n\ttransform: translateY( -4px );\n}\n");
})($ || ($ = {}));

;
	($.$mol_svg_text_box) = class $mol_svg_text_box extends ($.$mol_svg_group) {
		box_width(){
			return "0.5rem";
		}
		box_height(){
			return "1rem";
		}
		box_pos_x(){
			return (this.pos_x());
		}
		box_pos_y(){
			return "0";
		}
		Back(){
			const obj = new this.$.$mol_svg_rect();
			(obj.width) = () => ((this.box_width()));
			(obj.height) = () => ((this.box_height()));
			(obj.pos) = () => ([(this.box_pos_x()), (this.box_pos_y())]);
			return obj;
		}
		pos_x(){
			return "0";
		}
		pos_y(){
			return "100%";
		}
		align(){
			return "start";
		}
		text(){
			return "";
		}
		Text(){
			const obj = new this.$.$mol_svg_text();
			(obj.pos) = () => ([(this.pos_x()), (this.pos_y())]);
			(obj.align) = () => ((this.align()));
			(obj.sub) = () => ([(this.text())]);
			return obj;
		}
		font_size(){
			return 16;
		}
		width(){
			return 0;
		}
		sub(){
			return [(this.Back()), (this.Text())];
		}
	};
	($mol_mem(($.$mol_svg_text_box.prototype), "Back"));
	($mol_mem(($.$mol_svg_text_box.prototype), "Text"));


;
"use strict";
var $;
(function ($) {
    let canvas;
    function $mol_font_canvas(next = canvas) {
        if (!next)
            next = $mol_dom_context.document.createElement('canvas').getContext('2d');
        return canvas = next;
    }
    $.$mol_font_canvas = $mol_font_canvas;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_font_measure(font, text) {
        const canvas = $mol_font_canvas();
        canvas.font = font;
        return canvas.measureText(text).width;
    }
    $.$mol_font_measure = $mol_font_measure;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_svg_text_box extends $.$mol_svg_text_box {
            box_width() {
                return `${this.width()}px`;
            }
            width() {
                return $mol_font_measure(this.font_size() + 'px ' + this.font_family(), this.text());
            }
            box_pos_x() {
                const align = this.align();
                if (align === 'end')
                    return `calc(${this.pos_x()} - ${this.width()})`;
                if (align === 'middle')
                    return `calc(${this.pos_x()} - ${Math.round(this.width() / 2)})`;
                return this.pos_x();
            }
            box_pos_y() {
                return `calc(${this.pos_y()} - ${this.font_size() - 2})`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_svg_text_box.prototype, "width", null);
        $$.$mol_svg_text_box = $mol_svg_text_box;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/svg/text/box/box.view.css", "[mol_svg_text_box_back] {\n\tstroke: none;\n\tfill: var(--mol_theme_back);\n\ttransition: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_mark_cross) = class $mol_plot_mark_cross extends ($.$mol_plot_graph) {
		dimensions_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		curve(){
			return "";
		}
		Curve(){
			const obj = new this.$.$mol_svg_path();
			(obj.geometry) = () => ((this.curve()));
			return obj;
		}
		title_x_pos_x(){
			return "0";
		}
		title_x_pos_y(){
			return "100%";
		}
		title_x(){
			return "";
		}
		Label_x(){
			const obj = new this.$.$mol_svg_text_box();
			(obj.pos_x) = () => ((this.title_x_pos_x()));
			(obj.pos_y) = () => ((this.title_x_pos_y()));
			(obj.text) = () => ((this.title_x()));
			return obj;
		}
		title_y_pos_x(){
			return "0";
		}
		title_y_pos_y(){
			return "0";
		}
		title_y(){
			return "";
		}
		Label_y(){
			const obj = new this.$.$mol_svg_text_box();
			(obj.pos_x) = () => ((this.title_y_pos_x()));
			(obj.pos_y) = () => ((this.title_y_pos_y()));
			(obj.text) = () => ((this.title_y()));
			return obj;
		}
		labels(){
			return [];
		}
		title_x_gap(){
			return 4;
		}
		title_y_gap(){
			return 22;
		}
		threshold(){
			return 16;
		}
		graphs(){
			return [];
		}
		dimensions(){
			const obj = new this.$.$mol_vector_2d((this.dimensions_x()), (this.dimensions_y()));
			return obj;
		}
		sub(){
			return [
				(this.Curve()), 
				(this.Label_x()), 
				(this.Label_y())
			];
		}
	};
	($mol_mem(($.$mol_plot_mark_cross.prototype), "dimensions_x"));
	($mol_mem(($.$mol_plot_mark_cross.prototype), "dimensions_y"));
	($mol_mem(($.$mol_plot_mark_cross.prototype), "Curve"));
	($mol_mem(($.$mol_plot_mark_cross.prototype), "Label_x"));
	($mol_mem(($.$mol_plot_mark_cross.prototype), "Label_y"));
	($mol_mem(($.$mol_plot_mark_cross.prototype), "dimensions"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_mark_cross extends $.$mol_plot_mark_cross {
            nearest() {
                let delta = this.threshold() ** 2;
                const [cursor_x, cursor_y] = this.cursor_position();
                if (Number.isNaN(cursor_x) || Number.isNaN(cursor_y))
                    return null;
                const graphs = this.graphs();
                let index = 0;
                let graph = null;
                const [shift_x, shift_y] = this.shift();
                const [scale_x, scale_y] = this.scale();
                for (let current of graphs) {
                    const indexes = current.indexes();
                    const series_x = current.series_x();
                    const series_y = current.series_y();
                    for (let i of indexes) {
                        const point_x = shift_x + series_x[i] * scale_x;
                        const point_y = shift_y + series_y[i] * scale_y;
                        const diff = (point_x - cursor_x) ** 2 + (point_y - cursor_y) ** 2;
                        if (diff < delta) {
                            delta = diff;
                            index = i;
                            graph = current;
                        }
                    }
                }
                if (!graph)
                    return null;
                const value = new $mol_vector_2d(graph.series_x()[index], graph.series_y()[index]);
                const scaled = new $mol_vector_2d(shift_x + value.x * scale_x, shift_y + value.y * scale_y);
                return { value, scaled, index };
            }
            curve() {
                const nearest = this.nearest();
                if (!nearest)
                    return '';
                return `M ${nearest.scaled.x.toFixed(3)} 1000 V 0 M 0 ${nearest.scaled.y.toFixed(3)} H 2000`;
            }
            title_x() {
                const nearest = this.nearest();
                if (!nearest)
                    return '';
                const labels = this.labels();
                if (labels.length > nearest.index)
                    return labels[nearest.index];
                return String(nearest.value.x);
            }
            title_x_pos_x() {
                const nearest = this.nearest();
                if (!nearest)
                    return '0';
                const width = this.Label_x().width();
                return (nearest.scaled.x - width / 2).toFixed(3);
            }
            title_x_pos_y() {
                const nearest = this.nearest();
                if (!nearest)
                    return '0';
                const pos = this.size_real().y - this.title_x_gap();
                return pos.toFixed(3);
            }
            title_y() {
                const nearest = this.nearest();
                if (!nearest)
                    return '';
                return String(nearest.value.y);
            }
            title_y_pos_y() {
                const nearest = this.nearest();
                if (!nearest)
                    return '0';
                return nearest.scaled.y.toFixed(3);
            }
            title_y_pos_x() {
                const nearest = this.nearest();
                if (!nearest)
                    return '0';
                const pos = this.title_y_gap();
                return pos.toFixed(3);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_mark_cross.prototype, "nearest", null);
        $$.$mol_plot_mark_cross = $mol_plot_mark_cross;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/mark/cross/cross.view.css", "[mol_plot_mark_cross_curve] {\n\tcolor: var(--mol_theme_focus);\n\tstroke-width: 1px;\n\tstroke: currentColor;\n\tpointer-events: none;\n}\n\n[mol_plot_mark_cross_label_x], [mol_plot_mark_cross_label_y] {\n\tcolor: var(--mol_theme_focus);\n\tpointer-events: none;\n}\n\n[mol_plot_mark_cross_label_y] {\n\ttransform: translateY( 4px );\n}\n");
})($ || ($ = {}));

;
	($.$mol_chart_demo_simple) = class $mol_chart_demo_simple extends ($.$mol_example_large) {
		plan_title(){
			return "Plan";
		}
		plan(){
			return [
				10, 
				20, 
				30, 
				40
			];
		}
		Plan(){
			const obj = new this.$.$mol_plot_bar();
			(obj.title) = () => ((this.plan_title()));
			(obj.series_y) = () => ((this.plan()));
			return obj;
		}
		fact_title(){
			return "Fact";
		}
		facts(){
			return [
				5, 
				10, 
				30
			];
		}
		Fact_line(){
			const obj = new this.$.$mol_plot_line();
			return obj;
		}
		Fact_dots(){
			const obj = new this.$.$mol_plot_dot();
			return obj;
		}
		Fact(){
			const obj = new this.$.$mol_plot_group();
			(obj.title) = () => ((this.fact_title()));
			(obj.series_y) = () => ((this.facts()));
			(obj.graphs) = () => ([(this.Fact_line()), (this.Fact_dots())]);
			return obj;
		}
		vert_title(){
			return "pcs";
		}
		Vert_ruler(){
			const obj = new this.$.$mol_plot_ruler_vert();
			(obj.title) = () => ((this.vert_title()));
			return obj;
		}
		marker_hor_title(){
			return "Months";
		}
		months(){
			return [
				"January", 
				"February", 
				"March", 
				"April"
			];
		}
		Marker_hor(){
			const obj = new this.$.$mol_plot_mark_hor();
			(obj.title) = () => ((this.marker_hor_title()));
			(obj.labels) = () => ((this.months()));
			return obj;
		}
		Marker_cross(){
			const obj = new this.$.$mol_plot_mark_cross();
			(obj.labels) = () => ((this.months()));
			(obj.graphs) = () => ([(this.Plan()), (this.Fact_dots())]);
			return obj;
		}
		Chart(){
			const obj = new this.$.$mol_chart();
			(obj.graphs) = () => ([
				(this.Plan()), 
				(this.Fact()), 
				(this.Vert_ruler()), 
				(this.Marker_hor()), 
				(this.Marker_cross())
			]);
			return obj;
		}
		title(){
			return "Simple chart with hadcoded series";
		}
		sub(){
			return [(this.Chart())];
		}
		tags(){
			return [
				"plot", 
				"visualization", 
				"dashboard"
			];
		}
		aspects(){
			return [
				"Widget/Draw/Chart/Line", 
				"Widget/Draw/Chart/Dot", 
				"Widget/Draw/Chart/Bar"
			];
		}
	};
	($mol_mem(($.$mol_chart_demo_simple.prototype), "Plan"));
	($mol_mem(($.$mol_chart_demo_simple.prototype), "Fact_line"));
	($mol_mem(($.$mol_chart_demo_simple.prototype), "Fact_dots"));
	($mol_mem(($.$mol_chart_demo_simple.prototype), "Fact"));
	($mol_mem(($.$mol_chart_demo_simple.prototype), "Vert_ruler"));
	($mol_mem(($.$mol_chart_demo_simple.prototype), "Marker_hor"));
	($mol_mem(($.$mol_chart_demo_simple.prototype), "Marker_cross"));
	($mol_mem(($.$mol_chart_demo_simple.prototype), "Chart"));


;
"use strict";

;
	($.$mol_plot_fill) = class $mol_plot_fill extends ($.$mol_plot_line) {
		threshold(){
			return 4;
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_fill extends $.$mol_plot_fill {
            curve() {
                const points = this.points();
                if (points.length === 0)
                    return '';
                const [, shift_y] = this.shift();
                const main = points.map(point => `L ${point.join(' ')}`).join(' ');
                return `M ${points[0].join(' ')} ${main} V ${shift_y} H ${points[0][0]}`;
            }
            front() {
                return [];
            }
            back() {
                return [this];
            }
        }
        $$.$mol_plot_fill = $mol_plot_fill;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/fill/fill.view.css", "[mol_plot_fill] {\n\tstroke: none;\n\tstroke-width: 0;\n\topacity: .1;\n\tfill: currentColor;\n\tpointer-events: none;\n}\n\n[mol_plot_fill_sample] {\n\topacity: .1;\n\tbackground: currentColor;\n\tposition: absolute;\n\tbottom: 0;\n\ttop: .75em;\n\tleft: 0;\n\tright: 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_chart_demo_styles) = class $mol_chart_demo_styles extends ($.$mol_example_large) {
		receipts_title(){
			return "Receipts";
		}
		series_x(){
			return [];
		}
		series_2_y(){
			return [];
		}
		Receipts(){
			const obj = new this.$.$mol_plot_bar();
			(obj.title) = () => ((this.receipts_title()));
			(obj.series_x) = () => ((this.series_x()));
			(obj.series_y) = () => ((this.series_2_y()));
			return obj;
		}
		receipts_confirmed_title(){
			return "Confirmed receipts";
		}
		series_3_y(){
			return [];
		}
		Receipts_confirmed(){
			const obj = new this.$.$mol_plot_bar();
			(obj.title) = () => ((this.receipts_confirmed_title()));
			(obj.series_x) = () => ((this.series_x()));
			(obj.series_y) = () => ((this.series_3_y()));
			return obj;
		}
		maximum_title(){
			return "Maximum";
		}
		series_1_y(){
			return [];
		}
		Maximum(){
			const obj = new this.$.$mol_plot_dot();
			(obj.title) = () => ((this.maximum_title()));
			(obj.series_x) = () => ((this.series_x()));
			(obj.series_y) = () => ((this.series_1_y()));
			return obj;
		}
		waste_title(){
			return "Waste";
		}
		series_4_y(){
			return [];
		}
		Waste(){
			const obj = new this.$.$mol_plot_line();
			(obj.type) = () => ("dashed");
			(obj.title) = () => ((this.waste_title()));
			(obj.series_x) = () => ((this.series_x()));
			(obj.series_y) = () => ((this.series_4_y()));
			return obj;
		}
		purchases_title(){
			return "Purchases";
		}
		series_5_y(){
			return [];
		}
		Purchases_fill(){
			const obj = new this.$.$mol_plot_fill();
			return obj;
		}
		Purchases_line(){
			const obj = new this.$.$mol_plot_line();
			return obj;
		}
		Purchases_dots(){
			const obj = new this.$.$mol_plot_dot();
			return obj;
		}
		Purchases(){
			const obj = new this.$.$mol_plot_group();
			(obj.title) = () => ((this.purchases_title()));
			(obj.series_x) = () => ((this.series_x()));
			(obj.series_y) = () => ((this.series_5_y()));
			(obj.graphs) = () => ([
				(this.Purchases_fill()), 
				(this.Purchases_line()), 
				(this.Purchases_dots())
			]);
			return obj;
		}
		taxes_title(){
			return "Taxes";
		}
		series_6_y(){
			return [];
		}
		Taxes_fill(){
			const obj = new this.$.$mol_plot_fill();
			return obj;
		}
		Taxes_line(){
			const obj = new this.$.$mol_plot_line();
			(obj.type) = () => ("dashed");
			return obj;
		}
		Taxes_dots(){
			const obj = new this.$.$mol_plot_dot();
			return obj;
		}
		Taxes(){
			const obj = new this.$.$mol_plot_group();
			(obj.title) = () => ((this.taxes_title()));
			(obj.series_x) = () => ((this.series_x()));
			(obj.series_y) = () => ((this.series_6_y()));
			(obj.graphs) = () => ([
				(this.Taxes_fill()), 
				(this.Taxes_line()), 
				(this.Taxes_dots())
			]);
			return obj;
		}
		energy_title(){
			return "kJ";
		}
		Energy(){
			const obj = new this.$.$mol_plot_ruler_vert();
			(obj.title) = () => ((this.energy_title()));
			return obj;
		}
		day_title(){
			return "Day";
		}
		Day(){
			const obj = new this.$.$mol_plot_mark_hor();
			(obj.title) = () => ((this.day_title()));
			(obj.series_x) = () => ((this.series_x()));
			return obj;
		}
		graphs(){
			return [
				(this.Receipts()), 
				(this.Receipts_confirmed()), 
				(this.Maximum()), 
				(this.Waste()), 
				(this.Purchases()), 
				(this.Taxes()), 
				(this.Energy()), 
				(this.Day())
			];
		}
		Chart(){
			const obj = new this.$.$mol_chart();
			(obj.graphs) = () => ((this.graphs()));
			return obj;
		}
		title(){
			return "Chart with various styles of graphs.";
		}
		samples_count(){
			return 15;
		}
		sub(){
			return [(this.Chart())];
		}
		tags(){
			return [
				"plot", 
				"visualization", 
				"dashboard"
			];
		}
		aspects(){
			return [
				"Widget/Draw/Chart/Line", 
				"Widget/Draw/Chart/Dot", 
				"Widget/Draw/Chart/Bar", 
				"Widget/Draw/Chart/Fill"
			];
		}
	};
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Receipts"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Receipts_confirmed"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Maximum"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Waste"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Purchases_fill"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Purchases_line"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Purchases_dots"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Purchases"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Taxes_fill"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Taxes_line"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Taxes_dots"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Taxes"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Energy"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Day"));
	($mol_mem(($.$mol_chart_demo_styles.prototype), "Chart"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_chart_demo_styles extends $.$mol_chart_demo_styles {
            limit() {
                const shift = 10;
                return [shift, shift + this.samples_count()];
            }
            series_x() {
                const next = [];
                const [shift, limit] = this.limit();
                for (let i = shift; i < limit; i++)
                    next.push(i);
                return next;
            }
            series_y() {
                const [, limit] = this.limit();
                return this.series_x().map(i => Number((6.5 + Math.sin(8 * i / limit)).toFixed(3)));
            }
            series_1_y() {
                return this.series_y().map(val => (val - 1).toFixed(3)).map(Number);
            }
            series_2_y() {
                return this.series_y().map(val => (val - 2).toFixed(3)).map(Number);
            }
            series_3_y() {
                return this.series_y().map(val => (val - 3).toFixed(3)).map(Number);
            }
            series_4_y() {
                return this.series_y().map(val => (val - 4).toFixed(3)).map(Number);
            }
            series_5_y() {
                return this.series_y().map(val => (val - 5).toFixed(3)).map(Number);
            }
            series_6_y() {
                return this.series_y().map(val => (val - 6).toFixed(3)).map(Number);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_chart_demo_styles.prototype, "series_x", null);
        __decorate([
            $mol_mem
        ], $mol_chart_demo_styles.prototype, "series_y", null);
        __decorate([
            $mol_mem
        ], $mol_chart_demo_styles.prototype, "series_1_y", null);
        __decorate([
            $mol_mem
        ], $mol_chart_demo_styles.prototype, "series_2_y", null);
        __decorate([
            $mol_mem
        ], $mol_chart_demo_styles.prototype, "series_3_y", null);
        __decorate([
            $mol_mem
        ], $mol_chart_demo_styles.prototype, "series_4_y", null);
        __decorate([
            $mol_mem
        ], $mol_chart_demo_styles.prototype, "series_5_y", null);
        __decorate([
            $mol_mem
        ], $mol_chart_demo_styles.prototype, "series_6_y", null);
        $$.$mol_chart_demo_styles = $mol_chart_demo_styles;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_chart_demo_forces) = class $mol_chart_demo_forces extends ($.$mol_example_large) {
		forces_left_title(){
			return "Left wheel";
		}
		forces_left_x(){
			return [];
		}
		forces_left_y(){
			return [];
		}
		Forces_left(){
			const obj = new this.$.$mol_plot_dot();
			(obj.title) = () => ((this.forces_left_title()));
			(obj.series_x) = () => ((this.forces_left_x()));
			(obj.series_y) = () => ((this.forces_left_y()));
			(obj.points_max) = () => ((this.points_max()));
			return obj;
		}
		forces_right_title(){
			return "Right wheel";
		}
		forces_right_x(){
			return [];
		}
		forces_right_y(){
			return [];
		}
		Forces_right(){
			const obj = new this.$.$mol_plot_dot();
			(obj.title) = () => ((this.forces_right_title()));
			(obj.series_x) = () => ((this.forces_right_x()));
			(obj.series_y) = () => ((this.forces_right_y()));
			(obj.points_max) = () => ((this.points_max()));
			return obj;
		}
		vert_title(){
			return "kN";
		}
		Vert_ruler(){
			const obj = new this.$.$mol_plot_ruler_vert();
			(obj.title) = () => ((this.vert_title()));
			return obj;
		}
		hor_title(){
			return "cm";
		}
		Hor_ruler(){
			const obj = new this.$.$mol_plot_ruler_hor();
			(obj.title) = () => ((this.hor_title()));
			(obj.series_x) = () => ((this.forces_left_x()));
			return obj;
		}
		Cross(){
			const obj = new this.$.$mol_plot_mark_cross();
			(obj.graphs) = () => ([(this.Forces_left()), (this.Forces_right())]);
			return obj;
		}
		Chart(){
			const obj = new this.$.$mol_chart();
			(obj.graphs) = () => ([
				(this.Forces_left()), 
				(this.Forces_right()), 
				(this.Vert_ruler()), 
				(this.Hor_ruler()), 
				(this.Cross())
			]);
			return obj;
		}
		title(){
			return "Fake wheel forces";
		}
		samples_count(){
			return 5000;
		}
		points_max(){
			return 2500;
		}
		sub(){
			return [(this.Chart())];
		}
		tags(){
			return [
				"plot", 
				"visualization", 
				"dashboard"
			];
		}
		aspects(){
			return ["Widget/Draw/Chart/Line", "Widget/Draw/Chart/Dot"];
		}
	};
	($mol_mem(($.$mol_chart_demo_forces.prototype), "Forces_left"));
	($mol_mem(($.$mol_chart_demo_forces.prototype), "Forces_right"));
	($mol_mem(($.$mol_chart_demo_forces.prototype), "Vert_ruler"));
	($mol_mem(($.$mol_chart_demo_forces.prototype), "Hor_ruler"));
	($mol_mem(($.$mol_chart_demo_forces.prototype), "Cross"));
	($mol_mem(($.$mol_chart_demo_forces.prototype), "Chart"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_chart_demo_forces extends $.$mol_chart_demo_forces {
            generate_forces() {
                const samples_count = this.samples_count();
                const max_x = 600;
                const base_y = 80;
                const amplitude = 5;
                const freq = 50;
                const series_x = [];
                const series_y = [];
                const ratio = max_x / samples_count;
                for (let i = 0; i < samples_count; i++) {
                    const deviation = Math.random() > 0.6 ? (Math.random() * 3) : Math.random();
                    const value = Number((base_y + Math.sin((freq / samples_count) * i) * amplitude * deviation).toFixed(3));
                    series_x.push(Number(Number(i * ratio).toFixed(3)));
                    series_y.push(value);
                }
                return [series_x, series_y];
            }
            forces_left() {
                return this.generate_forces();
            }
            forces_right() {
                return this.generate_forces();
            }
            forces_left_x() {
                return this.forces_left()[0];
            }
            forces_left_y() {
                return this.forces_left()[1];
            }
            forces_right_x() {
                return this.forces_right()[0];
            }
            forces_right_y() {
                return this.forces_right()[1];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_chart_demo_forces.prototype, "forces_left", null);
        __decorate([
            $mol_mem
        ], $mol_chart_demo_forces.prototype, "forces_right", null);
        $$.$mol_chart_demo_forces = $mol_chart_demo_forces;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_chat_demo) = class $mol_chat_demo extends ($.$mol_example_small) {
		chat_pages(){
			return (this.Chat().pages());
		}
		Chat(){
			const obj = new this.$.$mol_chat();
			(obj.seed) = () => ("mol_chat_demo");
			return obj;
		}
		title(){
			return "Feed of comments for this page";
		}
		sub(){
			return [(this.Chat())];
		}
		tags(){
			return ["communication"];
		}
		aspects(){
			return ["Integration", "Widget/Button"];
		}
	};
	($mol_mem(($.$mol_chat_demo.prototype), "Chat"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/chat/demo/demo.view.css", "[mol_chat_demo_pages] {\n\tflex: 1 1 auto;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_check_box_demo) = class $mol_check_box_demo extends ($.$mol_example_small) {
		base_checked(next){
			if(next !== undefined) return next;
			return false;
		}
		c1Label(){
			return "Base";
		}
		Labeled_base(){
			const obj = new this.$.$mol_check_box();
			(obj.checked) = (next) => ((this.base_checked(next)));
			(obj.title) = () => ((this.c1Label()));
			return obj;
		}
		c2Label(){
			return "Checked";
		}
		checked_checked(next){
			if(next !== undefined) return next;
			return true;
		}
		Labeled_checked(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.c2Label()));
			(obj.checked) = (next) => ((this.checked_checked(next)));
			return obj;
		}
		c6Label(){
			return "Disabled";
		}
		Labeled_disabled(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.c6Label()));
			(obj.checked) = () => (true);
			(obj.enabled) = () => (false);
			return obj;
		}
		Alone_base(){
			const obj = new this.$.$mol_check_box();
			(obj.checked) = (next) => ((this.base_checked(next)));
			return obj;
		}
		Alone_checked(){
			const obj = new this.$.$mol_check_box();
			(obj.checked) = (next) => ((this.checked_checked(next)));
			return obj;
		}
		Alone_disabled(){
			const obj = new this.$.$mol_check_box();
			(obj.checked) = () => (true);
			(obj.enabled) = () => (false);
			return obj;
		}
		Demo_items(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Labeled_base()), 
				(this.Labeled_checked()), 
				(this.Labeled_disabled()), 
				(this.Alone_base()), 
				(this.Alone_checked()), 
				(this.Alone_disabled())
			]);
			return obj;
		}
		title(){
			return "Checkboxes in various states";
		}
		sub(){
			return [(this.Demo_items())];
		}
		tags(){
			return ["switch", "toggle"];
		}
		aspects(){
			return ["Widget/Control/Button", "Type/Boolean"];
		}
	};
	($mol_mem(($.$mol_check_box_demo.prototype), "base_checked"));
	($mol_mem(($.$mol_check_box_demo.prototype), "Labeled_base"));
	($mol_mem(($.$mol_check_box_demo.prototype), "checked_checked"));
	($mol_mem(($.$mol_check_box_demo.prototype), "Labeled_checked"));
	($mol_mem(($.$mol_check_box_demo.prototype), "Labeled_disabled"));
	($mol_mem(($.$mol_check_box_demo.prototype), "Alone_base"));
	($mol_mem(($.$mol_check_box_demo.prototype), "Alone_checked"));
	($mol_mem(($.$mol_check_box_demo.prototype), "Alone_disabled"));
	($mol_mem(($.$mol_check_box_demo.prototype), "Demo_items"));


;
"use strict";

;
	($.$mol_check_list_demo) = class $mol_check_list_demo extends ($.$mol_example_small) {
		right(id, next){
			if(next !== undefined) return next;
			return false;
		}
		Rights(){
			const obj = new this.$.$mol_check_list();
			(obj.option_checked) = (id, next) => ((this.right(id, next)));
			(obj.options) = () => ({
				"read": "Allow Read", 
				"write": "Allow Write", 
				"rights": "Allow Change Rights", 
				"backup": "Allow BackUp", 
				"restart": "Allow Restart", 
				"ping": "Allow Ping", 
				"api": "Allow API Access", 
				"docs": "Allow Read Documentation"
			});
			return obj;
		}
		title(){
			return "Set of toggles";
		}
		sub(){
			return [(this.Rights())];
		}
		tags(){
			return [
				"option", 
				"switch", 
				"toggle"
			];
		}
		aspects(){
			return ["Widget/Control/Button"];
		}
	};
	($mol_mem_key(($.$mol_check_list_demo.prototype), "right"));
	($mol_mem(($.$mol_check_list_demo.prototype), "Rights"));


;
"use strict";

;
	($.$mol_check_expand_demo) = class $mol_check_expand_demo extends ($.$mol_example_small) {
		base_expanded(next){
			if(next !== undefined) return next;
			return false;
		}
		c1Label(){
			return "Base";
		}
		Labeled_base(){
			const obj = new this.$.$mol_check_expand();
			(obj.checked) = (next) => ((this.base_expanded(next)));
			(obj.title) = () => ((this.c1Label()));
			return obj;
		}
		c2Label(){
			return "Expanded";
		}
		expanded_expanded(next){
			if(next !== undefined) return next;
			return true;
		}
		Labeled_expanded(){
			const obj = new this.$.$mol_check_expand();
			(obj.title) = () => ((this.c2Label()));
			(obj.checked) = (next) => ((this.expanded_expanded(next)));
			return obj;
		}
		c5Label(){
			return "Non expandable";
		}
		Disabled(){
			const obj = new this.$.$mol_check_expand();
			(obj.title) = () => ((this.c5Label()));
			(obj.disabled) = () => (true);
			return obj;
		}
		Empty_base(){
			const obj = new this.$.$mol_check_expand();
			(obj.checked) = (next) => ((this.base_expanded(next)));
			return obj;
		}
		Empty_expanded(){
			const obj = new this.$.$mol_check_expand();
			(obj.checked) = (next) => ((this.expanded_expanded(next)));
			return obj;
		}
		Demo_items(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Labeled_base()), 
				(this.Labeled_expanded()), 
				(this.Disabled()), 
				(this.Empty_base()), 
				(this.Empty_expanded())
			]);
			return obj;
		}
		title(){
			return "Checkbox-expand in various states";
		}
		sub(){
			return [(this.Demo_items())];
		}
		tags(){
			return ["fold"];
		}
		aspects(){
			return ["Widget/Control/Button", "Type/Boolean"];
		}
	};
	($mol_mem(($.$mol_check_expand_demo.prototype), "base_expanded"));
	($mol_mem(($.$mol_check_expand_demo.prototype), "Labeled_base"));
	($mol_mem(($.$mol_check_expand_demo.prototype), "expanded_expanded"));
	($mol_mem(($.$mol_check_expand_demo.prototype), "Labeled_expanded"));
	($mol_mem(($.$mol_check_expand_demo.prototype), "Disabled"));
	($mol_mem(($.$mol_check_expand_demo.prototype), "Empty_base"));
	($mol_mem(($.$mol_check_expand_demo.prototype), "Empty_expanded"));
	($mol_mem(($.$mol_check_expand_demo.prototype), "Demo_items"));


;
"use strict";

;
	($.$mol_check_group_demo) = class $mol_check_group_demo extends ($.$mol_example_small) {
		All(){
			const obj = new this.$.$mol_check_group();
			(obj.title) = () => ("SPECIAL");
			(obj.checks) = () => ([
				(this.Strength()), 
				(this.Perception()), 
				(this.Endurance()), 
				(this.Charisma()), 
				(this.Intelligence()), 
				(this.Agility()), 
				(this.Luck())
			]);
			return obj;
		}
		strength_title(){
			return "Strength";
		}
		strength(next){
			if(next !== undefined) return next;
			return false;
		}
		Strength(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.strength_title()));
			(obj.checked) = (next) => ((this.strength(next)));
			return obj;
		}
		perception_title(){
			return "Perception";
		}
		perception(next){
			if(next !== undefined) return next;
			return true;
		}
		Perception(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.perception_title()));
			(obj.checked) = (next) => ((this.perception(next)));
			return obj;
		}
		endurance_title(){
			return "Endurance";
		}
		endurance(next){
			if(next !== undefined) return next;
			return false;
		}
		Endurance(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.endurance_title()));
			(obj.checked) = (next) => ((this.endurance(next)));
			return obj;
		}
		charisma_title(){
			return "Charisma";
		}
		charisma(next){
			if(next !== undefined) return next;
			return false;
		}
		Charisma(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.charisma_title()));
			(obj.checked) = (next) => ((this.charisma(next)));
			return obj;
		}
		intelligence_title(){
			return "Intelligence";
		}
		intelligence(next){
			if(next !== undefined) return next;
			return true;
		}
		Intelligence(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.intelligence_title()));
			(obj.checked) = (next) => ((this.intelligence(next)));
			return obj;
		}
		agility_title(){
			return "Agility";
		}
		agility(next){
			if(next !== undefined) return next;
			return true;
		}
		Agility(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.agility_title()));
			(obj.checked) = (next) => ((this.agility(next)));
			return obj;
		}
		luck_title(){
			return "Luck";
		}
		luck(next){
			if(next !== undefined) return next;
			return true;
		}
		Luck(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.luck_title()));
			(obj.checked) = (next) => ((this.luck(next)));
			return obj;
		}
		Partial(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Strength()), 
				(this.Perception()), 
				(this.Endurance()), 
				(this.Charisma()), 
				(this.Intelligence()), 
				(this.Agility()), 
				(this.Luck())
			]);
			return obj;
		}
		Demo_items(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.All()), (this.Partial())]);
			return obj;
		}
		title(){
			return "Group of checkboxes";
		}
		sub(){
			return [(this.Demo_items())];
		}
		tags(){
			return ["multi", "group"];
		}
		aspects(){
			return ["Widget/Control/Button"];
		}
	};
	($mol_mem(($.$mol_check_group_demo.prototype), "All"));
	($mol_mem(($.$mol_check_group_demo.prototype), "strength"));
	($mol_mem(($.$mol_check_group_demo.prototype), "Strength"));
	($mol_mem(($.$mol_check_group_demo.prototype), "perception"));
	($mol_mem(($.$mol_check_group_demo.prototype), "Perception"));
	($mol_mem(($.$mol_check_group_demo.prototype), "endurance"));
	($mol_mem(($.$mol_check_group_demo.prototype), "Endurance"));
	($mol_mem(($.$mol_check_group_demo.prototype), "charisma"));
	($mol_mem(($.$mol_check_group_demo.prototype), "Charisma"));
	($mol_mem(($.$mol_check_group_demo.prototype), "intelligence"));
	($mol_mem(($.$mol_check_group_demo.prototype), "Intelligence"));
	($mol_mem(($.$mol_check_group_demo.prototype), "agility"));
	($mol_mem(($.$mol_check_group_demo.prototype), "Agility"));
	($mol_mem(($.$mol_check_group_demo.prototype), "luck"));
	($mol_mem(($.$mol_check_group_demo.prototype), "Luck"));
	($mol_mem(($.$mol_check_group_demo.prototype), "Partial"));
	($mol_mem(($.$mol_check_group_demo.prototype), "Demo_items"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/group/demo/demo.view.css", "[mol_check_group_demo] {\n\talign-items: flex-start;\n}\n\n[mol_check_group_demo_all] {\n\tbox-shadow: 0 1px 0 0px var(--mol_theme_line);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_icon_microphone) = class $mol_icon_microphone extends ($.$mol_icon) {
		path(){
			return "M12,2A3,3 0 0,1 15,5V11A3,3 0 0,1 12,14A3,3 0 0,1 9,11V5A3,3 0 0,1 12,2M19,11C19,14.53 16.39,17.44 13,17.93V21H11V17.93C7.61,17.44 5,14.53 5,11H7A5,5 0 0,0 12,16A5,5 0 0,0 17,11H19Z";
		}
	};


;
"use strict";

;
	($.$mol_check_icon_demo) = class $mol_check_icon_demo extends ($.$mol_example_small) {
		Base_icon(){
			const obj = new this.$.$mol_icon_microphone();
			return obj;
		}
		base_checked(next){
			if(next !== undefined) return next;
			return false;
		}
		Base(){
			const obj = new this.$.$mol_check_icon();
			(obj.Icon) = () => ((this.Base_icon()));
			(obj.checked) = (next) => ((this.base_checked(next)));
			return obj;
		}
		Checked_icon(){
			const obj = new this.$.$mol_icon_microphone();
			return obj;
		}
		checked_checked(next){
			if(next !== undefined) return next;
			return true;
		}
		Checked(){
			const obj = new this.$.$mol_check_icon();
			(obj.Icon) = () => ((this.Checked_icon()));
			(obj.checked) = (next) => ((this.checked_checked(next)));
			return obj;
		}
		Disabled_icon(){
			const obj = new this.$.$mol_icon_microphone();
			return obj;
		}
		Disabled(){
			const obj = new this.$.$mol_check_box();
			(obj.Icon) = () => ((this.Disabled_icon()));
			(obj.checked) = () => (true);
			(obj.enabled) = () => (false);
			return obj;
		}
		title(){
			return "Iconic checkboxes in various states";
		}
		sub(){
			return [
				(this.Base()), 
				(this.Checked()), 
				(this.Disabled())
			];
		}
		tags(){
			return ["switch", "toggle"];
		}
		aspects(){
			return ["Widget/Control/Button"];
		}
	};
	($mol_mem(($.$mol_check_icon_demo.prototype), "Base_icon"));
	($mol_mem(($.$mol_check_icon_demo.prototype), "base_checked"));
	($mol_mem(($.$mol_check_icon_demo.prototype), "Base"));
	($mol_mem(($.$mol_check_icon_demo.prototype), "Checked_icon"));
	($mol_mem(($.$mol_check_icon_demo.prototype), "checked_checked"));
	($mol_mem(($.$mol_check_icon_demo.prototype), "Checked"));
	($mol_mem(($.$mol_check_icon_demo.prototype), "Disabled_icon"));
	($mol_mem(($.$mol_check_icon_demo.prototype), "Disabled"));


;
"use strict";

;
	($.$mol_code) = class $mol_code extends ($.$mol_view) {
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		format(){
			return "";
		}
		hint(){
			return (this.format());
		}
		Manual(){
			const obj = new this.$.$mol_search();
			(obj.query) = (next) => ((this.value(next)));
			(obj.hint) = () => ((this.hint()));
			return obj;
		}
		event_scan(next){
			if(next !== undefined) return next;
			return null;
		}
		scan_label(){
			return (this.$.$mol_locale.text("$mol_code_scan_label"));
		}
		Scan(){
			const obj = new this.$.$mol_button();
			(obj.event_click) = (next) => ((this.event_scan(next)));
			(obj.sub) = () => ([(this.scan_label())]);
			return obj;
		}
		sub(){
			return [(this.Manual()), (this.Scan())];
		}
	};
	($mol_mem(($.$mol_code.prototype), "value"));
	($mol_mem(($.$mol_code.prototype), "Manual"));
	($mol_mem(($.$mol_code.prototype), "event_scan"));
	($mol_mem(($.$mol_code.prototype), "Scan"));


;
"use strict";
var cordova;
var $;
(function ($) {
    $.$mol_cordova = cordova || {
        plugins: {
            barcodeScanner: null
        }
    };
    function $mol_cordova_camera() {
        return navigator['camera'];
    }
    $.$mol_cordova_camera = $mol_cordova_camera;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_code extends $.$mol_code {
            scan_support() {
                return Boolean($mol_cordova.plugins.barcodeScanner);
            }
            sub() {
                return [
                    this.Manual(),
                    ...this.scan_support() ? [this.Scan()] : [],
                ];
            }
            event_scan() {
                $mol_cordova.plugins.barcodeScanner.scan((result) => {
                    if (result.cancelled)
                        return;
                    this.value(result.text);
                }, (error) => {
                    alert("Scanning failed: " + error);
                });
            }
        }
        $$.$mol_code = $mol_code;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/code/code.view.css", "[mol_code] {\n\tdisplay: inline-flex;\n\tflex: 1 1 8rem;\n}\n\n[mol_code_manual] {\n\tflex: 1 1 auto;\n}\n");
})($ || ($ = {}));

;
	($.$mol_code_demo) = class $mol_code_demo extends ($.$mol_example_small) {
		Qr(){
			const obj = new this.$.$mol_code();
			(obj.format) = () => ("QR_CODE");
			return obj;
		}
		Matrix(){
			const obj = new this.$.$mol_code();
			(obj.format) = () => ("DATA_MATRIX");
			return obj;
		}
		Upc_e(){
			const obj = new this.$.$mol_code();
			(obj.format) = () => ("UPC_E");
			return obj;
		}
		Upc_a(){
			const obj = new this.$.$mol_code();
			(obj.format) = () => ("UPC_A");
			return obj;
		}
		Ean_8(){
			const obj = new this.$.$mol_code();
			(obj.format) = () => ("EAN_8");
			return obj;
		}
		Ean_13(){
			const obj = new this.$.$mol_code();
			(obj.format) = () => ("EAN_13");
			return obj;
		}
		Code_128(){
			const obj = new this.$.$mol_code();
			(obj.format) = () => ("CODE_128");
			return obj;
		}
		Code_39(){
			const obj = new this.$.$mol_code();
			(obj.format) = () => ("CODE_39");
			return obj;
		}
		Itf(){
			const obj = new this.$.$mol_code();
			(obj.format) = () => ("ITF");
			return obj;
		}
		title(){
			return "Barcode scanner with various formats support";
		}
		sub(){
			return [
				(this.Qr()), 
				(this.Matrix()), 
				(this.Upc_e()), 
				(this.Upc_a()), 
				(this.Ean_8()), 
				(this.Ean_13()), 
				(this.Code_128()), 
				(this.Code_39()), 
				(this.Itf())
			];
		}
		tags(){
			return [
				"qrcode", 
				"barcode", 
				"scan", 
				"cordova"
			];
		}
		aspects(){
			return ["Widget/Control"];
		}
	};
	($mol_mem(($.$mol_code_demo.prototype), "Qr"));
	($mol_mem(($.$mol_code_demo.prototype), "Matrix"));
	($mol_mem(($.$mol_code_demo.prototype), "Upc_e"));
	($mol_mem(($.$mol_code_demo.prototype), "Upc_a"));
	($mol_mem(($.$mol_code_demo.prototype), "Ean_8"));
	($mol_mem(($.$mol_code_demo.prototype), "Ean_13"));
	($mol_mem(($.$mol_code_demo.prototype), "Code_128"));
	($mol_mem(($.$mol_code_demo.prototype), "Code_39"));
	($mol_mem(($.$mol_code_demo.prototype), "Itf"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_csv_parse(text, delimiter = ',') {
        var lines = text.split(/\r?\n/g);
        var header = lines.shift().split(delimiter);
        var res = [];
        for (const line of lines) {
            if (!line)
                continue;
            var row = {};
            for (const [index, val] of line.split(delimiter).entries()) {
                row[header[index]] = val.replace(/^"|"$/g, '').replace(/""/g, '"');
            }
            res.push(row);
        }
        return res;
    }
    $.$mol_csv_parse = $mol_csv_parse;
})($ || ($ = {}));

;
	($.$mol_csv_parse_demo) = class $mol_csv_parse_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const text = 'foo,bar\\n\"123\",\"456\"\\n\"x\"\"xx\",\"y\"\"y\"\"y\"'\nconst data = $mol_csv_parse( text )";
		}
		tags(){
			return ["table"];
		}
		aspects(){
			return [
				"Language/CSV", 
				"Language/TSV", 
				"Algorithm/Serial"
			];
		}
	};
	($mol_mem(($.$mol_csv_parse_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_csv_serial(data, delimiter = ',') {
        const fields = new Set();
        for (const item of data) {
            for (const field of Object.keys(item)) {
                fields.add(field);
            }
        }
        const rows = [[...fields]];
        for (const item of data) {
            const row = [];
            rows.push(row);
            for (const field of fields) {
                const val = String(item[field] ?? '');
                row.push('"' + val.replace(/"/g, '""') + '"');
            }
        }
        return rows.map(row => row.join(delimiter)).join('\n');
    }
    $.$mol_csv_serial = $mol_csv_serial;
})($ || ($ = {}));

;
	($.$mol_csv_serial_demo) = class $mol_csv_serial_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const data = [\n\t{ foo: '123', bar: '456' },\n\t{ foo: 'x\"xx', bar: 'y\"y\"y' },\n]\nconst text = $mol_csv_serial( data )";
		}
		tags(){
			return ["table"];
		}
		aspects(){
			return ["Language/CSV", "Language/TSV"];
		}
	};
	($mol_mem(($.$mol_csv_serial_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_array(sub) {
        return $mol_data_setup((val) => {
            if (!Array.isArray(val))
                return $mol_fail(new $mol_data_error(`${val} is not an array`));
            return val.map((item, index) => {
                try {
                    return sub(item);
                }
                catch (error) {
                    if (error instanceof Promise)
                        return $mol_fail_hidden(error);
                    error.message = `[${index}] ${error.message}`;
                    return $mol_fail(error);
                }
            });
        }, sub);
    }
    $.$mol_data_array = $mol_data_array;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_data_number = (val) => {
        if (typeof val === 'number')
            return val;
        return $mol_fail(new $mol_data_error(`${val} is not a number`));
    };
})($ || ($ = {}));

;
	($.$mol_data_array_demo) = class $mol_data_array_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Samples = $mol_data_array( $mol_data_number )\nconst samples = Samples( [ 1, 2, 3, 4, 5 ] ) // ✅\n\nSamples([ 1, 'foo' ]) // ❌ [1] foo is not a number";
		}
		tags(){
			return ["runtime", "validation"];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/List"];
		}
	};
	($mol_mem(($.$mol_data_array_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    $.$mol_data_boolean = (val) => {
        if (typeof val === 'boolean')
            return val;
        return $mol_fail(new $mol_data_error(`${val} is not a boolean`));
    };
})($ || ($ = {}));

;
	($.$mol_data_boolean_demo) = class $mol_data_boolean_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const IsAdult = $mol_data_boolean\nconst isAdult = IsAdult( false ) // ✅\n\nIsAdult( 0 ) // ❌ 0 is not a boolean";
		}
		tags(){
			return ["runtime", "validation"];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/Boolean"];
		}
	};
	($mol_mem(($.$mol_data_boolean_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_const(ref) {
        return $mol_data_setup((val) => {
            if ($mol_compare_deep(val, ref))
                return ref;
            return $mol_fail(new $mol_data_error(`${JSON.stringify(val)} is not ${JSON.stringify(ref)}`));
        }, ref);
    }
    $.$mol_data_const = $mol_data_const;
})($ || ($ = {}));

;
	($.$mol_data_const_demo) = class $mol_data_const_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const OK = $mol_data_const({ done: true })\nconst ok = OK({ done: true }) // ✅\n\nOK({ done: false }) // ❌ {\"done\":false} is not {\"done\":true}";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"equals"
			];
		}
		aspects(){
			return ["Algorithm/Assert"];
		}
	};
	($mol_mem(($.$mol_data_const_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_dict(sub) {
        return $mol_data_setup((val) => {
            if (Object.getPrototypeOf(val) !== Object.prototype) {
                return $mol_fail(new $mol_data_error(`${val} is not an Object`));
            }
            const res = {};
            for (const field in val) {
                try {
                    res[field] = sub(val[field]);
                }
                catch (error) {
                    if (error instanceof Promise)
                        return $mol_fail_hidden(error);
                    error.message = `[${JSON.stringify(field)}] ${error.message}`;
                    return $mol_fail(error);
                }
            }
            return res;
        }, sub);
    }
    $.$mol_data_dict = $mol_data_dict;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_data_string = (val) => {
        if (typeof val === 'string')
            return val;
        return $mol_fail(new $mol_data_error(`${val} is not a string`));
    };
})($ || ($ = {}));

;
	($.$mol_data_dict_demo) = class $mol_data_dict_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Names = $mol_data_dict( $mol_data_string )\nconst names = Names({ jin: 'Jin', john: 'John' }) // ✅\n\nNames({ jin: 'Jin', john: 5 }) // ❌ [\"john\"] 5 is not a string";
		}
		tags(){
			return ["runtime", "validation"];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/Dictionary"];
		}
	};
	($mol_mem(($.$mol_data_dict_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_pattern(pattern) {
        return $mol_data_setup((val) => {
            const val2 = $mol_data_string(val);
            if (pattern.test(val2))
                return val2;
            return $mol_fail(new $mol_data_error(`${val} is not a ${pattern}`));
        }, pattern);
    }
    $.$mol_data_pattern = $mol_data_pattern;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_data_email = $mol_data_pattern(/.+@.+/);
})($ || ($ = {}));

;
	($.$mol_data_email_demo) = class $mol_data_email_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const From = $mol_data_email\nconst from = From( 'jin@example.org' ) // ✅\n\nFrom( 'jin' ) // ❌ jin is not a /.+@.+/";
		}
		tags(){
			return ["runtime", "validation"];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/Email"];
		}
	};
	($mol_mem(($.$mol_data_email_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_data_enum_demo_number) = class $mol_data_enum_demo_number extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "enum SexValues { male, female }\nconst Sex = $mol_data_enum( 'Sex', SexValues )\nconst sex = Sex( 0 ) // ✅\n\nSamples( 3 ) // ❌ 3 is not value of Sex enum";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"enum"
			];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/Number"];
		}
	};
	($mol_mem(($.$mol_data_enum_demo_number.prototype), "code"));
	($.$mol_data_enum_demo_string) = class $mol_data_enum_demo_string extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "enum SexValues { male = 'male', female = 'female' }\nconst Sex = $mol_data_enum( 'Sex', SexValues )\nconst sex = Sex( 'male' ) // ✅\n\nSamples( 'helicopter' ) // ❌ helicopter is not value of Sex enum";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"enum"
			];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/String"];
		}
	};
	($mol_mem(($.$mol_data_enum_demo_string.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_instance(Instance) {
        return $mol_data_setup((val) => {
            if (val instanceof Instance)
                return val;
            return $mol_fail(new $mol_data_error(`${val} is not a ${Instance.name}`));
        }, Instance);
    }
    $.$mol_data_instance = $mol_data_instance;
})($ || ($ = {}));

;
	($.$mol_data_instance_demo) = class $mol_data_instance_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Created = $mol_data_instance( Date )\nconst created = Created( new Date ) // ✅\n\nCreated( '2023-01-01' ) // ❌ 2023-01-01 is not a Date";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"instance"
			];
		}
		aspects(){
			return ["Algorithm/Assert"];
		}
	};
	($mol_mem(($.$mol_data_instance_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_integer(val) {
        const val2 = $mol_data_number(val);
        if (Math.floor(val2) === val2)
            return val2;
        return $mol_fail(new $mol_data_error(`${val} is not an integer`));
    }
    $.$mol_data_integer = $mol_data_integer;
})($ || ($ = {}));

;
	($.$mol_data_integer_demo) = class $mol_data_integer_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Age = $mol_data_integer\nconst age = Age( 18 ) // ✅\n\nAge( 18.5 ) // ❌ 18.5 is not an integer";
		}
		tags(){
			return ["runtime", "validation"];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/Number/Integer"];
		}
	};
	($mol_mem(($.$mol_data_integer_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_tagged(config) {
        return config;
    }
    $.$mol_data_tagged = $mol_data_tagged;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_data_nominal(config) {
        const nominal = Object.keys(config)[0];
        return config[nominal];
    }
    $.$mol_data_nominal = $mol_data_nominal;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_data_nullable(sub) {
        return $mol_data_setup((val) => {
            if (val === null)
                return null;
            return sub(val);
        }, sub);
    }
    $.$mol_data_nullable = $mol_data_nullable;
})($ || ($ = {}));

;
	($.$mol_data_nullable_demo) = class $mol_data_nullable_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Age = $mol_data_nullable( $mol_data_integer )\nconst age1 = Age( 18 ) // ✅\nconst age2 = Age( null ) // ✅\n\nAge( 'xxx' ) // ❌ xxx is not a number";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"nullable"
			];
		}
		aspects(){
			return ["Algorithm/Assert"];
		}
	};
	($mol_mem(($.$mol_data_nullable_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_data_number_demo) = class $mol_data_number_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Pos = $mol_data_number\nconst pos = Pos( 1.25 ) // ✅\n\nPos( 'xxx' ) // ❌ xxx is not a number";
		}
		tags(){
			return ["runtime", "validation"];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/Number"];
		}
	};
	($mol_mem(($.$mol_data_number_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_optional(sub, fallback) {
        return $mol_data_setup((val) => {
            if (val === undefined) {
                return fallback?.();
            }
            return sub(val);
        }, { sub, fallback });
    }
    $.$mol_data_optional = $mol_data_optional;
})($ || ($ = {}));

;
	($.$mol_data_optional_demo) = class $mol_data_optional_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Age = $mol_data_optional( $mol_data_integer )\nconst age1 = Age( 18 ) // ✅\nconst age2 = Age( undefined ) // ✅\n\nAge( 'xxx' ) // ❌ xxx is not a number";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"optional", 
				"maybe"
			];
		}
		aspects(){
			return ["Algorithm/Assert"];
		}
	};
	($mol_mem(($.$mol_data_optional_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_data_pattern_demo) = class $mol_data_pattern_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Birthday = $mol_data_pattern( /^\\d{4}-\\d{2}-\\d{2}$/ )\nconst birthday = Birthday( '2023-01-06' ) // ✅\n\nBirthday( '2023-1-6' ) // ❌ 2023-01-06 is not a /^\\d{4}-\\d{2}-\\d{2}$/";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"pattern"
			];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/String"];
		}
	};
	($mol_mem(($.$mol_data_pattern_demo.prototype), "code"));


;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_pipe(...funcs) {
        return $mol_data_setup(function (input) {
            let value = input;
            for (const func of funcs)
                value = $mol_func_is_class(func) ? new func(value) : func.call(this, value);
            return value;
        }, { funcs });
    }
    $.$mol_data_pipe = $mol_data_pipe;
})($ || ($ = {}));

;
	($.$mol_data_pipe_demo) = class $mol_data_pipe_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Birthday = $mol_data_pipe(\n\t$mol_data_string,\n\t$mol_time_moment,\n\t( moment: $mol_time_moment )=> moment.toOffset( 'Z' ),\n)\nconst birthday = Birthday( '2023-01-06' ) // ✅\n\nBirthday( 123 ) // ❌ 2023-01-06 is not a number";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"pipe"
			];
		}
		aspects(){
			return ["Algorithm/Assert", "Algorithm/Compose"];
		}
	};
	($mol_mem(($.$mol_data_pipe_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_range(from, to) {
        return $mol_data_setup((val) => {
            if (val > from && val < to)
                return val;
            return $mol_fail(new $mol_data_error(`${val} is out range (${from},${to})`));
        }, [from, to]);
    }
    $.$mol_data_range = $mol_data_range;
})($ || ($ = {}));

;
	($.$mol_data_range_demo) = class $mol_data_range_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Portion = $mol_data_range( 0, 1 )\nconst portion = Portion( 0.5 ) // ✅\n\nPortion( 0 ) // ❌ 0 is out range (0,1)";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"range"
			];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/Number"];
		}
	};
	($mol_mem(($.$mol_data_range_demo.prototype), "code"));


;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_record(sub) {
        return $mol_data_setup((val) => {
            let res = {};
            for (const field in sub) {
                try {
                    res[field] =
                        sub[field](val[field]);
                }
                catch (error) {
                    if (error instanceof Promise)
                        return $mol_fail_hidden(error);
                    error.message = `[${JSON.stringify(field)}] ${error.message}`;
                    return $mol_fail(error);
                }
            }
            return res;
        }, sub);
    }
    $.$mol_data_record = $mol_data_record;
})($ || ($ = {}));

;
	($.$mol_data_record_demo) = class $mol_data_record_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Person = $mol_data_record({\n\tname: $mol_data_string,\n\tage: $mol_data_integer,\n})\nconst person = Person({ name: 'jin', age: 100 }) // ✅\n\nPerson({ name: 'jin' }) // ❌ [\"age\"] undefined is not a number";
		}
		tags(){
			return ["runtime", "validation"];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/Record"];
		}
	};
	($mol_mem(($.$mol_data_record_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_data_string_demo) = class $mol_data_string_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Name = $mol_data_string\nconst name = Name( 'Jin' ) // ✅\n\nName( 7 ) // ❌ 7 is not a string";
		}
		tags(){
			return ["runtime", "validation"];
		}
		aspects(){
			return ["Algorithm/Assert", "Type/String"];
		}
	};
	($mol_mem(($.$mol_data_string_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_data_tagged_demo) = class $mol_data_tagged_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const { Weight, Length } = $mol_data_tagged({\n\tWeight: $mol_data_integer,\n\tLength: $mol_data_integer,\n})\n\nlet weight = Weight( 50 ) // ✅\nweight = Length( 50 ) // ❌ Type '\"Weight\"' is not assignable to type '\"Length\"'";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"tagged"
			];
		}
		aspects(){
			return ["Algorithm/Assert"];
		}
	};
	($mol_mem(($.$mol_data_tagged_demo.prototype), "code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_variant(...sub) {
        return $mol_data_setup((val) => {
            const errors = [];
            for (const type of sub) {
                let hidden = $.$mol_fail_hidden;
                try {
                    $.$mol_fail = $.$mol_fail_hidden;
                    return type(val);
                }
                catch (error) {
                    $.$mol_fail = hidden;
                    if (error instanceof $mol_data_error) {
                        errors.push(error);
                    }
                    else {
                        return $mol_fail_hidden(error);
                    }
                }
            }
            return $mol_fail(new $mol_data_error(`${val} is not any of variants`, {}, ...errors));
        }, sub);
    }
    $.$mol_data_variant = $mol_data_variant;
})($ || ($ = {}));

;
	($.$mol_data_variant_demo) = class $mol_data_variant_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const Phone = $mol_data_variant(\n\t$mol_data_number,\n\t$mol_data_string,\n)\nconst phone1 = Phone( 1234567890 ) // ✅\nconst phone2 = Phone( '+1(23)456-78-90' ) // ✅\n\nPhone( null )\n// ❌ null is not any of variants\n// ❌ null is not a number\n// ❌ null is not a string";
		}
		tags(){
			return [
				"runtime", 
				"validation", 
				"variant", 
				"adt"
			];
		}
		aspects(){
			return ["Algorithm/Assert"];
		}
	};
	($mol_mem(($.$mol_data_variant_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_date_demo) = class $mol_date_demo extends ($.$mol_example_small) {
		date_current(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_time_moment();
			return obj;
		}
		Current(){
			const obj = new this.$.$mol_date();
			(obj.value_moment) = (next) => ((this.date_current(next)));
			return obj;
		}
		formatted(){
			return "";
		}
		Formatted(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.formatted())]);
			return obj;
		}
		date_empty(next){
			if(next !== undefined) return next;
			return null;
		}
		Empty(){
			const obj = new this.$.$mol_date();
			(obj.value_moment) = (next) => ((this.date_empty(next)));
			return obj;
		}
		sub(){
			return [
				(this.Current()), 
				(this.Formatted()), 
				(this.Empty())
			];
		}
		tags(){
			return [
				"time", 
				"datepicker", 
				"format"
			];
		}
		aspects(){
			return ["Widget/Control/Button/Picker", "Type/Date"];
		}
	};
	($mol_mem(($.$mol_date_demo.prototype), "date_current"));
	($mol_mem(($.$mol_date_demo.prototype), "Current"));
	($mol_mem(($.$mol_date_demo.prototype), "Formatted"));
	($mol_mem(($.$mol_date_demo.prototype), "date_empty"));
	($mol_mem(($.$mol_date_demo.prototype), "Empty"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_date_demo extends $.$mol_date_demo {
            formatted() {
                return this.date_current()?.toString('DD Month YYYY hh:mm');
            }
        }
        $$.$mol_date_demo = $mol_date_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/date/demo/demo.view.css", "[mol_date_demo_formatted] {\n\tpadding: var(--mol_gap_text);\n}\n");
})($ || ($ = {}));

;
	($.$mol_deck_demo) = class $mol_deck_demo extends ($.$mol_example_small) {
		Greeting(){
			const obj = new this.$.$mol_card();
			(obj.title) = () => ("Greeting");
			(obj.content) = () => (["Hello, world!"]);
			return obj;
		}
		Question(){
			const obj = new this.$.$mol_card();
			(obj.title) = () => ("Question");
			(obj.content) = () => (["How are you?"]);
			return obj;
		}
		Answer(){
			const obj = new this.$.$mol_card();
			(obj.title) = () => ("Answer");
			(obj.content) = () => (["The Answer to the Ultimate Question of Life, the Universe, and Everything is 42"]);
			return obj;
		}
		Command(){
			const obj = new this.$.$mol_card();
			(obj.title) = () => ("Command");
			(obj.content) = () => (["Let's do it right!"]);
			return obj;
		}
		Spam_content(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Spam(){
			const obj = new this.$.$mol_card();
			(obj.title) = () => ("Spam");
			(obj.Content) = () => ((this.Spam_content()));
			return obj;
		}
		Deck(){
			const obj = new this.$.$mol_deck();
			(obj.items) = () => ([
				(this.Greeting()), 
				(this.Question()), 
				(this.Answer()), 
				(this.Command()), 
				(this.Spam())
			]);
			return obj;
		}
		title(){
			return "Simple deck with tabbar";
		}
		sub(){
			return [(this.Deck())];
		}
		tags(){
			return ["tabs", "container"];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_deck_demo.prototype), "Greeting"));
	($mol_mem(($.$mol_deck_demo.prototype), "Question"));
	($mol_mem(($.$mol_deck_demo.prototype), "Answer"));
	($mol_mem(($.$mol_deck_demo.prototype), "Command"));
	($mol_mem(($.$mol_deck_demo.prototype), "Spam_content"));
	($mol_mem(($.$mol_deck_demo.prototype), "Spam"));
	($mol_mem(($.$mol_deck_demo.prototype), "Deck"));


;
"use strict";

;
	($.$mol_dimmer_demo) = class $mol_dimmer_demo extends ($.$mol_example_small) {
		One(){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ("Don't put all your eggs in one basket");
			(obj.needle) = () => ("eggs");
			return obj;
		}
		Two(){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ("Don't look a gift horse in the mouth.");
			(obj.needle) = () => ("oo");
			return obj;
		}
		Three(){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ("There is no word you are looking for");
			(obj.needle) = () => ("luck");
			return obj;
		}
		Four(){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ("ooAAooAAoo");
			(obj.needle) = () => ("oo");
			return obj;
		}
		Five(){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ("Let's search this string");
			(obj.needle) = () => ("Let's search this string");
			return obj;
		}
		Six(){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ("Let's search nothing");
			(obj.needle) = () => ("");
			return obj;
		}
		Cases(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.One()), 
				(this.Two()), 
				(this.Three()), 
				(this.Four()), 
				(this.Five()), 
				(this.Six())
			]);
			return obj;
		}
		title(){
			return "Text with highlighted found substring";
		}
		sub(){
			return [(this.Cases())];
		}
		tags(){
			return ["search", "highlight"];
		}
		aspects(){
			return ["Widget/Text", "Type/String"];
		}
	};
	($mol_mem(($.$mol_dimmer_demo.prototype), "One"));
	($mol_mem(($.$mol_dimmer_demo.prototype), "Two"));
	($mol_mem(($.$mol_dimmer_demo.prototype), "Three"));
	($mol_mem(($.$mol_dimmer_demo.prototype), "Four"));
	($mol_mem(($.$mol_dimmer_demo.prototype), "Five"));
	($mol_mem(($.$mol_dimmer_demo.prototype), "Six"));
	($mol_mem(($.$mol_dimmer_demo.prototype), "Cases"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/dimmer/demo/demo.view.css", "[mol_dimmer_demo_cases] > * {\n\tpadding: var(--mol_gap_text);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_drag_demo) = class $mol_drag_demo extends ($.$mol_example_large) {
		transfer_adopt(next){
			if(next !== undefined) return next;
			return null;
		}
		receive(next){
			if(next !== undefined) return next;
			return null;
		}
		receive_trash(next){
			if(next !== undefined) return next;
			return null;
		}
		Trash_icon(){
			const obj = new this.$.$mol_icon_trash_can_outline();
			return obj;
		}
		Trash(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Trash_icon()), " Trash"]);
			return obj;
		}
		Trash_drop(){
			const obj = new this.$.$mol_drop();
			(obj.adopt) = (next) => ((this.transfer_adopt(next)));
			(obj.receive) = (next) => ((this.receive_trash(next)));
			(obj.Sub) = () => ((this.Trash()));
			return obj;
		}
		task_rows(){
			return [];
		}
		List(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.task_rows()));
			return obj;
		}
		Page(){
			const obj = new this.$.$mol_page();
			(obj.head) = () => ([(this.Trash_drop())]);
			(obj.Body_content) = () => ((this.List()));
			return obj;
		}
		List_drop(){
			const obj = new this.$.$mol_drop();
			(obj.adopt) = (next) => ((this.transfer_adopt(next)));
			(obj.receive) = (next) => ((this.receive(next)));
			(obj.Sub) = () => ((this.Page()));
			return obj;
		}
		task_title(id){
			return "";
		}
		task_html(id){
			return "";
		}
		task_uri(id){
			return "";
		}
		receive_before(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Task_link(id){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ((this.task_uri(id)));
			(obj.sub) = () => ([(this.task_title(id))]);
			return obj;
		}
		Task_drop(id){
			const obj = new this.$.$mol_drop();
			(obj.adopt) = (next) => ((this.transfer_adopt(next)));
			(obj.receive) = (next) => ((this.receive_before(id, next)));
			(obj.Sub) = () => ((this.Task_link(id)));
			return obj;
		}
		task_count(){
			return 100;
		}
		sub(){
			return [(this.List_drop())];
		}
		Task_row(id){
			const obj = new this.$.$mol_drag();
			(obj.transfer) = () => ({
				"text/plain": (this.task_title(id)), 
				"text/html": (this.task_html(id)), 
				"text/uri-list": (this.task_uri(id))
			});
			(obj.Sub) = () => ((this.Task_drop(id)));
			return obj;
		}
		tags(){
			return [
				"drag", 
				"dragndrop", 
				"reorder", 
				"transfer"
			];
		}
		aspects(){
			return ["Widget/Plugin", "Drag'n'Drop"];
		}
	};
	($mol_mem(($.$mol_drag_demo.prototype), "transfer_adopt"));
	($mol_mem(($.$mol_drag_demo.prototype), "receive"));
	($mol_mem(($.$mol_drag_demo.prototype), "receive_trash"));
	($mol_mem(($.$mol_drag_demo.prototype), "Trash_icon"));
	($mol_mem(($.$mol_drag_demo.prototype), "Trash"));
	($mol_mem(($.$mol_drag_demo.prototype), "Trash_drop"));
	($mol_mem(($.$mol_drag_demo.prototype), "List"));
	($mol_mem(($.$mol_drag_demo.prototype), "Page"));
	($mol_mem(($.$mol_drag_demo.prototype), "List_drop"));
	($mol_mem_key(($.$mol_drag_demo.prototype), "receive_before"));
	($mol_mem_key(($.$mol_drag_demo.prototype), "Task_link"));
	($mol_mem_key(($.$mol_drag_demo.prototype), "Task_drop"));
	($mol_mem_key(($.$mol_drag_demo.prototype), "Task_row"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_drag_demo extends $.$mol_drag_demo {
            task_list(next) {
                return next ?? [...$mol_range2(index => this.Task(String(index + 1)), () => this.task_count())];
            }
            Task(id) {
                return {
                    id: id,
                    title: `Task #${id}`,
                    toJSON: () => id,
                };
            }
            task_rows() {
                return this.task_list().map(task => this.Task_row(task));
            }
            task_title(task) {
                return task.title;
            }
            task_uri(task) {
                return this.$.$mol_state_arg.make_link({
                    ...this.$.$mol_state_arg.dict(),
                    'product': task.id,
                });
            }
            transfer_adopt(transfer) {
                const uri = transfer.getData("text/uri-list");
                if (!uri)
                    return;
                return this.task_list().find(task => this.task_uri(task) === uri);
            }
            receive_before(anchor, task) {
                if (anchor === task)
                    return;
                const tasks = this.task_list().filter(p => p !== task);
                const index = tasks.indexOf(anchor);
                tasks.splice(index, 0, task);
                this.task_list(tasks);
            }
            receive(task) {
                const tasks = this.task_list().filter(p => p !== task);
                tasks.push(task);
                this.task_list(tasks);
            }
            receive_trash(task) {
                this.task_list(this.task_list().filter(p => p !== task));
            }
        }
        __decorate([
            $mol_mem
        ], $mol_drag_demo.prototype, "task_list", null);
        __decorate([
            $mol_mem_key
        ], $mol_drag_demo.prototype, "Task", null);
        __decorate([
            $mol_mem_key
        ], $mol_drag_demo.prototype, "task_uri", null);
        $$.$mol_drag_demo = $mol_drag_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem, px } = $mol_style_unit;
        $mol_style_define($mol_drag_demo, {
            Task_drop: {
                '@': {
                    mol_drop_status: {
                        drag: {
                            boxShadow: `inset 0 1px 0 0px ${$mol_theme.focus}`,
                        },
                    },
                },
            },
            List_drop: {
                '@': {
                    mol_drop_status: {
                        drag: {
                            ':last-child': {
                                boxShadow: `inset 0 -1px 0 0px ${$mol_theme.focus}`,
                            },
                        },
                    },
                },
            },
            Trash: {
                padding: $mol_gap.text,
                flex: {
                    grow: 1,
                },
            },
            Trash_drop: {
                '@': {
                    mol_drop_status: {
                        drag: {
                            background: {
                                color: $mol_theme.hover,
                            },
                        },
                    },
                },
            },
            List: {
                padding: $mol_gap.text,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_dump_demo) = class $mol_dump_demo extends ($.$mol_example_small) {
		value(){
			return null;
		}
		Dump_short(){
			const obj = new this.$.$mol_dump_value();
			(obj.value) = () => ((this.value()));
			return obj;
		}
		Dump_long(){
			const obj = new this.$.$mol_dump_value();
			(obj.value) = () => ((this.value()));
			(obj.prototypes) = () => (true);
			return obj;
		}
		Dump_list(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Dump_short()), (this.Dump_long())]);
			return obj;
		}
		title(){
			return "Attach files an show them";
		}
		sub(){
			return [(this.Dump_list())];
		}
		tags(){
			return [
				"dump", 
				"json", 
				"javascript", 
				"debug"
			];
		}
		aspects(){
			return ["Widget"];
		}
	};
	($mol_mem(($.$mol_dump_demo.prototype), "Dump_short"));
	($mol_mem(($.$mol_dump_demo.prototype), "Dump_long"));
	($mol_mem(($.$mol_dump_demo.prototype), "Dump_list"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_dump_demo extends $.$mol_dump_demo {
            value() {
                return {
                    undefined: undefined,
                    null: null,
                    boolean: true,
                    number: 12.34,
                    string: 'Hello world!',
                    regexp: /hello (world)/,
                    date: new Date,
                    set: new Set([1234, 'string']),
                    map: new Map([
                        ['string', 'string'],
                        [{ foo: 1e50 }, { bar: 1e-50 }],
                    ]),
                    array: [1, 2, 3],
                    buffer: new Uint8Array([1, 2, 3]),
                };
            }
        }
        __decorate([
            $mol_mem
        ], $mol_dump_demo.prototype, "value", null);
        $$.$mol_dump_demo = $mol_dump_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_expander_demo) = class $mol_expander_demo extends ($.$mol_example_small) {
		Content(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Expander(){
			const obj = new this.$.$mol_expander();
			(obj.title) = () => ("Lorem Ipsum");
			(obj.content) = () => ([(this.Content())]);
			return obj;
		}
		title(){
			return "Simple spoiler";
		}
		sub(){
			return [(this.Expander())];
		}
		tags(){
			return [
				"expander", 
				"accordion", 
				"expand", 
				"container", 
				"fold"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_expander_demo.prototype), "Content"));
	($mol_mem(($.$mol_expander_demo.prototype), "Expander"));


;
"use strict";

;
	($.$mol_fetch_demo) = class $mol_fetch_demo extends ($.$mol_example_small) {
		url(next){
			if(next !== undefined) return next;
			return "https://jsonplaceholder.typicode.com/users";
		}
		Url(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.url(next)));
			return obj;
		}
		fetch_data(next){
			if(next !== undefined) return next;
			return null;
		}
		Fetch(){
			const obj = new this.$.$mol_button_major();
			(obj.click) = (next) => ((this.fetch_data()));
			return obj;
		}
		Request(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Url()), (this.Fetch())]);
			return obj;
		}
		data(next){
			if(next !== undefined) return next;
			return null;
		}
		Data(){
			const obj = new this.$.$mol_dump_value();
			(obj.value) = () => ((this.data()));
			return obj;
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Request()), (this.Data())]);
			return obj;
		}
		title(){
			return "Simple spoiler";
		}
		sub(){
			return [(this.Content())];
		}
		tags(){
			return [
				"fetch", 
				"load", 
				"api", 
				"response", 
				"request"
			];
		}
		aspects(){
			return ["Network/HTTP"];
		}
	};
	($mol_mem(($.$mol_fetch_demo.prototype), "url"));
	($mol_mem(($.$mol_fetch_demo.prototype), "Url"));
	($mol_mem(($.$mol_fetch_demo.prototype), "fetch_data"));
	($mol_mem(($.$mol_fetch_demo.prototype), "Fetch"));
	($mol_mem(($.$mol_fetch_demo.prototype), "Request"));
	($mol_mem(($.$mol_fetch_demo.prototype), "data"));
	($mol_mem(($.$mol_fetch_demo.prototype), "Data"));
	($mol_mem(($.$mol_fetch_demo.prototype), "Content"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_fetch_demo extends $.$mol_fetch_demo {
            fetch_data() {
                this.data($mol_fetch.json(this.url()));
            }
        }
        $$.$mol_fetch_demo = $mol_fetch_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_filler_demo) = class $mol_filler_demo extends ($.$mol_example_small) {
		Filler(){
			const obj = new this.$.$mol_filler();
			(obj.min_symbols) = () => (6000);
			return obj;
		}
		title(){
			return "Prints large bulk of text";
		}
		sub(){
			return [(this.Filler())];
		}
		tags(){
			return [
				"filler", 
				"fake", 
				"lorem", 
				"ipsum", 
				"dolor"
			];
		}
		aspects(){
			return ["Widget/Text"];
		}
	};
	($mol_mem(($.$mol_filler_demo.prototype), "Filler"));


;
"use strict";

;
	($.$mol_float_demo) = class $mol_float_demo extends ($.$mol_example_large) {
		Head_content(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ("Float header");
			return obj;
		}
		Head_row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Head_content())]);
			return obj;
		}
		Head(){
			const obj = new this.$.$mol_float();
			(obj.sub) = () => ([(this.Head_row())]);
			return obj;
		}
		Filler1(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Filler2(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Filler1()), (this.Filler2())]);
			return obj;
		}
		Scroll(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.Head()), (this.Content())]);
			return obj;
		}
		title(){
			return "Floating header example";
		}
		sub(){
			return [(this.Scroll())];
		}
		tags(){
			return ["scroll", "container"];
		}
		aspects(){
			return ["Widget/Float"];
		}
	};
	($mol_mem(($.$mol_float_demo.prototype), "Head_content"));
	($mol_mem(($.$mol_float_demo.prototype), "Head_row"));
	($mol_mem(($.$mol_float_demo.prototype), "Head"));
	($mol_mem(($.$mol_float_demo.prototype), "Filler1"));
	($mol_mem(($.$mol_float_demo.prototype), "Filler2"));
	($mol_mem(($.$mol_float_demo.prototype), "Content"));
	($mol_mem(($.$mol_float_demo.prototype), "Scroll"));


;
"use strict";

;
	($.$mol_form_group) = class $mol_form_group extends ($.$mol_view) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/form/group/group.view.css", "[mol_form_group] {\n\tflex-wrap: wrap;\n\tgap: var(--mol_gap_block);\n}\n\n[mol_form_group] > * {\n\tflex: 1 1 18rem;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_form_demo) = class $mol_form_demo extends ($.$mol_example) {
		avatars_bid(){
			return "";
		}
		avatars(next){
			if(next !== undefined) return next;
			return [];
		}
		Avatars_control(){
			const obj = new this.$.$mol_attach();
			(obj.items) = (next) => ((this.avatars(next)));
			return obj;
		}
		Avatars_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Avatars");
			(obj.bid) = () => ((this.avatars_bid()));
			(obj.Content) = () => ((this.Avatars_control()));
			return obj;
		}
		name_first_bid(){
			return "";
		}
		name_first(next){
			if(next !== undefined) return next;
			return "";
		}
		Name_first_control(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ("Jack");
			(obj.value) = (next) => ((this.name_first(next)));
			return obj;
		}
		Name_first_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("First Name");
			(obj.bid) = () => ((this.name_first_bid()));
			(obj.Content) = () => ((this.Name_first_control()));
			return obj;
		}
		name_nick_bid(){
			return "";
		}
		name_nick(next){
			if(next !== undefined) return next;
			return "";
		}
		Name_nick_control(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ("Capitan");
			(obj.value) = (next) => ((this.name_nick(next)));
			return obj;
		}
		Name_nick_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Nick Name");
			(obj.bid) = () => ((this.name_nick_bid()));
			(obj.Content) = () => ((this.Name_nick_control()));
			return obj;
		}
		name_second_bid(){
			return "";
		}
		name_second(next){
			if(next !== undefined) return next;
			return "";
		}
		Name_second_control(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ("Sparrow");
			(obj.value) = (next) => ((this.name_second(next)));
			return obj;
		}
		Name_second_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Second Name");
			(obj.bid) = () => ((this.name_second_bid()));
			(obj.Content) = () => ((this.Name_second_control()));
			return obj;
		}
		Names(){
			const obj = new this.$.$mol_form_group();
			(obj.sub) = () => ([
				(this.Name_first_field()), 
				(this.Name_nick_field()), 
				(this.Name_second_field())
			]);
			return obj;
		}
		age_bid(){
			return "";
		}
		age(next){
			if(next !== undefined) return next;
			return 0;
		}
		Age_control(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.age(next)));
			return obj;
		}
		Age_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Age");
			(obj.bid) = () => ((this.age_bid()));
			(obj.Content) = () => ((this.Age_control()));
			return obj;
		}
		sex_label(){
			return "Sex";
		}
		sex_bid(){
			return "";
		}
		sex(next){
			if(next !== undefined) return next;
			return "";
		}
		sex_options(){
			return {
				"male": "Male", 
				"intersex": "Intersex", 
				"female": "Female"
			};
		}
		Sex_control(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.sex(next)));
			(obj.options) = () => ((this.sex_options()));
			return obj;
		}
		Sex_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ((this.sex_label()));
			(obj.bid) = () => ((this.sex_bid()));
			(obj.Content) = () => ((this.Sex_control()));
			return obj;
		}
		color_bid(){
			return "";
		}
		color(next){
			if(next !== undefined) return next;
			return "";
		}
		Color_control(){
			const obj = new this.$.$mol_select();
			(obj.value) = (next) => ((this.color(next)));
			(obj.dictionary) = () => ({
				"": "❔", 
				"white": "⬜ White", 
				"yellow": "🟨 Yellow", 
				"brown": "🟫 Brown", 
				"red": "🟥 Red"
			});
			return obj;
		}
		Color_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Skin color");
			(obj.bid) = () => ((this.color_bid()));
			(obj.Content) = () => ((this.Color_control()));
			return obj;
		}
		Parameters(){
			const obj = new this.$.$mol_form_group();
			(obj.sub) = () => ([
				(this.Age_field()), 
				(this.Sex_field()), 
				(this.Color_field())
			]);
			return obj;
		}
		mail_bid(){
			return "";
		}
		mail(next){
			if(next !== undefined) return next;
			return "";
		}
		Mail_control(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ("name@domain.com");
			(obj.value) = (next) => ((this.mail(next)));
			return obj;
		}
		Mail_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("E-mail");
			(obj.bid) = () => ((this.mail_bid()));
			(obj.Content) = () => ((this.Mail_control()));
			return obj;
		}
		signup(next){
			if(next !== undefined) return next;
			return null;
		}
		signup_allowed(){
			return (this.Form().submit_allowed());
		}
		Signup(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Sign Up");
			(obj.click) = (next) => ((this.signup(next)));
			(obj.enabled) = () => ((this.signup_allowed()));
			return obj;
		}
		result(next){
			if(next !== undefined) return next;
			return "";
		}
		Result(){
			const obj = new this.$.$mol_status();
			(obj.message) = () => ((this.result()));
			return obj;
		}
		Form(){
			const obj = new this.$.$mol_form();
			(obj.body) = () => ([
				(this.Avatars_field()), 
				(this.Names()), 
				(this.Parameters()), 
				(this.Mail_field())
			]);
			(obj.submit) = (next) => ((this.signup(next)));
			(obj.buttons) = () => ([(this.Signup()), (this.Result())]);
			return obj;
		}
		title(){
			return "Sign Up form demo";
		}
		message(){
			return {
				"required": "Required", 
				"adult": "18+ only", 
				"no_spaces": "No spaces!", 
				"need_more_letters": "{count} or more letters", 
				"need_at": "@ is required", 
				"only_one_at": "At most one @", 
				"no_tld": "At least 2 level domain", 
				"dots_inside": "Dots can't be at edge", 
				"no_space_domain": "No space in domain name", 
				"need_username": "Username required"
			};
		}
		sub(){
			return [(this.Form())];
		}
		tags(){
			return [
				"$mol_form_field", 
				"$mol_button", 
				"$mol_row", 
				"$mol_string", 
				"form", 
				"bids", 
				"validation", 
				"field"
			];
		}
		aspects(){
			return ["Widget/Form"];
		}
	};
	($mol_mem(($.$mol_form_demo.prototype), "avatars"));
	($mol_mem(($.$mol_form_demo.prototype), "Avatars_control"));
	($mol_mem(($.$mol_form_demo.prototype), "Avatars_field"));
	($mol_mem(($.$mol_form_demo.prototype), "name_first"));
	($mol_mem(($.$mol_form_demo.prototype), "Name_first_control"));
	($mol_mem(($.$mol_form_demo.prototype), "Name_first_field"));
	($mol_mem(($.$mol_form_demo.prototype), "name_nick"));
	($mol_mem(($.$mol_form_demo.prototype), "Name_nick_control"));
	($mol_mem(($.$mol_form_demo.prototype), "Name_nick_field"));
	($mol_mem(($.$mol_form_demo.prototype), "name_second"));
	($mol_mem(($.$mol_form_demo.prototype), "Name_second_control"));
	($mol_mem(($.$mol_form_demo.prototype), "Name_second_field"));
	($mol_mem(($.$mol_form_demo.prototype), "Names"));
	($mol_mem(($.$mol_form_demo.prototype), "age"));
	($mol_mem(($.$mol_form_demo.prototype), "Age_control"));
	($mol_mem(($.$mol_form_demo.prototype), "Age_field"));
	($mol_mem(($.$mol_form_demo.prototype), "sex"));
	($mol_mem(($.$mol_form_demo.prototype), "Sex_control"));
	($mol_mem(($.$mol_form_demo.prototype), "Sex_field"));
	($mol_mem(($.$mol_form_demo.prototype), "color"));
	($mol_mem(($.$mol_form_demo.prototype), "Color_control"));
	($mol_mem(($.$mol_form_demo.prototype), "Color_field"));
	($mol_mem(($.$mol_form_demo.prototype), "Parameters"));
	($mol_mem(($.$mol_form_demo.prototype), "mail"));
	($mol_mem(($.$mol_form_demo.prototype), "Mail_control"));
	($mol_mem(($.$mol_form_demo.prototype), "Mail_field"));
	($mol_mem(($.$mol_form_demo.prototype), "signup"));
	($mol_mem(($.$mol_form_demo.prototype), "Signup"));
	($mol_mem(($.$mol_form_demo.prototype), "result"));
	($mol_mem(($.$mol_form_demo.prototype), "Result"));
	($mol_mem(($.$mol_form_demo.prototype), "Form"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_form_demo extends $.$mol_form_demo {
            name_first(next) {
                return $mol_state_local.value(this.state_key('name_first'), next) || '';
            }
            name_first_bid() {
                const value = this.name_first();
                if (!value)
                    return this.message().required;
                if (value.indexOf(' ') !== -1)
                    return this.message().no_spaces;
                return '';
            }
            name_nick(next) {
                return $mol_state_local.value(this.state_key('name_nick'), next) || '';
            }
            name_second(next) {
                return $mol_state_local.value(this.state_key('name_second'), next) || '';
            }
            name_second_bid() {
                const value = this.name_second();
                if (value.indexOf(' ') !== -1)
                    return this.message().no_spaces;
                if (value.length < 3)
                    return this.message().need_more_letters.replace('{count}', '3');
                return '';
            }
            mail(next) {
                return $mol_state_local.value(this.state_key('mail'), next) || '';
            }
            mail_bid() {
                const value = this.mail().trim();
                if (!value)
                    return this.message().required;
                const parts = value.split('@');
                if (parts.length < 2)
                    return this.message().need_at;
                if (parts.length > 2)
                    return this.message().only_one_at;
                if (!parts[0])
                    return this.message().need_username;
                if (parts[1].indexOf(' ') !== -1)
                    return this.message().no_space_domain;
                const domains = parts[1].split('.');
                if (domains.length < 2)
                    return this.message().no_tld;
                if (!domains.every(Boolean))
                    return this.message().dots_inside;
                return '';
            }
            color(next) {
                return $mol_state_local.value(this.state_key('color'), next) || '';
            }
            sex(next) {
                return $mol_state_local.value(this.state_key('sex'), next) || '';
            }
            sex_bid() {
                if (!this.sex())
                    return this.message().required;
                return '';
            }
            age(next) {
                return $mol_state_local.value(this.state_key('age'), next) || 0;
            }
            age_bid() {
                if (this.age() < 18)
                    return this.message().adult;
                return '';
            }
            signup(next) {
                this.result(`Hello, ${this.sex()} ${this.name_first()} (${this.name_nick()}) ${this.name_second()} from  ${this.mail()}!`);
            }
        }
        $$.$mol_form_demo = $mol_form_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/form/demo/demo.view.css", "[mol_form_demo] {\n\twidth: 80rem;\n\tflex-direction: column;\n}\n");
})($ || ($ = {}));

;
	($.$mol_form_draft) = class $mol_form_draft extends ($.$mol_form) {
		model(){
			const obj = new this.$.$mol_object2();
			return obj;
		}
		changed(){
			return false;
		}
		value_str(id, next){
			if(next !== undefined) return next;
			return "";
		}
		value_bool(id, next){
			if(next !== undefined) return next;
			return false;
		}
		value_number(id, next){
			if(next !== undefined) return next;
			return 0;
		}
		dictionary_bool(id, next){
			if(next !== undefined) return next;
			return {};
		}
		list_string(id, next){
			if(next !== undefined) return next;
			return [];
		}
		value_changed(id){
			return false;
		}
		reset(next){
			if(next !== undefined) return next;
			return null;
		}
	};
	($mol_mem(($.$mol_form_draft.prototype), "model"));
	($mol_mem_key(($.$mol_form_draft.prototype), "value_str"));
	($mol_mem_key(($.$mol_form_draft.prototype), "value_bool"));
	($mol_mem_key(($.$mol_form_draft.prototype), "value_number"));
	($mol_mem_key(($.$mol_form_draft.prototype), "dictionary_bool"));
	($mol_mem_key(($.$mol_form_draft.prototype), "list_string"));
	($mol_mem(($.$mol_form_draft.prototype), "reset"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        function norm_string(val) {
            return String(val ?? '');
        }
        function norm_number(val) {
            return Number(val ?? 0);
        }
        function norm_bool(val) {
            return Boolean(val ?? false);
        }
        function normalize_val(prev, next) {
            switch (typeof prev) {
                case 'boolean': return String(next) === 'true';
                case 'number': return Number(next);
                case 'string': return String(next);
            }
            return next;
        }
        class $mol_form_draft extends $.$mol_form_draft {
            list_string(field, next) {
                return this.value(field, next)?.map(norm_string) ?? [];
            }
            dictionary_bool(field, next) {
                if (next) {
                    const prev = this.model_pick(field);
                    const normalized = {};
                    for (const key in next) {
                        if (next[key] || key in prev)
                            normalized[key] = next[key];
                    }
                    return this.value(field, normalized) ?? {};
                }
                return this.value(field) ?? {};
            }
            value_str(field, next) {
                return norm_string(this.value(field, next));
            }
            value_number(field, next) {
                return norm_number(this.value(field, next));
            }
            value_bool(field, next) {
                return norm_bool(this.value(field, next));
            }
            model_pick(field, next) {
                return this.model()[field](next);
            }
            state_pick(field, next) {
                return this.state(next === undefined ? next : { ...this.state(), [field]: next })[field];
            }
            value(field, next) {
                if (Array.isArray(next) && next.length === 0 && !this.model_pick(field))
                    next = null;
                return this.state_pick(field, next) ?? this.model_pick(field);
            }
            value_changed(field) {
                const next = this.state_pick(field);
                const prev = this.model_pick(field);
                const next_norm = normalize_val(prev, next);
                return !$mol_compare_deep(next_norm, prev);
            }
            state(next) {
                return $mol_state_local.value(`${this}.state()`, next) ?? {};
            }
            changed() {
                return Object.keys(this.state()).some(field => this.value_changed(field));
            }
            submit_allowed() {
                return this.changed() && super.submit_allowed();
            }
            reset(next) {
                this.state(null);
            }
            submit(next) {
                const tasks = Object.entries(this.state()).map(([field, next]) => () => {
                    const prev = this.model_pick(field);
                    return {
                        field,
                        next: normalize_val(prev, next)
                    };
                });
                const normalized = $mol_wire_race(...tasks);
                $mol_wire_race(...normalized.map(({ field, next }) => () => this.model_pick(field, next)));
                this.reset();
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_form_draft.prototype, "list_string", null);
        __decorate([
            $mol_mem_key
        ], $mol_form_draft.prototype, "dictionary_bool", null);
        __decorate([
            $mol_mem_key
        ], $mol_form_draft.prototype, "value_str", null);
        __decorate([
            $mol_mem_key
        ], $mol_form_draft.prototype, "value_number", null);
        __decorate([
            $mol_mem_key
        ], $mol_form_draft.prototype, "value_bool", null);
        __decorate([
            $mol_mem_key
        ], $mol_form_draft.prototype, "value", null);
        __decorate([
            $mol_mem_key
        ], $mol_form_draft.prototype, "value_changed", null);
        __decorate([
            $mol_mem
        ], $mol_form_draft.prototype, "state", null);
        __decorate([
            $mol_mem
        ], $mol_form_draft.prototype, "changed", null);
        __decorate([
            $mol_action
        ], $mol_form_draft.prototype, "submit", null);
        $$.$mol_form_draft = $mol_form_draft;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/form/draft/draft.view.css", "[mol_form_draft] {\n\twidth: 100%;\n}\n");
})($ || ($ = {}));

;
	($.$mol_form_draft_demo_article) = class $mol_form_draft_demo_article extends ($.$mol_object2) {
		title(next){
			if(next !== undefined) return next;
			return "";
		}
		type(next){
			if(next !== undefined) return next;
			return "";
		}
		adult(next){
			if(next !== undefined) return next;
			return false;
		}
		content(next){
			if(next !== undefined) return next;
			return "";
		}
		friends(next){
			if(next !== undefined) return next;
			return [];
		}
		hobbies(next){
			if(next !== undefined) return next;
			return {};
		}
	};
	($mol_mem(($.$mol_form_draft_demo_article.prototype), "title"));
	($mol_mem(($.$mol_form_draft_demo_article.prototype), "type"));
	($mol_mem(($.$mol_form_draft_demo_article.prototype), "adult"));
	($mol_mem(($.$mol_form_draft_demo_article.prototype), "content"));
	($mol_mem(($.$mol_form_draft_demo_article.prototype), "friends"));
	($mol_mem(($.$mol_form_draft_demo_article.prototype), "hobbies"));
	($.$mol_form_draft_demo) = class $mol_form_draft_demo extends ($.$mol_example) {
		model(){
			const obj = new this.$.$mol_form_draft_demo_article();
			return obj;
		}
		publish(next){
			return (this.Form().submit(next));
		}
		publish_allowed(){
			return (this.Form().submit_allowed());
		}
		value_str(id, next){
			return (this.Form().value_str(id, next));
		}
		list_string(id, next){
			return (this.Form().list_string(id, next));
		}
		dictionary_bool(id, next){
			return (this.Form().dictionary_bool(id, next));
		}
		changed(){
			return (this.Form().changed());
		}
		reset(next){
			return (this.Form().reset(next));
		}
		Title(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ("How I spent the summer..");
			(obj.value) = (next) => ((this.value_str("title", next)));
			return obj;
		}
		Title_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Title");
			(obj.bids) = () => ([(this.bid_swearing("title")), (this.bid_short("title"))]);
			(obj.Content) = () => ((this.Title()));
			return obj;
		}
		Type(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.value_str("type", next)));
			(obj.options) = () => ({
				"article": "Article", 
				"news": "News", 
				"question": "Question"
			});
			return obj;
		}
		Type_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Type");
			(obj.bids) = () => ([(this.bid_required("type"))]);
			(obj.Content) = () => ((this.Type()));
			return obj;
		}
		Adult(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.value_str("adult", next)));
			(obj.options) = () => ({"false": "No", "true": "Yes"});
			return obj;
		}
		Adult_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Adult only");
			(obj.Content) = () => ((this.Adult()));
			return obj;
		}
		Content(){
			const obj = new this.$.$mol_textarea();
			(obj.hint) = () => ("Long long story..");
			(obj.value) = (next) => ((this.value_str("content", next)));
			return obj;
		}
		Content_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Content");
			(obj.bids) = () => ([(this.bid_swearing("content")), (this.bid_long("content"))]);
			(obj.Content) = () => ((this.Content()));
			return obj;
		}
		Hobbies(){
			const obj = new this.$.$mol_check_list();
			(obj.dictionary) = (next) => ((this.dictionary_bool("hobbies", next)));
			(obj.options) = () => ({
				"programming": "Programming", 
				"bikinkg": "Biking", 
				"fishing": "Fishing"
			});
			return obj;
		}
		Hobbies_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Hobbies");
			(obj.Content) = () => ((this.Hobbies()));
			return obj;
		}
		Friends(){
			const obj = new this.$.$mol_select_list();
			(obj.dictionary) = () => ({
				"jocker": "Jocker", 
				"harley": "Harley Quinn", 
				"penguin": "Penguin", 
				"riddler": "Riddler", 
				"bane": "Bane", 
				"freeze": "Mister Freeze", 
				"clay": "Clayface", 
				"mask": "Black Mask"
			});
			(obj.value) = (next) => ((this.list_string("friends", next)));
			return obj;
		}
		Friends_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Friends");
			(obj.Content) = () => ((this.Friends()));
			return obj;
		}
		Config(){
			const obj = new this.$.$mol_form_group();
			(obj.sub) = () => ([(this.Adult_field()), (this.Type_field())]);
			return obj;
		}
		form_body(){
			return [
				(this.Title_field()), 
				(this.Config()), 
				(this.Content_field()), 
				(this.Friends_field())
			];
		}
		Publish(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Publish");
			(obj.click) = (next) => ((this.publish(next)));
			(obj.enabled) = () => ((this.publish_allowed()));
			return obj;
		}
		result(next){
			if(next !== undefined) return next;
			return "";
		}
		Result(){
			const obj = new this.$.$mol_status();
			(obj.message) = () => ((this.result()));
			return obj;
		}
		Reset(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Сбросить");
			(obj.click) = (next) => ((this.reset(next)));
			(obj.enabled) = () => ((this.changed()));
			return obj;
		}
		Form(){
			const obj = new this.$.$mol_form_draft();
			(obj.model) = () => ((this.model()));
			(obj.form_fields) = () => ([
				(this.Title_field()), 
				(this.Type_field()), 
				(this.Adult_field()), 
				(this.Content_field()), 
				(this.Hobbies_field()), 
				(this.Friends_field())
			]);
			(obj.body) = () => ((this.form_body()));
			(obj.buttons) = () => ([
				(this.Publish()), 
				(this.Result()), 
				(this.Reset())
			]);
			return obj;
		}
		title(){
			return "Article draft form demo";
		}
		message_done(){
			return "Done";
		}
		bid_required(id){
			return "Required";
		}
		bid_swearing(id){
			return "No swearing";
		}
		bid_short(id){
			return "> 5 letters";
		}
		bid_long(id){
			return "> 100 letters";
		}
		sub(){
			return [(this.Form())];
		}
		tags(){
			return [
				"$mol_form_field", 
				"$mol_button", 
				"$mol_string", 
				"$mol_switch", 
				"form", 
				"bids", 
				"validation", 
				"field"
			];
		}
		aspects(){
			return ["Widget/Form"];
		}
	};
	($mol_mem(($.$mol_form_draft_demo.prototype), "model"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Title"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Title_field"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Type"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Type_field"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Adult"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Adult_field"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Content"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Content_field"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Hobbies"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Hobbies_field"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Friends"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Friends_field"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Config"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Publish"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "result"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Result"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Reset"));
	($mol_mem(($.$mol_form_draft_demo.prototype), "Form"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_form_draft_demo extends $.$mol_form_draft_demo {
            form_body() {
                return [
                    this.Title_field(),
                    this.Config(),
                    this.Hobbies_field(),
                    ...this.value_str('type') ? [this.Content_field()] : [],
                    this.Friends_field(),
                ];
            }
            bid_required(field) {
                return this.value_str(field) ? '' : super.bid_required(field);
            }
            bid_short(field) {
                return this.value_str(field).length > 5 ? '' : super.bid_short(field);
            }
            bid_long(field) {
                return this.value_str(field).length > 100 ? '' : super.bid_long(field);
            }
            bid_swearing(field) {
                return /\bfuck/.test(this.value_str(field)) ? super.bid_swearing(field) : '';
            }
            result(next = '') {
                this.changed();
                return next;
            }
            publish() {
                super.publish();
                this.result(this.message_done());
            }
        }
        __decorate([
            $mol_mem
        ], $mol_form_draft_demo.prototype, "form_body", null);
        __decorate([
            $mol_mem_key
        ], $mol_form_draft_demo.prototype, "bid_required", null);
        __decorate([
            $mol_mem_key
        ], $mol_form_draft_demo.prototype, "bid_short", null);
        __decorate([
            $mol_mem_key
        ], $mol_form_draft_demo.prototype, "bid_long", null);
        __decorate([
            $mol_mem_key
        ], $mol_form_draft_demo.prototype, "bid_swearing", null);
        __decorate([
            $mol_mem
        ], $mol_form_draft_demo.prototype, "result", null);
        __decorate([
            $mol_action
        ], $mol_form_draft_demo.prototype, "publish", null);
        $$.$mol_form_draft_demo = $mol_form_draft_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_phone) = class $mol_phone extends ($.$mol_format) {
		mask(id){
			return "+___ (___) ___-__-__";
		}
		keyboard(){
			return "tel";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $$.$mol_phone_formats = {
            '': '+___________',
            '1': '+_ (___) ___-__-__ ',
            '27': '+__ (__) ___-__-__ ',
            '212': '+___ (___) __-__-__ ',
            '253': '+___ (__) __-__-__ ',
            '254': '+___ (___) __-__-__ ',
            '30': '+__ (___) ___-__-__ ',
            '31': '+__ (__) ____ ____ ',
            '32': '+__ (___) __-__-__ ',
            '33': '+__ _ __-__-__-__ ',
            '34': '+__ ___-___-___ ',
            '36': '+__ __ ___ ___ ',
            '351': '+___ ___ ___ ___ ',
            '353': '+___ _____ ',
            '354': '+___ ___ __ __ ',
            '358': '+___ (___) _ ___-___ ',
            '380': '+___ (__) ___ __ __ ',
            '39': '+__ (___) ___-__-__ ',
            '40': '+__-___-___-___ ',
            '41': '+__ (__) ___-__-__ ',
            '44': '+__ (___) ____ ____ ',
            '45': '+__ __-__-__-__ ',
            '46': '+__ ___-___ __ __ ',
            '47': '+__ __-__-__-__ ',
            '48': '+__ (____) __-__-__ ',
            '49': '+__ (__) ___-__-__ ',
            '52': '+__ ___ ___ ____ ',
            '60': '+__ (__) ____-____ ',
            '61': '+__ (___) ___-___ ',
            '63': '+__ (___) ___-__-__ ',
            '64': '+__ (__) ___-__-__ ',
            '65': '+__ ____-____ ',
            '66': '+__ ____-____ ',
            '7': '+_ (___) ___-__-__ ',
            '81': '+__ (__) ___-__-__ ',
            '82': '+__ (___) ___-__-__ ',
            '86': '+__ (___) ____-____ ',
            '90': '+__ (___) ___-__-__ ',
            '91': '+__ ____-____ ',
            '92': '+__ (__) ____-____ ',
            '94': '+__ (___) ___-___ ',
            '98': '+__ (___) ___-__-__ ',
        };
        class $mol_phone extends $.$mol_phone {
            mask(val) {
                return $$.$mol_phone_formats[val.slice(0, 3)]
                    || $$.$mol_phone_formats[val.slice(0, 2)]
                    || $$.$mol_phone_formats[val.slice(0, 1)]
                    || $$.$mol_phone_formats[''];
            }
        }
        $$.$mol_phone = $mol_phone;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_format_demo) = class $mol_format_demo extends ($.$mol_example_small) {
		ip(next){
			if(next !== undefined) return next;
			return "";
		}
		Ip(){
			const obj = new this.$.$mol_format();
			(obj.mask) = () => ("___.___.___.___");
			(obj.value) = (next) => ((this.ip(next)));
			return obj;
		}
		Ip_card(){
			const obj = new this.$.$mol_card();
			(obj.status) = () => ((this.ip()));
			(obj.Content) = () => ((this.Ip()));
			return obj;
		}
		phone(next){
			if(next !== undefined) return next;
			return "";
		}
		Phone(){
			const obj = new this.$.$mol_phone();
			(obj.value) = (next) => ((this.phone(next)));
			return obj;
		}
		Phone_card(){
			const obj = new this.$.$mol_card();
			(obj.status) = () => ((this.phone()));
			(obj.Content) = () => ((this.Phone()));
			return obj;
		}
		card(next){
			if(next !== undefined) return next;
			return "";
		}
		Card(){
			const obj = new this.$.$mol_format();
			(obj.mask) = () => ("____ ____ ____ ____");
			(obj.value) = (next) => ((this.card(next)));
			return obj;
		}
		Card_card(){
			const obj = new this.$.$mol_card();
			(obj.status) = () => ((this.card()));
			(obj.Content) = () => ((this.Card()));
			return obj;
		}
		moment(next){
			if(next !== undefined) return next;
			return "";
		}
		Moment(){
			const obj = new this.$.$mol_format();
			(obj.mask) = () => ("__.__.____ __:__");
			(obj.value) = (next) => ((this.moment(next)));
			return obj;
		}
		Moment_card(){
			const obj = new this.$.$mol_card();
			(obj.status) = () => ((this.moment()));
			(obj.Content) = () => ((this.Moment()));
			return obj;
		}
		title(){
			return "Formatted string input/output";
		}
		sub(){
			return [
				(this.Ip_card()), 
				(this.Phone_card()), 
				(this.Card_card()), 
				(this.Moment_card())
			];
		}
		tags(){
			return [
				"phone", 
				"ip", 
				"car", 
				"datetime", 
				"input"
			];
		}
		aspects(){
			return ["Widget/Control", "Type/String"];
		}
	};
	($mol_mem(($.$mol_format_demo.prototype), "ip"));
	($mol_mem(($.$mol_format_demo.prototype), "Ip"));
	($mol_mem(($.$mol_format_demo.prototype), "Ip_card"));
	($mol_mem(($.$mol_format_demo.prototype), "phone"));
	($mol_mem(($.$mol_format_demo.prototype), "Phone"));
	($mol_mem(($.$mol_format_demo.prototype), "Phone_card"));
	($mol_mem(($.$mol_format_demo.prototype), "card"));
	($mol_mem(($.$mol_format_demo.prototype), "Card"));
	($mol_mem(($.$mol_format_demo.prototype), "Card_card"));
	($mol_mem(($.$mol_format_demo.prototype), "moment"));
	($mol_mem(($.$mol_format_demo.prototype), "Moment"));
	($mol_mem(($.$mol_format_demo.prototype), "Moment_card"));


;
"use strict";

;
	($.$mol_frame_demo) = class $mol_frame_demo extends ($.$mol_example_large) {
		Frame(){
			const obj = new this.$.$mol_frame();
			(obj.title) = () => ("Another page inside that");
			(obj.uri) = () => ("https://mol.hyoo.ru/");
			return obj;
		}
		sub(){
			return [(this.Frame())];
		}
		tags(){
			return ["iframe", "container"];
		}
		aspects(){
			return ["Widget/Integration", "Widget/Island"];
		}
	};
	($mol_mem(($.$mol_frame_demo.prototype), "Frame"));


;
"use strict";

;
	($.$mol_gallery_demo) = class $mol_gallery_demo extends ($.$mol_example) {
		items(){
			return [];
		}
		App(){
			const obj = new this.$.$mol_gallery();
			(obj.items) = () => ((this.items()));
			return obj;
		}
		item_title(id){
			return "";
		}
		Item_image(id){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.item_title(id)));
			return obj;
		}
		title(){
			return "Gallery of cards";
		}
		count(){
			return 101;
		}
		sub(){
			return [(this.App())];
		}
		Item(id){
			const obj = new this.$.$mol_stack();
			(obj.sub) = () => ([(this.Item_image(id))]);
			return obj;
		}
		tags(){
			return [
				"gallery", 
				"image", 
				"adaptive", 
				"masonry"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_gallery_demo.prototype), "App"));
	($mol_mem_key(($.$mol_gallery_demo.prototype), "Item_image"));
	($mol_mem_key(($.$mol_gallery_demo.prototype), "Item"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_gallery_demo extends $.$mol_gallery_demo {
            items() {
                return Array.from({ length: this.count() }, (_, id) => this.Item(id));
            }
            item_title(id) {
                return String(id);
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_gallery_demo.prototype, "item_title", null);
        $$.$mol_gallery_demo = $mol_gallery_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/gallery/demo/demo.view.css", "[mol_gallery_demo_item] {\n\tmargin: var(--mol_gap_block);\n\tflex: 1 1 auto;\n\tflex-direction: column;\n\tposition: relative;\n\taspect-ratio: 1;\n\tbackground-size: cover;\n\tborder-radius: var(--mol_gap_round);\n\toverflow: hidden;\n}\n\n[mol_gallery_demo_item]:hover {\n\topacity: .9;\n}\n\n[mol_gallery_demo_item_image] {\n\talign-self: stretch;\n\tjustify-self: stretch;\n\twidth: auto;\n\theight: auto;\n}\n");
})($ || ($ = {}));

;
	($.$mol_html_view) = class $mol_html_view extends ($.$mol_list) {
		heading_level(id){
			return 1;
		}
		content(id){
			return [];
		}
		link_uri(id){
			return "";
		}
		image_uri(id){
			return "";
		}
		highlight(){
			return "";
		}
		text(id){
			return "";
		}
		html(){
			return "";
		}
		dom(){
			return null;
		}
		safe_link(id){
			return "";
		}
		views(id){
			return [];
		}
		xss_uri(){
			return "https://en.wikipedia.org/wiki/XSS#";
		}
		Heading(id){
			const obj = new this.$.$mol_html_view_heading();
			(obj.level) = () => ((this.heading_level(id)));
			(obj.sub) = () => ((this.content(id)));
			return obj;
		}
		Paragraph(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ((this.content(id)));
			return obj;
		}
		List(id){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.content(id)));
			return obj;
		}
		Quote(id){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.content(id)));
			return obj;
		}
		Strong(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ((this.content(id)));
			return obj;
		}
		Emphasis(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ((this.content(id)));
			return obj;
		}
		Deleted(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ((this.content(id)));
			return obj;
		}
		Inserted(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ((this.content(id)));
			return obj;
		}
		Subscript(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.content(id)));
			return obj;
		}
		Superscript(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.content(id)));
			return obj;
		}
		Code(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ((this.content(id)));
			return obj;
		}
		Link(id){
			const obj = new this.$.$mol_link_iconed();
			(obj.uri) = () => ((this.link_uri(id)));
			(obj.content) = () => ((this.content(id)));
			return obj;
		}
		Image(id){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.image_uri(id)));
			return obj;
		}
		Break(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ([]);
			return obj;
		}
		Text(id){
			const obj = new this.$.$mol_dimmer();
			(obj.needle) = () => ((this.highlight()));
			(obj.haystack) = () => ((this.text(id)));
			return obj;
		}
	};
	($mol_mem_key(($.$mol_html_view.prototype), "Heading"));
	($mol_mem_key(($.$mol_html_view.prototype), "Paragraph"));
	($mol_mem_key(($.$mol_html_view.prototype), "List"));
	($mol_mem_key(($.$mol_html_view.prototype), "Quote"));
	($mol_mem_key(($.$mol_html_view.prototype), "Strong"));
	($mol_mem_key(($.$mol_html_view.prototype), "Emphasis"));
	($mol_mem_key(($.$mol_html_view.prototype), "Deleted"));
	($mol_mem_key(($.$mol_html_view.prototype), "Inserted"));
	($mol_mem_key(($.$mol_html_view.prototype), "Subscript"));
	($mol_mem_key(($.$mol_html_view.prototype), "Superscript"));
	($mol_mem_key(($.$mol_html_view.prototype), "Code"));
	($mol_mem_key(($.$mol_html_view.prototype), "Link"));
	($mol_mem_key(($.$mol_html_view.prototype), "Image"));
	($mol_mem_key(($.$mol_html_view.prototype), "Break"));
	($mol_mem_key(($.$mol_html_view.prototype), "Text"));
	($.$mol_html_view_heading) = class $mol_html_view_heading extends ($.$mol_paragraph) {
		level(){
			return 1;
		}
		attr(){
			return {...(super.attr()), "mol_html_view_heading": (this.level())};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    const { rem } = $mol_style_unit;
    $mol_style_define($mol_html_view, {
        Heading: {
            padding: $mol_gap.text,
            textShadow: '0 0',
            '@': {
                'mol_html_view_heading': {
                    '1': {
                        font: {
                            size: rem(1.5),
                        },
                    },
                    '2': {
                        font: {
                            size: rem(1.5),
                            style: 'italic',
                        },
                    },
                    '3': {
                        font: {
                            size: rem(1.25),
                        },
                    },
                    '4': {
                        font: {
                            size: rem(1.25),
                            style: 'italic',
                        },
                    },
                    '5': {
                        font: {
                            size: rem(1),
                        },
                    },
                    '6': {
                        font: {
                            size: rem(1),
                            style: 'italic',
                        },
                    },
                },
            },
        },
        Paragraph: {
            display: 'block',
            flex: {
                wrap: 'wrap',
            },
            padding: $mol_gap.text,
        },
        List: {
            display: 'block',
            flex: {
                wrap: 'wrap',
            },
            padding: $mol_gap.block,
        },
        Quote: {
            display: 'block',
            flex: {
                'wrap': 'wrap',
            },
            padding: $mol_gap.block,
            margin: {
                left: rem(.75),
            },
            box: {
                shadow: [{
                        inset: true,
                        x: rem(.25),
                        y: 0,
                        blur: 0,
                        spread: 0,
                        color: $mol_theme.line,
                    }],
            },
        },
        Strong: {
            display: 'inline',
            textShadow: '0 0',
        },
        Emphasis: {
            display: 'inline',
            font: {
                style: 'italic',
            },
        },
        Deleted: {
            display: 'inline',
            color: $mol_theme.shade,
        },
        Inserted: {
            display: 'inline',
            color: $mol_theme.special,
        },
        Subscript: {
            font: {
                size: '.75em',
            },
            position: 'relative',
            bottom: '-0.5em',
        },
        Superscript: {
            font: {
                size: '.75em',
            },
            position: 'relative',
            top: '-0.25em',
        },
        Link: {
            margin: rem(-.5),
        },
        Code: {
            display: 'inline',
            font: {
                family: 'monospace',
            },
            whiteSpace: 'pre-wrap',
        },
        Image: {
            display: 'inline-block',
        },
        Break: {
            display: 'block',
            height: $mol_gap.block,
        },
        Text: {
            display: 'inline',
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const warned = new Set();
        class $mol_html_view extends $.$mol_html_view {
            dom() {
                return this.$.$mol_dom_parse(this.html(), 'text/html').body;
            }
            sub() {
                return this.content(this.dom());
            }
            content(node) {
                const res = [];
                for (const child of node.childNodes) {
                    res.push(...this.views(child));
                }
                return res;
            }
            views(node) {
                switch (node.nodeName) {
                    case '#comment':
                        return [];
                    case '#text':
                    case '#cdata-section':
                        if (!node.textContent.trim())
                            return [];
                        return [this.Text(node)];
                    case 'H1':
                    case 'H2':
                    case 'H3':
                    case 'H4':
                    case 'H5':
                    case 'H6':
                        return [this.Heading(node)];
                    case 'P':
                    case 'LI':
                    case 'PRE':
                    case 'DIV':
                        return [this.Paragraph(node)];
                    case 'UL':
                    case 'OL':
                        return [this.List(node)];
                    case 'BLOCKQUOTE':
                        return [this.Quote(node)];
                    case 'STRONG':
                    case 'B':
                        return [this.Strong(node)];
                    case 'EM':
                    case 'I':
                        return [this.Emphasis(node)];
                    case 'DEL':
                    case 'S':
                        return [this.Deleted(node)];
                    case 'INS':
                    case 'U':
                        return [this.Inserted(node)];
                    case 'SUB':
                        return [this.Subscript(node)];
                    case 'SUP':
                        return [this.Superscript(node)];
                    case 'A':
                        return [this.Link(node)];
                    case 'PRE':
                    case 'CODE':
                        return [this.Code(node)];
                    case 'IMG':
                        return [this.Image(node)];
                    case 'BR':
                        return [this.Break(node)];
                    default:
                        if (!warned.has(node.nodeName)) {
                            this.$.$mol_log3_warn({
                                place: `${this}.views()`,
                                message: 'Unsupported tag',
                                tag: node.nodeName,
                                hint: 'Add support to $mol_html_view',
                            });
                            warned.add(node.nodeName);
                        }
                        return this.content(node);
                }
            }
            text(node) {
                return node.textContent ?? '???';
            }
            safe_link(uri) {
                const base = $mol_dom_context.location.href;
                const url = new $mol_dom_context.URL(uri, base);
                if (/^\w*script:/i.test(url.protocol)) {
                    return this.xss_uri() + uri;
                }
                return uri;
            }
            link_uri(node) {
                return this.safe_link(node.href);
            }
            image_uri(node) {
                return this.safe_link(node.src);
            }
            heading_level(node) {
                return Number(node.nodeName.substring(1));
            }
        }
        __decorate([
            $mol_mem
        ], $mol_html_view.prototype, "dom", null);
        __decorate([
            $mol_mem_key
        ], $mol_html_view.prototype, "content", null);
        $$.$mol_html_view = $mol_html_view;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_html_view_demo) = class $mol_html_view_demo extends ($.$mol_example) {
		Html(){
			const obj = new this.$.$mol_html_view();
			(obj.html) = () => (" <h1>HTML Example</h1>\n <h2>Headings</h2>\n \t<h3>Level 3</h3>\n \t<h4>Level 4</h4>\n \t<h5>Level 5</h5>\n \t<h6>Level 6</h6>\n <h2>Inline elements</h2>\n <p>\n \t<strong>strong</strong>,\n \t<em>emphasis</em>,\n \t<ins>inserted</ins>,\n \t<del>deleted</del>,\n \t<br />\n \t<b>bold</b>,\n \t<i>italic</i>,\n \t<u>underlined</u>,\n \t<s>strikethrough</s>,\n \t<br />\n \t<code>code</code>,\n \t<a href=\"#\">safe link</a>,\n \t<a href=\"javascript:alert(1)\">unsafe link</a>,\n \tnormal text.\n </p>\n <h2>Media elements</h2>\n <p>\n \t<img src=\"https://mol.hyoo.ru/mol/logo/logo.svg\" />\n </p>\n <h2>Block elements</h2>\n <blockquote><p>Block quotation</p></blockquote>\n <pre><code>Block code</code></pre>");
			return obj;
		}
		title(){
			return "View raw HTML";
		}
		sub(){
			return [(this.Html())];
		}
		tags(){
			return ["html", "render"];
		}
		aspects(){
			return ["Widget", "Type/HTML"];
		}
	};
	($mol_mem(($.$mol_html_view_demo.prototype), "Html"));


;
"use strict";

;
	($.$mol_infinite) = class $mol_infinite extends ($.$mol_list) {
		before_load(id){
			return null;
		}
		after_load(id){
			return null;
		}
		before(id){
			return [];
		}
		after(id){
			return [];
		}
		row_ids(next){
			if(next !== undefined) return next;
			return [];
		}
		render_over(){
			return 1;
		}
		Row(id){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Before(id){
			const obj = new this.$.$mol_view();
			(obj.minimal_width) = () => (0);
			(obj.minimal_height) = () => (0);
			(obj.sub) = () => ([(this.before_load(id))]);
			return obj;
		}
		After(id){
			const obj = new this.$.$mol_view();
			(obj.minimal_width) = () => (0);
			(obj.minimal_height) = () => (0);
			(obj.sub) = () => ([(this.after_load(id))]);
			return obj;
		}
	};
	($mol_mem(($.$mol_infinite.prototype), "row_ids"));
	($mol_mem_key(($.$mol_infinite.prototype), "Row"));
	($mol_mem_key(($.$mol_infinite.prototype), "Before"));
	($mol_mem_key(($.$mol_infinite.prototype), "After"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_infinite extends $.$mol_infinite {
            before_load(anchor) {
                const more = this.before(anchor);
                new $mol_after_tick(() => {
                    let ids = this.row_ids();
                    const index = Math.max(0, ids.indexOf(anchor));
                    const unique = new Set([
                        ...ids.slice(0, index),
                        ...more,
                        ...ids.slice(index),
                    ]);
                    this.row_ids([...unique]);
                });
            }
            after_load(anchor) {
                const more = this.after(anchor);
                new $mol_after_tick(() => {
                    let ids = this.row_ids();
                    const index = (ids.indexOf(anchor) + 1) || ids.length;
                    const unique = new Set([
                        ...ids.slice(0, index),
                        ...more,
                        ...ids.slice(index),
                    ]);
                    this.row_ids([...unique]);
                });
            }
            rows() {
                const ids = this.row_ids();
                return [
                    this.Before(ids.at(0) ?? null),
                    ...ids.map(id => this.Row(id)),
                    this.After(ids.at(-1) ?? null),
                ];
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_infinite.prototype, "before_load", null);
        __decorate([
            $mol_mem_key
        ], $mol_infinite.prototype, "after_load", null);
        __decorate([
            $mol_mem
        ], $mol_infinite.prototype, "rows", null);
        $$.$mol_infinite = $mol_infinite;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/infinite/infinite.view.css", "[mol_infinite_before],\n[mol_infinite_after] {\n\toverflow-anchor: none;\n\tborder-radius: var(--mol_gap_round);\n}\n\n[mol_infinite_after]:where([mol_view_error=\"Promise\"]) {\n\theight: 100vh;\n}\n");
})($ || ($ = {}));

;
	($.$mol_infinite_demo) = class $mol_infinite_demo extends ($.$mol_example_large) {
		before(id){
			return [];
		}
		after(id){
			return [];
		}
		id(id){
			return "";
		}
		Photo(id){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.id(id)));
			return obj;
		}
		name(id){
			return "";
		}
		Name(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.name(id)));
			return obj;
		}
		city(id){
			return "";
		}
		City(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.city(id)));
			return obj;
		}
		Info(id){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Name(id)), (this.City(id))]);
			return obj;
		}
		Item(id){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Photo(id)), (this.Info(id))]);
			return obj;
		}
		List(){
			const obj = new this.$.$mol_infinite();
			(obj.before) = (id) => ((this.before(id)));
			(obj.after) = (id) => ((this.after(id)));
			(obj.Row) = (id) => ((this.Item(id)));
			return obj;
		}
		Scroll(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.List())]);
			return obj;
		}
		title(){
			return "Infinite list demo";
		}
		chunk_size(){
			return 20;
		}
		sub(){
			return [(this.Scroll())];
		}
		tags(){
			return [
				"avatar", 
				"infinite", 
				"scroll", 
				"virtual", 
				"container"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem_key(($.$mol_infinite_demo.prototype), "Photo"));
	($mol_mem_key(($.$mol_infinite_demo.prototype), "Name"));
	($mol_mem_key(($.$mol_infinite_demo.prototype), "City"));
	($mol_mem_key(($.$mol_infinite_demo.prototype), "Info"));
	($mol_mem_key(($.$mol_infinite_demo.prototype), "Item"));
	($mol_mem(($.$mol_infinite_demo.prototype), "List"));
	($mol_mem(($.$mol_infinite_demo.prototype), "Scroll"));


;
"use strict";
var $;
(function ($) {
    class $mol_unit extends $mol_object {
        'valueOf()';
        constructor(value) {
            super();
            if (value !== undefined)
                this['valueOf()'] = value;
        }
        prefix() {
            return '';
        }
        postfix() {
            return '';
        }
        [Symbol.toPrimitive](hint) {
            switch (hint) {
                case 'number': return this.valueOf();
                case 'string': return this.toString();
                default: return this.toString();
            }
        }
        valueOf() {
            return this['valueOf()'];
        }
        delimiter() {
            return ' ';
        }
        value_view() {
            return this.valueOf().toLocaleString();
        }
        toString() {
            return this.prefix() + this.value_view() + this.postfix();
        }
        static summ(a, b) {
            var Class = a.constructor;
            if (Class !== b.constructor)
                throw new Error(`Not same measure: ${Class} , ${b.constructor}`);
            return new Class(a.valueOf() + b.valueOf());
        }
        mult(m) {
            var Class = this.constructor;
            return new Class(this.valueOf() * m);
        }
    }
    $.$mol_unit = $mol_unit;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_unit_money extends $mol_unit {
    }
    $.$mol_unit_money = $mol_unit_money;
    class $mol_unit_money_usd extends $mol_unit_money {
        prefix() {
            return '$';
        }
    }
    $.$mol_unit_money_usd = $mol_unit_money_usd;
    class $mol_unit_money_rub extends $mol_unit_money {
        postfix() {
            return ' ₽';
        }
    }
    $.$mol_unit_money_rub = $mol_unit_money_rub;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_stub_strings(prefix = '', count = 10, length = 10) {
        if (prefix.length >= length)
            return [];
        let possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split('');
        let strings = [];
        for (let i = 0; i < count; i++) {
            let text = prefix;
            for (let j = prefix.length; j < length; j++) {
                text += $mol_array_lottery(possible);
            }
            strings.push(text);
        }
        return strings;
    }
    $.$mol_stub_strings = $mol_stub_strings;
    function $mol_stub_code(length = 8) {
        var max = Math.pow(16, length);
        var min = Math.pow(16, length - 1);
        var value = min + Math.floor(Math.random() * (max - min));
        return value.toString(16).toUpperCase();
    }
    $.$mol_stub_code = $mol_stub_code;
    function $mol_stub_price(max = 1000) {
        var min = Math.floor(max / 16 / 16);
        var value = min + Math.floor(Math.random() * (max - min));
        return new $mol_unit_money_usd(value);
    }
    $.$mol_stub_price = $mol_stub_price;
    function $mol_stub_product_name() {
        var name = $mol_array_lottery([
            'Monitor 15"',
            'Monitor 17"',
            'Monitor 19"',
            'Graphics card',
            'Frame grabber card'
        ]);
        var port = $mol_array_lottery(['D-SUB', 'DVI', 'HDMI']);
        var resolution = $mol_array_lottery(['VGA', 'Full HD', '4K']);
        return [name, port, resolution].join(', ');
    }
    $.$mol_stub_product_name = $mol_stub_product_name;
    function $mol_stub_company_name_big() {
        var product = $mol_array_lottery(['Everything', 'Something', 'Anything', 'Nothing']);
        var type = $mol_array_lottery(['Company', 'Corporation', 'Holding']);
        return `A ${type} that makes ${product}`;
    }
    $.$mol_stub_company_name_big = $mol_stub_company_name_big;
    function $mol_stub_company_name_small() {
        return $mol_array_lottery(['ACME inc.', 'Dream Company', 'Just Company']);
    }
    $.$mol_stub_company_name_small = $mol_stub_company_name_small;
    function $mol_stub_company_name() {
        return $mol_array_lottery([$mol_stub_company_name_small, $mol_stub_company_name_big])();
    }
    $.$mol_stub_company_name = $mol_stub_company_name;
    function $mol_stub_person_name() {
        var first = $mol_array_lottery(['Ivan', 'Petr', 'Sidor', 'John', 'Sam']);
        var last = $mol_array_lottery(['Ivanov', 'Petrov', 'Sidorov', 'Johnson', 'Smith']);
        return `${first} ${last}`;
    }
    $.$mol_stub_person_name = $mol_stub_person_name;
    function $mol_stub_person_avatar(size = 80) {
        const id = Math.random().toString(16).slice(2);
        return `https://gravatar.com/avatar/${id}?d=robohash&s=${size}`;
    }
    $.$mol_stub_person_avatar = $mol_stub_person_avatar;
    function $mol_stub_city() {
        return $mol_array_lottery(['Moscow', 'London', 'Washington', 'Buenos Aires']);
    }
    $.$mol_stub_city = $mol_stub_city;
    function $mol_stub_time(maxShift = 60 * 24 * 365) {
        return new $mol_time_moment().shift({ minute: Math.round(Math.random() * maxShift) });
    }
    $.$mol_stub_time = $mol_stub_time;
    function $mol_stub_message(max_length) {
        const text = ' Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem. Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.';
        return text.substring(0, Math.ceil(Math.random() * max_length - 5) + 5);
    }
    $.$mol_stub_message = $mol_stub_message;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_infinite_demo extends $.$mol_infinite_demo {
            after(anchor_id) {
                this.$.$mol_wait_timeout(1000);
                return Array.from({ length: this.chunk_size() }, (_, index) => (anchor_id ?? 0) + index + 1);
            }
            id(index) {
                return String(index);
            }
            name(index) {
                $mol_wire_solid();
                return $mol_stub_person_name();
            }
            city(index) {
                $mol_wire_solid();
                return $mol_stub_city();
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_infinite_demo.prototype, "after", null);
        __decorate([
            $mol_mem_key
        ], $mol_infinite_demo.prototype, "name", null);
        __decorate([
            $mol_mem_key
        ], $mol_infinite_demo.prototype, "city", null);
        $$.$mol_infinite_demo = $mol_infinite_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/infinite/demo/demo.view.css", "[mol_infinite_demo_list] {\n\tflex: 1 0 auto;\n}\n\n[mol_infinite_demo_photo] {\n\twidth: 3rem;\n\theight: 3rem;\n\tbackground: var(--mol_theme_card);\n}\n\n[mol_infinite_demo_city] {\n\tcolor: var(--mol_theme_shade);\n}\n");
})($ || ($ = {}));

;
	($.$mol_labeler_demo) = class $mol_labeler_demo extends ($.$mol_example_small) {
		Provider(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Provider");
			(obj.content) = () => (["ACME Provider Inc."]);
			return obj;
		}
		user_name(next){
			if(next !== undefined) return next;
			return "";
		}
		Name_control(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ("Jack Sparrow");
			(obj.value) = (next) => ((this.user_name(next)));
			return obj;
		}
		Name(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("User name");
			(obj.Content) = () => ((this.Name_control()));
			return obj;
		}
		title(){
			return "Labeled content of some types";
		}
		sub(){
			return [(this.Provider()), (this.Name())];
		}
		tags(){
			return [
				"label", 
				"form", 
				"field", 
				"caption"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_labeler_demo.prototype), "Provider"));
	($mol_mem(($.$mol_labeler_demo.prototype), "user_name"));
	($mol_mem(($.$mol_labeler_demo.prototype), "Name_control"));
	($mol_mem(($.$mol_labeler_demo.prototype), "Name"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    let $mol_layout_break;
    (function ($mol_layout_break) {
        $mol_layout_break["taboo"] = "taboo";
        $mol_layout_break["allow"] = "allow";
        $mol_layout_break["force"] = "force";
    })($mol_layout_break = $.$mol_layout_break || ($.$mol_layout_break = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_layout extends $mol_object {
        ortho = null;
        pos = 0;
        size = 0;
        min = 0;
        max = 0;
        base = 0;
        break_before() { return $mol_layout_break.allow; }
        break_after() { return $mol_layout_break.allow; }
        before() { return 0; }
        after() { return 0; }
        padding() { return this.before() + this.after(); }
        limit() { return this.size - this.padding(); }
        grow() { return Math.max(0, this.max - this.min); }
        shrink() { return this.min || 1; }
        up() { }
        down() { }
        fresh() {
            this.up();
            this.down();
            this.ortho?.fresh();
        }
    }
    $.$mol_layout = $mol_layout;
})($ || ($ = {}));

;
	($.$mol_canvas) = class $mol_canvas extends ($.$mol_view) {
		width(){
			return 0;
		}
		height(){
			return 0;
		}
		dom_name(){
			return "canvas";
		}
		context(){
			const obj = new this.$.CanvasRenderingContext2D();
			return obj;
		}
		field(){
			return {
				...(super.field()), 
				"width": (this.width()), 
				"height": (this.height())
			};
		}
		paint(){
			return null;
		}
	};
	($mol_mem(($.$mol_canvas.prototype), "context"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_canvas extends $.$mol_canvas {
            context() {
                return this.dom_node().getContext('2d');
            }
            width() {
                return Math.ceil((this.view_rect()?.width ?? 0) * this.$.$mol_dom_context.devicePixelRatio);
            }
            height() {
                return Math.ceil((this.view_rect()?.height ?? 0) * this.$.$mol_dom_context.devicePixelRatio);
            }
            render() {
                super.render();
                this.paint();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_canvas.prototype, "context", null);
        __decorate([
            $mol_mem
        ], $mol_canvas.prototype, "width", null);
        __decorate([
            $mol_mem
        ], $mol_canvas.prototype, "height", null);
        $$.$mol_canvas = $mol_canvas;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($mol_canvas, {
            alignSelf: 'stretch',
            justifySelf: 'stretch',
            flex: {
                grow: 1,
                shrink: 1,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_layout_demo) = class $mol_layout_demo extends ($.$mol_example_large) {
		paint(){
			return null;
		}
		context(){
			return (this.Sample().context());
		}
		width(){
			return (this.Sample().width());
		}
		height(){
			return (this.Sample().height());
		}
		Sample(){
			const obj = new this.$.$mol_canvas();
			(obj.paint) = () => ((this.paint()));
			return obj;
		}
		title(){
			return "Custom flex layout engine";
		}
		sub(){
			return [(this.Sample())];
		}
		aspects(){
			return ["Algorithm/Constraint"];
		}
	};
	($mol_mem(($.$mol_layout_demo.prototype), "Sample"));


;
"use strict";
var $;
(function ($) {
    class $mol_layout_tree extends $mol_layout {
        kids = [];
        ortho = null;
    }
    $.$mol_layout_tree = $mol_layout_tree;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_layout_stack extends $mol_layout_tree {
        up() {
            let base = 0;
            for (const kid of this.kids) {
                kid.up();
                base = Math.max(base, kid.base);
            }
            this.base = base + this.before();
            let min = 0;
            let max = 0;
            for (const kid of this.kids) {
                const shift = base - kid.base;
                min = Math.max(min, kid.min + shift);
                max = Math.max(max, kid.max + shift);
            }
            const padding = this.padding();
            this.min = min + padding;
            this.max = max + padding;
        }
        down() {
            const pos = this.pos + this.before();
            const base = this.base - this.before();
            const limit = this.limit();
            for (const kid of this.kids) {
                const shift = base - kid.base;
                kid.pos = pos + shift;
                kid.size = kid.grow() ? limit : Math.min(kid.max, limit);
                kid.down();
            }
        }
    }
    $.$mol_layout_stack = $mol_layout_stack;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_layout_flex extends $mol_layout_tree {
        up() {
            let min = this.padding();
            let max = min;
            for (const kid of this.kids) {
                kid.up();
                min += kid.min;
                max += kid.max;
            }
            this.min = min;
            this.max = max;
            this.base = this.before() + (this.kids[0]?.base ?? 0);
        }
        down() {
            const limit = this.limit();
            const min = this.min - this.padding();
            const diff = limit - min;
            let pos = this.pos + this.before();
            if (diff < 0)
                shrink: {
                    let mult = diff / min;
                    if (!Number.isFinite(mult))
                        mult = 0;
                    for (const kid of this.kids) {
                        kid.pos = pos;
                        pos += kid.size = Math.min(limit, kid.min + Math.floor(kid.shrink() * mult));
                        kid.down();
                    }
                }
            else if (diff > 0)
                grow: {
                    let mult = diff / this.grow();
                    if (!Number.isFinite(mult))
                        mult = 0;
                    for (const kid of this.kids) {
                        kid.pos = pos;
                        pos += kid.size = kid.min + Math.floor(kid.grow() * mult);
                        kid.down();
                    }
                }
            else
                fit: {
                    for (const kid of this.kids) {
                        kid.pos = pos;
                        pos += kid.size = kid.min;
                        kid.down();
                    }
                }
        }
    }
    $.$mol_layout_flex = $mol_layout_flex;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_layout_col extends $mol_layout_stack {
        ortho = $mol_layout_flex.make({});
        down() {
            super.down();
            this.ortho.kids = this.kids.map(kid => kid.ortho);
        }
    }
    $.$mol_layout_col = $mol_layout_col;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_layout_row extends $mol_layout_flex {
        ortho = $mol_layout_stack.make({});
        down() {
            super.down();
            this.ortho.kids = this.kids.map(kid => kid.ortho);
        }
    }
    $.$mol_layout_row = $mol_layout_row;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_layout_wrap extends $mol_layout_flex {
        ortho = $mol_layout_flex.make({});
        down() {
            const limit = this.limit();
            this.ortho.kids = [];
            let index = 0;
            all: while (index < this.kids.length) {
                const group = $mol_layout_flex.make({
                    pos: this.pos,
                    size: this.size,
                    before: () => this.before(),
                    after: () => this.after(),
                    ortho: $mol_layout_stack.make({})
                });
                group: while (index < this.kids.length) {
                    const line = [];
                    let frag;
                    let ind = index;
                    let line_min = 0;
                    let line_max = 0;
                    let break_after;
                    let break_before;
                    line: while (true) {
                        frag = this.kids[ind];
                        line.push(frag);
                        line_min = Math.max(line_min, frag.min);
                        line_max += frag.max;
                        ++ind;
                        const next = this.kids[ind];
                        if (!next)
                            break;
                        break_after = frag.break_after();
                        break_before = next.break_before();
                        if (break_after === $mol_layout_break.force)
                            break line;
                        if (break_before === $mol_layout_break.force)
                            break line;
                        if (break_after === $mol_layout_break.taboo)
                            continue line;
                        if (break_before === $mol_layout_break.taboo)
                            continue line;
                        break line;
                    }
                    group.max += line_max;
                    if (group.kids.length > 0) {
                        if (group.max > limit)
                            break group;
                    }
                    group.min = Math.max(group.min, line_min);
                    group.kids.push(...line);
                    group.ortho.kids.push(...line.map(frag => frag.ortho));
                    index += line.length;
                    if (break_after === $mol_layout_break.force)
                        break group;
                    if (break_before === $mol_layout_break.force)
                        break group;
                }
                group.down();
                this.ortho.kids.push(group.ortho);
            }
        }
    }
    $.$mol_layout_wrap = $mol_layout_wrap;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_layout_demo extends $.$mol_layout_demo {
            font() {
                return `${16 * this.$.$mol_dom_context.devicePixelRatio}px sans-serif`;
            }
            widgets_left() {
                return Array.from({ length: 10 }, (_, i) => {
                    const text = (i || 'canvas ') + ' ';
                    const font = this.font();
                    const width = Math.ceil($mol_font_measure(font, text));
                    const layout = $mol_layout.make({
                        min: width,
                        max: width,
                        ortho: $mol_layout.make({
                            min: 24,
                            max: 24,
                            base: 16,
                        })
                    });
                    return { layout, text, font };
                });
            }
            widgets_right() {
                return Array.from({ length: 20 }, (_, i) => {
                    const text = (i || 'render ') + ' ';
                    const font = this.font();
                    const width = Math.ceil($mol_font_measure(font, text));
                    const layout = $mol_layout.make({
                        min: width,
                        max: width,
                        ortho: $mol_layout.make({
                            min: 24,
                            max: 24,
                            base: 16,
                        }),
                    });
                    return { layout, text, font };
                });
            }
            layout() {
                return $mol_layout_col.make({
                    before: () => 12,
                    after: () => 12,
                    ortho: $mol_layout_flex.make({
                        before: () => 12,
                        after: () => 12,
                    }),
                    kids: [
                        $mol_layout.make({ ortho: $mol_layout.make({ max: 1 }), }),
                        $mol_layout_row.make({
                            before: () => 12,
                            after: () => 12,
                            ortho: $mol_layout_stack.make({
                                before: () => 12,
                                after: () => 12,
                            }),
                            kids: [
                                $mol_layout.make({ max: 1, ortho: $mol_layout.make({}), }),
                                $mol_layout_wrap.make({
                                    before: () => 12,
                                    after: () => 12,
                                    ortho: $mol_layout_flex.make({
                                        before: () => 8,
                                        after: () => 8,
                                    }),
                                    kids: this.widgets_left().map(w => w.layout),
                                }),
                                $mol_layout.make({ max: 1, ortho: $mol_layout.make({}), }),
                                $mol_layout_wrap.make({
                                    before: () => 12,
                                    after: () => 12,
                                    ortho: $mol_layout_flex.make({
                                        before: () => 8,
                                        after: () => 8,
                                    }),
                                    kids: this.widgets_right().map(w => w.layout),
                                }),
                                $mol_layout.make({ max: 1, ortho: $mol_layout.make({}), }),
                            ],
                        }),
                        $mol_layout.make({ ortho: $mol_layout.make({ max: 1 }), }),
                    ]
                });
            }
            paint() {
                this.$.$mol_lights();
                const layout = this.layout();
                layout.size = this.width() + 1;
                layout.ortho.size = this.height() + 1;
                layout.fresh();
                const context = this.context();
                context.strokeStyle = this.$.$mol_dom_context.getComputedStyle(this.dom_node()).getPropertyValue('--mol_theme_line');
                context.fillStyle = this.$.$mol_dom_context.getComputedStyle(this.dom_node()).getPropertyValue('--mol_theme_text');
                function rects(x) {
                    const y = x.ortho;
                    context.strokeRect(x.pos - .5, y.pos - .5, x.size - 1, y.size - 1);
                    for (const kid of x?.kids ?? [])
                        rects(kid);
                }
                rects(layout);
                for (const widget of this.widgets_left()) {
                    const x = widget.layout;
                    const y = x.ortho;
                    context.font = widget.font;
                    context.fillText(widget.text, x.pos, y.pos + y.base, x.size);
                }
                for (const widget of this.widgets_right()) {
                    const x = widget.layout;
                    const y = x.ortho;
                    context.font = widget.font;
                    context.fillText(widget.text, x.pos, y.pos + y.base, x.size);
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_layout_demo.prototype, "font", null);
        __decorate([
            $mol_mem
        ], $mol_layout_demo.prototype, "widgets_left", null);
        __decorate([
            $mol_mem
        ], $mol_layout_demo.prototype, "widgets_right", null);
        __decorate([
            $mol_mem
        ], $mol_layout_demo.prototype, "layout", null);
        __decorate([
            $mol_mem
        ], $mol_layout_demo.prototype, "paint", null);
        $$.$mol_layout_demo = $mol_layout_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_link_demo) = class $mol_link_demo extends ($.$mol_example_small) {
		this_label(){
			return "This page";
		}
		This(){
			const obj = new this.$.$mol_link();
			(obj.sub) = () => ([(this.this_label())]);
			return obj;
		}
		red_label(){
			return "Red";
		}
		Red(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ({"color": "red"});
			(obj.sub) = () => ([(this.red_label())]);
			return obj;
		}
		green_label(){
			return "Green";
		}
		Green(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ({"color": "green"});
			(obj.sub) = () => ([(this.green_label())]);
			return obj;
		}
		blue_label(){
			return "Blue";
		}
		Blue(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ({"color": "blue"});
			(obj.sub) = () => ([(this.blue_label())]);
			return obj;
		}
		external_hint(){
			return "external link";
		}
		External(){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ("http://example.org");
			(obj.title) = () => ("example.org");
			(obj.hint) = () => ((this.external_hint()));
			return obj;
		}
		object_uri(){
			return "";
		}
		Download_icon(){
			const obj = new this.$.$mol_icon_download();
			return obj;
		}
		download_label(){
			return "Download";
		}
		Download(){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ((this.object_uri()));
			(obj.file_name) = () => ("file.csv");
			(obj.sub) = () => ([(this.Download_icon()), (this.download_label())]);
			return obj;
		}
		Demo_items(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.This()), 
				(this.Red()), 
				(this.Green()), 
				(this.Blue()), 
				(this.External()), 
				(this.Download())
			]);
			return obj;
		}
		title(){
			return "Some hyperlinks";
		}
		sub(){
			return [(this.Demo_items())];
		}
		tags(){
			return [
				"$mol_icon", 
				"file", 
				"download", 
				"link", 
				"icon", 
				"navigation", 
				"router", 
				"url"
			];
		}
		aspects(){
			return ["Navigation", "Widget/Button"];
		}
	};
	($mol_mem(($.$mol_link_demo.prototype), "This"));
	($mol_mem(($.$mol_link_demo.prototype), "Red"));
	($mol_mem(($.$mol_link_demo.prototype), "Green"));
	($mol_mem(($.$mol_link_demo.prototype), "Blue"));
	($mol_mem(($.$mol_link_demo.prototype), "External"));
	($mol_mem(($.$mol_link_demo.prototype), "Download_icon"));
	($mol_mem(($.$mol_link_demo.prototype), "Download"));
	($mol_mem(($.$mol_link_demo.prototype), "Demo_items"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_link_demo extends $.$mol_link_demo {
            object_uri() {
                const blob = new Blob(['hello;world\nhello1;world2'], { type: 'text/csv' });
                return $mol_dom_context.URL.createObjectURL(blob);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_link_demo.prototype, "object_uri", null);
        $$.$mol_link_demo = $mol_link_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_link_iconed_demo) = class $mol_link_iconed_demo extends ($.$mol_example_small) {
		uri(next){
			if(next !== undefined) return next;
			return "https://www.google.com/search?q=%24mol";
		}
		Input(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.uri(next)));
			return obj;
		}
		Output(){
			const obj = new this.$.$mol_link_iconed();
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
		Blocks(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Input()), (this.Output())]);
			return obj;
		}
		title(){
			return "Link with icon";
		}
		sub(){
			return [(this.Blocks())];
		}
		tags(){
			return [
				"link", 
				"icon", 
				"url"
			];
		}
		aspects(){
			return ["Navigation", "Widget/Button"];
		}
	};
	($mol_mem(($.$mol_link_iconed_demo.prototype), "uri"));
	($mol_mem(($.$mol_link_iconed_demo.prototype), "Input"));
	($mol_mem(($.$mol_link_iconed_demo.prototype), "Output"));
	($mol_mem(($.$mol_link_iconed_demo.prototype), "Blocks"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/link/iconed/demo/demo.view.css", "[mol_link_iconed_demo_blocks] {\n\tflex: 1;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_link_lazy) = class $mol_link_lazy extends ($.$mol_link) {
		generate(next){
			if(next !== undefined) return next;
			return null;
		}
		uri(next){
			if(next !== undefined) return next;
			return "";
		}
		uri_generated(){
			return "";
		}
		current(){
			return false;
		}
		event(){
			return {...(super.event()), "mousedown": (next) => (this.generate(next))};
		}
	};
	($mol_mem(($.$mol_link_lazy.prototype), "generate"));
	($mol_mem(($.$mol_link_lazy.prototype), "uri"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_link_lazy extends $.$mol_link_lazy {
            generate(event) {
                this.uri(this.uri_generated());
            }
        }
        $$.$mol_link_lazy = $mol_link_lazy;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_link_lazy_demo) = class $mol_link_lazy_demo extends ($.$mol_example_small) {
		uri_generated(){
			return "";
		}
		download_file(){
			return "generated.csv";
		}
		Download_icon(){
			const obj = new this.$.$mol_icon_download();
			return obj;
		}
		download_label(){
			return "Download";
		}
		Download(){
			const obj = new this.$.$mol_link_lazy();
			(obj.hint) = () => ((this.title()));
			(obj.uri_generated) = () => ((this.uri_generated()));
			(obj.file_name) = () => ((this.download_file()));
			(obj.sub) = () => ([(this.Download_icon()), (this.download_label())]);
			return obj;
		}
		title(){
			return "Lazy generated link";
		}
		sub(){
			return [(this.Download())];
		}
		tags(){
			return [
				"icon", 
				"link", 
				"lazy", 
				"download"
			];
		}
		aspects(){
			return ["Widget/Button"];
		}
	};
	($mol_mem(($.$mol_link_lazy_demo.prototype), "Download_icon"));
	($mol_mem(($.$mol_link_lazy_demo.prototype), "Download"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_link_lazy_demo extends $.$mol_link_lazy_demo {
            uri_generated() {
                const blob = new Blob(['hello;world\nhello1;world2'], { type: 'text/csv' });
                return $mol_dom_context.URL.createObjectURL(blob);
            }
        }
        $$.$mol_link_lazy_demo = $mol_link_lazy_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_link_source_demo) = class $mol_link_source_demo extends ($.$mol_example_small) {
		uri(next){
			if(next !== undefined) return next;
			return "https://github.com/hyoo-ru/mam_mol/";
		}
		Input(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.uri(next)));
			return obj;
		}
		Output(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
		Blocks(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Input()), (this.Output())]);
			return obj;
		}
		title(){
			return "Link with icon";
		}
		sub(){
			return [(this.Blocks())];
		}
		tags(){
			return [
				"link", 
				"icon", 
				"source", 
				"github", 
				"url"
			];
		}
		aspects(){
			return ["Navigation", "Widget/Button"];
		}
	};
	($mol_mem(($.$mol_link_source_demo.prototype), "uri"));
	($mol_mem(($.$mol_link_source_demo.prototype), "Input"));
	($mol_mem(($.$mol_link_source_demo.prototype), "Output"));
	($mol_mem(($.$mol_link_source_demo.prototype), "Blocks"));


;
"use strict";

;
	($.$mol_list_demo) = class $mol_list_demo extends ($.$mol_example_small) {
		items_count(next){
			if(next !== undefined) return next;
			return 50;
		}
		Items_count(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.items_count(next)));
			(obj.value_min) = () => (0);
			(obj.value_max) = () => (100000);
			return obj;
		}
		Items_count_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Items count");
			(obj.content) = () => ([(this.Items_count())]);
			return obj;
		}
		item_title(id){
			return "";
		}
		Item(id){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ((this.item_title(id)));
			return obj;
		}
		list_items(){
			return [(this.Item("0"))];
		}
		List_empty(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ("No items in this list");
			return obj;
		}
		Items(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.list_items()));
			(obj.Empty) = () => ((this.List_empty()));
			return obj;
		}
		sub(){
			return [(this.Items_count_label()), (this.Items())];
		}
		tags(){
			return [
				"list", 
				"rows", 
				"stack"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_list_demo.prototype), "items_count"));
	($mol_mem(($.$mol_list_demo.prototype), "Items_count"));
	($mol_mem(($.$mol_list_demo.prototype), "Items_count_label"));
	($mol_mem_key(($.$mol_list_demo.prototype), "Item"));
	($mol_mem(($.$mol_list_demo.prototype), "List_empty"));
	($mol_mem(($.$mol_list_demo.prototype), "Items"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_list_demo extends $.$mol_list_demo {
            item_title(id) {
                return `Item #${id + 1}`;
            }
            list_items() {
                const rows = [];
                for (let key = 0; key < this.items_count(); key++) {
                    rows.push(this.Item(key));
                }
                return rows;
            }
        }
        $$.$mol_list_demo = $mol_list_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_list_demo_table) = class $mol_list_demo_table extends ($.$mol_example) {
		check_list(){
			return [];
		}
		Check(){
			const obj = new this.$.$mol_check_group();
			(obj.checks) = () => ((this.check_list()));
			(obj.title) = () => ("Good Goods");
			return obj;
		}
		Head(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Check())]);
			return obj;
		}
		row_id(id, next){
			if(next !== undefined) return next;
			return "0000";
		}
		row_checked(id, next){
			if(next !== undefined) return next;
			return false;
		}
		Id(id){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.row_id(id)));
			(obj.checked) = (next) => ((this.row_checked(id, next)));
			return obj;
		}
		Id_labeler(id){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("ID");
			(obj.Content) = () => ((this.Id(id)));
			return obj;
		}
		row_uri(id){
			return "";
		}
		row_title(id){
			return "";
		}
		Title(id){
			const obj = new this.$.$mol_link_iconed();
			(obj.uri) = () => ((this.row_uri(id)));
			(obj.title) = () => ((this.row_title(id)));
			return obj;
		}
		Title_labeler(id){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Product Name");
			(obj.Content) = () => ((this.Title(id)));
			return obj;
		}
		row_color(id, next){
			if(next !== undefined) return next;
			return "";
		}
		colors(){
			return [];
		}
		Color(id){
			const obj = new this.$.$mol_select();
			(obj.value) = (next) => ((this.row_color(id, next)));
			(obj.options) = () => ((this.colors()));
			return obj;
		}
		Color_labeler(id){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Color");
			(obj.Content) = () => ((this.Color(id)));
			return obj;
		}
		row_status(id, next){
			if(next !== undefined) return next;
			return "";
		}
		status_options(){
			return {
				"minor": "Store", 
				"major": "Sale", 
				"critical": "Support"
			};
		}
		Status(id){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.row_status(id, next)));
			(obj.options) = () => ((this.status_options()));
			return obj;
		}
		Status_labeler(id){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Status");
			(obj.Content) = () => ((this.Status(id)));
			return obj;
		}
		row_quantity(id, next){
			if(next !== undefined) return next;
			return 0;
		}
		Quantity(id){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.row_quantity(id, next)));
			return obj;
		}
		Quantity_labeler(id){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Quantity");
			(obj.Content) = () => ((this.Quantity(id)));
			return obj;
		}
		row_moment(id, next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_time_moment();
			return obj;
		}
		Date(id){
			const obj = new this.$.$mol_date();
			(obj.value_moment) = (next) => ((this.row_moment(id, next)));
			return obj;
		}
		Date_labeler(id){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Supply Time");
			(obj.Content) = () => ((this.Date(id)));
			return obj;
		}
		row_content(id){
			return [
				(this.Id_labeler(id)), 
				(this.Title_labeler(id)), 
				(this.Color_labeler(id)), 
				(this.Status_labeler(id)), 
				(this.Quantity_labeler(id)), 
				(this.Date_labeler(id))
			];
		}
		Row(id){
			const obj = new this.$.$mol_row();
			(obj.minimal_height) = () => (100);
			(obj.minimal_width) = () => (200);
			(obj.sub) = () => ((this.row_content(id)));
			return obj;
		}
		rows(){
			return [(this.Row("0"))];
		}
		Rows(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.rows()));
			return obj;
		}
		title(){
			return "Large list of rows with dynamic content";
		}
		count(){
			return 9999;
		}
		sub(){
			return [(this.Head()), (this.Rows())];
		}
		tags(){
			return [
				"list", 
				"table", 
				"scroll", 
				"divider", 
				"grid"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_list_demo_table.prototype), "Check"));
	($mol_mem(($.$mol_list_demo_table.prototype), "Head"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "row_id"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "row_checked"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Id"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Id_labeler"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Title"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Title_labeler"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "row_color"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Color"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Color_labeler"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "row_status"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Status"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Status_labeler"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "row_quantity"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Quantity"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Quantity_labeler"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "row_moment"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Date"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Date_labeler"));
	($mol_mem_key(($.$mol_list_demo_table.prototype), "Row"));
	($mol_mem(($.$mol_list_demo_table.prototype), "Rows"));


;
"use strict";
var $;
(function ($) {
    $.$mol_colors = {
        aliceblue: "#f0f8ff",
        antiquewhite: "#faebd7",
        aqua: "#00ffff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000000",
        blanchedalmond: "#ffebcd",
        blue: "#0000ff",
        blueviolet: "#8a2be2",
        brown: "#a52a2a",
        burlywood: "#deb887",
        cadetblue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflowerblue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#00ffff",
        darkblue: "#00008b",
        darkcyan: "#008b8b",
        darkgoldenrod: "#b8860b",
        darkgray: "#a9a9a9",
        darkgreen: "#006400",
        darkgrey: "#a9a9a9",
        darkkhaki: "#bdb76b",
        darkmagenta: "#8b008b",
        darkolivegreen: "#556b2f",
        darkorange: "#ff8c00",
        darkorchid: "#9932cc",
        darkred: "#8b0000",
        darksalmon: "#e9967a",
        darkseagreen: "#8fbc8f",
        darkslateblue: "#483d8b",
        darkslategrey: "#2f4f4f",
        darkturquoise: "#00ced1",
        darkviolet: "#9400d3",
        deeppink: "#ff1493",
        deepskyblue: "#00bfff",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1e90ff",
        firebrick: "#b22222",
        floralwhite: "#fffaf0",
        forestgreen: "#228b22",
        fuchsia: "#ff00ff",
        gainsboro: "#dcdcdc",
        ghostwhite: "#f8f8ff",
        gold: "#ffd700",
        goldenrod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#adff2f",
        grey: "#808080",
        honeydew: "#f0fff0",
        hotpink: "#ff69b4",
        indianred: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        lavender: "#e6e6fa",
        lavenderblush: "#fff0f5",
        lawngreen: "#7cfc00",
        lemonchiffon: "#fffacd",
        lightblue: "#add8e6",
        lightcoral: "#f08080",
        lightcyan: "#e0ffff",
        lightgoldenrodyellow: "#fafad2",
        lightgray: "#d3d3d3",
        lightgreen: "#90ee90",
        lightgrey: "#d3d3d3",
        lightpink: "#ffb6c1",
        lightsalmon: "#ffa07a",
        lightseagreen: "#20b2aa",
        lightskyblue: "#87cefa",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#b0c4de",
        lightyellow: "#ffffe0",
        lime: "#00ff00",
        limegreen: "#32cd32",
        linen: "#faf0e6",
        magenta: "#ff00ff",
        maroon: "#800000",
        mediumaquamarine: "#66cdaa",
        mediumblue: "#0000cd",
        mediumorchid: "#ba55d3",
        mediumpurple: "#9370db",
        mediumseagreen: "#3cb371",
        mediumslateblue: "#7b68ee",
        mediumspringgreen: "#00fa9a",
        mediumturquoise: "#48d1cc",
        mediumvioletred: "#c71585",
        midnightblue: "#191970",
        mintcream: "#f5fffa",
        mistyrose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajowhite: "#ffdead",
        navy: "#000080",
        oldlace: "#fdf5e6",
        olive: "#808000",
        olivedrab: "#6b8e23",
        orange: "#ffa500",
        orangered: "#ff4500",
        orchid: "#da70d6",
        palegoldenrod: "#eee8aa",
        palegreen: "#98fb98",
        paleturquoise: "#afeeee",
        palevioletred: "#db7093",
        papayawhip: "#ffefd5",
        peachpuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderblue: "#b0e0e6",
        purple: "#800080",
        rebeccapurple: "#663399",
        red: "#ff0000",
        rosybrown: "#bc8f8f",
        royalblue: "#4169e1",
        saddlebrown: "#8b4513",
        salmon: "#fa8072",
        sandybrown: "#f4a460",
        seagreen: "#2e8b57",
        seashell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        skyblue: "#87ceeb",
        slateblue: "#6a5acd",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#fffafa",
        springgreen: "#00ff7f",
        steelblue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#ffffff",
        whitesmoke: "#f5f5f5",
        yellow: "#ffff00",
        yellowgreen: "#9acd32",
    };
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_list_demo_table extends $.$mol_list_demo_table {
            rows() {
                return Array.from({ length: this.count() }, (_, i) => this.Row(i));
            }
            check_list() {
                return Array.from({ length: this.count() }, (_, i) => this.Id(i));
            }
            row_id(id) {
                return String(id).padStart(4, '0');
            }
            row_title(id) {
                return $mol_stub_product_name();
            }
            row_quantity(id, next = Math.floor(Math.random() * 100)) {
                return next;
            }
            row_status(id, next = $mol_array_lottery(Object.keys(this.status_options()))) {
                return next;
            }
            row_uri(id) {
                return `http://xkcd.com/${this.row_id(id)}`;
            }
            row_moment(id, next = new $mol_time_moment().shift({
                day: Math.floor(Math.random() * 100)
            })) {
                return next;
            }
            colors() {
                return Object.keys($mol_colors);
            }
            row_color(id, next) {
                $mol_wire_solid();
                return next ?? $mol_array_lottery(this.colors());
            }
        }
        __decorate([
            $mol_mem
        ], $mol_list_demo_table.prototype, "rows", null);
        __decorate([
            $mol_mem
        ], $mol_list_demo_table.prototype, "check_list", null);
        __decorate([
            $mol_mem_key
        ], $mol_list_demo_table.prototype, "row_title", null);
        __decorate([
            $mol_mem_key
        ], $mol_list_demo_table.prototype, "row_quantity", null);
        __decorate([
            $mol_mem_key
        ], $mol_list_demo_table.prototype, "row_status", null);
        __decorate([
            $mol_mem_key
        ], $mol_list_demo_table.prototype, "row_uri", null);
        __decorate([
            $mol_mem_key
        ], $mol_list_demo_table.prototype, "row_moment", null);
        __decorate([
            $mol_mem
        ], $mol_list_demo_table.prototype, "colors", null);
        __decorate([
            $mol_mem_key
        ], $mol_list_demo_table.prototype, "row_color", null);
        $$.$mol_list_demo_table = $mol_list_demo_table;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem } = $mol_style_unit;
        $mol_style_define($mol_list_demo_table, {
            flex: {
                direction: 'column',
            },
            Rows: {
                flex: {
                    grow: 1,
                },
            },
            Row: {
                boxShadow: `0 -1px 0 0 ${$mol_theme.line}`,
            },
            Title_labeler: {
                flex: {
                    basis: rem(15),
                },
            },
            Color_labeler: {
                flex: {
                    basis: rem(10),
                },
            },
            Id_labeler: {
                flex: {
                    basis: rem(5),
                },
                Label: {
                    padding: {
                        left: rem(2),
                    },
                },
            },
            Id: {
                padding: $mol_gap.text,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_list_demo_tree) = class $mol_list_demo_tree extends ($.$mol_example_large) {
		root_rows(){
			return [];
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.root_rows()));
			return obj;
		}
		row_title(id){
			return "";
		}
		Row_title(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ([(this.row_title(id))]);
			return obj;
		}
		row_expanded(id, next){
			if(next !== undefined) return next;
			return false;
		}
		row_content(id){
			return [];
		}
		Row_content(id){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.row_content(id)));
			return obj;
		}
		title(){
			return "Large list of rows with dynamic content";
		}
		sub(){
			return [(this.Content())];
		}
		Row(id){
			const obj = new this.$.$mol_expander();
			(obj.label) = () => ([(this.Row_title(id))]);
			(obj.expanded) = (next) => ((this.row_expanded(id, next)));
			(obj.expandable) = () => (true);
			(obj.Content) = () => ((this.Row_content(id)));
			return obj;
		}
		tags(){
			return [
				"list", 
				"tree", 
				"hierarchy", 
				"container", 
				"nested"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_list_demo_tree.prototype), "Content"));
	($mol_mem_key(($.$mol_list_demo_tree.prototype), "Row_title"));
	($mol_mem_key(($.$mol_list_demo_tree.prototype), "row_expanded"));
	($mol_mem_key(($.$mol_list_demo_tree.prototype), "Row_content"));
	($mol_mem_key(($.$mol_list_demo_tree.prototype), "Row"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_list_demo_tree extends $.$mol_list_demo_tree {
            root_rows() {
                return this.row_content([]);
            }
            row_title(id) {
                $mol_wire_solid();
                return `Node ${id.join('.')}: ${$mol_stub_message(512)} `;
            }
            row_content(id) {
                $mol_wire_solid();
                return Array.from({ length: Math.floor(Math.random() * 10 + 5) }, (_, index) => this.Row([...id, index]));
            }
            row_expanded(id, next = id.length < 4) {
                return next;
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_list_demo_tree.prototype, "row_title", null);
        __decorate([
            $mol_mem_key
        ], $mol_list_demo_tree.prototype, "row_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_list_demo_tree.prototype, "row_expanded", null);
        $$.$mol_list_demo_tree = $mol_list_demo_tree;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/list/demo/tree/tree.view.css", "[mol_list_demo_tree_row_content] {\n\tpadding-left: 2.25rem;\n\tdisplay: block;\n}\n\n[mol_list_demo_tree_row] [mol_list_demo_tree_row] {\n\tbox-shadow: 0 0 0 1px var(--mol_theme_line);\n\tbackground: hsla( 0deg , 0% , 50% , .05 );\n}\n\n[mol_list_demo_tree_row_title] {\n\tflex-shrink: 1;\n}");
})($ || ($ = {}));

;
	($.$mol_map_yandex) = class $mol_map_yandex extends ($.$mol_view) {
		zoom(next){
			if(next !== undefined) return next;
			return 2;
		}
		center(next){
			if(next !== undefined) return next;
			return [0, 0];
		}
		objects(){
			return [];
		}
	};
	($mol_mem(($.$mol_map_yandex.prototype), "zoom"));
	($mol_mem(($.$mol_map_yandex.prototype), "center"));


;
"use strict";
var $;
(function ($) {
    const Numb = $mol_data_pipe($mol_data_string, parseFloat);
    const Response = $mol_data_array($mol_data_record({
        boundingbox: $mol_data_array(Numb),
        lat: Numb,
        lon: Numb,
    }));
    $.$mol_geo_search_attribution = 'https://osm.org/copyright';
    function $mol_geo_search({ query, count = 1 }) {
        const url = new URL('https://nominatim.openstreetmap.org/search');
        url.searchParams.set('q', query);
        url.searchParams.set('limit', count.toString());
        url.searchParams.set('format', 'jsonv2');
        const json = $mol_fetch.json(url.toString());
        return Response(json).map(({ lon, lat, boundingbox: box }) => {
            return {
                coord: new $mol_vector_2d(lon, lat),
                box: new $mol_vector_2d(new $mol_vector_range(box[2], box[3]), new $mol_vector_range(box[0], box[1])),
            };
        });
    }
    $.$mol_geo_search = $mol_geo_search;
})($ || ($ = {}));

;
	($.$mol_map_yandex_mark) = class $mol_map_yandex_mark extends ($.$mol_object) {
		box_lat(){
			const obj = new this.$.$mol_vector_range(0, 0);
			return obj;
		}
		box_lon(){
			const obj = new this.$.$mol_vector_range(0, 0);
			return obj;
		}
		address(){
			return "";
		}
		pos(){
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		box(){
			const obj = new this.$.$mol_vector_2d((this.box_lat()), (this.box_lon()));
			return obj;
		}
		hint(){
			return "";
		}
		title(){
			return (this.address());
		}
		content(){
			return "";
		}
		object(){
			return null;
		}
	};
	($mol_mem(($.$mol_map_yandex_mark.prototype), "box_lat"));
	($mol_mem(($.$mol_map_yandex_mark.prototype), "box_lon"));
	($mol_mem(($.$mol_map_yandex_mark.prototype), "pos"));
	($mol_mem(($.$mol_map_yandex_mark.prototype), "box"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_map_yandex_mark extends $.$mol_map_yandex_mark {
            object() {
                const ymaps = $mol_map_yandex.api();
                return new ymaps.Placemark(this.pos(), {
                    hintContent: this.hint(),
                    iconContent: this.title(),
                    balloonContent: this.content(),
                }, {
                    preset: "islands#redStretchyIcon",
                });
            }
            found() {
                return $mol_geo_search({ query: this.address() })[0] ?? null;
            }
            pos() {
                return this.found()?.coord ?? super.pos();
            }
            box() {
                return this.found()?.box ?? super.pos();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_map_yandex_mark.prototype, "object", null);
        __decorate([
            $mol_mem
        ], $mol_map_yandex_mark.prototype, "found", null);
        __decorate([
            $mol_mem
        ], $mol_map_yandex_mark.prototype, "box", null);
        $$.$mol_map_yandex_mark = $mol_map_yandex_mark;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_map_yandex extends $.$mol_map_yandex {
            static api_key() {
                return "";
            }
            static api() {
                return $mol_import.script(`https://api-maps.yandex.ru/2.1/?apikey=${this.api_key()}&lang=${$mol_locale.lang()}`).ymaps;
            }
            wait_ready(ymaps) {
                return new Promise(done => ymaps.ready(done));
            }
            api(next) {
                const ymaps = $mol_map_yandex.api();
                $mol_wire_sync(this).wait_ready(ymaps);
                const api = new ymaps.Map(this.dom_node(), {
                    center: [0, 0],
                    zoom: 0,
                });
                api.copyrights.add($mol_geo_search_attribution);
                api.controls.remove('fullscreenControl');
                api.controls.remove('typeSelector');
                api.events.add(['actionend'], $mol_wire_async((event) => {
                    this.update(event);
                }));
                return api;
            }
            update(event) {
                this.zoom(this.api().getZoom());
                this.center(this.api().getCenter());
            }
            bounds_updated() {
                const box = this.objects()[0]?.box();
                if (box) {
                    this.api().setBounds([
                        [box.x.min, box.y.min],
                        [box.x.max, box.y.max],
                    ]);
                }
                return true;
            }
            center(next) {
                if (next !== undefined)
                    return next;
                const pos = this.objects()[0]?.pos();
                if (pos)
                    return pos;
                return [0, 0];
            }
            render() {
                const api = this.api();
                api.setCenter(this.center(), this.zoom());
                api.geoObjects.removeAll();
                for (let obj of this.objects()) {
                    api.geoObjects.add(obj.object());
                }
                this.dom_node_actual();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_map_yandex.prototype, "api", null);
        __decorate([
            $mol_mem
        ], $mol_map_yandex.prototype, "bounds_updated", null);
        __decorate([
            $mol_mem
        ], $mol_map_yandex.prototype, "center", null);
        $$.$mol_map_yandex = $mol_map_yandex;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/map/yandex/yandex.view.css", "[mol_map_yandex] {\n\tflex: auto;\n\talign-self: stretch;\n\tfilter: var(--mol_theme_image);\n}\n");
})($ || ($ = {}));

;
	($.$mol_map_yandex_demo) = class $mol_map_yandex_demo extends ($.$mol_example_large) {
		place_title(){
			return "";
		}
		place_addres(){
			return "Saint-Petersburg";
		}
		place_content(){
			return "It is Russia's second-largest city after Moscow";
		}
		Place(){
			const obj = new this.$.$mol_map_yandex_mark();
			(obj.title) = () => ((this.place_title()));
			(obj.address) = () => ((this.place_addres()));
			(obj.content) = () => ((this.place_content()));
			return obj;
		}
		Map(){
			const obj = new this.$.$mol_map_yandex();
			(obj.objects) = () => ([(this.Place())]);
			return obj;
		}
		title(){
			return "Simple Yandex Maps wrapper";
		}
		sub(){
			return [(this.Map())];
		}
		aspects(){
			return ["Integration", "Widget/Map"];
		}
	};
	($mol_mem(($.$mol_map_yandex_demo.prototype), "Place"));
	($mol_mem(($.$mol_map_yandex_demo.prototype), "Map"));


;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_mutable(input, update = next => input = next) {
        let output = undefined;
        const clone = Array.isArray(input)
            ? () => [...input]
            : () => ({ ...input });
        return new Proxy($mol_mutable, {
            get: (Mut, field) => Mut(input[field], next => (output ?? (output = update(clone())))[field] = next),
            set: () => false,
            apply: (Mut, self, [patch]) => {
                if (patch)
                    update(output = input = patch(input));
                return output ?? input;
            },
        });
    }
    $.$mol_mutable = $mol_mutable;
})($ || ($ = {}));

;
	($.$mol_mutable_demo) = class $mol_mutable_demo extends ($.$mol_example_code) {
		code(next){
			if(next !== undefined) return next;
			return "const articles_immutable = {\n\thello: {\n\t\ttitle: 'Hello, World',\n\t\ttags: [ 'javascript', 'immutablity' ],\n\t\tauthor: {\n\t\t\tname: 'Jin',\n\t\t},\n\t},\n}\n\nconst articles_mutable = $mol_mutable( articles_immutable )\n\narticles_mutable.hello.title( prev => prev + '!' )\narticles_mutable.hello.tags( prev => [ ... prev, 'hello' ] )\narticles_mutable.hello.author.name( ()=> 'John' )\narticles_mutable.bye( ()=> ({\n\ttitle: 'Bye, World!',\n\ttags: [],\n\tauthor: null,\n}) )\n\nconst articles_new = articles_mutable()";
		}
		tags(){
			return ["mutable", "immutable"];
		}
		aspects(){
			return ["Algorithm/Lens"];
		}
	};
	($mol_mem(($.$mol_mutable_demo.prototype), "code"));


;
"use strict";

;
	($.$hyoo_marked_app) = class $hyoo_marked_app extends ($.$mol_book2) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		Source(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ("https://github.com/hyoo-ru/marked.hyoo.ru/");
			return obj;
		}
		preview(next){
			if(next !== undefined) return next;
			return "";
		}
		Preview(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.preview(next)));
			(obj.options) = () => ({"html": "HTML", "view": "View"});
			return obj;
		}
		marked(next){
			if(next !== undefined) return next;
			return "";
		}
		Marked_text(){
			const obj = new this.$.$mol_textarea();
			(obj.value) = (next) => ((this.marked(next)));
			return obj;
		}
		Marked(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("MarkedText");
			(obj.tools) = () => ([
				(this.Lights()), 
				(this.Source()), 
				(this.Preview())
			]);
			(obj.body) = () => ([(this.Marked_text())]);
			return obj;
		}
		html(){
			return "";
		}
		Html_text(){
			const obj = new this.$.$mol_text_code();
			(obj.sidebar_showed) = () => (true);
			(obj.text) = () => ((this.html()));
			return obj;
		}
		Html(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("HTML");
			(obj.tools) = () => ([(this.Preview_close())]);
			(obj.body) = () => ([(this.Html_text())]);
			return obj;
		}
		View_text(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.marked()));
			return obj;
		}
		View(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("View");
			(obj.tools) = () => ([(this.Preview_close())]);
			(obj.body) = () => ([(this.View_text())]);
			return obj;
		}
		Preview_close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		plugins(){
			return [(this.Theme())];
		}
		pages(){
			return [
				(this.Marked()), 
				(this.Html()), 
				(this.View())
			];
		}
		Preview_close(){
			const obj = new this.$.$mol_link();
			(obj.sub) = () => ([(this.Preview_close_icon())]);
			(obj.arg) = () => ({"preview": null});
			return obj;
		}
	};
	($mol_mem(($.$hyoo_marked_app.prototype), "Theme"));
	($mol_mem(($.$hyoo_marked_app.prototype), "Lights"));
	($mol_mem(($.$hyoo_marked_app.prototype), "Source"));
	($mol_mem(($.$hyoo_marked_app.prototype), "preview"));
	($mol_mem(($.$hyoo_marked_app.prototype), "Preview"));
	($mol_mem(($.$hyoo_marked_app.prototype), "marked"));
	($mol_mem(($.$hyoo_marked_app.prototype), "Marked_text"));
	($mol_mem(($.$hyoo_marked_app.prototype), "Marked"));
	($mol_mem(($.$hyoo_marked_app.prototype), "Html_text"));
	($mol_mem(($.$hyoo_marked_app.prototype), "Html"));
	($mol_mem(($.$hyoo_marked_app.prototype), "View_text"));
	($mol_mem(($.$hyoo_marked_app.prototype), "View"));
	($mol_mem(($.$hyoo_marked_app.prototype), "Preview_close_icon"));
	($mol_mem(($.$hyoo_marked_app.prototype), "Preview_close"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_marked_app extends $.$hyoo_marked_app {
            preview(next) {
                return this.$.$mol_state_arg.value('preview', next) ?? '';
            }
            pages() {
                return [
                    this.Marked(),
                    ...this.preview() === 'html' ? [this.Html()] : [],
                    ...this.preview() === 'view' ? [this.View()] : [],
                ];
            }
            html() {
                return this.$.$hyoo_marked_to_html(this.marked());
            }
            marked(next) {
                return this.$.$mol_state_arg.value('marked', next)
                    ?? this.$.$mol_fetch.text('hyoo/marked/readme.md')
                        .replace(/```\n*/g, '');
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_marked_app.prototype, "html", null);
        __decorate([
            $mol_mem
        ], $hyoo_marked_app.prototype, "marked", null);
        $$.$hyoo_marked_app = $hyoo_marked_app;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/marked/app/app.view.css", "[hyoo_marked_app_marked] {\n\tflex: 1000 0 40rem;\n}\n\n[hyoo_marked_app_preview] {\n\tflex-grow: 0;\n}\n\n[hyoo_marked_app_html] {\n\tflex: 1000 0 40rem;\n}\n\n[hyoo_marked_app_view] {\n\tflex: 1000 0 40rem;\n}\n");
})($ || ($ = {}));

;
	($.$hyoo_marked_demo) = class $hyoo_marked_demo extends ($.$mol_example_large) {
		Sandbox(){
			const obj = new this.$.$hyoo_marked_app();
			return obj;
		}
		title(){
			return "CROWD Text Merge";
		}
		sub(){
			return [(this.Sandbox())];
		}
		tags(){
			return ["MarkDown", "HTML"];
		}
		aspects(){
			return [
				"Application", 
				"Language/MarkedText", 
				"Algorithm/Parse", 
				"Algorithm/Transform"
			];
		}
	};
	($mol_mem(($.$hyoo_marked_demo.prototype), "Sandbox"));


;
"use strict";

;
	($.$hyoo_harp_app) = class $hyoo_harp_app extends ($.$mol_page) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		Source(){
			const obj = new this.$.$mol_link_source();
			(obj.uri) = () => ("https://github.com/hyoo-ru/harp.hyoo.ru");
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		rate(){
			return 0;
		}
		Rate(){
			const obj = new this.$.$mol_speck();
			(obj.value) = () => ((this.rate()));
			return obj;
		}
		uri(next){
			if(next !== undefined) return next;
			return "pullRequest(state=closed=merged=;+repository(name;private;owner(name);_len(issue));-updateTime;author(name);_num=20@30=)";
		}
		Uri(){
			const obj = new this.$.$mol_textarea();
			(obj.hint) = () => ("harp;query");
			(obj.value) = (next) => ((this.uri(next)));
			return obj;
		}
		json(next){
			if(next !== undefined) return next;
			return null;
		}
		Json(){
			const obj = new this.$.$mol_dump_value();
			(obj.value) = () => ((this.json()));
			return obj;
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Rate()), 
				(this.Uri()), 
				(this.Json())
			]);
			return obj;
		}
		title(){
			return "HARP - Humane API REST Protocol";
		}
		plugins(){
			return [(this.Theme())];
		}
		tools(){
			return [(this.Source()), (this.Lights())];
		}
		body(){
			return [(this.Content())];
		}
	};
	($mol_mem(($.$hyoo_harp_app.prototype), "Theme"));
	($mol_mem(($.$hyoo_harp_app.prototype), "Source"));
	($mol_mem(($.$hyoo_harp_app.prototype), "Lights"));
	($mol_mem(($.$hyoo_harp_app.prototype), "Rate"));
	($mol_mem(($.$hyoo_harp_app.prototype), "uri"));
	($mol_mem(($.$hyoo_harp_app.prototype), "Uri"));
	($mol_mem(($.$hyoo_harp_app.prototype), "json"));
	($mol_mem(($.$hyoo_harp_app.prototype), "Json"));
	($mol_mem(($.$hyoo_harp_app.prototype), "Content"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    const syntax = new $mol_syntax2({
        'filter': /!?=/,
        'range_separator': /@/,
        'fetch_open': /\(/,
        'fetch_separator': /[:;&\/?#]/,
        'fetch_close': /\)/,
    });
    function $hyoo_harp_from_string(uri) {
        let parent = {};
        let prev = null;
        let stack = [parent];
        let range = null;
        let values = null;
        function fail_at(offset) {
            const uri_marked = uri.substring(0, offset) + '\u035C' + uri.substring(offset);
            $mol_fail(new Error(`Unexpected token at ${offset} of "${uri_marked}"`));
        }
        syntax.parse(uri, {
            '': (text, chunks, offset) => {
                if (values) {
                    text = decodeURIComponent(text);
                    range = (range && range.length > 1)
                        ? [range[0], range[1] + text]
                        : [(range?.[0] ?? '') + text];
                }
                else {
                    let [, order, name] = /^([+-]?)(.*)$/.exec(text);
                    prev = parent[decodeURIComponent(name)] = {};
                    if (order)
                        prev['+'] = order === '+';
                    stack.push(parent);
                }
            },
            'filter': (filter, chinks, offset) => {
                if (values) {
                    if (range) {
                        if (filter === '!=')
                            range.push(range.pop() + '!');
                        values.push(range);
                        range = null;
                    }
                    else {
                        range = [filter];
                    }
                }
                else if (prev) {
                    values = prev[filter] = [];
                }
                else {
                    values = [];
                    parent[''] = values;
                }
            },
            'range_separator': (found, chunks, offset) => {
                if (!values)
                    fail_at(offset);
                range = [range?.[0] ?? '', ''];
            },
            'fetch_open': (found, chunks, offset) => {
                if (range) {
                    range[range.length - 1] += found;
                }
                else {
                    if (!prev)
                        fail_at(offset);
                    parent = prev;
                    values = null;
                    prev = null;
                }
            },
            'fetch_separator': (found, chunks, offset) => {
                if (range) {
                    values.push(range);
                    range = null;
                }
                parent = stack.pop();
                values = null;
                prev = null;
            },
            'fetch_close': (found) => {
                if (range) {
                    range[range.length - 1] += found;
                }
                else {
                    parent = stack.pop();
                    values = null;
                    prev = null;
                }
            },
        });
        if (range)
            values.push(range);
        return stack[0];
    }
    $.$hyoo_harp_from_string = $hyoo_harp_from_string;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function count(query) {
        return;
    }
    function $hyoo_harp_rate(query) {
        let rate = 1;
        for (const field of Object.keys(query)) {
            switch (field) {
                case '=': break;
                case '+': break;
                case '!=': break;
                case '_num': break;
                default:
                    const kid = query[field];
                    const mult = $hyoo_harp_rate(kid);
                    if (mult === 1)
                        rate += (kid['=']?.length ?? kid['!=']?.length ?? 1 / 10) * 10;
                    else
                        rate += mult;
            }
        }
        return rate;
    }
    $.$hyoo_harp_rate = $hyoo_harp_rate;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_harp_app extends $.$hyoo_harp_app {
            uri(next) {
                return this.$.$mol_state_arg.value('query', next) ?? super.uri();
            }
            json() {
                return $hyoo_harp_from_string(this.uri());
            }
            rate() {
                return $hyoo_harp_rate(this.json());
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_harp_app.prototype, "uri", null);
        __decorate([
            $mol_mem
        ], $hyoo_harp_app.prototype, "json", null);
        __decorate([
            $mol_mem
        ], $hyoo_harp_app.prototype, "rate", null);
        $$.$hyoo_harp_app = $hyoo_harp_app;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/harp/app/app.view.css", "[hyoo_harp_app_content] {\n\tpadding: var(--mol_gap_block);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$hyoo_harp_demo) = class $hyoo_harp_demo extends ($.$mol_example_large) {
		title(){
			return (this.Sandbox().title());
		}
		Sandbox(){
			const obj = new this.$.$hyoo_harp_app();
			(obj.Lights) = () => (null);
			return obj;
		}
		sub(){
			return [(this.Sandbox())];
		}
		tags(){
			return [
				"API", 
				"Query", 
				"REST"
			];
		}
		aspects(){
			return [
				"Application", 
				"Language/HARP Query", 
				"Algorithm/Parse"
			];
		}
	};
	($mol_mem(($.$hyoo_harp_demo.prototype), "Sandbox"));


;
"use strict";

;
	($.$mol_nav_demo) = class $mol_nav_demo extends ($.$mol_example) {
		Nav(){
			const obj = new this.$.$mol_nav();
			(obj.keys_x) = () => ((this.tab_list()));
			(obj.current_x) = (next) => ((this.tab_current(next)));
			(obj.keys_y) = () => ((this.row_list()));
			(obj.current_y) = (next) => ((this.row_current(next)));
			return obj;
		}
		tab_list(){
			return (this.Tab_list().keys());
		}
		tab_current(next){
			if(next !== undefined) return next;
			return "";
		}
		Tab_list(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.tab_current(next)));
			(obj.options) = () => ({
				"first": "First", 
				"second": "Second", 
				"third": "Third"
			});
			return obj;
		}
		row_list(){
			return (this.Row_list().keys());
		}
		row_current(next){
			if(next !== undefined) return next;
			return "";
		}
		Row_list(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.row_current(next)));
			(obj.options) = () => ({
				"first": "First", 
				"second": "Second", 
				"third": "Third"
			});
			return obj;
		}
		Demo_items(){
			const obj = new this.$.$mol_card();
			(obj.content) = () => ([(this.Tab_list()), (this.Row_list())]);
			(obj.status) = () => ("Select option and use keys to switch");
			return obj;
		}
		title(){
			return "Number input control with various configuration";
		}
		plugins(){
			return [(this.Nav())];
		}
		sub(){
			return [(this.Demo_items())];
		}
		tags(){
			return ["navigation"];
		}
		aspects(){
			return ["Widget/Plugin", "Controler/Keyboard"];
		}
	};
	($mol_mem(($.$mol_nav_demo.prototype), "Nav"));
	($mol_mem(($.$mol_nav_demo.prototype), "tab_current"));
	($mol_mem(($.$mol_nav_demo.prototype), "Tab_list"));
	($mol_mem(($.$mol_nav_demo.prototype), "row_current"));
	($mol_mem(($.$mol_nav_demo.prototype), "Row_list"));
	($mol_mem(($.$mol_nav_demo.prototype), "Demo_items"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    $mol_style_define($mol_nav_demo, {
        display: 'flex',
        flexDirection: 'column',
        Row_list: {
            display: 'flex',
            flexDirection: 'column',
        },
    });
})($ || ($ = {}));

;
	($.$mol_number_demo) = class $mol_number_demo extends ($.$mol_example_small) {
		value_string(){
			return "";
		}
		Value_string(){
			const obj = new this.$.$mol_string();
			(obj.value) = () => ((this.value_string()));
			(obj.disabled) = () => (true);
			return obj;
		}
		reset_enabled(){
			return true;
		}
		reset_value(next){
			if(next !== undefined) return next;
			return null;
		}
		Reset(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Reset");
			(obj.enabled) = (next) => ((this.reset_enabled()));
			(obj.click) = (next) => ((this.reset_value(next)));
			return obj;
		}
		Section_value_bar(){
			const obj = new this.$.$mol_bar();
			(obj.sub) = () => ([(this.Value_string()), (this.Reset())]);
			return obj;
		}
		Section_value_row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Section_value_bar())]);
			return obj;
		}
		Section_value(){
			const obj = new this.$.$mol_section();
			(obj.title) = () => ("Stringified number value");
			(obj.content) = () => ([(this.Section_value_row())]);
			return obj;
		}
		Initial_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			return obj;
		}
		Initial_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Initial");
			(obj.content) = () => ([(this.Initial_number())]);
			return obj;
		}
		Hint_number(){
			const obj = new this.$.$mol_number();
			(obj.hint) = () => ("Any number");
			(obj.value) = (next) => ((this.value(next)));
			return obj;
		}
		Hint_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Hint showed (if empty value)");
			(obj.content) = () => ([(this.Hint_number())]);
			return obj;
		}
		Section_initial_row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Initial_number_label()), (this.Hint_number_label())]);
			return obj;
		}
		Section_initial(){
			const obj = new this.$.$mol_section();
			(obj.title) = () => ("Simple");
			(obj.content) = () => ([(this.Section_initial_row())]);
			return obj;
		}
		Value_field_disabled_number(){
			const obj = new this.$.$mol_number();
			(obj.hint) = () => ("This hint not showed while string_enabled is false");
			(obj.value) = (next) => ((this.value(next)));
			(obj.string_enabled) = () => (false);
			return obj;
		}
		Value_field_disabled_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Value field disabled");
			(obj.content) = () => ([(this.Value_field_disabled_number())]);
			return obj;
		}
		Disabled_number(){
			const obj = new this.$.$mol_number();
			(obj.hint) = () => ("This hint not showed while enabled is false");
			(obj.value) = (next) => ((this.value()));
			(obj.enabled) = () => (false);
			return obj;
		}
		Disabled_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Disabled");
			(obj.content) = () => ([(this.Disabled_number())]);
			return obj;
		}
		Dec_disabled_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			(obj.dec_enabled) = () => (false);
			return obj;
		}
		Dec_disabled_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Decrement disabled");
			(obj.content) = () => ([(this.Dec_disabled_number())]);
			return obj;
		}
		Inc_disabled_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			(obj.inc_enabled) = () => (false);
			return obj;
		}
		Inc_disabled_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Increment disabled");
			(obj.content) = () => ([(this.Inc_disabled_number())]);
			return obj;
		}
		Section_disabled_row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([
				(this.Value_field_disabled_number_label()), 
				(this.Disabled_number_label()), 
				(this.Dec_disabled_number_label()), 
				(this.Inc_disabled_number_label())
			]);
			return obj;
		}
		Section_disabled(){
			const obj = new this.$.$mol_section();
			(obj.title) = () => ("Disabled");
			(obj.content) = () => ([(this.Section_disabled_row())]);
			return obj;
		}
		Precision_change_10_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			(obj.precision_change) = () => (10);
			return obj;
		}
		Precision_change_10_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Precision change 10");
			(obj.content) = () => ([(this.Precision_change_10_number())]);
			return obj;
		}
		Precision_change_01_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			(obj.precision_change) = () => (0.1);
			return obj;
		}
		Precision_change_01_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("⚠️ Precision change 0.1");
			(obj.content) = () => ([(this.Precision_change_01_number())]);
			return obj;
		}
		Precision_100_number_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			(obj.precision) = () => (100);
			return obj;
		}
		Precision_100_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Precision 100");
			(obj.content) = () => ([(this.Precision_100_number_number())]);
			return obj;
		}
		Precision_5_number_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			(obj.precision) = () => (5);
			return obj;
		}
		Precision_5_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Precision 5");
			(obj.content) = () => ([(this.Precision_5_number_number())]);
			return obj;
		}
		Precision_01_number_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			(obj.precision) = () => (0.1);
			return obj;
		}
		Precision_01_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Precision 0.1");
			(obj.content) = () => ([(this.Precision_01_number_number())]);
			return obj;
		}
		Precision_005_number_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			(obj.precision) = () => (0.05);
			return obj;
		}
		Precision_005_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Precision 0.05");
			(obj.content) = () => ([(this.Precision_005_number_number())]);
			return obj;
		}
		Precision_view_001_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			(obj.precision_view) = () => (0.001);
			return obj;
		}
		Precision_view_001_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Precision view 0.001");
			(obj.content) = () => ([(this.Precision_view_001_number())]);
			return obj;
		}
		Precision_view_10_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value(next)));
			(obj.precision_view) = () => (10);
			return obj;
		}
		Precision_view_10_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("⚠️ Precision view 10");
			(obj.content) = () => ([(this.Precision_view_10_number())]);
			return obj;
		}
		Section_precision_row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([
				(this.Precision_change_10_number_label()), 
				(this.Precision_change_01_number_label()), 
				(this.Precision_100_number_label()), 
				(this.Precision_5_number_label()), 
				(this.Precision_01_number_label()), 
				(this.Precision_005_number_label()), 
				(this.Precision_view_001_number_label()), 
				(this.Precision_view_10_number_label())
			]);
			return obj;
		}
		Section_precision(){
			const obj = new this.$.$mol_section();
			(obj.title) = () => ("Precision");
			(obj.content) = () => ([(this.Section_precision_row())]);
			return obj;
		}
		value_min_m5(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		Min_m5_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value_min_m5(next)));
			(obj.value_min) = () => (-5);
			return obj;
		}
		Min_m5_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Min value -5");
			(obj.content) = () => ([(this.Min_m5_number())]);
			return obj;
		}
		value_min_0(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		Min_0_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value_min_0(next)));
			(obj.value_min) = () => (0);
			return obj;
		}
		Min_0_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Min value 0");
			(obj.content) = () => ([(this.Min_0_number())]);
			return obj;
		}
		value_min_5(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		Min_5_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value_min_5(next)));
			(obj.value_min) = () => (5);
			return obj;
		}
		Min_5_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Min value 5");
			(obj.content) = () => ([(this.Min_5_number())]);
			return obj;
		}
		value_max_m5(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		Max_m5_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value_max_m5(next)));
			(obj.value_max) = () => (-5);
			return obj;
		}
		Max_m5_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Max value -5");
			(obj.content) = () => ([(this.Max_m5_number())]);
			return obj;
		}
		value_max_0(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		Max_0_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value_max_0(next)));
			(obj.value_max) = () => (0);
			return obj;
		}
		Max_0_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Max value 0");
			(obj.content) = () => ([(this.Max_0_number())]);
			return obj;
		}
		value_max_5(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		Max_5_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value_max_5(next)));
			(obj.value_max) = () => (5);
			return obj;
		}
		Max_5_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Max value 5");
			(obj.content) = () => ([(this.Max_5_number())]);
			return obj;
		}
		value_max_100(next){
			if(next !== undefined) return next;
			return 100;
		}
		Max_100_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value_max_100(next)));
			(obj.value_max) = () => (100);
			(obj.precision_change) = () => (10);
			return obj;
		}
		Max_100_number_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Max value 100");
			(obj.content) = () => ([(this.Max_100_number())]);
			return obj;
		}
		value_case1_range(next){
			if(next !== undefined) return next;
			return 0;
		}
		Range_case1_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value_case1_range(next)));
			(obj.value_min) = () => (-5);
			(obj.value_max) = () => (5);
			return obj;
		}
		Range_number_case1_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Value from -5 to 5");
			(obj.content) = () => ([(this.Range_case1_number())]);
			return obj;
		}
		value_case2_range(next){
			if(next !== undefined) return next;
			return null;
		}
		Range_case2_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value_case2_range(next)));
			(obj.value_min) = () => (5);
			(obj.value_max) = () => (10);
			return obj;
		}
		Range_number_case2_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Value from 5 to 10");
			(obj.content) = () => ([(this.Range_case2_number())]);
			return obj;
		}
		value_case3_range(next){
			if(next !== undefined) return next;
			return null;
		}
		Range_case3_number(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.value_case3_range(next)));
			(obj.value_min) = () => (-10);
			(obj.value_max) = () => (-5);
			return obj;
		}
		Range_number_case3_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Value from -10 to -5");
			(obj.content) = () => ([(this.Range_case3_number())]);
			return obj;
		}
		Section_range_row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([
				(this.Min_m5_number_label()), 
				(this.Min_0_number_label()), 
				(this.Min_5_number_label()), 
				(this.Max_m5_number_label()), 
				(this.Max_0_number_label()), 
				(this.Max_5_number_label()), 
				(this.Max_100_number_label()), 
				(this.Range_number_case1_label()), 
				(this.Range_number_case2_label()), 
				(this.Range_number_case3_label())
			]);
			return obj;
		}
		Section_range(){
			const obj = new this.$.$mol_section();
			(obj.title) = () => ("Range");
			(obj.content) = () => ([(this.Section_range_row())]);
			return obj;
		}
		Rows(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Section_value()), 
				(this.Section_initial()), 
				(this.Section_disabled()), 
				(this.Section_precision()), 
				(this.Section_range())
			]);
			return obj;
		}
		title(){
			return "Number input control with various configuration";
		}
		value(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		sub(){
			return [(this.Rows())];
		}
		tags(){
			return [
				"number", 
				"field", 
				"label", 
				"section"
			];
		}
		aspects(){
			return ["Widget/Control", "Type/Number"];
		}
	};
	($mol_mem(($.$mol_number_demo.prototype), "Value_string"));
	($mol_mem(($.$mol_number_demo.prototype), "reset_value"));
	($mol_mem(($.$mol_number_demo.prototype), "Reset"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_value_bar"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_value_row"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_value"));
	($mol_mem(($.$mol_number_demo.prototype), "Initial_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Initial_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Hint_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Hint_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_initial_row"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_initial"));
	($mol_mem(($.$mol_number_demo.prototype), "Value_field_disabled_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Value_field_disabled_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Disabled_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Disabled_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Dec_disabled_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Dec_disabled_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Inc_disabled_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Inc_disabled_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_disabled_row"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_disabled"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_change_10_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_change_10_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_change_01_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_change_01_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_100_number_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_100_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_5_number_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_5_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_01_number_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_01_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_005_number_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_005_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_view_001_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_view_001_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_view_10_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Precision_view_10_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_precision_row"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_precision"));
	($mol_mem(($.$mol_number_demo.prototype), "value_min_m5"));
	($mol_mem(($.$mol_number_demo.prototype), "Min_m5_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Min_m5_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "value_min_0"));
	($mol_mem(($.$mol_number_demo.prototype), "Min_0_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Min_0_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "value_min_5"));
	($mol_mem(($.$mol_number_demo.prototype), "Min_5_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Min_5_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "value_max_m5"));
	($mol_mem(($.$mol_number_demo.prototype), "Max_m5_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Max_m5_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "value_max_0"));
	($mol_mem(($.$mol_number_demo.prototype), "Max_0_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Max_0_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "value_max_5"));
	($mol_mem(($.$mol_number_demo.prototype), "Max_5_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Max_5_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "value_max_100"));
	($mol_mem(($.$mol_number_demo.prototype), "Max_100_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Max_100_number_label"));
	($mol_mem(($.$mol_number_demo.prototype), "value_case1_range"));
	($mol_mem(($.$mol_number_demo.prototype), "Range_case1_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Range_number_case1_label"));
	($mol_mem(($.$mol_number_demo.prototype), "value_case2_range"));
	($mol_mem(($.$mol_number_demo.prototype), "Range_case2_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Range_number_case2_label"));
	($mol_mem(($.$mol_number_demo.prototype), "value_case3_range"));
	($mol_mem(($.$mol_number_demo.prototype), "Range_case3_number"));
	($mol_mem(($.$mol_number_demo.prototype), "Range_number_case3_label"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_range_row"));
	($mol_mem(($.$mol_number_demo.prototype), "Section_range"));
	($mol_mem(($.$mol_number_demo.prototype), "Rows"));
	($mol_mem(($.$mol_number_demo.prototype), "value"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_number_demo extends $.$mol_number_demo {
            value_string() {
                return String(this.value());
            }
            reset_value() {
                this.value(Number.NaN);
            }
            reset_enabled() {
                return Number.isFinite(this.value());
            }
        }
        __decorate([
            $mol_mem
        ], $mol_number_demo.prototype, "value_string", null);
        __decorate([
            $mol_mem
        ], $mol_number_demo.prototype, "reset_enabled", null);
        $$.$mol_number_demo = $mol_number_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_page_demo) = class $mol_page_demo extends ($.$mol_example_large) {
		Button_tools(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Toolbar Button");
			return obj;
		}
		Text(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Button_foot(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Footer Button");
			return obj;
		}
		Page(){
			const obj = new this.$.$mol_page();
			(obj.tools) = () => ([(this.Button_tools())]);
			(obj.body) = () => ([(this.Text())]);
			(obj.foot) = () => ([(this.Button_foot())]);
			return obj;
		}
		title(){
			return "Page with header, body and footer";
		}
		sub(){
			return [(this.Page())];
		}
		tags(){
			return [
				"container", 
				"header", 
				"footer", 
				"toolbar", 
				"app", 
				"bar", 
				"bottom", 
				"navigator"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_page_demo.prototype), "Button_tools"));
	($mol_mem(($.$mol_page_demo.prototype), "Text"));
	($mol_mem(($.$mol_page_demo.prototype), "Button_foot"));
	($mol_mem(($.$mol_page_demo.prototype), "Page"));


;
"use strict";

;
	($.$mol_paginator_demo) = class $mol_paginator_demo extends ($.$mol_example_small) {
		page(next){
			if(next !== undefined) return next;
			return 0;
		}
		Pages(){
			const obj = new this.$.$mol_paginator();
			(obj.value) = (next) => ((this.page(next)));
			return obj;
		}
		title(){
			return "Page switcher";
		}
		sub(){
			return [(this.Pages())];
		}
		tags(){
			return ["paginator", "navigation"];
		}
		aspects(){
			return ["Widget/Control", "Type/Number/Integer"];
		}
	};
	($mol_mem(($.$mol_paginator_demo.prototype), "page"));
	($mol_mem(($.$mol_paginator_demo.prototype), "Pages"));


;
"use strict";

;
	($.$mol_plot_demo) = class $mol_plot_demo extends ($.$mol_example_large) {
		saturation_series(){
			return [];
		}
		Saturation_fill(){
			const obj = new this.$.$mol_plot_fill();
			return obj;
		}
		Saturation_line(){
			const obj = new this.$.$mol_plot_line();
			(obj.type) = () => ("dashed");
			return obj;
		}
		Saturation(){
			const obj = new this.$.$mol_plot_group();
			(obj.series_y) = () => ((this.saturation_series()));
			(obj.graphs) = () => ([(this.Saturation_fill()), (this.Saturation_line())]);
			return obj;
		}
		input_series(){
			return [];
		}
		Input_line(){
			const obj = new this.$.$mol_plot_line();
			return obj;
		}
		Input_dots(){
			const obj = new this.$.$mol_plot_dot();
			return obj;
		}
		Input(){
			const obj = new this.$.$mol_plot_group();
			(obj.series_y) = () => ((this.input_series()));
			(obj.graphs) = () => ([(this.Input_line()), (this.Input_dots())]);
			return obj;
		}
		output_series(){
			return [];
		}
		Output(){
			const obj = new this.$.$mol_plot_bar();
			(obj.series_y) = () => ((this.output_series()));
			return obj;
		}
		Voltage_title(){
			return "V";
		}
		Voltage(){
			const obj = new this.$.$mol_plot_ruler_vert();
			(obj.title) = () => ((this.Voltage_title()));
			return obj;
		}
		Time_title(){
			return "ms";
		}
		Time(){
			const obj = new this.$.$mol_plot_ruler_hor();
			(obj.title) = () => ((this.Time_title()));
			return obj;
		}
		Plot(){
			const obj = new this.$.$mol_plot_pane();
			(obj.graphs) = () => ([
				(this.Saturation()), 
				(this.Input()), 
				(this.Output()), 
				(this.Voltage()), 
				(this.Time())
			]);
			return obj;
		}
		title(){
			return "Dynamic lightweight graphs";
		}
		count(next){
			if(next !== undefined) return next;
			return 20;
		}
		frequency(){
			return 8;
		}
		sub(){
			return [(this.Plot())];
		}
		tags(){
			return [
				"visualization", 
				"chart", 
				"graph", 
				"dashboard"
			];
		}
		aspects(){
			return [
				"Widget/Draw/Chart/Line", 
				"Widget/Draw/Chart/Fill", 
				"Widget/Draw/Chart/Dot"
			];
		}
	};
	($mol_mem(($.$mol_plot_demo.prototype), "Saturation_fill"));
	($mol_mem(($.$mol_plot_demo.prototype), "Saturation_line"));
	($mol_mem(($.$mol_plot_demo.prototype), "Saturation"));
	($mol_mem(($.$mol_plot_demo.prototype), "Input_line"));
	($mol_mem(($.$mol_plot_demo.prototype), "Input_dots"));
	($mol_mem(($.$mol_plot_demo.prototype), "Input"));
	($mol_mem(($.$mol_plot_demo.prototype), "Output"));
	($mol_mem(($.$mol_plot_demo.prototype), "Voltage"));
	($mol_mem(($.$mol_plot_demo.prototype), "Time"));
	($mol_mem(($.$mol_plot_demo.prototype), "Plot"));
	($mol_mem(($.$mol_plot_demo.prototype), "count"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_demo extends $.$mol_plot_demo {
            series_x() {
                const next = [];
                for (let i = 0, count = this.count(); i < count; i++)
                    next.push(i);
                return next;
            }
            input_series() {
                const x = this.series_x();
                return x.map(i => Math.sin(i * 9 / x.length) * 2);
            }
            output_series() {
                $mol_state_time.now(Math.floor(1000 / this.frequency()));
                return this.input_series().map(input => input * Math.random());
            }
            saturation_series() {
                const input = this.output_series();
                const prev = $mol_mem_cached(() => this.saturation_series()) ?? [];
                return input.map((val, i) => {
                    const next = (val + 9 * (prev[i] || 0)) / 10;
                    return (Math.abs(next) > Math.abs(val)) ? next : val;
                });
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_demo.prototype, "series_x", null);
        __decorate([
            $mol_mem
        ], $mol_plot_demo.prototype, "input_series", null);
        __decorate([
            $mol_mem
        ], $mol_plot_demo.prototype, "output_series", null);
        __decorate([
            $mol_mem
        ], $mol_plot_demo.prototype, "saturation_series", null);
        $$.$mol_plot_demo = $mol_plot_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/demo/demo.view.css", "[mol_plot_demo_saturation] {\n\tstroke-dasharray: .5% .5%;\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_map_heat) = class $mol_plot_map_heat extends ($.$mol_plot_group) {
		level_graphs(){
			return [];
		}
		level_hint(id){
			return "";
		}
		level_points(id){
			return [];
		}
		level_opacity(id){
			return "1";
		}
		level_diameter(){
			return 10;
		}
		level_aspect(){
			return 1;
		}
		series_z(){
			return [];
		}
		graphs(){
			return (this.level_graphs());
		}
		Level(id){
			const obj = new this.$.$mol_plot_map_heat_level();
			(obj.hint) = () => ((this.level_hint(id)));
			(obj.points) = () => ((this.level_points(id)));
			(obj.opacity) = () => ((this.level_opacity(id)));
			(obj.diameter) = () => ((this.level_diameter()));
			(obj.aspect) = () => ((this.level_aspect()));
			return obj;
		}
		Sample(){
			const obj = new this.$.$mol_plot_graph_sample();
			(obj.color) = () => ((this.color()));
			return obj;
		}
	};
	($mol_mem_key(($.$mol_plot_map_heat.prototype), "Level"));
	($mol_mem(($.$mol_plot_map_heat.prototype), "Sample"));
	($.$mol_plot_map_heat_level) = class $mol_plot_map_heat_level extends ($.$mol_plot_dot) {
		opacity(){
			return "1";
		}
		style(){
			return {...(super.style()), "opacity": (this.opacity())};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_map_heat extends $.$mol_plot_map_heat {
            levels() {
                return [...new Set(this.series_z())].sort((a, b) => a - b);
            }
            level_graphs() {
                return this.levels().map((_, i) => this.Level(i));
            }
            level_points(level) {
                const value = this.levels()[level];
                const series_z = this.series_z();
                const res = [];
                for (const [index, point] of this.points().entries()) {
                    if (series_z[index] !== value)
                        continue;
                    res.push(point);
                }
                return res;
            }
            level_opacity(level) {
                return String(level / this.levels().length);
            }
            level_diameter() {
                return Math.min(...this.scale().map(Math.abs));
            }
            level_aspect() {
                const scale = this.scale().map(Math.abs);
                return scale[1] / scale[0];
            }
            level_hint(index) {
                return this.levels()[index].toLocaleString();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_map_heat.prototype, "levels", null);
        __decorate([
            $mol_mem
        ], $mol_plot_map_heat.prototype, "level_graphs", null);
        __decorate([
            $mol_mem_key
        ], $mol_plot_map_heat.prototype, "level_points", null);
        __decorate([
            $mol_mem_key
        ], $mol_plot_map_heat.prototype, "level_opacity", null);
        __decorate([
            $mol_mem
        ], $mol_plot_map_heat.prototype, "level_diameter", null);
        __decorate([
            $mol_mem
        ], $mol_plot_map_heat.prototype, "level_aspect", null);
        __decorate([
            $mol_mem_key
        ], $mol_plot_map_heat.prototype, "level_hint", null);
        $$.$mol_plot_map_heat = $mol_plot_map_heat;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/map/heat/heat.view.css", "[mol_plot_map_heat_level_curve] {\n\tstroke-linecap: square;\n\tfill: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_map_heat_demo) = class $mol_plot_map_heat_demo extends ($.$mol_example_large) {
		zoom(next){
			return (this.Plot().scale_y(next));
		}
		terrain_x(){
			return [];
		}
		terrain_y(){
			return [];
		}
		terrain_z(){
			return [];
		}
		Terrain(){
			const obj = new this.$.$mol_plot_map_heat();
			(obj.series_x) = () => ((this.terrain_x()));
			(obj.series_y) = () => ((this.terrain_y()));
			(obj.series_z) = () => ((this.terrain_z()));
			return obj;
		}
		Plot(){
			const obj = new this.$.$mol_plot_pane();
			(obj.zoom) = (next) => ((this.zoom(next)));
			(obj.graphs) = () => ([(this.Terrain())]);
			return obj;
		}
		title(){
			return "Dynamic Heat Map Graphs";
		}
		count_x(){
			return 20;
		}
		count_y(){
			return 200;
		}
		count_z(){
			return 20;
		}
		sub(){
			return [(this.Plot())];
		}
		tags(){
			return [
				"$mol_plot_pane", 
				"visualization", 
				"heatmap", 
				"graph", 
				"dashboard"
			];
		}
		aspects(){
			return ["Widget/Draw/Chart/Heat"];
		}
	};
	($mol_mem(($.$mol_plot_map_heat_demo.prototype), "Terrain"));
	($mol_mem(($.$mol_plot_map_heat_demo.prototype), "Plot"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_map_heat_demo extends $.$mol_plot_map_heat_demo {
            terrain_x() {
                const count_x = this.count_x();
                const count_y = this.count_y();
                return Array.from({ length: count_x * count_y }, (_, i) => i % count_x);
            }
            terrain_y() {
                const count_x = this.count_x();
                const count_y = this.count_y();
                return Array.from({ length: count_x * count_y }, (_, i) => Math.floor(i / count_x));
            }
            terrain_z() {
                const count_x = this.count_x();
                const count_y = this.count_y();
                const count_z = this.count_z();
                return Array.from({ length: count_x * count_y }, () => Math.floor(Math.random() * count_z) * 1000);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_map_heat_demo.prototype, "terrain_x", null);
        __decorate([
            $mol_mem
        ], $mol_plot_map_heat_demo.prototype, "terrain_y", null);
        __decorate([
            $mol_mem
        ], $mol_plot_map_heat_demo.prototype, "terrain_z", null);
        $$.$mol_plot_map_heat_demo = $mol_plot_map_heat_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_anchor) = class $mol_icon_anchor extends ($.$mol_icon) {
		path(){
			return "M12 2A3 3 0 0 0 9 5A3 3 0 0 0 11 7.83V9H8V11H11V19.92C10.26 19.79 9.5 19.58 8.79 19.27C8.05 18.95 7.4 18.56 6.82 18.09C6.24 17.62 5.78 17.11 5.44 16.55L7 15L3 12V15C3 15.97 3.27 16.88 3.82 17.72C4.37 18.56 5.09 19.31 6 19.95C6.87 20.59 7.84 21.09 8.88 21.45C9.93 21.81 10.97 22 12 22C13.03 22 14.07 21.8 15.12 21.44C16.16 21.08 17.13 20.58 18 19.95C18.92 19.31 19.63 18.57 20.18 17.72C20.73 16.88 21 15.97 21 15V12L17 15L18.56 16.55C18.22 17.11 17.76 17.62 17.18 18.09C16.6 18.56 15.95 18.95 15.21 19.27C14.5 19.58 13.74 19.79 13 19.92V11H16V9H13V7.82A3 3 0 0 0 15 5A3 3 0 0 0 12 2M12 4A1 1 0 0 1 13 5A1 1 0 0 1 12 6A1 1 0 0 1 11 5A1 1 0 0 1 12 4Z";
		}
	};


;
"use strict";

;
	($.$mol_pop_demo) = class $mol_pop_demo extends ($.$mol_example) {
		show_title(){
			return "Showed";
		}
		pop_showed_check_hint(){
			return "$mol_pop showed";
		}
		pop_showed(next){
			if(next !== undefined) return next;
			return true;
		}
		Show_check(){
			const obj = new this.$.$mol_check_box();
			(obj.hint) = () => ((this.pop_showed_check_hint()));
			(obj.checked) = (next) => ((this.pop_showed(next)));
			return obj;
		}
		Showed(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.show_title()));
			(obj.content) = () => ([(this.Show_check())]);
			return obj;
		}
		align_title(){
			return "Align";
		}
		pop_align(next){
			if(next !== undefined) return next;
			return "bottom_right";
		}
		aligins(){
			return {
				"left_top": "left_top", 
				"left_center": "left_center", 
				"left_bottom": "left_bottom", 
				"right_top": "right_top", 
				"right_center": "right_center", 
				"right_bottom": "right_bottom", 
				"center": "center", 
				"top_left": "top_left", 
				"top_center": "top_center", 
				"top_right": "top_right", 
				"bottom_left": "bottom_left", 
				"bottom_center": "bottom_center", 
				"bottom_right": "bottom_right"
			};
		}
		Align_select(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.pop_align(next)));
			(obj.options) = () => ((this.aligins()));
			return obj;
		}
		Align(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ((this.align_title()));
			(obj.content) = () => ([(this.Align_select())]);
			return obj;
		}
		Manage(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Showed()), (this.Align())]);
			return obj;
		}
		anchor_button_icon(){
			const obj = new this.$.$mol_icon_anchor();
			return obj;
		}
		anchor_button_title(){
			return "Anchor";
		}
		Pop_anchor(){
			const obj = new this.$.$mol_button_major();
			(obj.sub) = () => ([(this.anchor_button_icon()), (this.anchor_button_title())]);
			return obj;
		}
		bubble_hint(){
			return "This is\nbubble_content";
		}
		Content(){
			const obj = new this.$.$mol_row();
			(obj.minimal_width) = () => (150);
			(obj.sub) = () => ([(this.bubble_hint())]);
			return obj;
		}
		Pop(){
			const obj = new this.$.$mol_pop();
			(obj.Anchor) = () => ((this.Pop_anchor()));
			(obj.showed) = () => ((this.pop_showed()));
			(obj.align) = () => ((this.pop_align()));
			(obj.bubble_content) = () => ([(this.Content())]);
			return obj;
		}
		Pop_area(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Pop())]);
			return obj;
		}
		title(){
			return "Pop up block with various alignment";
		}
		sub(){
			return [(this.Manage()), (this.Pop_area())];
		}
		tags(){
			return [
				"popup", 
				"menu", 
				"align", 
				"container", 
				"modal"
			];
		}
		aspects(){
			return ["Widget/Float"];
		}
	};
	($mol_mem(($.$mol_pop_demo.prototype), "pop_showed"));
	($mol_mem(($.$mol_pop_demo.prototype), "Show_check"));
	($mol_mem(($.$mol_pop_demo.prototype), "Showed"));
	($mol_mem(($.$mol_pop_demo.prototype), "pop_align"));
	($mol_mem(($.$mol_pop_demo.prototype), "Align_select"));
	($mol_mem(($.$mol_pop_demo.prototype), "Align"));
	($mol_mem(($.$mol_pop_demo.prototype), "Manage"));
	($mol_mem(($.$mol_pop_demo.prototype), "anchor_button_icon"));
	($mol_mem(($.$mol_pop_demo.prototype), "Pop_anchor"));
	($mol_mem(($.$mol_pop_demo.prototype), "Content"));
	($mol_mem(($.$mol_pop_demo.prototype), "Pop"));
	($mol_mem(($.$mol_pop_demo.prototype), "Pop_area"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem } = $mol_style_unit;
        const { calc } = $mol_style_func;
        $mol_style_define($mol_pop_demo, {
            flex: {
                direction: 'column'
            },
            alignItems: 'flex-start',
            Pop_area: {
                display: 'flex',
                padding: rem(10),
                boxShadow: `0 0 0 1px ${$mol_theme.line}`,
                border: {
                    radius: $mol_gap.round
                }
            }
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_pop_over) = class $mol_pop_over extends ($.$mol_pop) {
		hovered(next){
			if(next !== undefined) return next;
			return false;
		}
		event_show(next){
			if(next !== undefined) return next;
			return null;
		}
		event_hide(next){
			if(next !== undefined) return next;
			return null;
		}
		showed(){
			return (this.hovered());
		}
		attr(){
			return {...(super.attr()), "tabindex": 0};
		}
		event(){
			return {
				...(super.event()), 
				"mouseenter": (next) => (this.event_show(next)), 
				"mouseleave": (next) => (this.event_hide(next))
			};
		}
	};
	($mol_mem(($.$mol_pop_over.prototype), "hovered"));
	($mol_mem(($.$mol_pop_over.prototype), "event_show"));
	($mol_mem(($.$mol_pop_over.prototype), "event_hide"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_pop_over extends $.$mol_pop_over {
            event_show(event) {
                this.hovered(true);
            }
            event_hide(event) {
                this.hovered(false);
            }
            showed() {
                return this.focused() || this.hovered();
            }
        }
        $$.$mol_pop_over = $mol_pop_over;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/pop/over/over.view.css", "[mol_pop_over]:focus {\r\n\toutline: none;\r\n}");
})($ || ($ = {}));

;
	($.$mol_pop_over_demo) = class $mol_pop_over_demo extends ($.$mol_example_small) {
		file_title(){
			return "File";
		}
		open_title(){
			return "Open";
		}
		Open(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.open_title()));
			return obj;
		}
		export_title(){
			return "Export";
		}
		Export(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.export_title()));
			return obj;
		}
		save_title(){
			return "Save";
		}
		Save(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.save_title()));
			return obj;
		}
		File_menu(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Open()), 
				(this.Export()), 
				(this.Save())
			]);
			return obj;
		}
		File(){
			const obj = new this.$.$mol_pop_over();
			(obj.align) = () => ("bottom_right");
			(obj.Anchor) = () => ((this.file_title()));
			(obj.bubble_content) = () => ([(this.File_menu())]);
			return obj;
		}
		help_title(){
			return "About";
		}
		updates_title(){
			return "Updates";
		}
		Updates(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.updates_title()));
			return obj;
		}
		about_title(){
			return "About";
		}
		About(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.about_title()));
			return obj;
		}
		Help_menu(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Updates()), (this.About())]);
			return obj;
		}
		Help(){
			const obj = new this.$.$mol_pop_over();
			(obj.align) = () => ("bottom_right");
			(obj.Anchor) = () => ((this.help_title()));
			(obj.bubble_content) = () => ([(this.Help_menu())]);
			return obj;
		}
		Menu(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.File()), (this.Help())]);
			return obj;
		}
		title(){
			return "Menu that opens on mouse over";
		}
		sub(){
			return [(this.Menu())];
		}
		tags(){
			return [
				"popover", 
				"pop", 
				"menu", 
				"hover", 
				"tooltip"
			];
		}
		aspects(){
			return ["Widget/Float"];
		}
	};
	($mol_mem(($.$mol_pop_over_demo.prototype), "Open"));
	($mol_mem(($.$mol_pop_over_demo.prototype), "Export"));
	($mol_mem(($.$mol_pop_over_demo.prototype), "Save"));
	($mol_mem(($.$mol_pop_over_demo.prototype), "File_menu"));
	($mol_mem(($.$mol_pop_over_demo.prototype), "File"));
	($mol_mem(($.$mol_pop_over_demo.prototype), "Updates"));
	($mol_mem(($.$mol_pop_over_demo.prototype), "About"));
	($mol_mem(($.$mol_pop_over_demo.prototype), "Help_menu"));
	($mol_mem(($.$mol_pop_over_demo.prototype), "Help"));
	($mol_mem(($.$mol_pop_over_demo.prototype), "Menu"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/pop/over/demo/over.view.css", "[mol_pop_over_demo_file_menu] ,\n[mol_pop_over_demo_help_menu] {\n\talign-items: stretch;\n\tdisplay: flex;\n\tflex-direction: column;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_portion_demo) = class $mol_portion_demo extends ($.$mol_example_small) {
		fist(){
			return 0;
		}
		Empty(){
			const obj = new this.$.$mol_portion();
			(obj.portion) = () => ((this.fist()));
			return obj;
		}
		second(){
			return 0.5;
		}
		Partial(){
			const obj = new this.$.$mol_portion();
			(obj.portion) = () => ((this.second()));
			return obj;
		}
		third(){
			return 1;
		}
		Full(){
			const obj = new this.$.$mol_portion();
			(obj.portion) = () => ((this.third()));
			return obj;
		}
		title(){
			return "Progress bar in various states";
		}
		sub(){
			return [
				(this.Empty()), 
				(this.Partial()), 
				(this.Full())
			];
		}
		tags(){
			return ["progress", "slider"];
		}
		aspects(){
			return ["Widget/Draw/Chart/Bar"];
		}
	};
	($mol_mem(($.$mol_portion_demo.prototype), "Empty"));
	($mol_mem(($.$mol_portion_demo.prototype), "Partial"));
	($mol_mem(($.$mol_portion_demo.prototype), "Full"));


;
"use strict";

;
	($.$mol_icon_menu) = class $mol_icon_menu extends ($.$mol_icon) {
		path(){
			return "M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z";
		}
	};


;
"use strict";

;
	($.$mol_pick_demo) = class $mol_pick_demo extends ($.$mol_example_small) {
		info_content_text(){
			return "## Info Pop-up\n**Markdown text content**";
		}
		Info_content(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.info_content_text()));
			return obj;
		}
		Info_pop(){
			const obj = new this.$.$mol_pick();
			(obj.title) = () => ("Info");
			(obj.bubble_content) = () => ([(this.Info_content())]);
			return obj;
		}
		Options_trigger_icon(){
			const obj = new this.$.$mol_icon_menu();
			return obj;
		}
		Menu_item_copy(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("Copy");
			(obj.text) = () => ("Hello, World!");
			return obj;
		}
		Menu_item_download_blob(){
			const obj = new this.$.$mol_blob();
			return obj;
		}
		Menu_item_download(){
			const obj = new this.$.$mol_button_download();
			(obj.title) = () => ("Download");
			(obj.blob) = () => ((this.Menu_item_download_blob()));
			(obj.file_name) = () => ("demo.bin");
			return obj;
		}
		menu_item_delete_icon(){
			const obj = new this.$.$mol_icon_trash_can_outline();
			return obj;
		}
		menu_item_delete_label(){
			return "Delete";
		}
		delete_confirm(next){
			if(next !== undefined) return next;
			return null;
		}
		Delete_confirm(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Confirm");
			(obj.click) = (next) => ((this.delete_confirm(next)));
			return obj;
		}
		Menu_item_delete(){
			const obj = new this.$.$mol_pick();
			(obj.align) = () => ("center");
			(obj.trigger_content) = () => ([(this.menu_item_delete_icon()), (this.menu_item_delete_label())]);
			(obj.bubble_content) = () => ([(this.Delete_confirm())]);
			return obj;
		}
		Options_content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Menu_item_copy()), 
				(this.Menu_item_download()), 
				(this.Menu_item_delete())
			]);
			return obj;
		}
		Options_pop(){
			const obj = new this.$.$mol_pick();
			(obj.hint) = () => ("Click to show options menu");
			(obj.trigger_content) = () => ([(this.Options_trigger_icon())]);
			(obj.bubble_content) = () => ([(this.Options_content())]);
			return obj;
		}
		title(){
			return "Simple and complex popups";
		}
		sub(){
			return [(this.Info_pop()), (this.Options_pop())];
		}
		tags(){
			return [
				"pick", 
				"popup", 
				"info", 
				"menu", 
				"icon", 
				"container", 
				"confirm", 
				"modal"
			];
		}
		aspects(){
			return ["Widget/Float", "Widget/Control/Button/Picker"];
		}
	};
	($mol_mem(($.$mol_pick_demo.prototype), "Info_content"));
	($mol_mem(($.$mol_pick_demo.prototype), "Info_pop"));
	($mol_mem(($.$mol_pick_demo.prototype), "Options_trigger_icon"));
	($mol_mem(($.$mol_pick_demo.prototype), "Menu_item_copy"));
	($mol_mem(($.$mol_pick_demo.prototype), "Menu_item_download_blob"));
	($mol_mem(($.$mol_pick_demo.prototype), "Menu_item_download"));
	($mol_mem(($.$mol_pick_demo.prototype), "menu_item_delete_icon"));
	($mol_mem(($.$mol_pick_demo.prototype), "delete_confirm"));
	($mol_mem(($.$mol_pick_demo.prototype), "Delete_confirm"));
	($mol_mem(($.$mol_pick_demo.prototype), "Menu_item_delete"));
	($mol_mem(($.$mol_pick_demo.prototype), "Options_content"));
	($mol_mem(($.$mol_pick_demo.prototype), "Options_pop"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_pick_demo extends $.$mol_pick_demo {
            delete_confirm() {
                this.Options_pop().showed(false);
            }
        }
        $$.$mol_pick_demo = $mol_pick_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_clock) = class $mol_icon_clock extends ($.$mol_icon) {
		path(){
			return "M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M16.2,16.2L11,13V7H12.5V12.2L17,14.9L16.2,16.2Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_clock_outline) = class $mol_icon_clock_outline extends ($.$mol_icon) {
		path(){
			return "M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z";
		}
	};


;
"use strict";

;
	($.$mol_pick_time) = class $mol_pick_time extends ($.$mol_pick) {
		enabled(){
			return true;
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		Input(){
			const obj = new this.$.$mol_format();
			(obj.value) = (next) => ((this.value(next)));
			(obj.mask) = () => ("__:__");
			(obj.allow) = () => ("0123456789.");
			(obj.enabled) = () => ((this.enabled()));
			return obj;
		}
		hour_selected(next){
			if(next !== undefined) return next;
			return "";
		}
		hour_options(){
			return {};
		}
		Hours(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.hour_selected(next)));
			(obj.options) = () => ((this.hour_options()));
			return obj;
		}
		Delimiter(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => (":");
			return obj;
		}
		minute_selected(next){
			if(next !== undefined) return next;
			return "";
		}
		minute_options(){
			return {};
		}
		Minutes(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.minute_selected(next)));
			(obj.options) = () => ((this.minute_options()));
			return obj;
		}
		Pickers(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([
				(this.Hours()), 
				(this.Delimiter()), 
				(this.Minutes())
			]);
			return obj;
		}
		Icon(){
			const obj = new this.$.$mol_icon_clock_outline();
			return obj;
		}
		trigger_enabled(){
			return (this.enabled());
		}
		bubble_content(){
			return [(this.Input()), (this.Pickers())];
		}
		value_moment(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_time_moment();
			return obj;
		}
	};
	($mol_mem(($.$mol_pick_time.prototype), "value"));
	($mol_mem(($.$mol_pick_time.prototype), "Input"));
	($mol_mem(($.$mol_pick_time.prototype), "hour_selected"));
	($mol_mem(($.$mol_pick_time.prototype), "Hours"));
	($mol_mem(($.$mol_pick_time.prototype), "Delimiter"));
	($mol_mem(($.$mol_pick_time.prototype), "minute_selected"));
	($mol_mem(($.$mol_pick_time.prototype), "Minutes"));
	($mol_mem(($.$mol_pick_time.prototype), "Pickers"));
	($mol_mem(($.$mol_pick_time.prototype), "Icon"));
	($mol_mem(($.$mol_pick_time.prototype), "value_moment"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_pick_time extends $.$mol_pick_time {
            trigger_content() {
                return [this.value_moment().toString('hh:mm.sss') || this.Icon()];
            }
            value_moment(next) {
                if (next === undefined) {
                    const moment = $mol_wire_probe(() => this.value_moment());
                    return time_with_moment(this.value(), moment);
                }
                this.value(next?.toString('hh:mm.sss') || '');
                return next;
            }
            value(next) {
                if (next === undefined) {
                    const moment = this.value_moment();
                    return moment?.toString('hh:mm.sss') || '';
                }
                this.value_moment(time_with_moment(next, this.value_moment()));
                return next;
            }
            hour_selected(hour_str) {
                if (hour_str === undefined) {
                    return this.value_moment()?.toString('h');
                }
                let moment = this.value_moment();
                const minute = moment?.minute ?? 0;
                const hour = Number(hour_str || moment.hour);
                moment = this.value_moment(moment?.merge({ hour, minute }) || new $mol_time_moment({ hour, minute }));
                return String(moment.hour);
            }
            minute_selected(minute_str) {
                if (minute_str !== undefined) {
                    const moment = this.value_moment();
                    const hour = moment?.hour ?? new $mol_time_moment().hour;
                    const minute = Number(minute_str || moment.minute);
                    this.value_moment(moment?.merge({ hour, minute }) || new $mol_time_moment({ hour, minute }));
                    this.showed(false);
                }
                const moment = this.value_moment();
                if (!moment)
                    return '';
                if (moment.minute === undefined)
                    return '';
                return String(Math.floor(moment.minute / 5) * 5);
            }
            hour_options() {
                return {
                    '0': '00', '1': '01', '2': '02', '3': '03', '4': '04', '5': '05',
                    '6': '06', '7': '07', '8': '08', '9': '09', '10': '10', '11': '11',
                    '12': '12', '13': '13', '14': '14', '15': '15', '16': '16', '17': '17',
                    '18': '18', '19': '19', '20': '20', '21': '21', '22': '22', '23': '23',
                };
            }
            minute_options() {
                return {
                    '0': '00', '5': '05', '10': '10', '15': '15', '20': '20', '25': '25',
                    '30': '30', '35': '35', '40': '40', '45': '45', '50': '50', '55': '55',
                };
            }
        }
        __decorate([
            $mol_mem
        ], $mol_pick_time.prototype, "value_moment", null);
        __decorate([
            $mol_mem
        ], $mol_pick_time.prototype, "value", null);
        __decorate([
            $mol_mem
        ], $mol_pick_time.prototype, "hour_selected", null);
        __decorate([
            $mol_mem
        ], $mol_pick_time.prototype, "minute_selected", null);
        $$.$mol_pick_time = $mol_pick_time;
        function time_with_moment(value_str, moment) {
            const [hour, minute] = value_str.split(':').map(str => Number(str));
            if (value_str) {
                return moment ?
                    moment.merge(new $mol_time_moment({ hour, minute })) :
                    new $mol_time_moment({ hour, minute });
            }
            else {
                return moment ?
                    new $mol_time_moment(moment.toString('YYYY-MM-DD')) :
                    new $mol_time_moment({});
            }
        }
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/pick/time/time.view.css", "/* [mol_pick_time_bubble] {\n\tpadding: var(--mol_gap_block);\n} */\n\n[mol_pick_time_pickers] {\n\tpadding: 0;\n\talign-items: center;\n}\n\n[mol_pick_time_hours],\n[mol_pick_time_minutes] {\n\tdisplay: grid;\n\tgrid-auto-flow: column;\n\tgrid-template-rows: repeat(6, 1fr);\n}\n\n[mol_pick_time_hours_option],\n[mol_pick_time_minutes_option] {\n\tjustify-content: center;\t\n}\n");
})($ || ($ = {}));

;
	($.$mol_pick_time_demo) = class $mol_pick_time_demo extends ($.$mol_example_small) {
		moment(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_time_moment("T01:23");
			return obj;
		}
		Picker(){
			const obj = new this.$.$mol_pick_time();
			(obj.value_moment) = (next) => ((this.moment(next)));
			return obj;
		}
		sub(){
			return [(this.Picker())];
		}
		tags(){
			return [
				"$mol_time_moment", 
				"timepicker", 
				"time", 
				"datetime"
			];
		}
		aspects(){
			return ["Widget/Control/Button/Picker", "Type/Time"];
		}
	};
	($mol_mem(($.$mol_pick_time_demo.prototype), "moment"));
	($mol_mem(($.$mol_pick_time_demo.prototype), "Picker"));


;
"use strict";

;
	($.$mol_row_demo_form) = class $mol_row_demo_form extends ($.$mol_example) {
		name_hint(){
			return "Jack Sparrow";
		}
		name(next){
			if(next !== undefined) return next;
			return "";
		}
		suggest1(){
			return "Jack Sparrow";
		}
		suggest2(){
			return "Bruce Wayne";
		}
		Name(){
			const obj = new this.$.$mol_search();
			(obj.hint) = () => ((this.name_hint()));
			(obj.query) = (next) => ((this.name(next)));
			(obj.suggests) = () => ([(this.suggest1()), (this.suggest2())]);
			return obj;
		}
		count_hint(){
			return "Count";
		}
		count(next){
			if(next !== undefined) return next;
			return null;
		}
		Count(){
			const obj = new this.$.$mol_number();
			(obj.hint) = () => ((this.count_hint()));
			(obj.value) = (next) => ((this.count(next)));
			return obj;
		}
		progress(){
			return 0.33;
		}
		Progress(){
			const obj = new this.$.$mol_portion();
			(obj.portion) = () => ((this.progress()));
			return obj;
		}
		publish_label(){
			return "Shared";
		}
		publish(next){
			if(next !== undefined) return next;
			return false;
		}
		Publish(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.publish_label()));
			(obj.checked) = (next) => ((this.publish(next)));
			return obj;
		}
		drop_title(){
			return "Drop";
		}
		Drop(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.drop_title()));
			return obj;
		}
		Row(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([
				(this.Name()), 
				(this.Count()), 
				(this.Progress()), 
				(this.Publish()), 
				(this.Drop())
			]);
			return obj;
		}
		title(){
			return "Some controls in one row with equal paddings and wrapping support";
		}
		sub(){
			return [(this.Row())];
		}
		tags(){
			return [
				"row", 
				"container", 
				"flex"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_row_demo_form.prototype), "name"));
	($mol_mem(($.$mol_row_demo_form.prototype), "Name"));
	($mol_mem(($.$mol_row_demo_form.prototype), "count"));
	($mol_mem(($.$mol_row_demo_form.prototype), "Count"));
	($mol_mem(($.$mol_row_demo_form.prototype), "Progress"));
	($mol_mem(($.$mol_row_demo_form.prototype), "publish"));
	($mol_mem(($.$mol_row_demo_form.prototype), "Publish"));
	($mol_mem(($.$mol_row_demo_form.prototype), "Drop"));
	($mol_mem(($.$mol_row_demo_form.prototype), "Row"));


;
"use strict";

;
	($.$mol_row_demo_products) = class $mol_row_demo_products extends ($.$mol_example) {
		product_title(id){
			return "";
		}
		products(){
			return [];
		}
		Products(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ((this.products()));
			return obj;
		}
		title(){
			return "Product catalog";
		}
		count(){
			return 100;
		}
		Product(id){
			const obj = new this.$.$mol_card();
			(obj.minimal_width) = () => (110);
			(obj.minimal_height) = () => (100);
			(obj.title) = () => ((this.product_title(id)));
			return obj;
		}
		sub(){
			return [(this.Products())];
		}
		tags(){
			return [
				"products", 
				"grid", 
				"scroll"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_row_demo_products.prototype), "Products"));
	($mol_mem_key(($.$mol_row_demo_products.prototype), "Product"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_row_demo_products extends $.$mol_row_demo_products {
            products() {
                return $mol_range2(id => this.Product(id), () => this.count());
            }
            product_title(id) {
                return $mol_stub_product_name();
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_row_demo_products.prototype, "product_title", null);
        $$.$mol_row_demo_products = $mol_row_demo_products;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/row/demo/products/products.view.css", "\n[mol_row_demo_products_products] {\n\tdisplay: grid;\n\tgrid-template-columns: repeat( auto-fit, minmax( 8rem, 1fr ) );\n}\n\n[mol_row_demo_products_product] {\n\talign-self: stretch;\n}\n");
})($ || ($ = {}));

;
	($.$mol_scroll_demo) = class $mol_scroll_demo extends ($.$mol_example_large) {
		Filler0(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Filler1(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Filler2(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Filler3(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Filler4(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Filler5(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Filler6(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Filler7(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Filler8(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Filler9(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Filler0()), 
				(this.Filler1()), 
				(this.Filler2()), 
				(this.Filler3()), 
				(this.Filler4()), 
				(this.Filler5()), 
				(this.Filler6()), 
				(this.Filler7()), 
				(this.Filler8()), 
				(this.Filler9())
			]);
			return obj;
		}
		Scroll(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.Content())]);
			return obj;
		}
		title(){
			return "Simple scroll pane";
		}
		sub(){
			return [(this.Scroll())];
		}
		tags(){
			return ["scroll", "container"];
		}
		aspects(){
			return ["Widget/Scroll"];
		}
	};
	($mol_mem(($.$mol_scroll_demo.prototype), "Filler0"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Filler1"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Filler2"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Filler3"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Filler4"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Filler5"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Filler6"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Filler7"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Filler8"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Filler9"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Content"));
	($mol_mem(($.$mol_scroll_demo.prototype), "Scroll"));


;
"use strict";

;
	($.$mol_search_demo) = class $mol_search_demo extends ($.$mol_example_small) {
		query(){
			return (this.Search().query());
		}
		suggests(){
			return [];
		}
		Search(){
			const obj = new this.$.$mol_search();
			(obj.suggests) = () => ((this.suggests()));
			return obj;
		}
		title(){
			return "Search field with suggest ";
		}
		sub(){
			return [(this.Search())];
		}
		tags(){
			return [
				"search", 
				"suggest", 
				"autocomplete", 
				"string", 
				"fulltext", 
				"filter"
			];
		}
		aspects(){
			return ["Widget/Control", "Type/String"];
		}
	};
	($mol_mem(($.$mol_search_demo.prototype), "Search"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_search_demo extends $.$mol_search_demo {
            suggests() {
                const query = this.query();
                if (!query.length)
                    return ['foo ', 'bar '];
                this.$.$mol_wait_timeout(200);
                const length = (Math.floor(query.length / 10) + 1) * 10;
                return $mol_stub_strings(query, 30, length).map(v => v + ' ');
            }
        }
        __decorate([
            $mol_mem
        ], $mol_search_demo.prototype, "suggests", null);
        $$.$mol_search_demo = $mol_search_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_section_demo) = class $mol_section_demo extends ($.$mol_example_small) {
		Section_content(){
			const obj = new this.$.$mol_filler();
			return obj;
		}
		Section(){
			const obj = new this.$.$mol_section();
			(obj.title) = () => ("Section header");
			(obj.content) = () => ([(this.Section_content())]);
			return obj;
		}
		title(){
			return "Section with header";
		}
		sub(){
			return [(this.Section())];
		}
		tags(){
			return ["container", "header"];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_section_demo.prototype), "Section_content"));
	($mol_mem(($.$mol_section_demo.prototype), "Section"));


;
"use strict";

;
	($.$mol_section_demo_level) = class $mol_section_demo_level extends ($.$mol_example_small) {
		Section1_text(){
			const obj = new this.$.$mol_filler();
			(obj.min_symbols) = () => (250);
			return obj;
		}
		Section2_text(){
			const obj = new this.$.$mol_filler();
			(obj.min_symbols) = () => (250);
			return obj;
		}
		Section3_text(){
			const obj = new this.$.$mol_filler();
			(obj.min_symbols) = () => (250);
			return obj;
		}
		Section4_text(){
			const obj = new this.$.$mol_filler();
			(obj.min_symbols) = () => (250);
			return obj;
		}
		Section5_text(){
			const obj = new this.$.$mol_filler();
			(obj.min_symbols) = () => (250);
			return obj;
		}
		Section6_text(){
			const obj = new this.$.$mol_filler();
			(obj.min_symbols) = () => (250);
			return obj;
		}
		Section7_text(){
			const obj = new this.$.$mol_filler();
			(obj.min_symbols) = () => (250);
			return obj;
		}
		title(){
			return "Section with header";
		}
		sub(){
			return [(this.Section1())];
		}
		Section1(){
			const obj = new this.$.$mol_section();
			(obj.level) = () => (1);
			(obj.title) = () => ("Level 1");
			(obj.content) = () => ([(this.Section1_text()), (this.Section2())]);
			return obj;
		}
		Section2(){
			const obj = new this.$.$mol_section();
			(obj.level) = () => (2);
			(obj.title) = () => ("Level 2");
			(obj.content) = () => ([(this.Section2_text()), (this.Section3())]);
			return obj;
		}
		Section3(){
			const obj = new this.$.$mol_section();
			(obj.level) = () => (3);
			(obj.title) = () => ("Level 3");
			(obj.content) = () => ([(this.Section3_text()), (this.Section4())]);
			return obj;
		}
		Section4(){
			const obj = new this.$.$mol_section();
			(obj.level) = () => (4);
			(obj.title) = () => ("Level 4");
			(obj.content) = () => ([(this.Section4_text()), (this.Section5())]);
			return obj;
		}
		Section5(){
			const obj = new this.$.$mol_section();
			(obj.level) = () => (5);
			(obj.title) = () => ("Level 5");
			(obj.content) = () => ([(this.Section5_text()), (this.Section6())]);
			return obj;
		}
		Section6(){
			const obj = new this.$.$mol_section();
			(obj.level) = () => (6);
			(obj.title) = () => ("Level 6");
			(obj.content) = () => ([(this.Section6_text()), (this.Section7())]);
			return obj;
		}
		Section7(){
			const obj = new this.$.$mol_section();
			(obj.level) = () => (7);
			(obj.title) = () => ("Level 7");
			(obj.content) = () => ([(this.Section7_text())]);
			return obj;
		}
		tags(){
			return [
				"header", 
				"level", 
				"h1"
			];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_section_demo_level.prototype), "Section1_text"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section2_text"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section3_text"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section4_text"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section5_text"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section6_text"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section7_text"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section1"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section2"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section3"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section4"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section5"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section6"));
	($mol_mem(($.$mol_section_demo_level.prototype), "Section7"));


;
"use strict";

;
	($.$mol_select_demo_colors) = class $mol_select_demo_colors extends ($.$mol_example_small) {
		color_filter(){
			return (this.Color().filter_pattern());
		}
		color(next){
			if(next !== undefined) return next;
			return "";
		}
		colors(){
			return {};
		}
		color_name(id){
			return "";
		}
		option_color(id){
			return "";
		}
		Color_preview(id){
			const obj = new this.$.$mol_select_colors_color_preview();
			(obj.color) = () => ((this.option_color(id)));
			return obj;
		}
		Color_name(id){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ((this.color_name(id)));
			(obj.needle) = () => ((this.color_filter()));
			return obj;
		}
		Color_option(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Color_preview(id)), (this.Color_name(id))]);
			(obj.minimal_height) = () => (40);
			return obj;
		}
		option_content(id){
			return [(this.Color_option(id))];
		}
		Color(){
			const obj = new this.$.$mol_select();
			(obj.value) = (next) => ((this.color(next)));
			(obj.dictionary) = () => ((this.colors()));
			(obj.option_label) = (id) => ((this.color_name(id)));
			(obj.option_content) = (id) => ((this.option_content(id)));
			return obj;
		}
		title(){
			return "Color picker with filter and custom rows";
		}
		sub(){
			return [(this.Color())];
		}
		tags(){
			return [
				"select", 
				"color", 
				"picker", 
				"filter"
			];
		}
		aspects(){
			return ["Widget/Control"];
		}
	};
	($mol_mem(($.$mol_select_demo_colors.prototype), "color"));
	($mol_mem_key(($.$mol_select_demo_colors.prototype), "Color_preview"));
	($mol_mem_key(($.$mol_select_demo_colors.prototype), "Color_name"));
	($mol_mem_key(($.$mol_select_demo_colors.prototype), "Color_option"));
	($mol_mem(($.$mol_select_demo_colors.prototype), "Color"));
	($.$mol_select_colors_color_preview) = class $mol_select_colors_color_preview extends ($.$mol_view) {
		color(){
			return "";
		}
		style(){
			return {...(super.style()), "background": (this.color())};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_select_demo_colors extends $.$mol_select_demo_colors {
            color_name(id) {
                return id || this.colors()[id];
            }
            option_color(id) {
                return this.colors()[id];
            }
            colors() {
                return { '': 'transparent', ...$mol_colors };
            }
        }
        $$.$mol_select_demo_colors = $mol_select_demo_colors;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/select/demo/colors/colors.view.css", "[mol_select_demo_colors_color_option] {\n\tflex-wrap: nowrap;\n\tjustify-content: flex-start;\n\talign-items: center;\n}\n\n[mol_select_demo_colors_color_option] {\n\tpadding: .5rem;\n}\n\n[mol_select_demo_colors_color_option] > * {\n\tmargin: 0 .25rem;\n}\n\n[mol_select_demo_colors_color_preview] {\n\tbox-shadow: inset 0 0 0 1px var(--mol_theme_line);\n\ttext-align: start;\n\tpadding: .5rem;\n}\n");
})($ || ($ = {}));

;
	($.$mol_select_demo_month) = class $mol_select_demo_month extends ($.$mol_example_small) {
		month(next){
			if(next !== undefined) return next;
			return "jan";
		}
		months(){
			return {
				"jan": "January", 
				"feb": "February", 
				"mar": "March", 
				"apr": "April", 
				"may": "May", 
				"jun": "June", 
				"jul": "July", 
				"aug": "August", 
				"sep": "September", 
				"oct": "October", 
				"nov": "November", 
				"dec": "December"
			};
		}
		Month(){
			const obj = new this.$.$mol_select();
			(obj.no_options_message) = () => ("Not found");
			(obj.value) = (next) => ((this.month(next)));
			(obj.dictionary) = () => ((this.months()));
			return obj;
		}
		title(){
			return "Month picker with filter";
		}
		sub(){
			return [(this.Month())];
		}
		tags(){
			return ["select", "month"];
		}
		aspects(){
			return ["Widget/Control"];
		}
	};
	($mol_mem(($.$mol_select_demo_month.prototype), "month"));
	($mol_mem(($.$mol_select_demo_month.prototype), "Month"));


;
"use strict";

;
	($.$mol_select_demo_priority) = class $mol_select_demo_priority extends ($.$mol_example_small) {
		priority(next){
			if(next !== undefined) return next;
			return "Lowest";
		}
		Priority(){
			const obj = new this.$.$mol_select();
			(obj.Filter) = () => (null);
			(obj.value) = (next) => ((this.priority(next)));
			(obj.options) = () => ([
				"Highest ", 
				"High", 
				"Medium", 
				"Low", 
				"Lowest"
			]);
			return obj;
		}
		title(){
			return "Priority picker";
		}
		sub(){
			return [(this.Priority())];
		}
		tags(){
			return ["select", "priority"];
		}
		aspects(){
			return ["Widget/Control"];
		}
	};
	($mol_mem(($.$mol_select_demo_priority.prototype), "priority"));
	($mol_mem(($.$mol_select_demo_priority.prototype), "Priority"));


;
"use strict";

;
	($.$mol_select_list_demo) = class $mol_select_list_demo extends ($.$mol_example_small) {
		friends(next){
			if(next !== undefined) return next;
			return [];
		}
		suggestions(){
			return {
				"jocker": "Jocker", 
				"harley": "Harley Quinn", 
				"penguin": "Penguin", 
				"riddler": "Riddler", 
				"bane": "Bane", 
				"freeze": "Mister Freeze", 
				"clay": "Clayface", 
				"mask": "Black Mask"
			};
		}
		Friends(){
			const obj = new this.$.$mol_select_list();
			(obj.value) = (next) => ((this.friends(next)));
			(obj.dictionary) = () => ((this.suggestions()));
			return obj;
		}
		Friends_disabled(){
			const obj = new this.$.$mol_select_list();
			(obj.value) = (next) => ((this.friends(next)));
			(obj.dictionary) = () => ((this.suggestions()));
			(obj.enabled) = () => (false);
			return obj;
		}
		friends_lazy(next){
			if(next !== undefined) return next;
			return [];
		}
		option_title(id){
			return "";
		}
		filter_pattern(next){
			return (this.Friends_lazy().filter_pattern(next));
		}
		suggestions_lazy(){
			return (this.suggestions());
		}
		Friends_lazy(){
			const obj = new this.$.$mol_select_list();
			(obj.value) = (next) => ((this.friends_lazy(next)));
			(obj.option_title) = (id) => ((this.option_title(id)));
			(obj.pick_enabled) = () => (true);
			(obj.dictionary) = () => ((this.suggestions_lazy()));
			return obj;
		}
		Demo_items(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Friends()), 
				(this.Friends_disabled()), 
				(this.Friends_lazy())
			]);
			return obj;
		}
		title(){
			return "Friends picker";
		}
		sub(){
			return [(this.Demo_items())];
		}
		tags(){
			return [
				"select", 
				"tags", 
				"multiselect"
			];
		}
		aspects(){
			return ["Widget/Control", "Type/List"];
		}
	};
	($mol_mem(($.$mol_select_list_demo.prototype), "friends"));
	($mol_mem(($.$mol_select_list_demo.prototype), "Friends"));
	($mol_mem(($.$mol_select_list_demo.prototype), "Friends_disabled"));
	($mol_mem(($.$mol_select_list_demo.prototype), "friends_lazy"));
	($mol_mem(($.$mol_select_list_demo.prototype), "Friends_lazy"));
	($mol_mem(($.$mol_select_list_demo.prototype), "Demo_items"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_select_list_demo extends $.$mol_select_list_demo {
            suggestions_lazy() {
                this.$.$mol_wait_timeout(500);
                this.filter_pattern();
                return super.suggestions();
            }
            option_title(id) {
                if (!id)
                    return '';
                return this.suggestions_lazy()[id];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_select_list_demo.prototype, "suggestions_lazy", null);
        $$.$mol_select_list_demo = $mol_select_list_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_speck_demo) = class $mol_speck_demo extends ($.$mol_example_small) {
		Link_speck(){
			const obj = new this.$.$mol_speck();
			(obj.value) = () => ("β");
			return obj;
		}
		Link_icon(){
			const obj = new this.$.$mol_icon_settings();
			return obj;
		}
		Link(){
			const obj = new this.$.$mol_link();
			(obj.sub) = () => ([(this.Link_speck()), (this.Link_icon())]);
			return obj;
		}
		string_speck(){
			return "New";
		}
		String_speck(){
			const obj = new this.$.$mol_speck();
			(obj.value) = () => ((this.string_speck()));
			return obj;
		}
		String_field(){
			const obj = new this.$.$mol_string();
			return obj;
		}
		String(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.String_speck()), (this.String_field())]);
			return obj;
		}
		notification_count(){
			return 8;
		}
		Button_speck(){
			const obj = new this.$.$mol_speck();
			(obj.value) = () => ((this.notification_count()));
			return obj;
		}
		Button_icon(){
			const obj = new this.$.$mol_icon_menu();
			return obj;
		}
		Button(){
			const obj = new this.$.$mol_button_minor();
			(obj.sub) = () => ([(this.Button_speck()), (this.Button_icon())]);
			return obj;
		}
		Message_speck(){
			const obj = new this.$.$mol_speck();
			return obj;
		}
		message_text(){
			return "Created";
		}
		Message(){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ([(this.Message_speck()), (this.message_text())]);
			return obj;
		}
		sub(){
			return [
				(this.Link()), 
				(this.String()), 
				(this.Button()), 
				(this.Message())
			];
		}
		tags(){
			return [
				"speck", 
				"highlight", 
				"badge"
			];
		}
		aspects(){
			return ["Widget"];
		}
	};
	($mol_mem(($.$mol_speck_demo.prototype), "Link_speck"));
	($mol_mem(($.$mol_speck_demo.prototype), "Link_icon"));
	($mol_mem(($.$mol_speck_demo.prototype), "Link"));
	($mol_mem(($.$mol_speck_demo.prototype), "String_speck"));
	($mol_mem(($.$mol_speck_demo.prototype), "String_field"));
	($mol_mem(($.$mol_speck_demo.prototype), "String"));
	($mol_mem(($.$mol_speck_demo.prototype), "Button_speck"));
	($mol_mem(($.$mol_speck_demo.prototype), "Button_icon"));
	($mol_mem(($.$mol_speck_demo.prototype), "Button"));
	($mol_mem(($.$mol_speck_demo.prototype), "Message_speck"));
	($mol_mem(($.$mol_speck_demo.prototype), "Message"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_speech extends $mol_plugin {
        static speaker_make() {
            return new Promise(done => {
                const API = $mol_dom_context.speechSynthesis;
                if (API.getVoices().length)
                    return done(API);
                const on_voices = (event) => {
                    if (!API.getVoices().length)
                        return;
                    API.removeEventListener('voiceschanged', on_voices);
                    done(API);
                };
                API.addEventListener('voiceschanged', on_voices);
            });
        }
        static speaker() {
            return $mol_wire_sync(this).speaker_make();
        }
        static voices() {
            const lang = this.$.$mol_locale.lang();
            return this.speaker().getVoices().filter(voice => voice.lang.split('-')[0] === lang);
        }
        static say(text) {
            const speaker = this.speaker();
            speaker.cancel();
            speaker.resume();
            const rate = 1;
            const voice = this.voices()[this.voices().length - 1];
            const pitch = 1;
            var utter = new SpeechSynthesisUtterance(text);
            utter.voice = voice;
            utter.rate = rate;
            utter.pitch = pitch;
            speaker.speak(utter);
            return null;
        }
        static speaking(next = true) {
            if (next)
                this.speaker().resume();
            else
                this.speaker().pause();
            return next;
        }
        static hearer() {
            $mol_wire_solid();
            let Api;
            for (const prefix of ['', 'webkit', 'moz', 'ms']) {
                if (Api = window[prefix + 'SpeechRecognition']) {
                    break;
                }
            }
            const api = new Api;
            api.interimResults = true;
            api.maxAlternatives = 1;
            api.continuous = true;
            api.lang = $mol_locale.lang();
            api.onnomatch = (event) => {
                api.stop();
                return null;
            };
            api.onresult = (event) => {
                this.recognition_index([...event.results].filter(res => res.isFinal).length);
                const recognition = event.results[event.resultIndex];
                const index = event.resultIndex + this.recognition_offset();
                this.recognition(index, recognition);
                return null;
            };
            api.onerror = (event) => {
                if (event.error === 'no-speech')
                    return null;
                console.log(event);
                console.error(new Error(event.error || event));
                api.stop();
                return null;
            };
            api.onend = (event) => {
                if (this.recognition_index() > 0) {
                    this.recognition_offset(this.recognition_offset() + this.recognition_index());
                }
                this.recognition_index(-1);
                if (this.hearing())
                    api.start();
            };
            api.onspeechend = (event) => {
                api.stop();
            };
            return api;
        }
        static hearing(next) {
            if (next === undefined)
                return false;
            if (next) {
                this.hearer().start();
            }
            else {
                this.hearer().stop();
            }
            return next;
        }
        static recognition_index(next = -1) {
            $mol_wire_solid();
            return next;
        }
        static recognition_offset(next = 0) {
            $mol_wire_solid();
            return next;
        }
        static recognition(index, next) {
            $mol_wire_solid();
            return next ?? null;
        }
        static recognitions() {
            if (!this.hearing())
                return [];
            return $mol_range2(index => this.recognition(index), () => Math.max(0, this.recognition_index() + this.recognition_offset()));
        }
        static commands() {
            return this.recognitions().map(result => result[0].transcript.toLowerCase().trim().replace(/[,\.]/g, ''));
        }
        static text() {
            return this.recognitions().map(result => result[0].transcript).join('');
        }
        commands_skip(next = 0) {
            $mol_wire_solid();
            $mol_speech.hearing();
            return next;
        }
        render() {
            const matchers = this.matchers();
            const commands = $mol_speech.commands();
            for (let i = this.commands_skip(); i < commands.length; ++i) {
                for (let matcher of matchers) {
                    const found = commands[i].match(matcher);
                    if (!found)
                        continue;
                    new $mol_after_work(16, () => {
                        this.commands_skip(i + 1);
                        $mol_wire_async(this).event_catch(found.slice(1));
                    });
                    return null;
                }
            }
            return null;
        }
        event_catch(found) {
            return false;
        }
        patterns() {
            return [];
        }
        matchers() {
            return this.patterns().map(pattern => {
                return new RegExp(this.prefix() + pattern + this.suffix(), 'i');
            });
        }
        prefix() {
            return '';
        }
        suffix() {
            return '[,\\s]+(?:please|would you kindly|пожалуйста|пожалуй 100|будь любезен|будь любезна|будь добра?|плиз)\.?$';
        }
    }
    __decorate([
        $mol_mem
    ], $mol_speech.prototype, "commands_skip", null);
    __decorate([
        $mol_mem
    ], $mol_speech.prototype, "render", null);
    __decorate([
        $mol_mem
    ], $mol_speech.prototype, "matchers", null);
    __decorate([
        $mol_mem
    ], $mol_speech, "speaker", null);
    __decorate([
        $mol_mem
    ], $mol_speech, "voices", null);
    __decorate([
        $mol_action
    ], $mol_speech, "say", null);
    __decorate([
        $mol_mem
    ], $mol_speech, "speaking", null);
    __decorate([
        $mol_mem
    ], $mol_speech, "hearer", null);
    __decorate([
        $mol_mem
    ], $mol_speech, "hearing", null);
    __decorate([
        $mol_mem
    ], $mol_speech, "recognition_index", null);
    __decorate([
        $mol_mem
    ], $mol_speech, "recognition_offset", null);
    __decorate([
        $mol_mem_key
    ], $mol_speech, "recognition", null);
    __decorate([
        $mol_mem
    ], $mol_speech, "recognitions", null);
    __decorate([
        $mol_mem
    ], $mol_speech, "commands", null);
    __decorate([
        $mol_mem
    ], $mol_speech, "text", null);
    $.$mol_speech = $mol_speech;
})($ || ($ = {}));

;
	($.$mol_speech_demo) = class $mol_speech_demo extends ($.$mol_example_small) {
		Toggle_icon(){
			const obj = new this.$.$mol_icon_microphone();
			return obj;
		}
		hearing(next){
			if(next !== undefined) return next;
			return false;
		}
		Toggle(){
			const obj = new this.$.$mol_check_icon();
			(obj.Icon) = () => ((this.Toggle_icon()));
			(obj.checked) = (next) => ((this.hearing(next)));
			return obj;
		}
		message(){
			return "";
		}
		Message(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.message())]);
			return obj;
		}
		speak(next){
			if(next !== undefined) return next;
			return null;
		}
		Speak(){
			const obj = new this.$.$mol_button_major();
			(obj.click) = (next) => ((this.speak(next)));
			(obj.sub) = () => (["Speak"]);
			return obj;
		}
		sub(){
			return [
				(this.Toggle()), 
				(this.Message()), 
				(this.Speak())
			];
		}
		tags(){
			return [
				"speech", 
				"voice", 
				"recognition", 
				"dictation"
			];
		}
		aspects(){
			return ["Widget/Plugin", "Media/Audio"];
		}
	};
	($mol_mem(($.$mol_speech_demo.prototype), "Toggle_icon"));
	($mol_mem(($.$mol_speech_demo.prototype), "hearing"));
	($mol_mem(($.$mol_speech_demo.prototype), "Toggle"));
	($mol_mem(($.$mol_speech_demo.prototype), "Message"));
	($mol_mem(($.$mol_speech_demo.prototype), "speak"));
	($mol_mem(($.$mol_speech_demo.prototype), "Speak"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_speech_demo extends $.$mol_speech_demo {
            hearing(next) {
                return $mol_speech.hearing(next);
            }
            message() {
                let text = $mol_speech.text()
                    .replace(/ё/g, 'е')
                    .replace(/^.*? сотри все (пожалуйста|приз|please)\s*/, '')
                    .replace(/\s*точка/g, '.')
                    .replace(/\s*запятая/g, ',')
                    .replace(/\s*восклицательный знак/g, '!')
                    .replace(/\s*вопросительный знак/g, '?')
                    .replace(/\s*точка с запятой/g, ';')
                    .replace(/\s*двоеточие/g, ':')
                    .replace(/\s*тире/g, ' -')
                    .replace(/\s*новая строка/g, ' \n');
                while (true) {
                    let text2 = text
                        .replace(/\s+?\S+ сотри слово (пожалуйста|плиз|please)/i, '')
                        .replace(/^(.*?) сотри (\d+) (слово|слова|слов) (пожалуйста|плиз|please)/i, (str, text, count) => text.replace(new RegExp(`(\\s\\S+){${count}}$`), ''));
                    if (text === text2)
                        break;
                    text = text2;
                }
                return text
                    .replace(/цитата (.*?) конец цитаты/g, ' "$1"')
                    .replace(/(?:^|[.!?]\s)\S/g, str => str.toUpperCase());
            }
            speak() {
                $mol_speech.say(this.message());
            }
        }
        $$.$mol_speech_demo = $mol_speech_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_spell_morphs extends Set {
        max = 0;
        constructor(items = []) {
            super(items);
            for (const item of items) {
                if (item.length <= this.max)
                    continue;
                this.max = item.length;
            }
        }
    }
    $.$mol_spell_morphs = $mol_spell_morphs;
    class $mol_spell extends Object {
        static head = new $mol_spell_morphs;
        static prefix = new $mol_spell_morphs;
        static root = new $mol_spell_morphs;
        static postfix = new $mol_spell_morphs;
        static foot = new $mol_spell_morphs;
        static test(word) {
            const head_max = Math.min(this.head.max, word.length - 2);
            for (let i = head_max; i > 0; --i) {
                const head = word.slice(0, i);
                if (!this.head.has(head))
                    continue;
                if (this.test_tail(word.slice(i)))
                    return true;
            }
            return this.test_tail(word);
        }
        static test_tail(word) {
            const foot_max = Math.min(this.foot.max, word.length - 2);
            for (let i = foot_max; i > 0; --i) {
                const foot = word.slice(-i);
                if (!this.foot.has(foot))
                    continue;
                if (this.test_body(word.slice(0, -i)))
                    return true;
            }
            return this.test_body(word);
        }
        static test_body(word) {
            if (!word)
                return true;
            const prefix_max = Math.min(this.prefix.max, word.length - 2);
            for (let i = prefix_max; i > 0; --i) {
                const prefix = word.slice(0, i);
                if (!this.prefix.has(prefix))
                    continue;
                if (this.test_body(word.slice(i)))
                    return true;
            }
            const postfix_max = Math.min(this.postfix.max, word.length - 2);
            for (let i = postfix_max; i > 0; --i) {
                const postfix = word.slice(-i);
                if (!this.postfix.has(postfix))
                    continue;
                if (this.test_body(word.slice(0, -i)))
                    return true;
            }
            const root_max = Math.min(this.root.max, word.length);
            for (let i = root_max; i > 0; --i) {
                const root = word.slice(0, i);
                if (!this.root.has(root))
                    continue;
                if (this.test_body(word.slice(i)))
                    return true;
            }
            return false;
        }
    }
    $.$mol_spell = $mol_spell;
})($ || ($ = {}));

;
	($.$mol_spell_demo) = class $mol_spell_demo extends ($.$mol_example_small) {
		article(next){
			if(next !== undefined) return next;
			return "Я весьма сегдян недоперепила, вттак.";
		}
		Article(){
			const obj = new this.$.$mol_textarea();
			(obj.value) = (next) => ((this.article(next)));
			return obj;
		}
		report(){
			return "";
		}
		Report(){
			const obj = new this.$.$mol_text_code();
			(obj.text) = () => ((this.report()));
			return obj;
		}
		List(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Article()), (this.Report())]);
			return obj;
		}
		sub(){
			return [(this.List())];
		}
		tags(){
			return [
				"$mol_spell_check", 
				"$mol_textarea", 
				"spellcheck"
			];
		}
		aspects(){
			return ["Algorithm/Validate"];
		}
	};
	($mol_mem(($.$mol_spell_demo.prototype), "article"));
	($mol_mem(($.$mol_spell_demo.prototype), "Article"));
	($mol_mem(($.$mol_spell_demo.prototype), "Report"));
	($mol_mem(($.$mol_spell_demo.prototype), "List"));


;
"use strict";
var $;
(function ($) {
    class $mol_spell_ru extends $mol_spell {
        static prefix = new $mol_spell_morphs(['а', 'анти', 'архи', 'без', 'в', 'вдоль', 'вз', 'взо', 'вице', 'вне', 'внутри', 'во', 'воз', 'возо', 'вы', 'гипер', 'де', 'дез', 'дис', 'до', 'за', 'из', 'изо', 'им', 'интер', 'up', 'испод', 'к', 'кое', 'кой', 'контр', 'меж', 'между', 'на', 'над', 'надо', 'наи', 'не', 'небез', 'недо', 'ни', 'низ', 'низо', 'о', 'об', 'обез', 'обер', 'обо', 'около', 'от', 'ото', 'па', 'пере', 'перед', 'по', 'под', 'подо', 'поза', 'после', 'пост', 'пра', 'пре', 'пред', 'преди', 'предо', 'при', 'про', 'противо', 'прото', 'раз', 'разо', 'ре', 'с', 'сверх', 'со', 'среди', 'су', 'суб', 'супер', 'сыз', 'транс', 'у', 'ультра', 'через', 'чрез', 'экс', 'экстра']);
        static root = new $mol_spell_morphs(["абажур", "держ", "абаз", "абазин", "абак", "аббат", "аббреви", "я", "аб", "вер", "абдик", "абдомен", "абдомин", "ый", "абзац", "абиетин", "био", "ген", "ез", "абиссальн", "абиссин", "абитури", "аблакт", "ир", "аблатив", "аблятив", "аблаут", "абляут", "абляци", "аболици", "абон", "аборд", "абориген", "аборт", "абразив", "абрази", "абракадабр", "абреже", "абрек", "абрикос", "абрикот", "абрис", "абруцц", "абсент", "абсолют", "сорб", "метр", "абстраг", "абстракт", "абстрак", "абсурд", "абсцесс", "абсцисс", "абхаз", "абцуг", "абшид", "абштрих", "аваль", "аван", "гард", "зал", "камер", "лож", "порт", "рейд", "аванс", "да", "сцен", "авантаж", "титул", "авантюр", "авар", "аварий", "авари", "авгур", "август", "авдот", "авеню", "авест", "авиа", "баз", "бензин", "билет", "бомб", "горизонт", "двиг", "тел", "строи", "десант", "диспетчер", "завод", "катастроф", "компани", "конверт", "конструк", "лайнер", "лес", "хран", "лини", "маяк", "мете", "служ", "станци", "модел", "модель", "мотор", "стро", "навиг", "нос", "прыск", "отряд", "парк", "пассажир", "патруль", "корм", "почт", "прибор", "промышл", "вед", "ракет", "вязь", "секстант", "спорт", "техн", "ави", "транспорт", "трасс", "хим", "косм", "часть", "школ", "авиз", "авизо", "витамин", "фаун", "авокадо", "авось", "аврал", "авраль", "аврор", "австрали", "австралий", "австрал", "питек", "австри", "австрий", "яч", "австр", "ази", "автарк", "автарки", "авто", "аннот", "граф", "графи", "блок", "оч", "брон", "танк", "автобус", "бус", "вес", "влад", "вод", "вокзал", "гам", "генер", "гидр", "подъём", "гравюр", "грейдер", "груз", "гуж", "дел", "дорог", "дорож", "дрезин", "дром", "заправ", "инспект", "инспекц", "кар", "катализ", "ауто", "кино", "движ", "клуб", "колеб", "колонн", "комбинат", "коммент", "коррекц", "косметик", "кран", "крат", "кружок", "авт", "лавк", "лиз", "лит", "люб", "магистраль", "масс", "ёр", "автомат", "чиц", "машин", "мета", "морф", "механ", "мобил", "кид", "ыва", "трактор", "мобиль", "мото", "лотере", "секци", "мотрис", "автоном", "автономи", "опер", "павильон", "пансион", "пилот", "пласт", "плуг", "строй", "поезд", "кры", "портрет", "образова", "бег", "кат", "клад", "автор", "радио", "грамм", "рад", "ли", "ралли", "регул", "ятор", "резин", "ремонт", "рессор", "реферат", "рефрижератор", "авторитарн", "авторитет", "роллер", "рот", "рул", "ручк", "салон", "сам", "вал", "бор", "сервис", "слесарь", "старт", "стоп", "сто", "янк", "страд", "цеп", "терм", "цистерн", "тех", "тип", "том", "тормоз", "трансформ", "трен", "троп", "тяг", "фаз", "фил", "фургон", "характер", "хозяй", "хром", "хрон", "автохтон", "цемент", "час", "шарж", "штурман", "щеп", "щётк", "электр", "авуар", "ага", "агав", "агам", "агами", "гон", "агар", "ян", "агат", "глютин", "ющ", "граваци", "агент", "агио", "лог", "агит", "бригад", "вагон", "кампани", "коллектив", "плакат", "ход", "проп", "пункт", "фильм", "агломер", "агло", "пор", "фабрик", "агнец", "агнози", "агностик", "агностиц", "агностич", "агон", "агони", "аграмант", "аграр", "агрегат", "агрег", "агреман", "агресс", "агресси", "агро", "цен", "ботан", "город", "зоо", "климат", "культур", "мелиор", "максим", "метеор", "миним", "ном", "почв", "производ", "пром", "пропаганд", "район", "сеть", "участок", "физ", "фит", "лабор", "атори", "цех", "эко", "эконом", "систем", "агу", "агул", "агуль", "адажио", "адалин", "адамант", "адамит", "адамси", "адапт", "адат", "адвент", "адверби", "адвокат", "адденд", "адекватн", "аден", "вирус", "карцин", "адепт", "структ", "аджар", "аджик", "адиабат", "адидас", "динам", "администр", "адмирал", "адмиралтей", "адмираль", "адм", "персон", "адонис", "адопт", "адор", "адренал", "адрес", "адуляр", "адъектив", "адъюнкт", "адъютант", "адыге", "адыгей", "адыгеец", "адыг", "ажгон", "ажио", "ажиот", "ажур", "ажюст", "аз", "азали", "азарин", "азарт", "азат", "азбук", "азбуч", "азербайджан", "азеф", "азимут", "азо", "бенз", "азов", "групп", "крас", "зон", "един", "сочет", "азот", "добы", "ва", "кис", "бактер", "содерж", "сва", "фикс", "азу", "азям", "аи", "аил", "аир", "аист", "ёнок", "образ", "айв", "айда", "айлант", "аймак", "аймач", "айран", "айрол", "айсберг", "айсинг", "айсор", "академ", "академи", "акажу", "акант", "акар", "акафист", "акаци", "аквадаг", "акваланг", "аквамарин", "аква", "навт", "план", "поли", "акварел", "акварель", "аквариум", "акватори", "форте", "форт", "акведук", "аккомод", "ный", "аккомпан", "аккомпани", "аккорд", "аккордеон", "аккредит", "аккредитив", "аккузатив", "аккумул", "ят", "яци", "аккурат", "аккуратн", "еньк", "акме", "акр", "акридин", "акробат", "акрополь", "акро", "стих", "аксакал", "аксамит", "акселер", "аксельбант", "аксессуар", "аксиом", "ичный", "аксио", "аксон", "акт", "актёр", "актив", "актин", "актиниди", "актини", "бацилл", "ёз", "мик", "миц", "терап", "актр", "актуал", "актуальн", "акул", "акупунктур", "акуст", "акут", "акуш", "акцент", "акцепт", "акцепц", "акцесси", "акцесс", "акцидент", "акциденц", "акциз", "акци", "акын", "ала", "тау", "алатырь", "албан", "алгебр", "алгоритм", "алебард", "алебастр", "алевр", "лейк", "алейрон", "александр", "алексин", "алеут", "алжир", "али", "алиби", "алиготе", "алидад", "ализарин", "алимент", "щиц", "алит", "алкал", "алк", "алкил", "алкогол", "алкоголь", "алкоран", "аллах", "аллегор", "аллегори", "аллегр", "етто", "аллегри", "аллегро", "аллей", "аллел", "аллель", "аллерг", "аллерги", "алле", "аллигатор", "аллилуй", "аллитер", "алло", "аллонж", "аллопат", "аллюви", "аллювий", "аллюзи", "аллюр", "алма", "алмаз", "алой", "алоэ", "вид", "алта", "алтай", "алтар", "алтарь", "алтей", "алтын", "алудур", "алунит", "алфавит", "хими", "алч", "алыч", "альбатрос", "альбедо", "альбед", "альбин", "альбинос", "альбит", "альбом", "альбумин", "альвеол", "ярн", "алькальд", "альманах", "альманаш", "альпака", "альпари", "альп", "шток", "альсекко", "альт", "альтер", "альтерн", "альтру", "альф", "альфа", "трон", "альфонс", "альфреско", "альянс", "алюмин", "орган", "алюм", "аммон", "кал", "медь", "силикат", "аляповат", "аляск", "аляфуршет", "амазон", "амальгам", "аманат", "амарант", "амариллис", "аматёр", "амба", "амбар", "амбици", "амбр", "амбразур", "амбре", "амбрози", "амбулатори", "амбулатор", "амбушюр", "амвон", "амёб", "иаз", "цит", "америк", "америц", "аметист", "амиант", "амид", "пирин", "амикошон", "амил", "ацет", "нитр", "пект", "амин", "спирт", "аминь", "амистад", "амми", "аммиак", "аммиач", "фосфат", "аммо", "ифик", "амм", "тол", "фос", "амнист", "амнисти", "морал", "мораль", "аморт", "ампел", "ия", "ампель", "ампер", "вольт", "ватт", "ампир", "амплитуд", "ампл", "амплуа", "ампул", "ампут", "аму", "дарь", "амулет", "амуници", "амунич", "амур", "амфи", "бий", "би", "бол", "брахий", "брах", "театр", "амфор", "амхара", "амхар", "ана", "биоз", "биот", "анабол", "галактич", "анаконд", "анакреонт", "анализ", "аналит", "аналог", "аналоги", "аналой", "анальг", "анальги", "анамнез", "анамнест", "ананас", "анапест", "анарх", "анархи", "анатом", "ичк", "анатоми", "анафем", "анафилакси", "анафилакт", "анафор", "анахорет", "анаш", "ангаж", "ангар", "гармон", "ангел", "ек", "ангель", "ид", "ангин", "анги", "невр", "спазм", "англ", "англий", "англик", "англиц", "англи", "сак", "сакс", "филь", "фоб", "ангор", "ангстрем", "андалуз", "андант", "ино", "андез", "анди", "андий", "андр", "гин", "анекдот", "анем", "анеми", "клин", "скоп", "хор", "анер", "анестез", "анестези", "анестет", "анилин", "анил", "анимал", "анимальн", "аним", "анис", "анкер", "анкет", "анклав", "аннал", "аннекси", "аннекс", "нигил", "аннон", "аннул", "анод", "аномали", "аномаль", "оним", "анонс", "норм", "ансамбл", "ансамбль", "антагон", "арктич", "антенн", "антен", "бактери", "стой", "больш", "бюрократ", "веществ", "вибр", "воен", "герой", "гигиен", "государств", "гуман", "дактиль", "дарвин", "демократ", "депресс", "детон", "диалект", "пот", "империал", "истор", "антик", "катод", "антикв", "антиквар", "клерикал", "клерикаль", "коагул", "янт", "колони", "коммун", "коррозий", "коррози", "крепостн", "культ", "логарифм", "антилоп", "магнит", "маркс", "матери", "микро", "милитар", "мир", "моль", "монарх", "антимон", "наркот", "народ", "наци", "нейтр", "никот", "номи", "лед", "общ", "партий", "пат", "патриот", "педагог", "еч", "перистальтик", "прав", "прот", "рабоч", "рас", "твор", "религи", "санитар", "вёрт", "сейсм", "сел", "семит", "септ", "сион", "склер", "совет", "спаст", "сталин", "стар", "стат", "стресс", "строф", "тез", "токс", "утопи", "фаш", "феод", "фермент", "фон", "фриз", "хлор", "христ", "худож", "циклон", "антицип", "част", "антич", "ядр", "антолог", "антологи", "антон", "антракт", "антрац", "антрекот", "антрепренёр", "антреприз", "антресол", "антресоль", "антроп", "ос", "соф", "сфер", "фаг", "фаги", "центр", "антураж", "анфас", "анфилад", "анчар", "анчоус", "аншеф", "аншлаг", "аншлюс", "аорист", "аорт", "апартамент", "апартеид", "апат", "апач", "апаш", "апекс", "апелл", "апеллятив", "апельсин", "период", "аплод", "исмент", "апломб", "апноэ", "апо", "гей", "апокалипсис", "апокалипс", "апокалипт", "апокрин", "апокриф", "полит", "аполог", "апологи", "апоплекс", "апоплекси", "апоплект", "апорт", "апостериори", "апостериор", "апостол", "апостоль", "апостроф", "апофегм", "апофем", "апофеоз", "аппарат", "аппарель", "аппассионато", "аппендикс", "аппендиц", "апперкот", "апперцепт", "апперцепци", "апперцип", "аппетит", "апплик", "аппозици", "аппрет", "апрель", "априори", "априор", "апроб", "апсид", "аптек", "аптеч", "апчхи", "ара", "араб", "арабеск", "арабесоч", "арав", "арак", "аракчеев", "арали", "араме", "арамей", "аранж", "арап", "арат", "арахид", "арахис", "арб", "арбалет", "арбитр", "арбуз", "аргал", "аргали", "аргамак", "аргентин", "аргент", "арго", "аргон", "аргумент", "аргус", "ареал", "ареа", "ареаль", "арен", "аренд", "арео", "ареол", "ареопаг", "арест", "арзамас", "ари", "етт", "арил", "озо", "аристократ", "ритм", "арифмет", "арифм", "арк", "аркан", "арканзас", "аркебуз", "секанс", "синус", "тангенс", "арлекин", "армад", "арм", "арме", "армей", "армен", "арми", "камен", "армюр", "армяк", "армяч", "арнаут", "аромат", "образу", "арон", "ароч", "арпеджио", "арпеджо", "аррет", "арсенал", "арсеналь", "арсен", "пир", "арсин", "артач", "арт", "дивизи", "артезиан", "артель", "артери", "вен", "артефакт", "артикль", "артикул", "артиллерий", "артиллер", "артиллери", "артист", "артишок", "канонад", "лёт", "стрел", "огонь", "артос", "готов", "полк", "артр", "арф", "арха", "архалук", "арх", "архар", "архаров", "меринос", "архе", "архей", "зой", "птерикс", "орнис", "спор", "бести", "архив", "важн", "дьякон", "диакон", "епископ", "иерей", "архимандрит", "миллион", "паст", "ыр", "архипелаг", "плут", "реакци", "серьёз", "сложн", "врем", "архитектоник", "архитектонич", "архитект", "архитрав", "завр", "арч", "арчин", "аршин", "арык", "арыч", "арьер", "асбест", "бетон", "битум", "богат", "тепл", "изол", "фанер", "асб", "волокн", "пластик", "сталь", "шифер", "шлак", "секс", "симметр", "симметри", "асимптот", "аскер", "аскет", "аскол", "аскорбин", "соци", "аспект", "аспид", "аспирант", "аспир", "аспирин", "асс", "ассамбле", "ассам", "ассен", "ассигн", "ассимил", "ассири", "ассирий", "ассист", "сон", "ассорти", "ассортимент", "ассоци", "стигм", "астм", "астр", "астрахан", "гео", "колори", "ориент", "спектр", "фото", "теле", "асфальт", "глин", "подоб", "мес", "ась", "атав", "атак", "атаман", "атанде", "ателье", "атер", "тромб", "атлант", "атлантич", "атлас", "атлет", "атмо", "атолл", "атом", "тон", "атрибут", "атрибуц", "атроф", "атрофи", "атташе", "аттест", "аттик", "аттиц", "аттич", "аттракцион", "ату", "аугмент", "аудиенци", "ауди", "визуальн", "аудитор", "аудитори", "ау", "ауксан", "ауксин", "аукцион", "аул", "ауль", "аур", "аут", "бридинг", "аутент", "вакцин", "гем", "аутодафе", "иммун", "аутсайдер", "афган", "афер", "афин", "афиш", "афон", "афор", "африк", "афронт", "аффект", "аффикс", "аффин", "ахалтек", "ань", "ахвах", "ахей", "ахине", "опс", "ахтер", "люк", "пик", "штевень", "ахти", "кислород", "салицил", "целлюл", "иль", "ацид", "цикл", "ацтек", "ашуг", "аппозит", "аэр", "аэробик", "биос", "визу", "гамм", "метод", "съём", "съ", "ём", "грави", "золь", "ион", "лоци", "мост", "пон", "профилакт", "ради", "нивел", "сан", "се", "синоптик", "синоптич", "сним", "солярий", "аэро", "таксис", "тенк", "фильтр", "флот", "грам", "топ", "цист", "аятолл", "баб", "бабах", "бабб", "ёнк", "бабочк", "бабоч", "бабув", "бабуин", "бабуш", "бабь", "ё", "бавар", "багаж", "багги", "багг", "багдад", "багер", "багет", "багов", "багор", "багр", "багульник", "бадан", "баде", "бадей", "бадминтон", "бадь", "базальт", "базамент", "базар", "базаров", "базед", "базид", "базилик", "базук", "ба", "иньк", "бай", "байбак", "байбач", "байдар", "байкал", "байпас", "байрам", "байрон", "байт", "байхов", "байц", "ева", "бак", "бакалавр", "бакалей", "бакале", "бакан", "бакен", "бакаут", "бард", "баккара", "баклаг", "баклажан", "баклаж", "баклан", "баклуш", "бактерий", "статич", "лов", "филл", "цин", "цид", "бакун", "бакшиш", "бал", "балабан", "балабол", "балабош", "балаган", "балагур", "балака", "балалаеч", "балалайк", "баламут", "баланд", "баланс", "мер", "балахон", "балбес", "балд", "балдахин", "балерин", "балет", "балк", "балкан", "балкар", "балкон", "балл", "баллад", "балласт", "баллист", "карди", "баллон", "баллот", "балль", "балобан", "балова", "балов", "балоч", "балти", "балтий", "балхаш", "балык", "балыч", "бальзам", "бальзамин", "бальне", "гряз", "леч", "процедур", "физи", "баль", "балюстрад", "баляс", "бамбино", "бамбук", "бампер", "банальн", "банан", "ед", "банд", "бандаж", "бандерильеро", "бандер", "бандероль", "банджо", "бандур", "бан", "банк", "банкаброш", "банкет", "банкнот", "мёт", "банкрот", "баноч", "бант", "банту", "банч", "бань", "баньян", "баобаб", "бапт", "ерий", "бар", "барабан", "барабошк", "барабульк", "барак", "баран", "баранк", "бараноч", "барахл", "барахол", "барахоль", "барахта", "барач", "бараш", "барбарис", "барбос", "барбот", "барвинк", "барвинок", "барвиноч", "баргузин", "бардак", "бареж", "рельеф", "баретк", "бареттер", "барж", "барион", "бари", "баритон", "барк", "баркан", "баркарол", "баркас", "баркентин", "барокко", "барон", "травм", "бароч", "барраж", "баррель", "баррикад", "барристер", "барс", "барсук", "барсуч", "бархан", "бархат", "бархот", "барыг", "ын", "барыш", "ыш", "барьер", "бас", "басен", "баск", "баскак", "баскет", "боль", "басм", "басмач", "басн", "пис", "слов", "басон", "басоч", "бассейн", "бассей", "баста", "бастард", "бастион", "бастова", "бастурм", "басту", "басурман", "батал", "батали", "баталь", "батальон", "батан", "батаре", "батарей", "батат", "бат", "батиаль", "бати", "батик", "скаф", "батист", "батман", "батог", "батож", "батожь", "батон", "батрак", "батрац", "батрач", "баттерфля", "баттерфляй", "батуд", "батут", "батун", "батыр", "батырь", "бать", "юшк", "батюшки", "баул", "бауль", "бах", "бахвал", "бахваль", "бахил", "бахром", "крут", "бахч", "бац", "бацби", "бацбий", "бач", "башен", "башибузук", "башк", "башкир", "башлык", "башлыч", "башмак", "башмач", "башн", "баштан", "баю", "баядер", "баян", "бд", "бебе", "беби", "бебут", "бегемот", "бегони", "унь", "бед", "бедекер", "бедлам", "бедн", "яг", "яж", "яц", "бедокур", "бедолаг", "бедр", "бедуин", "беж", "еват", "безалаберн", "безалабер", "апелляци", "бож", "зн", "бород", "бо", "брач", "бреж", "бров", "буквар", "бур", "вахт", "ведр", "веретён", "верх", "верш", "вест", "ветр", "виз", "вин", "вкус", "власт", "водь", "бра", "врат", "воздуш", "возмезд", "вол", "волос", "воль", "вред", "выгод", "езд", "лаз", "гараж", "глав", "глаголь", "глаз", "глас", "гнев", "гнёзд", "голов", "голос", "грамот", "гранич", "гран", "граноч", "грех", "греш", "гроз", "дар", "дей", "дель", "денеж", "денежь", "дет", "дефект", "дефицит", "бездн", "дождь", "доказ", "доль", "дом", "дон", "дорожь", "дот", "доход", "дрен", "дум", "думь", "дух", "душ", "дым", "дых", "безе", "жал", "ост", "желез", "желт", "жи", "забот", "беззаветн", "закон", "запрет", "застенчив", "защит", "звёзд", "звуч", "земель", "зл", "зуб", "лафет", "лёгоч", "лепест", "лесь", "лик", "линз", "лист", "лич", "лопаст", "лошад", "лун", "люд", "людь", "мат", "безмен", "мозг", "молв", "молоч", "мороз", "муж", "мятеж", "надёж", "надзор", "наказ", "налич", "нача", "ча", "никотин", "ног", "нравственн", "жиг", "обид", "облач", "обман", "молот", "оборот", "безобраз", "оброч", "гляд", "говор", "окон", "опас", "пил", "опор", "опыт", "оруж", "кол", "основ", "останов", "валь", "ответ", "ответственн", "вяз", "отказ", "лаг", "луч", "относительн", "рыв", "отц", "безотчётн", "ошиб", "работ", "рам", "свет", "суд", "чёт", "результат", "рельс", "рог", "род", "ропот", "рук", "руль", "рыб", "рыбь", "быт", "гар", "углерод", "угомон", "удар", "уём", "узл", "кор", "молч", "упреч", "уроч", "рядиц", "сад", "услов", "успе", "уста", "теш", "участ", "безъ", "ядер", "язык", "языч", "якор", "ыгл", "ыголь", "ыгр", "ыде", "ыдей", "ызвестн", "ыз", "ыкр", "ыллюз", "янн", "ынвентар", "ындик", "ындук", "ынерци", "ынициатив", "ынтеграль", "ынтерес", "ыскаж", "ыскр", "ыскусн", "ыскусственн", "ыс", "ытог", "од", "эмоци", "бей", "бейк", "бейс", "бек", "бекар", "бекас", "бекеш", "бекон", "бел", "ёк", "белен", "белендряс", "ес", "ёс", "ёхоньк", "ёшеньк", "белиберд", "белк", "белладонн", "беллетрист", "бок", "боч", "брыс", "брюх", "войлоч", "гварде", "гвардей", "горяч", "груд", "гуз", "дерев", "зёрн", "казак", "копыт", "кочан", "кров", "крыл", "крыль", "кур", "лоб", "мор", "мрамор", "белорус", "руч", "снеж", "стволь", "финн", "фин", "хвост", "белоч", "шв", "шёрст", "щёк", "эмигр", "белуг", "белудж", "белуж", "белух", "белуш", "бель", "бельведер", "бельги", "бельгий", "бельканто", "рез", "бельтинг", "бельфлёр", "бельч", "этаж", "беляш", "бе", "бенгал", "бенгаль", "бенди", "бенедиктин", "бенефис", "бенефиц", "вакуум", "бензоин", "бензой", "колон", "сос", "нафт", "снабж", "суч", "указ", "бербер", "бергамот", "берданк", "бёрд", "бердыш", "бере", "берег", "креп", "берёг", "беред", "береж", "берёз", "берез", "берейтор", "берем", "берендей", "бересклет", "берест", "берёст", "берет", "беречь", "беречься", "берилл", "иев", "беркел", "беркл", "беркли", "беркут", "беркшир", "берлин", "берлог", "берлож", "берм", "бернард", "бернштейн", "берсальер", "бер", "берц", "бёрц", "бес", "бесед", "каналь", "капитель", "капсюль", "каркас", "касс", "кил", "кингстон", "клапан", "класс", "козырк", "козыр", "колёс", "компресс", "компромисс", "кондуктор", "конеч", "контакт", "контроль", "конфликт", "коров", "корыст", "кост", "котл", "ован", "край", "кризис", "культурь", "бесн", "палуб", "пал", "памят", "панцир", "пардонн", "парус", "паспорт", "пас", "патент", "патрон", "бой", "перспектив", "пёр", "печаль", "беспечн", "пись", "плам", "плат", "плацкарт", "плод", "плот", "подваль", "позвоноч", "иск", "поко", "покой", "полез", "полос", "пол", "помест", "мощ", "поп", "пород", "пороч", "порточ", "порядок", "порядоч", "пошлин", "щад", "предель", "предлож", "предмет", "прекослов", "пременн", "препятств", "преста", "прецедент", "бы", "зор", "лавоч", "пример", "принцип", "пристраст", "притяза", "причин", "приют", "проблем", "буд", "проволоч", "программ", "гуль", "игр", "сып", "процент", "пут", "путь", "саль", "бессараб", "сезонь", "семей", "сем", "бессемер", "сердеч", "сет", "сил", "силь", "симптом", "слав", "след", "слёз", "смерт", "смет", "мысл", "снежь", "событий", "совест", "созна", "сол", "солнеч", "сослов", "союз", "сребр", "сроч", "пуск", "точ", "страст", "страш", "струж", "структур", "струн", "ступен", "стыд", "стыж", "тык", "субъект", "счаст", "счёт", "сюжет", "такт", "талан", "талант", "тариф", "тар", "тен", "бестер", "тк", "товар", "товарь", "толк", "толочь", "траншей", "трепет", "бестселлер", "фабуль", "фамиль", "форм", "хитр", "хлеб", "хлебь", "хлопот", "хоз", "хребет", "цвет", "цель", "ценз", "церемон", "челноч", "человеч", "челюст", "череп", "череш", "чест", "честь", "числ", "член", "чу", "бесшабаш", "шаж", "шарнир", "шов", "шпон", "штанг", "шум", "щел", "бета", "лом", "меш", "бефстроганов", "бечев", "бечёв", "бешбармак", "беш", "бешмет", "бештау", "биатлон", "бибабо", "биб", "коллект", "библей", "библи", "таф", "тек", "теч", "бивак", "бивуак", "бивач", "бигуди", "биде", "бидон", "биеннале", "бьеннале", "бижутери", "бизань", "бизнес", "бизон", "квадр", "бикини", "бикс", "лаби", "билатеральн", "печат", "лингв", "линей", "билирубин", "биллион", "билль", "бильбоке", "бильд", "бильярд", "металл", "молекул", "нар", "биндюжник", "окл", "окль", "окул", "бинт", "генет", "доз", "индик", "инженер", "информ", "кибернет", "комплекс", "лок", "люминесц", "нт", "потенци", "препарат", "пс", "реакт", "синтез", "стимул", "страти", "ток", "топл", "правл", "фармац", "фармаци", "энерг", "бирж", "бирк", "бирм", "бирон", "бироч", "бирюз", "бирюк", "бирюлеч", "бирюльк", "бирюч", "бис", "бисер", "бисквит", "бисмут", "висмут", "биссектрис", "биссин", "бистр", "бистро", "сульф", "бит", "битенг", "битини", "битл", "битник", "битюг", "бифштекс", "бихевиор", "цепс", "цилл", "бич", "бишь", "благ", "вещ", "благовол", "вон", "воспит", "глуп", "благогов", "й", "благодар", "благодаря", "благодат", "благодать", "благоден", "благодуш", "жела", "благолеп", "ящ", "намер", "нрав", "благообраз", "благополуч", "обрет", "благопристой", "благоприятн", "благоприят", "располож", "клон", "благослов", "благословл", "благосостояни", "благотвор", "смотр", "стра", "благоуха", "благочест", "благочин", "блаженн", "блажен", "блаж", "блажь", "бланк", "бланманже", "бланоч", "бланш", "бласт", "дерм", "блат", "блева", "блев", "бледн", "блейвейс", "блёк", "блек", "блеск", "блес", "блест", "блёст", "блеф", "блещ", "бле", "ближ", "восточ", "близ", "близк", "леж", "близн", "раст", "сид", "блик", "блин", "блинд", "блинт", "блист", "блиц", "криг", "турнир", "блокнот", "жим", "рабат", "блондин", "блох", "блоч", "блош", "блуд", "блужд", "блуз", "блюд", "блюз", "блюм", "блюс", "блях", "бляш", "боа", "боб", "бобби", "бобёр", "бобин", "бобр", "сле", "слей", "бобыл", "бобыль", "бог", "богадел", "богадель", "богар", "богатыр", "богатырь", "богач", "богдыхан", "богем", "вдохнов", "маз", "ерь", "мерзк", "мил", "миль", "мол", "ненавист", "ступ", "против", "еб", "спас", "боготвор", "угод", "хуль", "человек", "бод", "бодр", "евит", "запас", "комплект", "пита", "способн", "боинг", "бойк", "бойкот", "бойлер", "бойскаут", "овый", "бойч", "бокаж", "бокал", "бокаль", "нерв", "плав", "шей", "бокс", "боксёр", "болван", "болваш", "болгар", "болеро", "утол", "боливар", "боливи", "боливий", "болон", "болонк", "болонь", "болот", "болт", "болюс", "ячк", "ард", "ёжк", "мет", "брас", "бомж", "бомонд", "бон", "бонапарт", "бонбоньерк", "бонбоньероч", "бонвиван", "бонд", "бонз", "бонмо", "бонн", "бонтон", "борат", "бордель", "бордеро", "бордо", "борд", "бордюр", "борей", "борец", "боржом", "борз", "бормот", "бормоч", "боров", "водород", "бородавк", "бородавоч", "бородавч", "борозд", "ментол", "борон", "боронь", "борт", "врач", "журнал", "борть", "борщ", "борь", "бос", "боскет", "нож", "босс", "бостон", "бот", "ботв", "инь", "дал", "ботинк", "ботиноч", "ботул", "ботфорт", "боцман", "бочаг", "бочаж", "бочеч", "бочк", "оноч", "з", "бояр", "боярыш", "брав", "иссим", "браг", "брад", "брей", "браж", "бразил", "бразиль", "брак", "браконьер", "брамсель", "брандахлыст", "бранд", "спойт", "бран", "брань", "браслет", "брасс", "брат", "убий", "бр", "браунинг", "брахи", "кефал", "цефал", "брахман", "брашпил", "брашпиль", "бревен", "бревеш", "бревёш", "бревн", "таск", "брёвн", "брегет", "бред", "брезг", "брезент", "брезж", "брейк", "брек", "ватер", "брелок", "брелоч", "брем", "бренди", "бренн", "бренч", "брень", "брес", "бретель", "бретёр", "бретон", "брёх", "брех", "бреш", "брешь", "бре", "бриг", "бригантин", "бридж", "бриз", "брикет", "бриллиант", "брильянт", "бристоль", "британ", "бритт", "брифинг", "бричк", "бровь", "брод", "брож", "бройлер", "брокер", "брокколи", "бром", "желатин", "серебр", "урал", "катер", "колпак", "локомотив", "бронз", "графит", "латун", "бронт", "бронх", "пневмон", "брос", "бросч", "брот", "брош", "брошь", "брошюр", "брр", "бруд", "брудер", "брудершафт", "брус", "брусн", "бруствер", "брутто", "бруцелл", "брыжееч", "брыжейк", "брыжей", "брызг", "брызж", "брыз", "брык", "брыл", "брынз", "брысь", "брюзг", "брюзж", "брюкв", "брюк", "брюмер", "брюнет", "брюссель", "брют", "горл", "реснич", "брюч", "брюш", "тиф", "бряк", "бряц", "бубен", "бублик", "бублич", "бубн", "бубон", "бугай", "бугель", "бугор", "бугр", "будар", "будд", "будённ", "будён", "будк", "будн", "будораж", "будоч", "будто", "будуар", "бу", "буер", "буерак", "буерач", "буж", "бужен", "буз", "тёр", "буй", "буйвол", "буйреп", "бук", "букан", "букаш", "букв", "букет", "буки", "букин", "букле", "буклет", "букл", "буковин", "буков", "буколик", "буколич", "букс", "буксир", "булав", "булавк", "булавоч", "булавч", "булан", "булат", "булгач", "булк", "булоч", "бултых", "булыж", "бульвар", "бульдог", "бульдож", "бульдозер", "буль", "бульон", "бум", "бумаг", "мар", "пряд", "честв", "ац", "бумаж", "бумазей", "бумазе", "бумеранг", "бун", "бунгало", "бунд", "канцлер", "рат", "таг", "бункер", "бунт", "щич", "бунчук", "бурав", "бурак", "буран", "бурач", "бурбон", "бургомистр", "бургон", "бургунд", "бурд", "бурдюк", "бурдюч", "буржуа", "буржуаз", "буржуй", "буриме", "бурк", "буркал", "бурлак", "бурлац", "бурлач", "бурл", "бурлеск", "бурмистр", "бурнус", "зём", "шнек", "бурре", "буррет", "бурс", "бурт", "бурун", "бурундук", "бурундуч", "бурхан", "бурч", "бурш", "бурьян", "бурят", "буссоль", "бустер", "бут", "бутадиен", "бутадион", "бутан", "бутафор", "бутерброд", "бутил", "каучук", "бутон", "бутоньерк", "бутс", "бутуз", "бутыл", "мо", "бутыль", "буфер", "буфет", "буфф", "буф", "бух", "буханк", "бухар", "бухгалтер", "бухт", "буцефал", "буч", "бушева", "бушель", "бушлат", "бушмен", "быдл", "бык", "былин", "быстр", "густ", "морож", "наш", "пар", "лет", "пад", "разви", "разъём", "реж", "сох", "тверд", "тий", "быч", "бычок", "бь", "бэр", "бэрч", "бювар", "бювет", "бюджет", "бюллетен", "бюллетень", "бюргер", "бюро", "бюст", "гальтер", "бяз", "бязь", "бяк", "бя", "вабик", "ваб", "вавилон", "вож", "вагран", "важ", "ваз", "вазелин", "вазисубани", "ваканси", "вакант", "вакаци", "вакс", "вакуол", "вакуоль", "вакх", "вакханал", "вакханаль", "валанда", "валансьен", "валах", "валаш", "еж", "валентн", "валёр", "валериан", "валерьян", "валет", "валидол", "валторн", "валуй", "валун", "валух", "вальдшнеп", "вальс", "вальтрап", "вальяжн", "вальян", "валют", "вампир", "ванад", "вандал", "вандаль", "ванил", "ваниль", "ванн", "ван", "вант", "вапор", "вар", "варан", "варвар", "варган", "варежк", "вари", "экран", "варнак", "варнач", "варшав", "варьете", "варь", "варяг", "варяж", "василёк", "василёч", "василиск", "васильк", "васисдас", "вассал", "вассаль", "ват", "ватаг", "ватаж", "жакет", "клозет", "ватерпас", "поло", "поль", "ватман", "ватрушеч", "ватрушк", "вафель", "вафл", "вахлак", "вахлац", "вахлач", "вахмистр", "вахмистер", "ваш", "вашгерд", "вая", "бир", "вез", "вёз", "век", "верг", "верж", "вёр", "вёрст", "верст", "верт", "верч", "вечер", "ви", "винт", "винч", "волак", "волок", "волоч", "волочь", "ю", "ворач", "ворот", "восьм", "высь", "гиб", "гладь", "глубь", "глух", "гнезд", "грыз", "дав", "давл", "далбл", "далек", "даль", "дви", "дв", "девят", "дёж", "дёрг", "дёрж", "дёр", "десят", "бав", "вдов", "доволь", "догад", "долб", "долбл", "доста", "сыть", "дох", "вдохновл", "дребезги", "вдруг", "дрызг", "ду", "вебер", "вевериц", "вегетари", "вегет", "ведёр", "веди", "ведомост", "ведомость", "ведомств", "вёдр", "ведь", "ведьм", "веер", "вежлив", "везде", "сущ", "везикул", "везир", "вей", "вейсман", "веч", "вексел", "вексель", "вектор", "векш", "веле", "леп", "мудр", "вел", "реч", "велик", "возраст", "держав", "княж", "великолеп", "муч", "росс", "россий", "рус", "велич", "коляск", "кросс", "рикш", "велосипед", "нк", "трек", "фигур", "эрг", "вельбот", "вельвет", "вельми", "вельмож", "велюр", "веляр", "венгер", "венгр", "венд", "венед", "венер", "венесуэл", "венесуэль", "венет", "венеци", "вензел", "вензель", "веник", "венич", "вентил", "вентиль", "вепрь", "вепс", "веранд", "верб", "вербальн", "вербен", "верблюд", "верблюж", "вербова", "вербов", "вердикт", "верёвк", "верёвоч", "веред", "верезж", "верениц", "вереск", "веретен", "верещ", "верже", "верзил", "вериг", "вермахт", "вермишел", "вермишель", "вермут", "верн", "вернисаж", "подданн", "верноподданный", "исповед", "веролом", "вероник", "терп", "вероят", "верс", "верси", "верстак", "верстач", "вертел", "вертель", "вертеп", "вертикал", "вертикаль", "вертлюг", "вертлюж", "вертопрах", "вертопраш", "верф", "верфь", "волж", "гортан", "лужиц", "мел", "нем", "овен", "ушеч", "весёл", "весел", "весель", "вёсель", "весен", "весл", "весн", "вс", "паш", "ушч", "вестибул", "вестибюль", "вестфаль", "весть", "весь", "весьма", "ветв", "ветвл", "вет", "ветвь", "ветер", "ветеран", "ветеринар", "ветл", "вето", "ветош", "ветошь", "персонал", "польз", "колес", "станов", "ый:", "экспертиз", "фельдшер", "ветх", "завет", "ветчин", "ветш", "вех", "вечёр", "ошн", "зелён", "мёрз", "вечор", "веш", "вешн", "мешок", "вещь", "ве", "жа", "жив", "живл", "зад", "заём", "взаимн", "взаим", "влия", "выруч", "довер", "полн", "завис", "мк", "индук", "исключ", "богащ", "условл", "отнош", "мощь", "поним", "превращ", "приемл", "уваж", "займ", "перт", "правд", "тяж", "хлёб", "хлёст", "бадр", "баламуч", "взбалмошн", "балт", "взбелен", "борожд", "взбутетен", "визг", "вихр", "взвод", "волн", "ворош", "гля", "гомоз", "гомон", "горб", "гор", "горь", "гре", "грем", "громожд", "громозд", "груст", "дё", "дир", "вздор", "драг", "дрем", "дрог", "дрюч", "дур", "дыб", "дыбл", "взима", "взир", "лам", "лез", "леле", "лохм", "луп", "лупл", "лупц", "лущ", "мал", "мах", "мач", "мащ", "мок", "морь", "мот", "моч", "мут", "мы", "мыл", "нес", "нёс", "узд", "ны", "др", "взор", "рв", "шед", "ращ", "рев", "ревн", "ро", "взросл", "рос", "гидравл", "защищ", "рыд", "ры", "рыхл", "ряб", "рябл", "взъ", "езж", "ерепен", "ерош", "ех", "зыв", "ыск", "взя", "получ", "виадук", "ато", "вибри", "гас", "пресс", "зонд", "инструмент", "площадк", "глощ", "груж", "сит", "вив", "виват", "виваче", "виверр", "виг", "вигон", "вигонь", "видать", "видео", "диск", "импульс", "искусств", "канал", "кассет", "кафе", "клип", "нов", "плёнк", "сигнал", "видимо", "визави", "византи", "византий", "визант", "визж", "визирь", "визит", "вик", "викар", "викинг", "горох", "виконт", "овс", "викторин", "виктори", "викунь", "вилайет", "вилк", "вилл", "вилок", "вил", "вилоч", "виль", "винегрет", "винил", "винкель", "винн", "виноград", "торг", "овл", "черп", "турбин", "винчестер", "виньетк", "виол", "виолончел", "виолончель", "вир", "вира", "вираж", "виртуальн", "виртуоз", "вирулентн", "вирш", "плёт", "вис", "виски", "вискоз", "висок", "височ", "виссон", "вист", "юльк", "витал", "вита", "вити", "витий", "витраж", "витрин", "витютень", "витязь", "вихл", "яв", "яй", "яст", "вихор", "коп", "вихрь", "виц", "мундир", "вишен", "вишень", "виши", "вишн", "ёв", "вишь", "кап", "карабк", "кач", "каш", "кле", "клей", "клёп", "клеп", "ключ", "кова", "ков", "когт", "колач", "колот", "колоч", "корен", "коротк", "кос", "кось", "кра", "крад", "крап", "крапл", "кратц", "крепл", "кривь", "кро", "крой", "круг", "круч", "вкупе", "вкуш", "влаг", "воздух", "заряд", "обеспеч", "талк", "глот", "владимир", "влаж", "влас", "власть", "влач", "лев", "влек", "влёк", "лепл", "влеч", "лечь", "влечь", "лип", "лоп", "любл", "ляп", "вмен", "мерз", "мёртв", "вместе", "мест", "вместо", "мещ", "миг", "мин", "монт", "нный", "мораж", "мурова", "муров", "наём", "найм", "атмосфер", "внедр", "европ", "внезапн", "зем", "клеточ", "конкурс", "корн", "внемл", "очеред", "парламент", "студий", "сустав", "улич", "устав", "школь", "политич", "торгов", "штат", "ярус", "вник", "вним", "чь", "новь", "внук", "нутр", "зёрен", "кварталь", "квартир", "комнат", "континент", "материк", "мышеч", "област", "плем", "скважин", "внутр", "текст", "утроб", "цилиндр", "нутрь", "внуч", "внуш", "нюх", "внятн", "вня", "вобл", "вовсе", "вовсю", "гн", "г", "вогул", "вогуль", "двор", "водевил", "водевиль", "водк", "лыж", "водн", "газ", "торф", "парафин", "каптаж", "кольц", "лей", "масл", "мой", "пресн", "свящ", "хлажд", "чист", "пла", "пой", "ниж", "приём", "проч", "пыл", "свят", "слой", "столб", "струй", "труб", "водоч", "водруж", "водруз", "воева", "воевод", "вое", "началь", "обяз", "плен", "спец", "юрист", "вождел", "вожд", "вождь", "вожж", "бужд", "вращ", "выс", "выш", "главл", "глаш", "горд", "воздвиг", "воздвиж", "возде", "гнет", "хлад", "распре", "лавл", "эквивалент", "воздыма", "жажд", "жёг", "жечь", "жж", "зв", "зр", "возле", "лег", "лёг", "ликова", "возмезди", "возмест", "мечт", "возмещ", "мог", "мож", "мочь", "мущ", "наград", "награжд", "негодова", "ненавид", "возник", "ове", "облад", "новл", "мн", "возоп", "возраж", "возраз", "рожд", "ропт", "ыме", "воин", "истин", "вои", "вой", "войлок", "войн", "войск", "вокабул", "ярий", "вокал", "вокаль", "вокатив", "вокзаль", "волан", "волапюк", "волг", "волдыр", "волдырь", "изъ", "явл", "волей", "волк", "лис", "волокит", "волокон", "волонтёр", "волост", "волость", "волочься", "волош", "волхв", "волчанк", "волч", "ягод", "волшеб", "волын", "волынк", "вольготн", "вольер", "вольно", "определ", "пущ", "практ", "слуш", "вольтер", "вольтерь", "вольтиж", "вольфрам", "волюм", "волюнтар", "волют", "мч", "вонз", "вонь", "юч", "воображ", "вообраз", "вообще", "воодушев", "воодушевл", "воочию", "воп", "вопл", "воплот", "воплощ", "вопль", "вопреки", "вопрос", "вопрош", "ворван", "ворвань", "ворк", "воробей", "вороб", "ушек", "воробьев", "воробь", "ворож", "ворон", "ёноч", "воронк", "вороноч", "воронь", "ворох", "вороч", "ворс", "ворч", "юг", "восвояси", "восем", "дцат", "градус", "восемь", "сот", "воск", "воскрес", "воскресень", "воскреш", "вос", "воспал", "пе", "помин", "препят", "прет", "прещ", "восприем", "восприим", "восприним", "восприня", "восприя", "произвед", "произвест", "воспря", "сед", "сес", "сия", "славл", "созда", "ста", "восстанавл", "восстанов", "восстановл", "сыл", "восток", "восторг", "восторж", "торжеств", "казах", "стан", "китай", "сибир", "славян", "требова", "востр", "хвал", "восхит", "восхищ", "хожд", "хот", "ведер", "вёдер", "копееч", "пят", "рубл", "дн", "месяч", "слож", "стиш", "уголь", "вот", "вотум", "вотч", "вотчин", "вотяк", "вотяц", "вотяч", "цар", "вош", "вошь", "вощ", "вою", "вояж", "пай", "палз", "парх", "пек", "перв", "перёд", "впер", "пер", "хват", "впёр", "впечатл", "печь", "пи", "впи", "пин", "пит", "пих", "плавл", "вь", "плёск", "плёс", "плес", "плет", "плотн", "плоть", "плы", "полз", "вполне", "половин", "щур", "прям", "пь", "слух", "сыт", "попад", "попых", "порожн", "впору", "порх", "последстви", "тай", "тьм", "впредь", "кус", "прыж", "скоч", "сяд", "тир", "трус", "тыч", "голодь", "желть", "зелень", "впрок", "резь", "синь", "сонь", "впрочем", "чернь", "прыг", "прыс", "пряг", "пряж", "прямь", "пряс", "прячь", "пуст", "пял", "пяч", "враг", "вражд", "враж", "дробь", "лад", "маш", "разн", "ряд", "умл", "вр", "врангел", "расплох", "ровень", "вроде", "рознь", "розь", "сыпь", "руб", "пашн", "вруч", "всад", "саж", "сас", "сач", "все", "всегда", "его", "звол", "знай", "зна", "вселенн", "вселен", "любезн", "милост", "минут", "непременн", "нощ", "объемл", "побежд", "погод", "жир", "покор", "одол", "прощ", "совершенн", "круш", "сторон", "украин", "цел", "яд", "скак", "кармл", "скачь", "кип", "клокот", "клокоч", "клоч", "скок", "колуп", "колых", "скольз", "скользь", "скор", "кормл", "крик", "крич", "круж", "сласть", "предлог", "следстви", "слеп", "сматр", "всмятку", "сова", "сов", "соч", "пах", "пен", "петуш", "плак", "плеск", "сплош", "сплошь", "поласк", "полох", "полош", "помн", "помя", "пря", "пуг", "пух", "пуч", "пуш", "вспыл", "вспыль", "вспых", "вспыш", "вспять", "став", "ставл", "старь", "тащ", "вста", "топорщ", "тормош", "тоск", "встр", "тревож", "трёп", "треп", "трепых", "встрет", "встреч", "трух", "тряс", "трях", "ступл", "всуе", "сух", "мят", "всуч", "хлип", "хож", "есть", "холмл", "храп", "всюду", "всяк", "всяч", "тапт", "тасова", "тасов", "тач", "тёк", "тём", "втемяш", "тер", "тес", "тесн", "течь", "тиск", "тис", "тих", "толкова", "толков", "толок", "топт", "втор", "торач", "вторг", "вторж", "год", "курс", "тороп", "ях", "разряд", "сорт", "степен", "тороч", "сырь", "трав", "травл", "трамбова", "трамбов", "треск", "тр", "дешев", "туг", "втулк", "втулоч", "втуне", "э", "тюр", "тя", "тяп", "вуал", "вуаль", "вулкан", "вульгар", "вундеркинд", "вурдалак", "хаж", "холод", "холост", "цепл", "вчера", "черн", "черт", "черч", "чет", "чит", "чуж", "шест", "ширь", "въ", "явь", "бри", "буравл", "ващ", "вывер", "вих", "вял", "гад", "гат", "гач", "глад", "глаж", "глод", "гни", "говар", "гораж", "выгор", "горож", "грав", "греб", "грес", "гул", "выда", "дерг", "выдержк", "дер", "дой", "выдр", "дра", "дресс", "дуб", "дубл", "дюж", "жар", "жд", "жег", "желч", "жереб", "жид", "жин", "выжл", "жр", "зван", "звезд", "вызвол", "звон", "здоравл", "здоров", "здоровл", "зелен", "зим", "зов", "зол", "золач", "золот", "золоч", "зре", "зубр", "зуд", "зуж", "зяб", "каз", "выкамар", "канюч", "капч", "кашл", "квас", "кваш", "клева", "клёв", "клейм", "клик", "клю", "клянч", "ковыр", "колаш", "колос", "копт", "копч", "корч", "кош", "крахмал", "краш", "крест", "крещ", "кристалл", "крош", "куп", "купл", "куш", "лака", "лащ", "лёж", "ловл", "ломл", "лощ", "луд", "луж", "мак", "малева", "малёв", "меч", "вым", "вымог", "молач", "молвл", "вымпел", "фал", "вымпель", "мурав", "муравл", "муштр", "мысел", "мышл", "ним", "нош", "нуд", "нужд", "ныр", "нян", "вынян", "остр", "пачк", "пая", "пендр", "пестова", "печ", "пив", "овоч", "плач", "плева", "плёв", "плю", "пляс", "полоск", "поражн", "потрош", "праст", "праш", "прос", "прост", "прош", "пруд", "прямл", "выпукл", "пыт", "выпь", "равн", "выраж", "выраз", "реш", "рис", "ровн", "рон", "рост", "руг", "ряж", "высад", "сват", "сверл", "свист", "свобод", "свобожд", "сек", "сеч", "сечь", "сиж", "син", "скабл", "сказ", "скальз", "скобл", "скреб", "скрёб", "скрес", "сл", "слеж", "слуг", "смал", "сме", "смол", "сморк", "высок", "идей", "интеллект", "интеллигент", "интенс", "калорий", "качеств", "квал", "ифиц", "концентр", "объём", "огн", "октан", "орбит", "превосход", "преподоб", "проб", "продукт", "прочн", "стабиль", "температур", "точн", "травь", "рож", "чт", "шир", "эффект", "солод", "солож", "высоч", "спар", "сп", "спе", "спраш", "выспренн", "спрос", "спрош", "стег", "стёг", "стел", "стл", "стил", "стир", "страг", "струг", "страч", "стриг", "стриж", "стричь", "строг", "строч", "студ", "стуж", "стук", "сты", "суж", "суш", "счит", "сых", "та", "танц", "тапл", "таращ", "тверж", "тереб", "теребл", "тёс", "тисн", "трал", "трезв", "трезвл", "труш", "уд", "уж", "утюж", "харк", "хвач", "хлест", "хлоп", "хлопат", "холаж", "холащ", "хол", "холож", "холощ", "выхухол", "выхухоль", "царап", "цвес", "цед", "цеж", "цыган", "чекан", "чёрк", "черк", "чес", "чёс", "чих", "чищ", "вычур", "шаг", "шар", "шарк", "швыр", "шелуш", "объявл", "показ", "шиб", "шибл", "шлифова", "шлифов", "шмыг", "шныр", "вышпар", "шпар", "штамп", "штукатур", "шут", "шуч", "щелач", "щелк", "щёлк", "щелоч", "щерб", "щербл", "щип", "щуп", "выяв", "выявл", "ясн", "вьетнам", "вьюг", "вьюж", "вьюк", "юн", "вьюрк", "юрк", "вьюрок", "юрок", "вьюч", "вьюшеч", "вьюшк", "вяж", "вязель", "вязч", "вя", "вят", "вятк", "вяхирь", "вящ", "га", "гааг", "габардин", "габарит", "габбро", "габион", "габитус", "гава", "гаван", "гавань", "гав", "гавот", "гаг", "гагар", "гагат", "гагауз", "ёныш", "гаер", "гаеч", "гаж", "газават", "газел", "газель", "газет", "дизель", "жидк", "ойль", "каротаж", "газон", "нефт", "оборудова", "турб", "гаит", "гаичк", "гайдамак", "гайдамат", "гайдамац", "гайдук", "гайдуц", "гайк", "гаймор", "гайтан", "гак", "гала", "галаган", "галазолин", "галактик", "галакт", "галалит", "галантерей", "галантере", "галантн", "галд", "гален", "галер", "галере", "галёр", "галет", "галеч", "галимать", "галифе", "галк", "галл", "галлон", "галль", "галлюцин", "гало", "гал", "галоп", "галоч", "галош", "калош", "галс", "галстук", "галстуч", "галтель", "галун", "галушк", "галч", "гальван", "кауст", "ика", "стеги", "стере", "гальк", "гальюн", "гамадрил", "гамак", "гамаш", "гамби", "гамбит", "гамбузи", "гамлет", "гангли", "ганглий", "гангрен", "гангстер", "ганд", "ган", "ганзей", "гантел", "гаолян", "гапл", "гапон", "гарант", "гаранти", "гардемарин", "гардени", "гардероб", "гардин", "гарем", "гарибальди", "гармонь", "гармош", "гарнизон", "гарнир", "гарнитур", "гарпи", "гарпун", "гарсон", "гарт", "гарус", "гарцева", "гаршнеп", "гарь", "гастер", "гастр", "алг", "гастрол", "гастроль", "гастроном", "энтер", "гать", "гаубиц", "гаубич", "гауптвахт", "гаусс", "гаучо", "гафель", "гаш", "гашетк", "гашиш", "гащ", "гвазд", "гвалт", "гварди", "гватемал", "гватемаль", "гвине", "гвиней", "гвозд", "гвоздь", "гебра", "гегель", "гегемон", "гедон", "геенн", "геен", "гезенк", "гейзер", "гейм", "гейш", "гекатомб", "гекза", "гекса", "эдр", "гектар", "гект", "литр", "пьез", "гелертер", "гел", "геликоптер", "гели", "юр", "гельминт", "агглютин", "миел", "геми", "парез", "гемм", "глобин", "рраг", "геморр", "геморрой", "генеалог", "генеалоги", "генез", "генерал", "иссимус", "генераль", "ация", "гени", "гений", "генитив", "фонд", "гену", "эз", "штаб", "ге", "криол", "ги", "магнет", "микр", "георги", "георгин", "тектоник", "тектонич", "гепард", "гепат", "холецист", "гепта", "хорд", "геральдик", "геральдич", "геран", "герань", "герб", "гербар", "геркулес", "герм", "герман", "афродит", "герменевт", "гермет", "шлем", "геро", "героин", "геронт", "псих", "герострат", "герпет", "герундив", "герундий", "герц", "герцог", "гестапо", "гестап", "гетер", "дин", "зигот", "троф", "гетман", "гетр", "геттер", "гетто", "гехса", "гешефт", "махер", "гиацинт", "гиббон", "гибрид", "гибч", "гигант", "гигр", "гид", "гидальго", "гиджак", "гиджр", "карбон", "кортиз", "костюм", "окс", "медуз", "модуль", "монитор", "муфт", "нефр", "кись", "плотин", "проект", "пульт", "режим", "сооруж", "торакс", "узел", "фиц", "хин", "экструз", "элеватор", "гиен", "гик", "гиле", "гильберт", "гильдей", "гильди", "гильз", "гильотин", "гимн", "гимназ", "гимнази", "гимнаст", "гимнастёрк", "гинекей", "гинек", "гинецей", "гине", "гипербол", "гиперборе", "гиперборей", "глик", "дактил", "звук", "кинез", "плаз", "сорбц", "функци", "эллипт", "гипноз", "гипн", "пед", "гипнот", "гипнотизм", "гипо", "гип", "кинет", "стаз", "тактич", "таламус", "гипотез", "тенз", "гипотенуз", "гипотет", "фосф", "функц", "гиппопотам", "гипс", "гипюр", "гир", "гирлянд", "гиро", "компас", "стабил", "тах", "гирь", "гисто", "пато", "гит", "гитан", "гитар", "гитлер", "гич", "главн", "команд", "глагол", "глаго", "ла", "гладиатор", "гладиолус", "гладк", "кож", "стекл", "глазет", "глазур", "глазурь", "гланд", "глаук", "гледичи", "глейк", "глёт", "глетчер", "солом", "щебён", "щебень", "глинт", "вейн", "гли", "глипт", "глиссандо", "глисс", "глист", "глицерин", "фосфор", "глицер", "глобальн", "глоб", "глобул", "глобус", "аю", "глосс", "глотт", "глох", "глубж", "глуб", "глубок", "выем", "эшелон", "глубоч", "глум", "глумл", "глухар", "глухарь", "земл", "мань", "глуш", "глушь", "глыб", "глюкоз", "глядь", "глянец", "глянц", "глясе", "гляци", "гм", "гнед", "гнейс", "гранит", "гнес", "гнёт", "гнид", "гном", "гносе", "гностик", "гностиц", "гностич", "гнот", "гну", "гнус", "гнусн", "гнусь", "гнуша", "го", "гобелен", "гобо", "гобой", "гове", "говяд", "говяж", "гогол", "гоголь", "гогот", "гогоч", "гой", "гокко", "гол", "голавл", "голавль", "голгоф", "голен", "голень", "голиаф", "голкипер", "голланд", "ешк", "головн", "грудь", "голо", "голод", "жабер", "лёд", "ледь", "пуз", "штан", "голуб", "голубц", "голубь", "ыть", "голь", "гольд", "теп", "гольф", "гоме", "гомер", "гоминьдан", "гомм", "гом", "гомункул", "гонг", "гондол", "гондоль", "гони", "гонобобель", "гоно", "кокк", "гонор", "гонорар", "гонорей", "гоноре", "гонош", "гонт", "гончар", "гонь", "гоп", "гопак", "гопля", "горазд", "гораздо", "горал", "гордон", "горе", "мык", "мыч", "енк", "ест", "горец", "горечавк", "горечь", "горжетк", "горилл", "горк", "атк", "пан", "гормон", "горн", "горнил", "горниц", "горнич", "руд", "горноста", "горностай", "няц", "городь", "гороскоп", "горош", "горст", "горсть", "гортань", "гортензи", "горч", "горш", "горшеч", "горшок", "горшоч", "горьк", "миндаль", "цинк", "гос", "границ", "департамент", "заказ", "издат", "комисси", "кредит", "лицензи", "госпитал", "госпиталь", "господар", "господарь", "господ", "господин", "господь", "госпож", "предпри", "секретарь", "сектор", "страх", "ст", "гост", "гостинец", "гостиниц", "гостинич", "гостинч", "гость", "государ", "государь", "учрежд", "экзамен", "готик", "готич", "готовальн", "гот", "готтентот", "гоф", "маршал", "маршаль", "гофр", "граб", "грабар", "грабарь", "грабаст", "грабл", "грабь", "граве", "гравер", "гравий", "гравилат", "гравит", "град", "градаци", "градиент", "граду", "гражд", "грай", "граммат", "пластин", "гранат", "гранд", "грандиозн", "гранул", "грань", "грасс", "графин", "графл", "граффити", "граффито", "граци", "грач", "гребён", "гребен", "гребень", "гребеш", "гребл", "гребн", "грёб", "грёз", "грез", "грейд", "грейпфрут", "грейфер", "грек", "грен", "гренадер", "гренк", "гренланд", "грец", "греч", "гриб", "грив", "гривен", "гривн", "гризли", "гриль", "грильяж", "грим", "гримас", "гринвич", "грипп", "гриф", "грифель", "грифон", "гроб", "грог", "грогги", "грозд", "гроздь", "грозн", "упор", "гром", "громад", "громк", "громч", "громых", "гросс", "гроссбух", "гросфатер", "грот", "гротеск", "грох", "грохот", "грохоч", "грош", "груббер", "груб", "дробл", "зерн", "мельч", "провок", "стебель", "сукон", "грузд", "груздь", "грузин", "грузн", "напряж", "отправ", "такси", "грум", "грунт", "лак", "материал", "груп", "орг", "фюрер", "грусть", "груш", "грыж", "гряд", "лечени", "грязь", "гря", "гряс", "гуанако", "гуан", "гуано", "гуашь", "губ", "губерн", "губерни", "шлёп", "гуверн", "гугенот", "гугн", "гуд", "гудрон", "гук", "гулливер", "гульден", "гуляш", "итар", "гумен", "гумён", "гум", "гумм", "гумми", "гут", "гумн", "гумус", "гундос", "гунн", "гунтер", "гуппи", "гурджаани", "гури", "гурий", "гурман", "гурт", "гуру", "гурьб", "гус", "гусар", "гусель", "гусениц", "гусенич", "гусит", "гусл", "сыщ", "гусь", "гуталин", "гутор", "гуттаперч", "гуцул", "гуцуль", "гущ", "гюйс", "гюрз", "гяур", "дабы", "даве", "давн", "дагестан", "дада", "даже", "дайджест", "дайн", "дакри", "зоид", "далёк", "далеч", "дали", "далли", "далмат", "дальтон", "дам", "дамас", "дамаст", "дамб", "дамк", "даммар", "дамн", "дамп", "дана", "данай", "дан", "дансинг", "дант", "дань", "даос", "даргин", "дарданелль", "дари", "дат", "дауэс", "дафни", "дацзыбао", "дач", "дашнак", "цутюн", "кило", "тысяч", "четыр", "дюйм", "перст", "двер", "дверь", "двин", "жен", "жён", "знам", "яшк", "дворец", "дворц", "выпук", "дыш", "дыщ", "жиль", "знач", "кон", "направл", "плеч", "полост", "руш", "слог", "состав", "ствол", "створч", "тавр", "угл", "уст", "валент", "диапазон", "заль", "звень", "иголь", "каскад", "колей", "колен", "компонент", "контур", "корпус", "кулач", "ламп", "лемеш", "мачт", "миллиард", "недель", "холм", "орудий", "палат", "полотен", "полюс", "пуд", "сажен", "свеч", "суточ", "уровн", "фунт", "элемент", "дебаркадер", "дебат", "дебел", "дебет", "дебил", "дебиль", "дебит", "дебош", "дебр", "дебют", "дев", "вальв", "деверь", "девиз", "ичь", "девон", "девяност", "девясил", "девять", "дёготь", "деград", "дёгт", "дегт", "дегуст", "дед", "дедвейт", "дедерон", "дедик", "драм", "дедукт", "дедукц", "дедуц", "дее", "причасти", "причаст", "деж", "дежур", "дезабилье", "дезаву", "дезертир", "интегр", "интоксик", "инфек", "инфиц", "одор", "урбан", "действительн", "дек", "декабр", "декабрь", "дека", "декад", "кальк", "кальц", "декан", "тонн", "деклам", "деклар", "код", "декольт", "компенс", "компресси", "декор", "декрет", "декрещендо", "декрешендо", "декстр", "лабиал", "делег", "деликатес", "деликатн", "лимит", "дельт", "планер", "дельфий", "дельфин", "делюви", "делювий", "демагог", "демарк", "демарш", "маск", "дем", "демикотон", "деми", "сезон", "демиург", "демон", "демонстр", "демос", "демпинг", "демпфер", "демпф", "мульти", "плик", "муниципал", "натур", "фик", "денди", "дендр", "ден", "ёч", "знак", "деникин", "номин", "денонс", "денотат", "дент", "день", "деньг", "деньж", "деонт", "палатал", "депеш", "пигмент", "депо", "деп", "депозит", "поляр", "депон", "депорт", "депресси", "депутат", "депутац", "дербенник", "дерби", "дерб", "дервиш", "дергач", "реал", "деревен", "деревень", "деревн", "дерез", "дёрен", "морд", "дерз", "дерив", "дёрн", "дерн", "деррик", "дерть", "дерьм", "юж", "деряб", "дёсен", "сенсибил", "десерт", "десигнат", "десик", "дескать", "дескрипт", "дескрипц", "десн", "десниц", "деспот", "деструкт", "деструкци", "деструкц", "десть", "деся", "евк", "десять", "детал", "деталь", "детектив", "детект", "детермин", "ать", "термин", "площад", "ясл", "дефек", "фибр", "дефиле", "дефил", "дефинит", "дефиниц", "дефис", "дефлегм", "фоли", "дехкан", "децемвир", "деци", "дец", "деч", "дешёв", "дешевл", "шифр", "эмульг", "эскал", "этим", "джаз", "джайн", "джамбул", "джейран", "джем", "джемпер", "джентльмен", "джентри", "джерси", "джерс", "джигит", "джин", "джинго", "джинн", "джинс", "джип", "джонатан", "джонк", "джоуль", "джугар", "джунгл", "джут", "дзе", "дзет", "дзинь", "дзюдо", "диабаз", "диабет", "диагноз", "диагност", "диагонал", "диагональ", "диаграмм", "диадем", "диаз", "диакритич", "диалог", "диа", "диамант", "диаметр", "ди", "позитив", "диаспор", "диатез", "диафрагм", "дибазол", "див", "диван", "енц", "диверс", "диверси", "дивертисмент", "дивиденд", "дивизион", "дидакт", "диез", "диен", "диет", "сестр", "столов", "дизажио", "дизайн", "диз", "дизел", "дизентерий", "дизентери", "дизъюнкт", "дизъюнкц", "дик", "дикобраз", "диксиленд", "дикт", "дикци", "дилат", "дилемм", "дилетант", "дилижанс", "димедрол", "диминуэндо", "динамит", "динамо", "динар", "динарий", "динас", "династ", "династи", "динго", "дино", "терий", "диоптр", "орам", "дип", "курьер", "дипл", "дипло", "диплом", "дипломат", "дипс", "директив", "дирек", "дирижабель", "дирижабл", "дирижабль", "дириж", "дирхем", "дискант", "диско", "комфорт", "дисконт", "фрез", "дискредит", "дискретн", "дискримин", "дискурс", "дискусси", "дискусс", "дискут", "дислок", "дислоц", "диспансер", "диспепс", "диспепси", "дисперси", "дисперс", "дисплей", "диспозит", "диспозици", "диспон", "пропорци", "диспут", "диссерт", "диссидент", "симил", "симул", "дистанци", "дистилл", "дистинкт", "дистинкц", "дистрибут", "дистрибуц", "дисциплин", "дит", "ятк", "диур", "дифирамб", "дифракци", "дифтер", "фтонг", "дифферент", "дифференци", "дифференц", "диффузи", "диффуз", "диффунд", "дих", "томи", "дич", "дичь", "длань", "длин", "рыл", "черешк", "дл", "днепр", "днестр", "бавл", "доберман", "доби", "доблест", "доблесть", "добр", "добродетель", "порядочн", "сосед", "довзыск", "довле", "довод", "довольн", "довольстви", "догм", "договор", "дож", "дожд", "жёва", "жева", "жёв", "дозор", "дойн", "док", "канч", "капитал", "докембрий", "доклад", "клёва", "ковыл", "коль", "докона", "конч", "красн", "доктор", "доктрин", "куда", "докук", "документ", "докуч", "дол", "долг", "долдон", "долж", "должен", "должн", "должност", "должность", "долин", "долих", "доллар", "долой", "доломан", "доломит", "долот", "дольмен", "домбр", "домен", "доместик", "домин", "доминик", "доминион", "домино", "домкрат", "домн", "домог", "монопол", "рощ", "хозя", "чад", "домр", "наг", "донбас", "донг", "нельзя", "донес", "жуан", "доним", "кихот", "донор", "донос", "носи", "ныне", "донь", "доня", "обед", "октябрь", "пёк", "петр", "допинг", "ийся", "подлинн", "поздн", "допраш", "прода", "допрос", "допрош", "пушкин", "революци", "дородн", "дород", "ф", "досад", "досажд", "сал", "сель", "доск", "доскональн", "сочин", "досоч", "доспех", "сплетн", "ссор", "достав", "доставл", "достиг", "достичь", "достиж", "достоверн", "достоин", "достойн", "дост", "достояни", "доступ", "стуч", "досуг", "досуж", "досье", "сюда", "досяг", "тем", "дотла", "тле", "толь", "дотошн", "траг", "тро", "туда", "тушёва", "тушева", "тушёв", "ить", "доцент", "доч", "дочь", "шал", "дошл", "дощ", "драгоман", "драгун", "драж", "драже", "дразн", "дракон", "драндулет", "драп", "драпри", "драхм", "дребедень", "дребезг", "дребезж", "древ", "древл", "древн", "верхн", "немец", "еврей", "индий", "перс", "тюрк", "церков", "южн", "сажд", "дредноут", "дрейф", "дрек", "дреколь", "дрель", "дрём", "дремл", "дресв", "дриад", "дриблинг", "дрифтер", "дроб", "тей", "дров", "пиль", "дрож", "дрожеч", "дрожж", "ёва", "дрожк", "дрожь", "дрозд", "дрозофил", "дрок", "дромадер", "дросс", "дроссел", "дроссель", "дротик", "дроф", "дрочён", "друг", "друж", "дружин", "друид", "дрыг", "дрых", "дрюк", "дряб", "дрягиль", "дрязг", "дрян", "дрянь", "дрях", "дуал", "дубас", "дубин", "икат", "дубль", "няч", "дубрав", "дубров", "дубь", "дуг", "дуд", "дудки", "дуж", "дукат", "дулеб", "дул", "дуль", "дульцине", "думпер", "думпкар", "дунай", "дунг", "дуо", "децим", "дупел", "пель", "плекс", "дуплет", "дупл", "анд", "ачь", "дурман", "еть", "дурр", "дуршлаг", "ынд", "дурь", "дуст", "дуумвир", "духан", "духовенств", "дуче", "душанб", "больн", "приказ", "душман", "душн", "дуэл", "дуэль", "дуэнь", "дуэт", "дщерь", "дылд", "дын", "дынь", "дыр", "дышл", "дьявол", "дьяволь", "дьяк", "дьяч", "дюбель", "дюжин", "дюн", "дюр", "дюшес", "дягиль", "дяд", "дядь", "дятел", "дятл", "евангели", "евангел", "евангель", "евгеник", "евгенич", "евнух", "евр", "азий", "егер", "егерь", "египет", "египт", "егоз", "едва", "наслед", "начал", "еже", "ежев", "ежели", "секунд", "ежов", "екатерин", "ектень", "еле", "елей", "елизавет", "елоз", "ендов", "енот", "епанч", "епархи", "епитимий", "епитимь", "епитрахиль", "ералаш", "ересь", "ерет", "ёрз", "ермолк", "ёрник", "ёрнич", "ерофеич", "ерунд", "ёрш", "ерш", "есаул", "есауль", "если", "мь", "ессей", "ессентук", "естеств", "испыт", "ефимок", "ефрейтор", "ехид", "ехидн", "ещё", "жаб", "жабо", "жабр", "жавел", "жавель", "жаворонок", "жад", "жадн", "жакан", "жаккард", "жако", "жакоб", "жалей", "жаль", "жалюзи", "жам", "жандарм", "жанр", "жантильн", "жаргон", "жарк", "жарч", "жасмин", "жах", "жбан", "жв", "жгут", "жг", "же", "жезл", "желвак", "желвач", "желе", "синерод", "желёз", "керам", "жёлоб", "желоб", "желонк", "желоноч", "желон", "жёлт", "корень", "лоз", "фиоль", "желуд", "желудок", "желудоч", "жёлудь", "жёлч", "желчь", "жёлчь", "жеман", "жеманн", "жемчуг", "жемчуж", "женев", "женьшень", "жерд", "жёрд", "жердь", "жерёб", "жеребь", "ёвк", "жерех", "жерлиц", "жерл", "жерминаль", "жёрнов", "жернов", "жертв", "жест", "икул", "жёстк", "жестк", "жесток", "серд", "жесточ", "жёстч", "жесть", "жетон", "жечься", "живете", "ёхонек", "кость", "живопис", "живопись", "живот", "трепещ", "жиж", "жиздр", "ощущ", "утвержд", "жил", "жилет", "коопер", "площадь", "жимолост", "жимолость", "жирандоль", "жираф", "жиро", "жиронд", "щепл", "жит", "жм", "жмуд", "жмудь", "жмур", "ых", "жн", "ивь", "итв", "жок", "жокей", "жолк", "жолнер", "жолнёр", "жом", "жонгл", "жор", "жох", "жребий", "жужелиц", "жужж", "жуир", "жук", "жул", "жуль", "жупан", "жупел", "журавель", "журавл", "журавль", "жур", "журналь", "журфикс", "журч", "журь", "жутк", "жутч", "жуть", "жух", "жуч", "жучк", "жюри", "забав", "забавл", "байкаль", "бастов", "забв", "беремен", "беспоко", "забияк", "заблаговременн", "заблагорассуд", "благоух", "болач", "болоч", "забор", "забо", "забрал", "забубённ", "забулдыг", "забулдыж", "овать", "ха", "забы", "зав", "важж", "завед", "завер", "завещ", "вея", "завзят", "рова", "завид", "завир", "завист", "зависть", "кадр", "кафедр", "лаб", "маг", "заводь", "воёва", "воёв", "вораж", "заворот", "редакц", "всегд", "склад", "завтра", "завтрак", "вяд", "загашник", "загвоздк", "глат", "глубл", "гов", "говл", "загогул", "загодя", "готавл", "контор", "готовл", "командир", "губл", "дабр", "зада", "давш", "заде", "дёшев", "нёб", "дор", "драй", "дымл", "ёрза", "зажи", "зажиточн", "зажор", "звен", "звяк", "здрав", "зев", "зеркаль", "зимь", "зазна", "зазноб", "зноб", "зазор", "зря", "зуммер", "извест", "заик", "заимк", "заим", "заимств", "инвентар", "интерес", "интриг", "заиск", "искр", "иссык", "куль", "зай", "займищ", "зайц", "зайч", "кабал", "кавказ", "закавык", "кавыч", "закавыч", "закадычн", "лива", "каляка", "камуфл", "каприз", "карпат", "картав", "ква", "кив", "кисл", "кич", "киш", "заклани", "клеенн", "заключ", "кля", "кляс", "заковыр", "колд", "закомар", "компост", "мерн", "конопат", "конопач", "положени", "совещ", "сообраз", "консерв", "конспект", "конспир", "контракт", "конфуз", "копёр", "копош", "короб", "закорюк", "закорюч", "косн", "зако", "кочен", "крепост", "крепощ", "крив", "кривл", "закром", "кругл", "кручин", "кря", "кряхт", "кудахт", "кукарек", "кулис", "купор", "курлы", "куролес", "курчав", "куст", "закут", "кут", "лав", "лап", "ласк", "лат", "лг", "лежь", "лен", "лепет", "залихватск", "лихорад", "залог", "залом", "лосн", "залп", "луб", "залуч", "лыс", "ляг", "лязг", "зам", "малёва", "малч", "марин", "марк", "марш", "ма", "маяч", "замби", "замбий", "медл", "мельк", "мельтеш", "мертв", "мерц", "замет", "заметь", "замеч", "замечательн", "меша", "мешка", "замк", "мле", "министр", "могиль", "замок", "молк", "моно", "морг", "морозь", "морос", "мороч", "замоч", "мурлы", "мур", "лы", "мусл", "мусол", "мусор", "замухрышк", "замш", "замшев", "мш", "мызг", "замысловат", "мытар", "мяу", "наваж", "занавес", "занавесь", "занавеш", "навож", "навоз", "наряд", "наряж", "занач", "зане", "невест", "недуж", "ненаст", "заним", "заноз", "ноч", "нумер", "заня", "одн", "озерь", "запад", "западн", "пазд", "пакова", "паков", "пакост", "пакощ", "паль", "запальчив", "панибрат", "паник", "запань", "парш", "паут", "пелён", "пелен", "пеленг", "перш", "пестр", "петл", "печал", "печатл", "пилика", "запир", "пичк", "пищ", "плёва", "плесн", "плечь", "пломб", "заплот", "плута", "пн", "заповед", "заповедь", "поган", "подазр", "подозр", "заподлицо", "позд", "полон", "полых", "запонк", "запор", "пораш", "запорож", "порош", "потчева", "почи", "заправл", "праздн", "запрещ", "примет", "примеч", "причит", "ж", "пропа", "пропас", "протест", "протокол", "пруж", "прят", "пудр", "пурж", "запуск", "запуст", "запущ", "зап", "запыха", "пыхт", "запяст", "запясть", "запят", "пятн", "зараж", "зараз", "ран", "рапорт", "рде", "зар", "резв", "резерв", "зарек", "рекоменд", "зарёк", "ретуш", "речь", "заречь", "решеч", "рж", "авл", "риф", "рифл", "рифм", "роб", "роз", "зарок", "рокот", "рубеж", "рубежь", "авь", "румян", "заруч", "рыбл", "рыс", "рыч", "заряж", "садн", "сар", "сахар", "свеж", "сверк", "свиде", "заседа", "сёдл", "седл", "секрет", "секреч", "сёк", "сер", "силос", "засим", "сип", "скандал", "сквоз", "скирд", "заскоруз", "скрежет", "скрип", "скул", "скуч", "сласт", "слащ", "слез", "слепл", "слон", "заслуж", "слыш", "слюн", "снова", "сня", "соль", "соп", "сор", "спа", "спес", "спеш", "спин", "срам", "срамл", "застав", "заста", "заставл", "стёж", "стен", "стиг", "стичь", "заст", "стог", "столбл", "столь", "стон", "стопор", "стращ", "застр", "стрекот", "застрель", "застрех", "струга", "стру", "застря", "заступ", "сует", "супон", "сусл", "сусол", "засуч", "сю", "зате", "затей", "затем", "терза", "тиран", "тиш", "тишь", "тм", "зато", "толп", "затон", "то", "топот", "торк", "тормаж", "тормож", "торц", "заточ", "тошн", "затрапез", "трапез", "трат", "трач", "тре", "трень", "ет(ся", "трещ", "трудн", "туж", "туман", "туп", "тупл", "турк", "тух", "туш", "затхл", "затылок", "затылоч", "затыль", "тюк", "тяв", "улыб", "умь", "уны", "упрям", "ураль", "урч", "зауряд", "заусенец", "заусениц", "утр", "фальш", "фантаз", "фарш", "флаж", "фонтан", "форс", "франт", "фрахт", "фыр", "хандр", "хап", "хваст", "хвор", "хил", "хир", "хи", "хлам", "хламл", "хлюп", "хмел", "хны", "захолуст", "захолусть", "хомут", "хоран", "хорон", "хо", "хрип", "хруст", "хрю", "худ", "хулиган", "цап", "целова", "цок", "цык", "чав", "чал", "чар", "зача", "чах", "зачем", "черв", "черств", "чертых", "чехл", "зачин", "чирик", "чирк", "чмок", "чок", "чумл", "чур", "шабаш", "шамк", "шарп", "шат", "шварт", "шевел", "шедш", "шелест", "шелудив", "шепеляв", "шепт", "шёпт", "шип", "шкал", "шнур", "шор", "шпаклёва", "шпаклева", "шпаклёв", "зашпандор", "шпиг", "шпил", "шпунт", "штемпел", "штил", "штоп", "штор", "штрих", "штукова", "штуков", "шурш", "шу", "щебет", "щегол", "щекот", "щем", "щемл", "щёч", "защища", "юл", "заяв", "заявл", "заядл", "заяц", "заяч", "звани", "звер", "зверобой", "ферм", "зверь", "звонч", "подража", "режисс", "сигналь", "сочета", "здани", "здань", "здесь", "здеш", "здорово", "здоровь", "здравствуй", "зебр", "зебу", "зейгер", "зек", "зеланд", "зело", "зель", "зельц", "караван", "рой", "удобр", "землян", "снаряд", "зензубель", "зенит", "зениц", "зенкер", "зенк", "зеркал", "комбайн", "плющ", "фураж", "зернь", "зеро", "зерцал", "зет", "зефир", "зиг", "зигзаг", "зиго", "зижд", "зимогор", "зимородок", "зипун", "зия", "злак", "злат", "кудр", "рун", "злач", "козн", "пыха", "злот", "потреб", "потребл", "ыдень", "ыдн", "зме", "питом", "ящер", "змей", "змий", "знаком", "черед", "знаменатель", "знаменательн", "знамени", "знаменит", "знамен", "знат", "знать", "знах", "зной", "зоб", "зодиак", "зодч", "зозул", "зоил", "золовк", "золотник", "монет", "платин", "погон", "золотух", "золотуш", "зонг", "зонт", "кумарин", "латр", "магазин", "объ", "планктон", "ангий", "зорилл", "зорк", "зорч", "зорь", "зраз", "зрачк", "зрачок", "зуав", "зубатов", "зубил", "зубиль", "протез", "скал", "скаль", "клюв", "зуёк", "зулу", "зулус", "зумпф", "зурн", "зыб", "зыбк", "зыбл", "зыбь", "зык", "зыр", "зыч", "зюз", "зюйд", "зябл", "зяблик", "зябь", "зят", "зять", "ибер", "ибикон", "ибис", "ибо", "ивас", "иваси", "ивишень", "иволга", "иврит", "игл", "шерст", "иглу", "игни", "игнор", "иг", "игол", "игор", "ючи", "игрек", "игрен", "игрений", "игуан", "игумен", "игумень", "идальго", "иде", "идент", "идилл", "идилли", "идио", "идиом", "плазм", "синкраз", "идиот", "идиш", "идо", "идол", "идоль", "иегов", "иезуит", "иен", "иерарх", "иерат", "иерихон", "иероглиф", "иеро", "монах", "монаш", "иждив", "иже", "ижиц", "изабелл", "изафет", "изб", "избав", "избавл", "избег", "избеж", "избы", "избыток", "избыточ", "извед", "изверг", "изверж", "извес", "извёст", "известн", "известь", "извод", "чич", "извол", "изврат", "извращ", "изгой", "головь", "изда", "издев", "издёв", "издерж", "изжог", "излаг", "лаж", "лиш", "ловч", "излож", "лук", "измен", "изможд", "морось", "мочал", "измыва", "изнанк", "изнаноч", "неж", "ничтож", "ножь", "изнур", "изобар", "изобат", "обиж", "обил", "обиль", "облич", "изображ", "изобраз", "изобрес", "изобрет", "изогон", "лент", "ляци", "силлаб", "студи", "изощр", "изразец", "изразц", "израиль", "ред", "редк", "рек", "рёк", "решет", "ри", "рыг", "рыск", "изрядн", "изувер", "увеч", "изум", "изумл", "изумруд", "урод", "устн", "изъяв", "изъявл", "язв", "язвл", "изъян", "изъя", "изым", "изюбр", "изюбрь", "изюм", "изящ", "икари", "икарий", "икебан", "икон", "стас", "икор", "икр", "икс", "или", "иллюзи", "иллюз", "иллюмин", "иллюстр", "илон", "илот", "ильк", "ильм", "ильмен", "ильмень", "имажин", "имам", "имбир", "имбирь", "имени", "именно", "имен", "имень", "имеретин", "име", "имидж", "имит", "имманентн", "иммельман", "иммерси", "мигр", "патолог", "профилактик", "профилактич", "императив", "импер", "атр", "импери", "перфект", "импетиго", "импичмент", "плант", "имплик", "импозантн", "импон", "импотент", "импотенц", "импресарио", "импресси", "импров", "имуществ", "инак", "инаугураци", "иначе", "инвалид", "инвентарь", "инверси", "инверс", "инверт", "инвест", "ингал", "ингиб", "ингредиент", "ингуш", "инда", "частица", "индау", "инде", "индееч", "индейк", "индей", "индекс", "инди", "индивид", "индиго", "индиг", "кармин", "фер", "инд", "индикатив", "индифферент", "иран", "индонези", "индонезий", "индосс", "инду", "индукт", "индукц", "индульгенци", "индус", "индустри", "индуц", "индюк", "индюш", "иней", "инертн", "инерци", "инженю", "инжир", "инициал", "инициаль", "иници", "капсул", "инкасс", "инкассо", "инквартат", "инквиз", "инклин", "клюзив", "инкогнито", "инкорпор", "инкримин", "инкруст", "инкуб", "иногда", "земк", "инок", "планет", "стран", "ходь", "иноч", "инсину", "инспектр", "инспир", "инсталл", "инстанци", "инстинкт", "институт", "инструкт", "инструкц", "инсулин", "инсульт", "интеллигенц", "интендант", "тенс", "интенци", "интервал", "интервент", "интервенц", "интервью", "интерлюди", "интермеди", "интермеццо", "интерн", "интернат", "интерпелл", "интерпрет", "фейс", "интерфер", "интерьер", "терьер", "интим", "токсик", "интра", "интриж", "интро", "интродукци", "интр", "спект", "спекц", "интрумент", "интуит", "интуиц", "инфантер", "инфантил", "инфантиль", "инфаркт", "инфекци", "инфинитив", "инфл", "сом", "инфра", "инфузори", "инфузор", "инцидент", "инъек", "инъец", "инъюнктив", "коллеги", "иол", "форез", "ипо", "ипоме", "ипостась", "ипотек", "ипотеч", "ипохондр", "ипохондри", "иппо", "ирак", "ирбис", "ирид", "ирис", "ирланд", "ирод", "ирокез", "ирон", "ирони", "рацион", "реальн", "ирриг", "искаж", "исказ", "калеч", "искариот", "исключительн", "коверк", "колеш", "комк", "искони", "искон", "корёж", "искорен", "искор", "коробл", "искренн", "кромс", "искус", "искусн", "искусственн", "искуш", "ислам", "исланд", "испан", "пепел", "испещр", "исповедь", "исподволь", "подл", "лобь", "исполин", "порч", "похаб", "похабл", "пошл", "исправ", "испражн", "исследова", "исследу", "иссоп", "исступл", "иссяк", "истеблишмент", "терз", "истер", "истери", "истир", "истов", "толч", "томл", "тонч", "исторг", "исторж", "историй", "истори", "источ", "источник", "истошн", "тощ", "истреб", "истребл", "истукан", "истяз", "исход", "исчади", "исчез", "исчёрк", "итак", "италий", "италь", "ительмен", "итератив", "итог", "итого", "итож", "иуд", "ихти", "ичиг", "ишак", "ишач", "ишиас", "ишиат", "июль", "июнь", "йемен", "йог", "йогурт", "йод", "йоркшир", "йот", "йошкар", "кабак", "каббал", "кабальеро", "кабаль", "кабан", "кабарг", "кабардин", "кабаре", "кабат", "кабац", "кабач", "кабачок", "кабел", "кабель", "кабельтов", "каберне", "кабестан", "кабин", "кабинет", "кабл", "каблук", "каблуч", "каботаж", "кабошон", "кабриолет", "кабр", "кабуки", "кабуль", "кабы", "кавалер", "кавалери", "кавальер", "кавалькад", "кавардак", "кавасаки", "каватин", "каверз", "каверн", "кавун", "вэ", "эн", "кагал", "каган", "кагат", "кагор", "каданс", "кадастр", "каденц", "каденци", "кадет", "кади", "кад", "кадк", "кадм", "кадоч", "кадриль", "кадык", "каём", "кажд", "каж", "казан", "казарк", "казарм", "казат", "казац", "казач", "казаш", "казеин", "каземат", "казён", "кошт", "казимир", "казинет", "казино", "казн", "казнь", "казуар", "казу", "казус", "каик", "кайен", "кайзер", "кайл", "кайм", "каймак", "кайман", "кайно", "кайр", "кайф", "кейф", "какавелл", "какаду", "какао", "кака", "како", "как", "какофон", "кактус", "каламбур", "каламянк", "калан", "каландр", "каланхоэ", "каланч", "калач", "калган", "калёва", "калева", "калёв", "калейдоскоп", "калек", "календар", "календарь", "календул", "календ", "кали", "калибр", "калик", "каликант", "калин", "калит", "калитк", "калифорн", "каллиграф", "каллимико", "каллус", "каллюс", "калмык", "калмыц", "калмыч", "калор", "калори", "калуг", "калуфер", "кануфер", "калым", "кальвин", "калькул", "калькутт", "кальмар", "кальсон", "екс", "кальян", "каляк", "кам", "камамбер", "камариль", "камарин", "камбал", "камби", "камбий", "камбио", "камб", "камбодж", "камбуз", "камвольн", "камед", "камедь", "камелёк", "камели", "камень", "камергер", "камердинер", "камеристк", "камерн", "камертон", "камеш", "каме", "камзол", "камзоль", "камикадзе", "камин", "камк", "камлот", "камн", "камор", "каморр", "кампаней", "кампанелл", "кампеш", "камс", "хамс", "камфар", "камфор", "камчадал", "камчадаль", "камч", "камчат", "камыш", "канав", "канад", "канапе", "канарееч", "канарейк", "канат", "канв", "кандал", "кандаль", "канделябр", "кандидат", "кандиль", "кандым", "каникул", "канистр", "канител", "канитель", "канифас", "канифол", "канифоль", "канкан", "каннибал", "каннибаль", "кано", "канон", "канонер", "канонир", "канотье", "каноэ", "кант", "кантабиле", "кантат", "кантеле", "кантилен", "кантон", "кантор", "канун", "канцеляр", "канцеляри", "канцер", "канцон", "канц", "каньон", "канюк", "канюл", "каолин", "капл", "капел", "купел", "капелл", "капель", "капельдинер", "капилляр", "ограф", "капитальн", "капитан", "капитон", "капитул", "капищ", "капкан", "каплун", "капот", "капрал", "капраль", "каприс", "каприччио", "каприччо", "капрон", "капсуль", "капт", "каптал", "каптенармус", "каптёр", "капуст", "капут", "капуцин", "капюшон", "карабах", "карабин", "каравай", "каравелл", "карагач", "караим", "каракал", "каракалпак", "каракалпач", "каракатиц", "караков", "каракул", "каракуль", "каракурт", "карамболин", "карамболь", "карамел", "карамель", "карамор", "карандаш", "карантин", "карапуз", "карас", "карась", "карат", "карате", "караул", "карауль", "карачаев", "карачун", "карб", "карбас", "карбованец", "карбол", "карбонад", "карбонарий", "карборунд", "ункул", "ёзн", "карбюр", "карг", "карго", "кард", "кардамон", "кардан", "кардинал", "кардиналь", "ревм", "хирург", "каре", "карел", "карель", "карет", "кариес", "карикатур", "кари", "карл", "карм", "кармазин", "карман", "карманьол", "кармаш", "карнавал", "карнаваль", "карниз", "каронад", "каротель", "каротин", "карп", "карст", "карт", "картвел", "картвель", "картёж", "картез", "картел", "картель", "картер", "картеч", "картечь", "картин", "картинг", "картон", "схем", "тет", "картофел", "овощ", "картофель", "карточк", "карточ", "картош", "картуз", "картуш", "карусель", "карфаген", "карцер", "карч", "еподъём", "каршуни", "карьер", "кас", "касат", "касатик", "касид", "каск", "каско", "каспий", "кассандр", "каст", "кастаньет", "кастелянш", "кастет", "кастор", "кастр", "кастрюль", "кастрюл", "катабол", "катаваси", "катакл", "катакомб", "каталажк", "каталит", "каталог", "каталож", "каталон", "катамаран", "ката", "катапульт", "катар", "катаракт", "катафалк", "фронт", "катахрез", "категори", "категор", "катен", "катерн", "катет", "катетер", "катехиз", "катеху", "католик", "католикос", "католиц", "католич", "катоптрик", "катоптрич", "каторг", "каторж", "катран", "катрен", "катюш", "каудильо", "каузальн", "каузатив", "каупер", "каур", "каутск", "кафель", "шантан", "кафр", "кафтан", "кахетин", "кацавейк", "кацап", "качуч", "кашалот", "кашель", "кашемир", "кашмир", "кашмири", "кашне", "кашпо", "каштан", "кашуб", "каюк", "каюр", "кают", "каяк", "квадриг", "иллион", "ильон", "квазар", "квази", "квазимодо", "объектив", "специал", "упруг", "кв", "квакер", "ша", "квант", "квантитативн", "кварк", "кварт", "квартал", "квартирь", "кварц", "квасц", "кватроченто", "квебрахо", "квёл", "квиет", "квинт", "секст", "эссенци", "квипрокво", "квислинг", "квит", "квитанци", "кворум", "квот", "квохт", "квохч", "кеб", "кегель", "кегль", "кегл", "кедр", "кед", "кейс", "кекс", "кекуок", "кекур", "келар", "келарь", "келей", "кельнер", "кельт", "кель", "кембридж", "кемпинг", "кенар", "кенарь", "кенаф", "кенгур", "кенгуру", "кени", "кений", "кено", "кентавр", "кепи", "кеп", "керамз", "керат", "керен", "кержак", "кержац", "керн", "керо", "керосин", "керч", "кесар", "кесарь", "кессон", "кет", "кетмен", "кетмень", "кетон", "кетч", "кетчуп", "кефаль", "кефир", "кечуа", "кешью", "кибитк", "кибиточ", "кивер", "киви", "киевл", "кизер", "кизил", "кизиль", "кизяк", "кизяч", "кий", "кик", "кикимор", "кикс", "килеч", "килим", "киль", "кильк", "киммер", "кимо", "кимоно", "киндзмараули", "киндяк", "кинем", "кине", "кинестези", "кинестет", "кинжал", "кинжаль", "кинз", "киновар", "киноварь", "еди", "концерт", "крит", "лект", "ленин", "недел", "опт", "очерк", "панорам", "плёноч", "проекц", "прожектор", "публиц", "реклам", "репорт", "сеанс", "визи", "фестиваль", "форум", "хроник", "киоск", "киот", "кипарис", "кипрей", "кипр", "кипсей", "кипу", "кирасир", "киргиз", "кирз", "кирилл", "кирк", "мотыг", "кирпич", "кисей", "кисел", "кисель", "кисет", "кисе", "ятин", "кист", "кистень", "кисть", "кит", "кита", "китель", "китч", "кичк", "кишеч", "сосуд", "кишк", "кишлак", "кишлач", "кишмиш", "клавесин", "клави", "клавикорд", "клавир", "клавиш", "кладбищ", "кладезь", "кладь", "клаксон", "клан", "кларнет", "клас", "клаузул", "клевер", "клевет", "клевещ", "клев", "клеврет", "клеймл", "стер", "клёкот", "клекот", "клекоч", "клемм", "клён", "клен", "клепл", "клепт", "клерк", "клерова", "клеров", "клёст", "клест", "клетк", "клет", "клетч", "клеть", "клёцк", "клёш", "клешн", "клещ", "евин", "кливаж", "кливер", "клиент", "клизм", "клико", "климакс", "климакт", "клиник", "клиниц", "клинич", "клинок", "ремён", "клипс", "клир", "клирик", "клиринг", "клирос", "клирош", "клистир", "клич", "клиш", "клоак", "клоач", "клобук", "клобуч", "клок", "клоп", "клоун", "клохт", "клохч", "клубен", "клубень", "клубн", "клумб", "клун", "клуш", "клык", "клыч", "клюк", "клюкв", "клюков", "ключиц", "ключич", "клюшк", "клякс", "кляп", "кляссер", "клят", "преступл", "преступ", "кляуз", "кляч", "наруж", "кнел", "кнессет", "кнехт", "книг", "чей", "книж", "кнопк", "кнопоч", "кнут", "княг", "княжен", "княз", "князь", "коал", "коала", "коалици", "кобальт", "кобел", "кобель", "кобен", "кобз", "кобольд", "кобр", "кобур", "кобчик", "кобыл", "вариант", "ковар", "ковбой", "ковёр", "коверкот", "ковриг", "ковриж", "ковр", "ковчег", "ковчеж", "ковш", "ковыль", "когда", "когерентн", "когнат", "когорт", "когот", "коготь", "кодак", "кодекс", "коеч", "кожух", "кожуш", "коз", "козетк", "е:", "козул", "козырёк", "козырь", "козюль", "козюл", "козявк", "койк", "койне", "кок", "кокард", "кокетк", "кокет", "кокиль", "коклюш", "кокни", "кокон", "кокор", "кокос", "кокотк", "кокоточ", "кокош", "кокс", "коктейль", "колб", "колбас", "колгот", "колдоб", "колебл", "коле", "коленкор", "колер", "колеч", "коли", "колибри", "колит", "количеств", "коллаборацион", "коллег", "колледж", "коллеж", "коллектор", "коллекци", "колли", "коллизи", "коллим", "коллодий", "коллоди", "коллоид", "коллоквиум", "коло", "колоб", "колоброд", "коловорот", "коловрат", "колод", "колодез", "колодезь", "колодец", "колокол", "колоколь", "коломен", "колонк", "колонок", "колоноч", "цифр", "колорад", "колоратур", "колор", "колорит", "колосник", "колосс", "колош", "колошмат", "колпач", "колумб", "колчак", "колчан", "колчедан", "колч", "колыбель", "колымаг", "колымаж", "колыш", "колье", "кольмат", "кольраби", "кольт", "кольч", "кольчуг", "кольчуж", "коляд", "колясоч", "команч", "комар", "комарь", "комби", "комбин", "комбинезон", "едий", "комел", "комель", "коменд", "комет", "коми", "комикс", "комильфо", "комингс", "комиссар", "комисс", "комитет", "комл", "комм", "коммандос", "коммерс", "коммерц", "коммерч", "комми", "коммуник", "коммут", "коммюнике", "комов", "комод", "комол", "компакт", "компаней", "компаний", "компань", "компаратив", "парти", "компендий", "компенди", "компетент", "компетенц", "компил", "комплекци", "комплемент", "комплимент", "композит", "композици", "компон", "компот", "компрадор", "компромет", "компьютер", "сод", "комс", "комуз", "фракци", "ячей", "конвейер", "конвент", "конвенци", "конверси", "конво", "конвой", "конвульс", "конвульси", "конгломер", "конго", "конгресс", "конгруэнт", "конгруэнц", "конденс", "кондитер", "кондици", "кондрашк", "кондуит", "конец", "конечно", "конкистадор", "конквистадор", "конкорданс", "конкрет", "конкретн", "конкреци", "конкур", "коннотаци", "коновод", "конопл", "сноп", "консеквентн", "консенсус", "консерват", "консерватори", "консерватор", "консигн", "консилиум", "консистент", "консистенц", "консист", "консолид", "консоме", "консон", "констант", "констанц", "констат", "конститу", "констру", "консул", "консуль", "консульт", "консьерж", "контагий", "контаги", "контамин", "контач", "контейнер", "контекст", "контингент", "континуум", "конт", "конто", "контрабанд", "контра", "контрагент", "контражур", "контральто", "контральт", "контрамарк", "контрамароч", "контрапост", "контрапункт", "контрассигн", "контраст", "фагот", "контрданс", "контрибуци", "манёвр", "маневр", "контроверз", "октав", "контрол", "контроллер", "реформ", "шанс", "контръ", "эскарп", "контуж", "контуз", "конур", "конус", "конфедер", "конфедерат", "конфекци", "конфер", "ансь", "конференци", "конфесси", "конфет", "конфетти", "конфигураци", "конфиденциальн", "конфирм", "конфиск", "конфитюр", "конфорк", "конформ", "конфороч", "конфронт", "конфуци", "конц", "концепт", "концепц", "концерн", "концесси", "концип", "лагерь", "конъектур", "конъюнктив", "конъюнктур", "конъюнкци", "конь", "коньк", "коньяк", "коньяч", "юх", "юш", "коопт", "координат", "координ", "копал", "копейк", "копей", "копён", "копи", "копий", "копир", "копл", "копн", "копоть", "копр", "копул", "копчик", "копыл", "копь", "корабел", "корабель", "корабл", "корабль", "коралл", "кораль", "коральк", "коран", "корвалол", "корвет", "корд", "корде", "кордельер", "кордильер", "кордит", "кордон", "коре", "корейк", "корей", "коренаст", "кореш", "корж", "корзин", "кориандр", "коридор", "коринк", "коринф", "корифей", "кориц", "коричн", "коричнев", "корич", "кухн", "отпрыск", "корнет", "корнилов", "корол", "король", "коромысл", "корон", "коронк", "корост", "коростель", "корот", "фокус", "короч", "корп", "корпи", "корпор", "корпускул", "коррад", "коррази", "корреальн", "коррект", "корректн", "коррел", "корреспонд", "корриг", "коррид", "коррод", "коррумп", "корруп", "корсаж", "корсак", "корсар", "корсет", "корсик", "корт", "кортеж", "кортес", "кортизон", "кортик", "стерон", "корточк", "и:", "корунд", "корчаг", "корчаж", "евь", "корчем", "корчм", "коршун", "корысть", "корыт", "корь", "корюшк", "коряв", "коряг", "коряж", "коряк", "коряч", "косарь", "косатк", "косач", "косвенн", "космет", "космополит", "космос", "попереч", "коста", "рик", "костёл", "костёль", "костёр", "костер", "туберкул", "костр", "костыл", "костыль", "утиль", "косул", "халв", "ынк", "ыноч", "косяк", "косяч", "кот", "котёл", "котел", "котель", "котил", "котлас", "котлет", "котомк", "котон", "котор", "коттедж", "котурн", "кофе", "кофр", "кофт", "кочева", "кочёв", "кочев", "кочевряж", "кочевь", "кочегар", "кочедыж", "кочедык", "кочень", "кочерг", "кочерёж", "кочерыг", "кочерыж", "кочет", "кочеч", "кочеш", "кочк", "кочмар", "кошар", "кошев", "кошёв", "кошел", "кошёл", "кошель", "кошенил", "кошениль", "кошер", "кошм", "кошмар", "кошом", "кощей", "кощун", "коэффициент", "краб", "кравч", "кравчик", "краг", "краен", "краеуголь", "ешек", "краж", "крайн", "краковяк", "крал", "крамбамбули", "крамол", "крамоль", "крамп", "крани", "крапив", "краплак", "тал", "кратер", "кратк", "кратч", "крах", "крахмаль", "крачк", "краюх", "краюш", "креветк", "кредо", "крейс", "крейцер", "крекер", "крек", "крем", "кремень", "кремеш", "кремл", "кремль", "кремн", "фтор", "крен", "крендел", "крендель", "креол", "креоль", "дешин", "крепк", "крепость", "крепч", "крепь", "креса", "кресель", "кресл", "крёст", "кресть", "кретин", "кретон", "кречет", "кречёт", "крещендо", "крешендо", "кривич", "янь", "поступ", "криз", "крикет", "криль", "криминал", "криминаль", "кримин", "кримплен", "кринк", "крынк", "криноч", "крыноч", "кринум", "крио", "крипт", "кристаль", "критерий", "критери", "кроват", "кровать", "кровель", "паразит", "кровл", "обращ", "останавл", "пий", "кровь", "крокет", "крок", "крокодил", "крокус", "кролик", "крол", "кролич", "кроль", "крольч", "кроманьон", "кроме", "кромешн", "кромк", "фуг", "кромоч", "крон", "принц", "циркуль", "кронштейн", "кроп", "кропл", "кропот", "кросн", "ворд", "чайн", "крот", "кротк", "кротч", "крох", "крохал", "крохаль", "крохо", "кроше", "чулоч", "яш", "верть", "кружев", "кружеч", "кружк", "крузейро", "круиз", "круп", "крупн", "калибер", "куск", "масштаб", "панель", "серий", "узор", "формат", "крупье", "крушин", "крыж", "крыжов", "крылеч", "крыльц", "крым", "крыс", "шеч", "крюк", "крюч", "крюшон", "кряж", "ксёндз", "ксер", "ксерокс", "ксил", "кстати", "ктитор", "кто", "куб", "кубан", "кубар", "кубарь", "кубк", "кубов", "кубок", "кубрик", "кубышеч", "кубышк", "кувалд", "кувшин", "кувшинк", "кувырк", "кувыр", "куг", "кугуар", "кудахч", "кудель", "кудел", "кудес", "кудл", "куз", "кузн", "кузнечик", "кузов", "кузьк", "кукареку", "кукиш", "кукл", "клукс", "кукол", "куколь", "кукс", "кукуруз", "кулаж", "кулак", "кулан", "кулац", "кулачь", "кулебяк", "кул", "кулеш", "кули", "кулиг", "кулик", "кулинар", "кулич", "кулон", "кулуар", "кульбит", "кульмин", "культив", "культяпк", "кум", "кумач", "кумека", "кумир", "кумул", "кумык", "кумыс", "хан", "кумыч", "кун", "кунак", "кунац", "кунач", "кунжут", "кунсткамер", "купав", "купаж", "ле", "купат", "купе", "купец", "купеч", "купидон", "куплет", "купно", "купол", "куполь", "купон", "купорос", "купц", "купч", "купюр", "курабье", "кураг", "кураж", "курак", "курант", "кураре", "курар", "курбет", "курган", "кургуз", "курд", "курдюк", "курдюч", "курен", "курень", "курк", "куркуль", "курок", "куропатк", "куропаточ", "курорт", "куроч", "курсив", "курсорн", "куртизанк", "куртин", "куртк", "курточ", "курултай", "курфюрст", "курчатов", "курьёз", "кустар", "кустарь", "кутафь", "кутей", "кутерьм", "кутн", "кутузк", "кухар", "кухмистер", "кухон", "кухонь", "куц", "куч", "кучер", "кучеряв", "кушак", "кушач", "кушетк", "кущ", "кхмер", "кыш", "кьянти", "кьят", "кювет", "кюммель", "кюрасо", "кюре", "кюри", "кюр", "лабаз", "лабильн", "лабиринт", "лабрадор", "лаванд", "лаваш", "лавин", "лавирова", "лавиров", "лавр", "венч", "лавсан", "лавч", "лагер", "линь", "тинг", "лагун", "ладан", "ладей", "ладн", "ладон", "ладонь", "ладош", "ладь", "лазарет", "лазер", "терапи", "лазор", "лазур", "лазурь", "лай", "лайб", "лайд", "лайк", "лакей", "лакмус", "лаком", "лакон", "лакриц", "лакрич", "лакт", "лакун", "лал", "ламантин", "ламарк", "ламберт", "ламбрекен", "ламинари", "ламин", "лампас", "ламут", "лангет", "лангуст", "ландо", "ланд", "ландшафт", "ландыш", "ланит", "ланк", "ланол", "лансье", "лантан", "ланцет", "лань", "лаос", "лаот", "лапид", "лапланд", "лапот", "лапоть", "лапсердак", "лапт", "лапш", "ларг", "ларго", "ларёк", "лар", "ларёч", "ларинг", "трахе", "ларь", "лас", "лассаль", "лассо", "ласт", "ластик", "ластич", "ласточк", "латви", "латвий", "латекс", "латентн", "латеральн", "латер", "латин", "латифунд", "латук", "латунь", "латын", "латынь", "латыш", "лауреат", "лафа", "лафит", "лахудр", "лацкан", "лаццарони", "лач", "лачуг", "лачуж", "лб", "лебед", "лебёд", "лебедь", "лебез", "лебяж", "левад", "левантин", "левиафан", "левит", "левкас", "левко", "левкой", "бережь", "оппортун", "фланг", "эс", "левретк", "левул", "легав", "легал", "легаль", "легат", "иссимо", "легато", "леггорн", "легенд", "легион", "легитим", "лёгк", "легк", "раж", "раствор", "сво", "онеч", "легч", "леденец", "леденеч", "леденц", "леденч", "леди", "леер", "лезви", "лезгин", "лейбл", "лейбор", "лейтенант", "лейт", "мотив", "лейц", "лек", "лекал", "лекаль", "пом", "лекс", "лекц", "лемех", "лемм", "лемур", "лён", "ленд", "лорд", "ленок", "ленто", "ленч", "ленчик", "лень", "леопард", "лепестк", "лепесток", "лепесточ", "лепеч", "лепёшеч", "лепёшк", "лепр", "лепт", "лесбий", "лесби", "луг", "питомник", "промысл", "степ", "степь", "тас", "тундр", "эксплуат", "лёсс", "лесс", "лест", "лесть", "летальн", "летарг", "летарги", "лечо", "леш", "лещ", "лещин", "лж", "классич", "лиственниц", "присяг", "пророк", "социал", "теори", "лиан", "либерал", "либераль", "либерти", "либидо", "либо", "либретт", "либретто", "ливан", "ливер", "мя:", "ливр", "ливрей", "ливре", "лиг", "лигатур", "лид", "лиж", "ликвид", "ликёр", "лилей", "лили", "лилипут", "лил", "лилов", "лиман", "лимн", "лимон", "лимонад", "лимузин", "лимф", "анг", "оит", "сарк", "линга", "линеар", "линеарн", "лине", "линий", "лино", "линолеум", "линотип", "линч", "фусц", "липси", "лир", "эп", "лисель", "лиссабон", "листь", "лиственнич", "литавр", "литв", "литер", "литерат", "литов", "глиф", "литораль", "литот", "литургий", "литург", "литурги", "фак", "лиф", "лифт", "лих", "леть", "лихтер", "лицедей", "лицезр", "лице", "лицей", "лицемер", "лицензия", "лиценци", "лицеприят", "личин", "лиша", "лишай", "лишн", "лишь", "лобби", "лобб", "лобз", "лобзик", "лобио", "лоби", "лобк", "лобок", "лобыз", "ловелас", "логос", "лоджи", "лодк", "лодоч", "лодч", "лодыг", "лодыж", "лодыр", "лодырь", "ложбин", "ложемент", "ложеч", "ложк", "классиц", "ложь", "лозунг", "локал", "локальн", "локаут", "локо", "локон", "локот", "локоть", "локт", "ломбард", "ломбер", "ломов", "ломонос", "лонгет", "лонж", "лонжерон", "лон", "лопар", "лопарь", "лопасть", "лопат", "лопот", "лопоч", "лопух", "лопуш", "лоретк", "лорнет", "лорн", "лор", "лос", "лоск", "лоскут", "лосос", "лосось", "лось", "лосьон", "лот", "лотерей", "лотк", "лото", "лоток", "лотос", "лоточ", "лох", "лохан", "лохань", "лоцман", "лошадь", "лошак", "лошач", "лош", "лощин", "лояльн", "аеч", "лужич", "луз", "лузг", "луидор", "лукав", "лукошк", "лунк", "луноч", "лунь", "лучезарн", "лучш", "лык", "лыч", "льв", "льгот", "льд", "лье", "триер", "льст", "любознательн", "любопыт", "люкс", "люлеч", "люли", "люльк", "люмбаго", "люмен", "люмин", "фор", "люп", "люпус", "люстр", "люстрин", "лют", "лютер", "лютик", "лютн", "люф", "люфт", "люцерн", "люэс", "люэт", "лягуш", "лягушеч", "лягушк", "лядин", "лядун", "ляжк", "ляль", "лял", "лямбд", "лямк", "лямоч", "ляпис", "ляссе", "лях", "ляш", "мавзолей", "мавр", "магарадж", "магарыч", "магдебург", "магистер", "магистр", "маги", "магм", "магнат", "магн", "магнето", "ческий", "магне", "ориум", "стрикци", "магноли", "маго", "магот", "магомет", "мадам", "мадаполам", "мадемуазель", "мадер", "мадонн", "мадригал", "мадригаль", "мадьяр", "мажар", "мажор", "мажордом", "мажорит", "минор", "мазер", "мазур", "мазурик", "мазурк", "мазуроч", "мазут", "мазь", "юка", "маис", "май", "майдан", "майк", "майн", "майна", "майолик", "майонез", "майор", "майоран", "майорат", "майя", "макадам", "макак", "макао", "макарон", "македон", "макет", "маки", "макиавелл", "макинтош", "макияж", "маклак", "маклач", "маклер", "макраме", "макрел", "макрель", "макро", "объект", "процесс", "макрурус", "максвелл", "макси", "макулатур", "макушеч", "макушк", "малаг", "мала", "малазий", "малайк", "малай", "малак", "малахай", "малах", "малахольн", "енеч", "мали", "малий", "малин", "малле", "актуаль", "вероятн", "малодуш", "вестн", "инициатив", "конструкт", "маль", "наблюд", "обита", "осведомл", "снащ", "поня", "посещ", "представ", "примен", "приспособл", "пристойн", "притяз", "приятн", "распростран", "рентабельн", "росси", "симпат", "состоя", "тираж", "убед", "уда", "удоб", "удовлетвор", "уступ", "уязв", "эластич", "мальв", "мальтуз", "мальчик", "мальч", "ишеч", "юсеньк", "юточ", "явк", "маляр", "малярий", "маляри", "мам", "мамалыг", "мамзель", "мамлюк", "мамон", "мамонт", "манатк", "мангал", "манган", "мангл", "мангль", "манго", "манг", "мангуст", "мандарин", "мандат", "мандолин", "мандраж", "манеж", "манекен", "манер", "манжет", "мани", "маникюр", "манипул", "манифест", "манихе", "манихей", "манишк", "манк", "манко", "манн", "мансард", "манси", "мантий", "мантиль", "мантисс", "манти", "манто", "ману", "манул", "манускрипт", "мануфактур", "манчестер", "маньер", "маньчжур", "мао", "маори", "марабу", "маразм", "маракова", "марал", "мараль", "марант", "маратхи", "марафон", "марганец", "марганц", "маргарин", "маргаритк", "маргинали", "маргиналь", "марго", "марель", "марен", "маренго", "мари", "марий", "маринк", "марионетк", "марионеточ", "марихуан", "марказ", "маркграф", "ский", "маркетинг", "маркетри", "маркиз", "маркизет", "маркит", "маркшейдер", "марл", "мармелад", "мармор", "мародёр", "марокен", "марокк", "мароч", "марсал", "марсельез", "марс", "март", "мартен", "мартини", "мартин", "мартиролог", "мартын", "мартышеч", "мартышк", "мартыш", "марципан", "маршалл", "маршрут", "марь", "марьяж", "масаи", "масака", "маскулин", "халат", "сыр", "фасов", "экстракц", "масон", "мастак", "мастач", "мастер", "мастик", "маст", "мастит", "мастихин", "мастич", "мастодонт", "мастурб", "масть", "матадор", "математ", "матер", "материй", "матёр", "матине", "матиц", "матич", "матрас", "матрац", "матрёшк", "матриарх", "матрикул", "матриц", "матрич", "матрос", "матч", "мать", "маузер", "мафи", "ози", "махин", "махн", "махор", "махр", "мац", "мацони", "мачете", "маштак", "маштач", "маэстозо", "маэстро", "маюскул", "маюскуль", "маятник", "мгл", "мгновени", "мгновен", "меандр", "мебел", "мебель", "мебл", "мега", "мегер", "мег", "мегрел", "мегрель", "мёд", "медал", "медаль", "медальон", "медвед", "медведь", "медвеж", "мед", "меделян", "меджлис", "медиальн", "медиан", "меди", "медиеваль", "медиев", "медикамент", "медит", "медиум", "медицин", "медресе", "междомети", "междомет", "межд", "усоб", "междоусобица", "глазь", "рейс", "рядь", "соб", "межен", "межень", "министер", "полось", "рёбер", "регион", "республик", "сесси", "территори", "уточ", "факультет", "шахт", "межъ", "мезальянс", "мезг", "мездр", "мез", "ентери", "ентерий", "енхим", "мезонин", "мексик", "меланж", "мелан", "меланхол", "есх", "меласс", "мелед", "мелин", "мелис", "мелисс", "мелк", "крестьян", "пиш", "фас", "собственн", "сопоч", "темь", "точеч", "чешуй", "мелод", "мелоди", "мело", "мелос", "мелоч", "мелочь", "мель", "мельхиор", "юзг", "мембран", "меморандум", "мемориал", "мемориаль", "мемуар", "мендел", "менеджер", "менестрель", "мензул", "мензульн", "мензур", "мензурк", "мензуроч", "менинг", "энцефал", "мениск", "менонит", "менстру", "ментик", "ментор", "менуэт", "меньш", "меню", "мергель", "мерёж", "мерек", "меренг", "мерехлюнди", "мерещ", "мере", "меридиан", "меридион", "мерин", "меркантил", "меркантильн", "мерк", "мерлушеч", "мерлушк", "мероприяти", "мерсер", "мерси", "месмер", "месс", "месси", "блюст", "местоимен", "месть", "месье", "мсье", "месяц", "базис", "порошок", "метан", "сомат", "стабильн", "метастаз", "метастат", "метатез", "метафор", "фраз", "метео", "прогноз", "услови", "метиз", "метил", "метис", "метк", "метлах", "метол", "метоним", "метоп", "метранпаж", "метрдотель", "метресс", "метрик", "метрич", "метро", "политен", "метропол", "метч", "мефистофель", "мех", "рецепт", "меценат", "мечет", "мечеть", "мешк", "мешот", "мешоч", "мещер", "мзд", "миазм", "астен", "мигрень", "миди", "мизан", "миз", "мизгирь", "мизерере", "мизер", "мизинец", "мизинч", "микадо", "риз", "баро", "миниатюр", "транзистор", "флор", "микс", "микстур", "милдью", "миледи", "милицей", "милици", "милли", "микрон", "милорд", "милостынь", "милостын", "милость", "мим", "мимо", "мимоз", "минарет", "мингрел", "мингрель", "миндал", "минерал", "минера", "минераль", "мине", "мини", "минимал", "минимальн", "миног", "минож", "минотавр", "минтай", "минус", "минускул", "минускуль", "миньон", "мио", "дистроф", "илл", "мирабел", "мирабель", "мирабил", "мираж", "мирвол", "мирз", "мириад", "мирон", "созерц", "мирр", "мирт", "миск", "мисс", "мисси", "миссис", "мистери", "мист", "мистраль", "мистрис", "митинг", "миткал", "миткаль", "митр", "митральез", "митрополит", "митрополич", "митропол", "миттель", "шпиль", "миф", "елий", "елл", "мичман", "мичурин", "мишарь", "мишен", "мишень", "миш", "мишур", "млад", "млек", "млеч", "мнем", "мнени", "мног", "лезвий", "обещ", "стадий", "станоч", "шпиндель", "щетин", "этап", "множ", "моветон", "могикан", "могил", "мод", "модальн", "модем", "модерато", "модерн", "модильон", "модул", "модус", "можжевел", "можжевёл", "можжевель", "можно", "моза", "мозж", "ечок", "мозол", "мозоль", "мойв", "мокасин", "мокко", "мокр", "мокш", "молвь", "молдав", "молдов", "еняск", "молескин", "молибден", "моллюск", "молни", "молний", "молн", "молод", "молодь", "молож", "молозив", "молок", "молокан", "молоть", "молох", "молочай", "мольберт", "моляр", "момент", "монарш", "монастыр", "монастырь", "монац", "монгол", "монголь", "мон", "мони", "монист", "монокок", "нукле", "монополь", "спектакль", "монпансье", "монстр", "монтекристо", "монумент", "мопс", "моралите", "мораторий", "морган", "морген", "мордв", "мордов", "морен", "морж", "морз", "морин", "морков", "морковь", "мормон", "мормыш", "морок", "морошк", "морс", "мортир", "морщ", "москаль", "москатель", "москв", "рец", "москит", "московк", "москов", "мосл", "мосол", "мостов", "мосье", "моськ", "мотель", "овил", "овиль", "нарт", "пех", "ресурс", "моторн", "мотоцикл", "мотто", "мотыж", "мотылёк", "мотылёч", "мотыль", "мотыльк", "мох", "мохер", "мохн", "овик", "моцарт", "моцион", "мочаг", "мочаж", "мочаль", "мочеч", "мочк", "мошен", "мошк", "мошн", "мошон", "мразь", "мрак", "мракобес", "мрач", "мст", "муар", "ее:", "енёк", "муз", "музе", "музей", "музиц", "музык", "мук", "сей", "муксун", "мукузани", "мул", "мулат", "мулине", "мулл", "мульт", "мульч", "муляж", "муми", "мумиё", "мум", "мундштук", "мундштуч", "муниципальн", "муравей", "муравь", "мураш", "мурен", "мурз", "мурл", "мурмолк", "мурч", "мусават", "мускат", "мускул", "мускуль", "мускус", "муслин", "мусс", "муссон", "мустанг", "мусульм", "мута", "мутовк", "мутовч", "мутон", "муторн", "мутуз", "муть", "муфель", "муфтий", "мух", "мухлева", "мухорт", "мухояр", "муш", "мушк", "мушкет", "мушмул", "муэдзин", "мщ", "мыз", "мыль", "мыльч", "мымр", "мыс", "мыслете", "мысль", "мыт", "мытарь", "мытищ", "мыть", "мыш", "хвостник", "мышц", "мышь", "мышьяк", "мышьяч", "мыщелк", "мыщелок", "мэлан", "мэ", "нэ", "мэр", "мэрон", "мэтр", "мюзикл", "мюрид", "мяг", "мягк", "мягч", "мяк", "мякин", "мямл", "мяс", "мятлик", "мяч", "набалдашник", "набат", "набекрень", "наблюс", "набоб", "наваг", "наважд", "вакш", "вастр", "навах", "навед", "навест", "навет", "навещ", "ничь", "наволок", "наволоч", "вряд", "вык", "нагаеч", "нагайк", "наган", "нагель", "нагл", "дворь", "главь", "надежд", "наде", "надзир", "клювь", "копыть", "надлеж", "надменн", "надоб", "бн", "надоед", "надоес", "надолб", "нось", "пойм", "почеч", "надсад", "надсаж", "трес", "надфиль", "хвость", "хрящ", "надъ", "ындивид", "жалова", "наждак", "наждач", "нажив", "наживл", "назал", "назаль", "здравств", "земь", "назида", "назнач", "назой", "зю", "наиб", "наив", "наивн", "изнан", "наизусть", "мень", "наипаче", "наити", "худш", "чащ", "найд", "най", "найтов", "кипь", "копыль", "накось", "нактоуз", "налаг", "налим", "налицо", "наличник", "налог", "налож", "наложниц", "налой", "налыгач", "магнич", "намаз", "намедни", "намёк", "намек", "наместник", "наместнич", "нана", "нанай", "нанду", "нан", "наним", "нанк", "нансук", "наня", "наоборот", "наобум", "одеколон", "особ", "машь", "охот", "напа", "напад", "напалм", "напареули", "напас", "напасть", "пахт", "перек", "наперс", "пёрст", "перч", "пло", "плож", "плоч", "наполеон", "помад", "помаж", "портач", "послед", "направ", "напрас", "приним", "проказ", "пропал", "пророч", "прочь", "напряг", "напрячь", "напрячься", "пульс", "пх", "пыж", "напыщ", "нарв", "наргиле", "нард", "нардек", "нарек", "нарёк", "нареч", "наречь", "наречься", "нарзан", "нарицательн", "наркоз", "нарк", "нарочит", "нарочн", "нарцисс", "нарыв", "сандал", "насеком", "сест", "сквозь", "скит", "скольк", "наслад", "наслажд", "сла", "наслег", "сло", "слоня", "смерд", "смерть", "насморк", "насмороч", "собач", "совсем", "насос", "спех", "наст", "наста", "настав", "наставл", "настежь", "стиль", "настичь", "настиг", "столеч", "стольк", "стораж", "сторож", "ённый", "настоя", "настоящ", "настра", "странств", "настро", "настрой", "настропал", "стряп", "наступ", "наступл", "настурци", "настырн", "сул", "сумасброд", "суп", "супл", "сурьм", "сурьмл", "насущн", "насчёт", "таратор", "тёч", "натив", "ние", "нато", "тонк", "наторе", "торос", "натр", "труд", "труж", "натюрморт", "углерож", "удал", "удач", "науст", "усь", "наущ", "фабр", "нафталин", "нафтен", "нафтол", "нахал", "нахаль", "хам", "нахим", "нахлобуч", "хлы", "хлыст", "хмур", "наход", "нахожд", "хохл", "нац", "нач", "начеку", "начерт", "начин", "чуд", "чх", "нашармака", "шаромыж", "нашатыр", "нашатырь", "нашест", "шиль", "шинкова", "шкод", "шля", "экономл", "ябед", "наяд", "наян", "нганасан", "неандертал", "неандерталь", "неаполит", "неб", "благосклонн", "небось", "небреж", "небрежн", "был", ":", "неважн", "домёк", "невеж", "невежд", "невзгод", "невзначай", "невзрачн", "внят", "невод", "возврат", "возвращ", "воздерж", "нег", "негатив", "где", "неглиже", "неглиж", "негоду", "негод", "гож", "приим", "негоци", "негр", "негус", "дальн", "недаром", "жог", "дозвол", "недоимк", "недомог", "недоразум", "недосуг", "недотёп", "трог", "недоум", "учес", "учёт", "учит", "учт", "недр", "недуг", "дурн", "жда", "нежели", "нежен", "нежин", "нежн", "забуд", "незадач", "замысл", "регистр", "заурядн", "незыблем", "неимоверн", "неистов", "йд", "нейлон", "нейр", "гумор", "эндо", "крин", "нейтрал", "нейтральн", "неказист", "нек", "конкурент", "некр", "нектар", "нелеп", "нельм", "нелюдим", "ненависть", "нарок", "наруш", "ненасть", "нен", "нужн", "нул", "нео", "авангард", "обрат", "необходим", "объективн", "объя", "обыкн", "необычайн", "обычн", "одинаков", "одобр", "евл", "оказ", "неон", "ницше", "оправд", "опроверж", "опрятн", "публик", "ординарн", "романт", "слаб", "осторожн", "осуществ", "схоласт", "осяза", "отврат", "отлич", "отлуч", "отраз", "чужд", "отъемл", "официальн", "формл", "ощут", "непал", "непаль", "плох", "побед", "повин", "поворот", "повтор", "погодь", "погож", "подоба", "подчин", "позвол", "посвящ", "посредственн", "постиж", "постоянн", "постоян", "треб", "правед", "правиль", "правомер", "правомоч", "превзойд", "убежд", "презент", "преклонн", "непреложн", "престиж", "привет", "привилег", "выч", "неприкаянн", "прилич", "приня", "сутств", "притвор", "прихот", "причастн", "неприязн", "неприязнь", "неприятель", "прия", "провер", "продолж", "прозрачн", "произволь", "произнос", "просвещ", "противл", "профил", "профиль", "нептун", "пыль", "равен", "равнодуш", "раде", "нерадив", "разреш", "расторж", "рациональн", "рач", "регулярн", "нереид", "нерест", "нерк", "родн", "нерп", "нерях", "неряш", "самостоятельн", "свойств", "енен", "несессер", "склон", "скромн", "скры", "сладк", "случай", "слых", "совершен", "совмест", "совпад", "соглас", "солидн", "сомне", "сообразн", "соответств", "состоятельн", "спокойн", "справедлив", "сравн", "стандарт", "стройн", "несураз", "несуразн", "несусветн", "счасть", "нет", "твёрд", "нетопырь", "традици", "тривиальн", "нетто", "угодн", "удобн", "удовольств", "неужели", "неужто", "неуклюж", "неукоснительн", "уме", "умё", "уряд", "учтив", "уют", "неф", "нефел", "промысел", "экспорт", "нефть", "хорош", "христь", "цензур", "нечаянн", "ему", "нечестив", "чётк", "чистоплотн", "чисть", "бельн", "членораздельн", "что", "широк", "нешто", "этич", "нив", "нивх", "нигери", "нигерий", "нидерланд", "четверт", "низверг", "низверж", "низк", "легир", "низри", "никел", "никель", "куды", "нимб", "нимф", "ниоб", "нипочём", "ниппель", "сколеч", "нис", "проверг", "проверж", "шёлк", "эмаль", "нить", "ницц", "ево", "шеньк", "чуть", "ниш", "нищ", "нобил", "новелл", "нововведение", "новока", "преставл", "сёл", "тёл", "нога", "ногай", "ногот", "ноготь", "ногт", "ножниц", "ножнич", "ножовк", "ножовоч", "ноздр", "ноз", "нокаут", "нокдаун", "ноктюрн", "нол", "ноль", "нуль", "номенклатур", "номер", "номинал", "номиналь", "нон", "ноне", "нонсенс", "нор", "норвеж", "норд", "норичник", "норк", "норманд", "норманн", "норов", "носк", "носок", "носоч", "ностальг", "ностальги", "нот", "нота", "бен", "нотари", "нотаци", "нототени", "ночь", "ношп", "нощь", "ноябрь", "нуби", "нубий", "нувориш", "нуг", "нукер", "нукл", "нулл", "нумизмат", "нунций", "нут", "нутаци", "нутри", "нын", "ньютон", "ньюфаундленд", "п", "ню", "нюанс", "нюн", "нюрнберг", "нянь", "оазис", "бандерол", "обая", "вреж", "домл", "земел", "безображ", "опаш", "ызвест", "вл", "обезьян", "обелиск", "обёр", "обёрт", "кислорож", "обескураж", "смерч", "цвеч", "чещ", "обет", "обечайк", "обж", "обиняк", "обитель", "обихаж", "обиход", "облав", "благоображ", "облада", "облак", "лапл", "лапош", "область", "облатк", "облаточ", "облек", "облепих", "облеч", "облечь", "облечься", "облигаци", "облик", "обл", "обличь", "обложк", "локач", "локоч", "обломов", "облучок", "обма", "мишул", "морач", "обморок", "обмороч", "обмундир", "наж", "найтовл", "обнаруж", "обним", "обня", "обойм", "ествл", "обод", "обожа", "обоз", "оболочк", "оболоч", "оболт", "льщ", "обоня", "оборач", "оборк", "обормот", "оборон", "обороч", "оборч", "осабл", "особл", "бочь", "обоюдн", "обоюд", "образец", "образов", "образц", "образч", "рамл", "ревиз", "обрек", "обрёк", "ремиз", "обрес", "обреч", "обречь", "обречься", "решёт", "оброк", "обруч", "обр", "обряд", "обсерватор", "обсерваци", "обсидиан", "обскурант", "союж", "обстановк", "обстановоч", "обстоятельн", "обстоятельств", "стрек", "обструкци", "сужд", "обуз", "уз", "обурева", "уславл", "обух", "обуш", "обуя", "чекрыж", "шаст", "обширн", "обшлаг", "обшлаж", "граждан", "теор", "университет", "становл", "фабрич", "эстет", "егор", "едь", "объяв", "ягн", "обыва", "обыдён", "обыденн", "обык", "ынтеллигент", "обычай", "бюрокрач", "оваль", "оваци", "овёс", "овеч", "веществл", "овод", "овраг", "овраж", "овул", "овц", "овч", "оглобель", "оглобл", "глоуш", "глупл", "стрель", "огнь", "оголтел", "огон", "огород", "огорош", "огорч", "государствл", "оград", "огражд", "гребь", "огрех", "огромн", "грубл", "огул", "огуль", "огурец", "огуреч", "огурч", "далж", "дежд", "одерж", "одесс", "одес", "одеял", "одеяль", "один", "ёшенек", "одиозн", "одиссе", "однако", "дерёв", "одно", "плунжер", "полч", "станич", "фамил", "чась", "одонт", "одр", "одуванчик", "одул", "одуль", "одутл", "одухотвор", "ожерель", "забоч", "заглав", "заглавл", "озадач", "озар", "озер", "озёр", "пшенич", "озир", "знакомл", "знобл", "озокер", "озон", "озор", "ойкумен", "ойрот", "окази", "каймл", "окаянн", "окаян", "океан", "океа", "окей", "оккази", "окклюд", "окклюз", "оккуп", "оклад", "окн", "околач", "околёс", "околес", "околиц", "околоток", "околоточ", "усть", "щит", "околыш", "окольнич", "окольн", "конфуж", "окоп", "корач", "окорок", "кочур", "окош", "окрест", "округ", "оксалат", "оксид", "оксиморон", "оксюморон", "оксол", "окт", "окта", "октро", "октябр", "окун", "оку", "окунь", "кургуж", "олад", "оладь", "олеандр", "оле", "олен", "олень", "олеш", "олив", "олигарх", "олимп", "олиф", "олицетвор", "олов", "олух", "ольх", "ольш", "омар", "омбр", "омег", "мертвл", "мещан", "омлет", "омнибус", "мов", "молаж", "омул", "омуль", "омут", "онагр", "онан", "ондатр", "оникс", "ономастик", "онт", "онуч", "оо", "опак", "опал", "палубл", "опаль", "опар", "ивл", "паскуд", "паскуж", "опек", "пён", "переж", "полномоч", "опеш", "опи", "опий", "оплеух", "оплеуш", "плеш", "оплот", "плош", "оплы", "опля", "опо", "позор", "опок", "ополч", "поляч", "монтаж", "порос", "посред", "постыл", "поч", "поэт", "пояс", "оппозици", "оппон", "оправ", "оправл", "предмеч", "оприч", "пробк", "опроверг", "опрометчив", "опрометью", "простоволос", "простофил", "прыщ", "оптим", "опус", "опушеч", "опушк", "опять", "орав", "оракул", "орангутан", "орангутанг", "оранж", "оранжев", "оранжерей", "оранжере", "орарь", "оратор", "оргазм", "орги", "снаст", "орд", "орден", "ордер", "ординар", "ординат", "ордин", "орёл", "ореол", "орех", "ореш", "оригинал", "оригиналь", "оригинальн", "ориентал", "ориентальн", "оркан", "оркестр", "орл", "орлец", "орнамент", "орнит", "птер", "орок", "орос", "ороч", "орочон", "орош", "ортодокс", "ортопед", "орто", "оруди", "оруд", "орудова", "оружей", "оружи", "орфо", "орхиде", "осад", "осажд", "осан", "сатан", "осведом", "свежёва", "свежева", "свещ", "свинц", "свиреп", "оседл", "осёл", "оселок", "осен", "осень", "серед", "серч", "осетин", "осётр", "осетр", "осин", "сирот", "скальп", "скверн", "осклаб", "осклабл", "оском", "скопл", "оскорб", "оскорбл", "скором", "скотин", "скуд", "слабл", "сланц", "осл", "осман", "смел", "ться", "осм", "смирн", "осмос", "осмот", "смугл", "основн", "а:", "особь", "осок", "осокор", "осокорь", "солаж", "солов", "сопл", "осот", "осп", "средн", "оста", "остальн", "остановл", "осташ", "стебел", "осте", "хондр", "стерв", "остерег", "остерёг", "остереж", "остеречь", "остеречься", "остинато", "остов", "остойчив", "остолоп", "осто", "остров", "острог", "острож", "пёстр", "стропил", "прян", "рёбр", "сатир", "социальн", "остяк", "остяц", "остяч", "осу", "осуществл", "осцилл", "ливл", "ось", "осьм", "отав", "такелаж", "отар", "отваг", "вад", "отваж", "твержд", "верз", "отверсти", "отвеч", "отвращ", "отдох", "отдух", "отдуш", "отдых", "отек", "отель", "отец", "отеч", "отзыва", "колошмач", "откровен", "откровенн", "куд", "отлын", "отлы", "отменн", "отним", "отнюдь", "отня", "отображ", "отобраз", "тождеств", "тожеств", "тождествл", "тожествл", "рин", "отороп", "оторопь", "отороч", "отповедь", "полирова", "полиров", "отпор", "почк", "отправл", "отрад", "отраж", "реаг", "отребь", "редакт", "отрек", "отрёк", "репет", "трепь", "ретир", "реценз", "отреч", "отречь", "отреш", "отрица", "отрог", "родь", "отрож", "отрок", "отроч", "отруб", "отрывок", "отрывоч", "рыж", "отряж", "салют", "себ", "отсек", "стеж", "отстран", "сюд", "тепель", "топыр", "торж", "трансл", "туз", "ужин", "туреч", "тучн", "футбол", "отча", "отч", "чебуч", "чубуч", "черенк", "отчёт", "отчит", "чихвост", "чихвощ", "отшель", "отъ", "отъём", "отъя", "ощ", "оуэн", "офис", "офит", "офицер", "офицерь", "официаль", "официант", "офици", "фонар", "офорт", "француж", "француз", "офсайд", "офсет", "офтальм", "футер", "охапк", "охламон", "хлопь", "хораш", "продукц", "хоч", "охр", "охти", "охт", "хул", "цепен", "очаг", "очаж", "очевидн", "чель", "очень", "очерёд", "очередь", "очерет", "очеч", "чум", "очут", "очух", "шараш", "швартов", "швартовл", "шелом", "шеломл", "шельм", "шин", "шлихт", "шлюз", "штраф", "щен", "щер", "щупь", "ялов", "паблисити", "пав", "павиан", "пагод", "падеграс", "падеж", "пади", "шах", "падре", "дч", "падь", "паж", "паз", "пазанк", "пазанок", "пазух", "пазуш", "пайк", "пак", "пакгауз", "пакет", "пакистан", "пакл", "пакость", "пакт", "паладин", "паланкин", "палантин", "палас", "палатальн", "палатк", "палаточ", "палаццо", "палач", "палаш", "палев", "пале", "онто", "тропич", "палех", "палеш", "пали", "палисад", "палисандр", "палитр", "палк", "паллад", "палладиум", "паллиатив", "палоло", "палом", "палоч", "палтус", "пальм", "пальмир", "итин", "пальп", "пальт", "пальто", "памп", "пампас", "памперо", "пампуш", "памфлет", "память", "панам", "пананг", "панариций", "панаце", "панд", "пандан", "пандект", "пандем", "пандит", "пандури", "пандус", "панегирик", "панегир", "панегирич", "панел", "пани", "паникадил", "паниров", "панихид", "панич", "панк", "панкреас", "панкреат", "панно", "сперм", "панталон", "пант", "пантеон", "пантер", "панцирь", "панъ", "эллин", "пап", "папавер", "папай", "папах", "папаш", "паперт", "паперть", "папир", "папирос", "папирус", "папк", "папоротник", "папоч", "паприк", "папуас", "папул", "парабеллум", "парабол", "пара", "парагва", "парагвай", "гелий", "параграф", "парад", "парадигм", "парадиз", "парадокс", "иммунитет", "парализ", "паралит", "паралич", "параллакс", "параллакт", "параллел", "пипед", "параллель", "параметр", "парандж", "парано", "параной", "парапет", "парат", "параф", "парафраз", "парафраст", "параш", "парашют", "парвеню", "пардон", "пареми", "парен", "паренхим", "парень", "пари", "париж", "парик", "парикмахер", "паритет", "парич", "паркет", "паркинг", "паркинсон", "паркова", "парнас", "парн", "пародий", "парод", "пароди", "донт", "пароли", "пароль", "паром", "ономаз", "проф", "парт", "партер", "партизан", "партикуляр", "партитур", "партнёр", "поруч", "стаж", "ёб", "парубок", "парусин", "парфорс", "парфюмер", "парф", "парцелл", "парцелль", "парч", "пасек", "пасеч", "паскаль", "пасквиль", "пасквил", "паслён", "пасмурн", "пасмурь", "паспарту", "пасс", "пассаж", "пассакаль", "пассат", "пассатиж", "пассе", "пассер", "пассив", "пасси", "пастель", "пастер", "пастернак", "пастил", "пастиччо", "пастор", "пастораль", "пасть", "пасх", "сын", "пасьянс", "патер", "патерик", "патетик", "патетич", "патефон", "патин", "патио", "патиссон", "патл", "паток", "паточ", "патриарх", "патриарш", "патримони", "патримоний", "патрици", "патриций", "патр", "таш", "патрул", "пауз", "паузок", "паук", "паупер", "пауч", "паф", "пафос", "пахлав", "пацан", "пациент", "пациф", "паче", "пачеч", "пачул", "паша", "паштет", "паюс", "паяс", "паяц", "пеан", "пег", "педал", "педаль", "педант", "педераст", "педиатр", "педикюр", "техникум", "пеж", "пезо", "песо", "пейзаж", "пейзан", "пекин", "пеклева", "пеклёва", "пеклёв", "пелерин", "пеликан", "пелик", "пелит", "пельмен", "пельмеш", "пемз", "пенал", "пенальти", "пенат", "пендель", "пендинк", "пенз", "пеницилл", "пенк", "пенни", "пеноч", "пенс", "пенси", "пенсне", "пентагон", "пента", "пенчинг", "пень", "пеньк", "пеньюар", "пеня", "пеон", "пепель", "пепл", "пепс", "трахей", "клаш", "престоль", "статей", "перг", "пергамен", "пергамент", "пергамин", "барщ", "вораш", "перевясл", "яя", "передо", "дряг", "инач", "лопач", "мт", "переним", "переня", "перепел", "перепёл", "переплева", "перепонк", "перепоноч", "перепонч", "переправ", "переправл", "снаряж", "составл", "переста", "станавл", "сыль", "тружд", "упрямл", "усерд", "уступл", "фасон", "формул", "перец", "че", "переч", "шеп", "переяр", "пери", "перил", "перилл", "периль", "перипети", "перистальтич", "периферий", "перифер", "перифери", "фраст", "перкал", "перкаль", "перкусси", "перкут", "перл", "перламутр", "перлов", "перлон", "перлюстр", "перманент", "перм", "перпендикуляр", "перрон", "персик", "перси", "перстен", "перстень", "перстн", "персть", "пертурб", "перу", "перун", "перф", "перфор", "перх", "перц", "перцип", "перчатк", "перчаточ", "першерон", "перь", "пёс", "сен", "песет", "песец", "пескарь", "песк", "песок", "песоч", "пессим", "пест", "пестицид", "цветь", "песц", "песч", "петель", "петер", "бург", "бурж", "петит", "петици", "петлюр", "петрушеч", "петрушк", "петуни", "петух", "пехлеви", "пехлевий", "печать", "печенег", "печенеж", "печён", "печень", "печорин", "пеш", "едрал", "пешеч", "пешк", "пешн", "пещер", "пиал", "пиан", "пианино", "пиано", "пиастр", "пигалиц", "пигмей", "пигм", "пигус", "пиджак", "пиджач", "пиетет", "пижам", "пижм", "пижон", "пикантн", "пикап", "пике", "пикет", "пикколо", "пикник", "пикнич", "пикт", "пикул", "пилав", "пилигрим", "пилик", "пилон", "пилюль", "пилюл", "пилястр", "пим", "пинак", "пингвин", "пинетк", "пинкертон", "пинт", "пинцет", "пинчер", "пион", "пионер", "вожат", "пипетк", "пирамид", "пирамидон", "пират", "пиреней", "пирит", "пирке", "пирог", "пирож", "пирс", "пируэт", "писк", "писсуар", "пистик", "пистолет", "пистоль", "пистон", "письм", "питер", "пити", "питомнич", "питон", "пифагор", "пихт", "пицц", "пиццикато", "пиччикато", "пичуг", "пичуж", "пияв", "средств", "плаги", "одий", "планид", "плани", "планк", "планоч", "планч", "шайб", "планшет", "планшир", "планширь", "плас", "пластилин", "пластыр", "пластырь", "платан", "платк", "плато", "платок", "платон", "платоч", "платформ", "плать", "плаун", "плафон", "плах", "плахт", "плац", "плацдарм", "плацебо", "плацент", "плашкоут", "плаш", "плащ", "плебей", "плебисцит", "плев", "плевел", "плевель", "плевр", "плед", "плези", "плезир", "плейбой", "плейер", "плексиглас", "племян", "племяш", "пленарн", "пленум", "плёнч", "пленэр", "плеон", "азм", "плесен", "плесень", "плещ", "еш", "плеть", "плешь", "плеяд", "пли", "плие", "плинт", "плинтус", "плис", "плисс", "плит", "плов", "плой", "пломбир", "плоск", "плотник", "плотниц", "плотнич", "плошеч", "плошк", "площадоч", "площ", "плуж", "плутон", "плюгав", "плюрал", "плюральн", "плюс", "плюск", "плюсн", "плюх", "плюш", "плюшк", "пляж", "пляш", "пневмат", "пневм", "склероз", "балак", "барахт", "блёск", "побор", "бульк", "повад", "поваж", "поверг", "повер", "верь", "повес", "повествова", "повестк", "повесть", "повет", "поветь", "повидл", "повилик", "повилич", "повод", "врежд", "повстан", "погань", "гибь", "гнуш", "погост", "погреб", "погрёб", "погрес", "громл", "грохат", "подагр", "подат", "подать", "бедёр", "подбород", "подбородок", "подбородоч", "подвал", "подверг", "подверж", "дош", "подвиг", "подвиж", "подвиз", "подвод", "подвох", "поддан", "доминант", "дён", "поджар", "поджи", "задор", "подий", "поди", "кузьм", "лавок", "лавочь", "подле", "подлеж", "подлежащ", "подлог", "подлож", "мастерь", "месь", "мость", "мышк", "натуж", "поднач", "есь", "низь", "подним", "подня", "подым", "подобостраст", "подог", "подож", "оконь", "подол", "опеч", "подоплёк", "подошв", "подпа", "подпад", "подпас", "персь", "подпоручик", "прапорщик", "пространств", "подпруг", "пушь", "разумева", "реберь", "подробн", "ружей", "подряд", "подряж", "ряс", "свах", "свин", "седель", "подсоб", "подсобл", "кращ", "подсолн", "подспорь", "стакан", "стерег", "стерёг", "стереж", "стеречь", "стожь", "столич", "подстрек", "сум", "подтверд", "подтвержд", "тибр", "трибун", "тропик", "трун", "усадеб", "подушеч", "подушк", "фар", "подхалим", "подхалюз", "хорунж", "подчас", "шельф", "шеф", "подшипник", "шкипер", "шофе", "подъ", "яз", "ярем", "подъя", "ызб", "ынтегр", "ытож", "поезж", "поём", "пожалуй", "пожалуйста", "пожар", "пожив", "пожил", "поз", "задь", "позвонк", "позвонок", "позж", "поздрав", "поздравл", "зёв", "пози", "позици", "злащ", "знабл", "позумент", "поим", "пойнтер", "пока", "покер", "покид", "поклад", "клаж", "покойн", "поколени", "поколен", "покров", "покрови", "кумек", "покус", "покуш", "полат", "полб", "шпат", "полем", "полемич", "полен", "полеш", "жизн", "акрил", "полиграф", "полинези", "полинезий", "полип", "полис", "синтетич", "полисмен", "стади", "стирол", "стироль", "политур", "полицай", "полицей", "полици", "полиц", "полишинель", "этил", "эфир", "полно", "полов", "половник", "полог", "полож", "положительн", "полоз", "полок", "полощ", "полость", "полотенеч", "полотенц", "полотн", "полоч", "порци", "седьм", "семестр", "полсть", "полст", "суток", "полтав", "полтин", "дуплекс", "колл", "легальн", "полундр", "опущ", "помеш", "понтон", "презр", "прицеп", "пролетари", "пролетарий", "пролетар", "разор", "сапож", "серьёзн", "синтет", "сред", "станок", "стационар", "сукн", "тень", "финал", "финаль", "четв", "ерт", "шёпот", "шерсть", "полушк", "штоф", "шуб", "экипаж", "эскадрон", "ют", "царств", "ёрт", "полчищ", "полчок", "полым", "полын", "полынь", "польк", "полян", "малк", "марг", "директор", "ме", "померанец", "померанц", "поместь", "помеша", "помещ", "помидор", "помост", "помп", "помпадур", "пезн", "помпон", "напрасн", "нарош", "понёв", "понедельник", "понедельнич", "пони", "пономар", "пономарь", "понос", "понош", "понт", "понур", "пончик", "пончо", "нюш", "нянч", "поощр", "попа", "адь", "попас", "поперёк", "поперх", "попир", "поплин", "попон", "попра", "прёк", "прек", "притч", "поприщ", "попугай", "попуга", "популяр", "популярн", "попурри", "попусти", "пых", "поработ", "порабощ", "развлёк", "развлечь", "разъ", "рань", "порей", "порица", "порн", "порог", "порож", "порок", "поролон", "роскош", "порох", "порошк", "порошоч", "порск", "портал", "порталь", "портативн", "портвейн", "портер", "портик", "портк", "портмоне", "портн", "портплед", "сигар", "португал", "португаль", "портулак", "портупей", "портупе", "портфель", "портье", "портьер", "портянк", "портяноч", "руковод", "рух", "ручей", "порфир", "поршен", "поршень", "поршн", "порядк", "поряд", "сап", "посвят", "сейчас", "семен", "серёд", "середь", "посет", "сетова", "сив", "поскон", "посконь", "скуп", "последн", "пословиц", "послович", "смак", "пособ", "пособл", "содейств", "солонь", "соревнова", "посох", "сочувств", "посош", "способствова", "посредством", "посредств", "поссибил", "пос", "постав", "поставл", "постамент", "постанавл", "постанов", "постановл", "постель", "постепенн", "постепен", "стесн", "постиг", "постичь", "позит", "странич", "пострел", "строж", "постромк", "постромоч", "скриптум", "постул", "поступательн", "поступл", "ступь", "факт", "постъ", "эмбрион", "посуд", "судач", "суров", "посяг", "так", "тат", "поташ", "потвор", "потенциал", "потенциаль", "потенц", "потолок", "потолоч", "толст", "толщ", "потом", "потому", "тонь", "торапл", "торопл", "торч", "траф", "трафл", "потрох", "туск", "тщ", "упражн", "фарт", "флирт", "хваль", "хвар", "хер", "хит", "хищ", "хмель", "поход", "походя", "похот", "похоть", "храбр", "храм", "христос", "хуж", "целуй", "чавка", "чай", "початк", "початок", "чван", "челомк", "почём", "почему", "почерк", "почечуй", "почитай", "альон", "амт", "почти", "почто", "шевель", "шев", "пошехон", "штуч", "щаж", "поэзи", "поэм", "эт", "юрод", "праведн", "правёж", "правил", "право", "правоверн", "правомерн", "пораж", "преем", "православ", "прагмат", "праж", "праздник", "празднич", "пралине", "пралин", "прасол", "прах", "прачеч", "прачк", "пращ", "пращур", "преамбул", "превал", "превент", "превенци", "вкусн", "преврат", "превратн", "гадк", "преград", "прегражд", "преда", "предани", "предвар", "предвзят", "предвод", "предвосхит", "предвосхищ", "грозь", "предел", "дерзк", "предикат", "предикац", "предлаг", "предложени", "предместь", "предок", "предостав", "предоставл", "осторож", "предполаг", "предполож", "предпочес", "предпочит", "предпочт", "предприим", "предприним", "предприня", "предприя", "пясть", "рак", "предрассудок", "предрек", "предреч", "предречь", "свадеб", "председатель", "представл", "предтеч", "уведом", "уведомл", "предупред", "предупрежд", "упрежд", "предъ", "юбилей", "предъяв", "предъявл", "ярмароч", "ыд", "ынсульт", "ынфаркт", "ыстор", "ыстори", "ыюль", "ыюнь", "прежде", "преж", "презерватив", "президент", "президиум", "презир", "презумпци", "преимуществ", "преисподн", "преисполн", "прейскурант", "прекрасн", "прекрат", "прекращ", "прелаг", "прелат", "прелест", "прелесть", "прелож", "прелюбодей", "прелюбоде", "прелюд", "прелюди", "преми", "прем", "премьер", "пренебрег", "пренебрёг", "пренебреж", "пренебречь", "прени", "преображ", "преобраз", "отличн", "препар", "препина", "препира", "преподава", "препода", "препон", "принт", "противн", "пререка", "прериаль", "прери", "прерогатив", "пресвитер", "преследова", "пресловут", "пресмыка", "прессинг", "престав", "прест", "престол", "странн", "претвор", "претенд", "претенз", "претенц", "претор", "ужас", "префект", "преферанс", "префикс", "чёрн", "прибаутк", "прибауточ", "прибег", "брежь", "приват", "приватн", "приверед", "приверж", "привеч", "привилеги", "гвожд", "приглас", "приглаш", "пригож", "голубл", "пригоршн", "пригоршен", "приз", "призир", "призм", "призна", "признак", "призор", "призрак", "призрач", "призре", "призр", "приключ", "кноп", "кнопл", "прикор", "прилагательн", "прилежн", "лыг", "прим", "донн", "примак", "примат", "примитив", "примул", "примус", "принадлеж", "норавл", "норовл", "принтер", "кр.", "овражь", "приоритет", "припадок", "припадоч", "парков", "припер", "припёр", "приправ", "приправл", "природ", "русл", "скорб", "словь", "смир", "совокуп", "совокупл", "приспе", "приспеш", "приспич", "приспосабл", "приспособ", "пристав", "стадион", "пристальн", "пристращ", "приструн", "стяж", "стяжь", "присущ", "присяж", "террас", "притом", "притон", "приторн", "тул", "приуроч", "фальц", "прификс", "прихлеба", "прихоть", "чаль", "причащ", "причём", "причт", "причет", "причиндал", "шабр", "шел", "шепёт", "шоссе", "шпандор", "шпор", "щуч", "приязн", "приязнь", "ям", "приятель", "прият", "боран", "пробоч", "пробст", "пробч", "валанд", "провансаль", "прован", "провиант", "провизи", "провизор", "провизорн", "провинци", "проволок", "проворн", "провор", "провоц", "прогалин", "глоч", "прогнат", "гневл", "прогност", "гнусав", "гнусавл", "гресс", "продел", "продель", "прод", "продовольств", "продольн", "продувн", "продюсер", "проём", "проец", "прожект", "проз", "засед", "прозект", "прозелит", "прозорлив", "произвес", "произвол", "произнес", "произнош", "произо", "проис", "пройдох", "пройм", "прок", "прокаж", "проклам", "клитик", "ь", "прокт", "прокур", "пролёт", "пролет", "пролив", "пролог", "пролонг", "пролюви", "пролювий", "промежуток", "промежуточ", "променад", "промилле", "пронз", "проним", "прононс", "пронунсиаменто", "пронунциаменто", "проня", "пропад", "пропаж", "пропан", "пропасть", "пропедевтик", "пропедевтич", "пропеллер", "пропилен", "проповеда", "проповед", "проповедь", "прополис", "пудел", "раб", "проран", "прорв", "ректор", "прорех", "прореш", "прорица", "рость", "рубь", "прорух", "просвет", "просвир", "просфор", "седь", "семинар", "сканд", "скач", "слы", "просод", "проспект", "просперити", "спряг", "простат", "простер", "простир", "проститу", "проститут", "народь", "простор", "пространн", "простраци", "проступ", "простын", "существова", "прось", "таран", "тарахт", "протеж", "протект", "протекци", "протер", "протестант", "противень", "дифтерий", "иприт", "лихорадоч", "себорей", "скольж", "судорож", "торпед", "холер", "цинг", "шок", "эпидем", "эрозий", "эрози", "тл", "зоа", "протоколь", "протон", "топи", "транжир", "профан", "фершпил", "професси", "професс", "шлиф", "финт", "фу", "харч", "прохвост", "прохиндей", "процесси", "шляп", "штуд", "прояв", "проявл", "прудон", "пружин", "прус", "прусс", "прут", "прытк", "прытч", "прыть", "прюнел", "прюнель", "пряда", "прядь", "пряжеч", "пряжк", "пряник", "прянич", "пряч", "псалм", "оди", "псалом", "псалтыр", "псалтырь", "псевд", "астени", "иатр", "фармак", "психр", "псков", "псориаз", "пт", "енч", "пуансон", "пуантил", "пуант", "публич", "пугов", "пудель", "пуделя", "пудинг", "пудлинг", "пузыр", "пузырь", "пук", "пул", "пуловер", "пульвер", "пуль", "пульман", "пульмон", "пульп", "пум", "пун", "пунктир", "пунктуальн", "пункту", "пункци", "пунсон", "пунцов", "пунш", "пуп", "пупавк", "пупс", "пупыр", "пупырь", "пург", "пурген", "пур", "пуритан", "пурпур", "пускай", "пустельг", "пустул", "пусть", "путассу", "путёв", "путём", "путин", "путл", "путн", "путти", "путч", "пуф", "пуццолан", "пучин", "пушеч", "пушк", "пушту", "ий:", "пуэбло", "пуэрто", "пфенниг", "пчел", "пчёл", "семь", "пчель", "пшениц", "пшён", "пшен", "пшик", "пшют", "пыжик", "пырей", "пыр", "пыш", "пышн", "пьедестал", "пьекс", "пьеро", "пьес", "чуг", "пэр", "пэ", "тэ", "пюпитр", "пюре", "пяд", "пядь", "пяль", "пяст", "пятибалльный", "пять", "раввин", "равелин", "рагу", "радар", "радж", "радиатор", "радикал", "радикальн", "радикулит", "навигаци", "компар", "реле", "репродукт", "рубк", "точк", "эх", "радиус", "радуг", "радуж", "радуниц", "радуш", "раёк", "раёш", "разбав", "разбавл", "разбой", "бомбл", "ец:", "разве", "вереж", "разврат", "развращ", "разгильдяй", "раздоль", "раздор", "раздраж", "разева", "раззяв", "разин", "лакомл", "несчаст", "разним", "темп", "разня", "разоблач", "одолж", "мл", "разраж", "разраз", "розн", "ухаб", "разъя", "разым", "этак", "раин", "рай", "обес", "ракель", "ракетк", "ракеточ", "ракит", "ракл", "раковин", "раков", "скорпион", "ракурс", "ракуш", "ракш", "ралл", "рамазан", "рамбулье", "рамоли", "рамп", "ранг", "рангоут", "рандеву", "ранетк", "ранец", "ранжир", "рант", "рантье", "ранчеро", "ранчо", "рапид", "рапир", "раппорт", "рапс", "рапсоди", "раритет", "расей", "критик", "кружал", "распин", "подобл", "располага", "распоряд", "распоряж", "расправ", "расправл", "простёр", "распр", "распя", "свес", "серж", "сироп", "сиропл", "тьсор", "ть]", "сясор", "ся]", "средоточ", "средотач", "расста", "расстояни", "стройк", "расторг", "расточ", "растр", "растяп", "фасова", "франч", "фуфыр", "хляб", "хорохор", "целов", "чух", "штыб", "щебен", "щедр", "ратин", "ратуш", "рать", "раунатин", "раунд", "раух", "топаз", "рафин", "рафи", "рахис", "рах", "рационал", "ра", "рац", "рашпиль", "рд", "реабилит", "реакц", "реали", "реаним", "реани", "реб", "ребр", "ребус", "рёв", "реванш", "ревен", "ревень", "реверанс", "ревербер", "реверс", "реверси", "ревизи", "ревмат", "револьвер", "трибунал", "ревю", "регали", "регат", "регби", "регб", "регенер", "регент", "регламент", "реглан", "регот", "регредиент", "регресс", "редеч", "редис", "металль", "редук", "редуплик", "редуплиц", "редут", "редуц", "редч", "редьк", "реестр", "рееч", "резед", "резекци", "резервуар", "резидент", "резиденци", "резистентн", "резистивн", "резк", "резолют", "резолюци", "резон", "резорцин", "результ", "резус", "резч", "резюм", "импорт", "рей", "рейк", "рейсмас", "рейсмус", "рейтар", "рейтинг", "рейтуз", "рейх", "реквием", "реквиз", "реквизит", "рекогносц", "реконстру", "реконструкт", "реконструк", "рекорд", "рекрут", "рект", "рекупер", "реликв", "реликви", "реликт", "релятив", "релятивн", "реляци", "рем", "ремарк", "ремен", "ремень", "ремесл", "ремеш", "ремит", "ремн", "натурал", "ренегат", "ренессанс", "ренет", "реноме", "рент", "рентген", "ким", "кинемат", "рео", "реп", "репар", "патри", "репе", "репей", "репертуар", "реплик", "реплиц", "репрезент", "репресс", "репресси", "реприз", "репродук", "репродуц", "репс", "рептили", "рептиль", "репутаци", "реслинг", "реснит", "ресниц", "респектабельн", "респир", "респондент", "реставр", "реституци", "ресторан", "ретив", "ретикул", "ретин", "реторт", "ретро", "спектив", "флекси", "флекс", "ретушь", "рефер", "референдум", "рефери", "рефлекс", "рефлект", "рефракт", "рефракци", "рефрен", "рефул", "рех", "рецензи", "рецепци", "рецесс", "рецесси", "рецидив", "рецип", "циркул", "рецит", "речитатив", "речк", "решётк", "решёточ", "решётч", "решетч", "решк", "эваку", "риал", "риб", "флав", "риг", "ригель", "ригор", "ридикюль", "ризотто", "рикошет", "римл", "рим", "ринг", "пластич", "риск", "рислинг", "риста", "ритенуто", "ритор", "риторик", "риторич", "ритуал", "ритуаль", "рихт", "рицин", "ришелье", "ркацители", "робинзон", "робк", "робот", "робо", "робч", "ров", "ровес", "рогож", "рогоз", "уль", "родан", "родео", "неньк", "родник", "роднич", "родничок", "рододендр", "рододендрон", "родон", "рожь", "розали", "розг", "розетк", "розмарин", "розов", "рок", "рокад", "рокайль", "рокер", "рококо", "рокоч", "рокфор", "рол", "роль", "ром", "роман", "романс", "романсеро", "ромашк", "ромб", "ромштекс", "ронгалит", "рондино", "рондо", "ропщ", "роскошь", "росомах", "росомаш", "пашь", "ростбиф", "ростр", "альный", "рота", "ротатор", "ротац", "ротмистр", "зе", "ротон", "ротонд", "ротор", "роял", "рояль", "рт", "ртут", "ртуть", "рубаи", "рубанок", "рубато", "рубах", "рубаш", "рубероид", "рубид", "рубин", "рубищ", "рубль", "рубрик", "рудимент", "ружь", "руин", "рукопашн", "оят", "оять", "рулад", "рулет", "рулетк", "рулеточ", "рулон", "румб", "румын", "рундук", "рундуч", "рупи", "рупор", "русалк", "русалоч", "руссо", "руст", "рут", "руте", "рутен", "рутин", "рухлядь", "руче", "ручь", "чонк", "рыдван", "рык", "рыль", "рынок", "рыноч", "рып", "рысь", "рыцар", "рыцарь", "рычаг", "рычаж", "рьян", "рэкет", "рюкзак", "рюкзач", "рюм", "рюмк", "рюмоч", "рюх", "рюш", "рябин", "рябь", "рявк", "рядн", "ряженк", "ряпух", "ряпуш", "ряск", "саам", "саами", "сабан", "туй", "сабель", "сабл", "сабо", "сабот", "сабур", "саван", "саванн", "савк", "саврас", "саг", "сагайдак", "сагайдач", "саго", "саеч", "сажён", "сажень", "сазан", "сазандари", "сайг", "сайгак", "сайгач", "сайд", "сайк", "сайр", "саквояж", "сакл", "сакман", "саксаул", "саксауль", "саксон", "саксофон", "сакур", "салаг", "салаж", "салазк", "салазоч", "салак", "саламандр", "салат", "салоп", "салфетк", "салфеточ", "салхино", "сальд", "сальдо", "сальмонелл", "сальто", "мортал", "салями", "саму", "саман", "самб", "самбо", "самбук", "самодеятельн", "самоед", "заб", "зва", "разлож", "сопряж", "пл", "стерильн", "уничиж", "уничтож", "спока", "споко", "устран", "утверд", "фертильн", "финанс", "флюс", "самурай", "самшит", "санаторий", "санатор", "сангвин", "сангвиник", "сангвинич", "сандали", "сантал", "сандаль", "сандарак", "сандвич", "сандхи", "санкци", "санорин", "санскрит", "санти", "сантим", "сантимент", "сантон", "эпид", "сапажу", "саперави", "сапог", "валя", "сапон", "сапр", "пел", "сапфир", "сарабанд", "сара", "сарай", "саранч", "сарафан", "сарацин", "сардельк", "сардин", "сардоникс", "сардонич", "сарж", "сари", "сарказм", "саркаст", "саркофаг", "сармат", "сарпинк", "сателлит", "сатин", "сатинёр", "сатисфакци", "сатрап", "сатур", "саун", "сафари", "сафлор", "сафьян", "рафинад", "сахиб", "сациви", "сачк", "саше", "болч", "сбор", "бренд", "сбру", "сбы", "свад", "свадь", "сваеч", "свайк", "свай", "сван", "свар", "свастик", "свать", "сваш", "сведени", "свежь", "свёкл", "свекл", "свеколь", "свёкор", "свекр", "сверб", "сверг", "свер", "сверж", "сверз", "сверст", "допуст", "задач", "изысканн", "монополи", "протекц", "сверхъ", "ёмк", "сверчк", "сверчок", "преставлени", "свидани", "свидань", "свидетель", "свинец", "свинк", "тус", "свинч", "свинь", "свирель", "свирист", "свит", "свитер", "вит", "свищ", "обыч", "свой", "войлач", "сволоч", "сволочь", "свор", "свояк", "свояч", "свяч", "горбл", "сграффито", "сда", "сдоб", "сдобр", "себе", "себоре", "север", "сахалин", "севрюг", "севрюж", "сегмент", "сегнет", "сегодня", "сегрег", "седалищ", "седёл", "седм", "сезам", "сейм", "сейнер", "тектон", "сейф", "сейш", "секвестр", "секвой", "секир", "секретар", "секретер", "секрец", "сект", "секуляр", "секундант", "селадон", "селёд", "селезен", "селезёнк", "селезёноч", "селезень", "селезн", "селективн", "селект", "селектор", "селекци", "селен", "селитр", "сельд", "сельдерей", "сельджук", "сельдь", "селькуп", "угодь", "семаси", "семафор", "сёмг", "семе", "семинари", "семиотик", "семиотич", "сёмуж", "сенат", "сенбернар", "сенегал", "сенегаль", "сенн", "сенсаци", "симон", "сенсит", "сенсор", "сенсуал", "сенсуальн", "сентаво", "сентенци", "сентиментал", "сентиментальн", "сентименталь", "сентимо", "сентябрь", "сень", "сеньор", "сепарат", "сепар", "сепсис", "серафим", "серб", "хорват", "сервант", "сервелат", "сервиз", "сервил", "сервильн", "сервир", "сервитут", "серв", "сердит", "сердолик", "сердц", "сердч", "середи", "серёжеч", "серёжк", "серенад", "сержант", "сери", "сермяг", "сермяж", "серн", "серп", "серпантин", "серпент", "серпентин", "серпянк", "серсо", "сертификат", "сёрфинг", "серьг", "сеттер", "окрыл", "сечься", "сибарит", "сивер", "душк", "душч", "сиволап", "си", "сивух", "сивуч", "сивуш", "сиг", "сигм", "сигнарант", "сигнатур", "сидер", "сидр", "сиен", "сиз", "сизиф", "сика", "сикх", "сили", "силик", "силиц", "силк", "силлог", "силок", "силон", "силуэт", "сильф", "симби", "символ", "симпати", "симплекс", "симпозиум", "симфони", "симфонь", "симфон", "синагог", "синапс", "синапт", "сингал", "сингаль", "сингуляр", "синдикал", "синдик", "синдиц", "синдром", "синдх", "синдхи", "синекдох", "синекур", "синел", "синель", "синема", "синклит", "синкоп", "синкрет", "синод", "синопсис", "синопт", "синтагм", "синтакс", "синтакт", "хр", "синьор", "сирен", "сирень", "сиречь", "сири", "сирий", "сирокко", "сиртаки", "сир", "систол", "сись", "сис", "ситалл", "ситар", "ситец", "ситник", "ситро", "ситуат", "ситуаци", "ситц", "ситч", "сифилид", "сифилис", "сифилит", "сифил", "сифон", "скабрёзн", "скаж", "сказуем", "скай", "скалдыр", "скалк", "скальд", "скальпель", "скаме", "скамей", "скамь", "скандаль", "скандинав", "скан", "скапо", "скарб", "скаред", "скар", "скарлатин", "скат", "скатёр", "скатерт", "скатерть", "скаут", "скафандр", "кащ", "скваж", "сквайр", "сквалыг", "сквалыж", "скваттер", "сквер", "скворец", "сквореч", "сквор", "скворц", "скворч", "скелет", "скенн", "скепс", "скепт", "скерц", "скерцо", "скетч", "скипетр", "скипидар", "скиф", "скиц", "склеп", "склиз", "склизк", "склок", "клоня", "склоч", "склянк", "скляноч", "скоб", "скобк", "скобоч", "сковород", "сколопендр", "сколь", "скользч", "скоморох", "скоморош", "сконто", "скопидом", "копыч", "скорбут", "скорбь", "скорлуп", "скорняж", "скорняк", "скоромн", "скост", "скот", "кощ", "скрежещ", "скрепер", "скрижаль", "скрипиц", "скрупулёзн", "хобот", "скряг", "скряж", "скудель", "скудн", "скудо", "скук", "кукож", "скульпт", "скумбри", "скунс", "ердяй", "скутер", "скуфей", "скуфь", "интенсивн", "слад", "сладч", "слайд", "слалом", "сланец", "слединг", "сленг", "слепень", "ший", "слесар", "слив", "слиз", "слизь", "линя", "слобод", "слобож", "словак", "словар", "словарь", "словац", "словач", "словен", "словин", "случ", "слышь", "слюд", "сляб", "слякот", "слякоть", "лямз", "смазлив", "смальт", "смарагд", "смахива", "смач", "смеж", "смежн", "смек", "сметан", "смёт", "смог", "смокв", "смокинг", "смоков", "смоль", "смородин", "сморчк", "сморчок", "мошеннич", "смрад", "смур", "смушк", "смычк", "смычок", "смят", "снабд", "снадобь", "снайпер", "снасть", "снег", "снегирь", "снед", "снедь", "снетк", "снеток", "снет", "снеточ", "сниск", "сноб", "снов", "сноров", "снох", "сныть", "собак", "соблазн", "собол", "соболезн", "соболь", "ятник", "собор", "бственн", "событи", "соверш", "совесть", "совк", "вмест", "совмещ", "совок", "совкупл", "совокупн", "совоч", "совпа", "совпас", "соврат", "совращ", "гб", "согд", "согласно", "соглаш", "содом", "содрог", "сожал", "созерца", "созида", "сойк", "сок", "сокол", "соколь", "сокровенн", "сокровищ", "солано", "солдат", "солдать", "солда", "солен", "солидар", "солипс", "солитер", "солитёр", "солн", "солнц", "соло", "соловей", "соловь", "сольдо", "сольфеджио", "сольфеджо", "соляр", "сомали", "сомалий", "сомбреро", "сомин", "сомнамбул", "сомн", "сомо", "сомон", "сонат", "сонет", "сонетк", "сонм", "соображ", "сообразова", "сообразов", "сообщ", "сооруд", "сопер", "сопк", "сопел", "сопостав", "сопоставл", "сопран", "сопрано", "сопро", "сопротивл", "сорат", "сорбит", "сорван", "сорго", "соревну", "сорог", "сорок", "сорокопут", "сорочеч", "сороч", "сорочк", "имент", "сортир", "сосен", "сосён", "сосиск", "сосисоч", "сосн", "состо", "состяза", "сосул", "сосуль", "соте", "товарищ", "соус", "соц", "обяза", "сочельник", "сочень", "сош", "спагетти", "спаниель", "спардек", "спардеч", "спарж", "спартак", "спарт", "спасибо", "спасиб", "спекул", "спекуль", "пелё", "спеле", "цет", "спесь", "специальн", "ифич", "специ", "спидвей", "спидол", "спид", "спикер", "спиккато", "спиннинг", "спиноз", "спирал", "спираль", "спир", "спирит", "спиц", "спич", "спичеч", "спичк", "сплач", "сплин", "сплот", "сплоч", "сподвиж", "споза", "спокой", "сполох", "спонде", "спондей", "спондил", "спонсор", "спорад", "гоний", "карпий", "способ", "спотк", "спотык", "похабн", "спо", "справ", "справл", "справн", "спринт", "спринц", "спровад", "спроваж", "спрут", "спряж", "спурт", "спустя", "спят", "сраж", "средь", "медиц", "статист", "сретени", "сретен", "срок", "сряд", "ссад", "ссаж", "ссуд", "ссуж", "сутул", "табун", "ставрид", "ставрополь", "стагнаци", "стад", "стай", "стак", "стаккато", "стаксель", "сталагм", "сталакт", "стал", "стамеск", "стамесоч", "станиол", "станиоль", "станиц", "строение", "ище", "станс", "станций", "стапель", "стара", "старост", "старш", "старшин", "стате", "статн", "стату", "статус", "статут", "этк", "стать", "стафил", "стаханов", "стачеч", "стачк", "твораж", "творож", "стеарин", "стеатит", "стебл", "стез", "стек", "эмал", "стёкл", "стекол", "стеколь", "стеллаж", "стеллит", "стель", "темн", "стена", "стенд", "степенн", "степень", "степс", "стерео", "стеречься", "стержен", "стержень", "стержн", "стерил", "стерлинг", "стерляд", "стерлядь", "стерляж", "стерн", "стернь", "стет", "стилет", "стило", "стипенди", "стиракс", "стихарь", "стихий", "стихир", "стихи", "стогн", "стодол", "стоеросов", "стож", "стоик", "стоиц", "стоич", "стол", "столбов", "столиц", "столп", "столыпин", "столяр", "стом", "сторн", "сторно", "стор", "стотинк", "страда", "страж", "стражд", "страз", "странгул", "страниц", "страсбург", "страсть", "стратег", "страт", "страус", "стрежень", "стрежн", "стрекоз", "стрекоч", "стремглав", "стрем", "стремл", "стремн", "стрепет", "стрепт", "стретто", "стрех", "стриппер", "стриптиз", "стрихнин", "стричься", "трест", "строк", "стронц", "строп", "стропиль", "строптив", "трост", "трощ", "струп", "стручк", "стручок", "стручоч", "студебекер", "студент", "студенч", "стул", "стуль", "ступень", "ступиц", "ступич", "тыр", "стюард", "стяг", "стяжа", "суаре", "суахили", "суббот", "сублим", "субмарин", "субсид", "субсиди", "субстантив", "субстанци", "субститут", "субституц", "субстрат", "субтильн", "титр", "субъ", "экватор", "этн", "сувенир", "суверен", "суверенн", "сувой", "суворов", "песь", "сугроб", "сугуб", "судак", "судан", "судар", "сударь", "судён", "суди", "судн", "судорог", "судьб", "судь", "суевер", "суе", "сук", "суле", "султан", "султанк", "сулугуни", "суматох", "суматош", "сумбур", "сумереч", "сумерк", "сумер", "сумм", "сумоч", "сумч", "сумятиц", "сундук", "сундуч", "сунн", "визор", "гетеродин", "маркет", "финиш", "суперъ", "яхт", "элит", "пес", "супин", "супонь", "супостат", "супплетив", "супплетивн", "суппорт", "супруг", "супруж", "сургуч", "сурд", "сурж", "сурик", "сурк", "сурн", "суровь", "сурок", "суроч", "суррогат", "сурч", "сусал", "сусаль", "сусек", "суслик", "суслич", "суслон", "суспенд", "суспенз", "суспензи", "сутан", "сутен", "сутк", "сутолок", "сутолоч", "суть", "сутяг", "сутяж", "суфле", "суфл", "суфраж", "суффикс", "сухмен", "сухмень", "фрукт", "сучь", "сушь", "существительн", "существ", "суэц", "сфигм", "сфинкс", "сфорцандо", "сфорцато", "схизм", "схим", "схи", "стве", "хрумк", "сцинтилл", "сциф", "якш", "сыворотк", "сывороточ", "ымит", "ымпровиз", "сыпл", "сырок", "сырт", "сырть", "сыч", "сычуг", "сычуж", "ыщ", "сьерр", "сэр", "сюзане", "сюзерен", "сюит", "сюрприз", "сюр", "сюртук", "сюртуч", "сяж", "сяк", "табак", "табака", "таба", "табан", "табасаран", "табач", "табель", "таблет", "таблетк", "таблит", "таблиц", "таблич", "табло", "табор", "табу", "табул", "табурет", "таверн", "таволг", "таволж", "таволож", "тавот", "тавт", "таган", "таджик", "таджич", "таёж", "таз", "таи", "таиланд", "таит", "тайг", "тайм", "таймень", "тайфун", "также", "таки", "такс", "такыр", "талдыч", "талер", "талий", "талисман", "тали", "талл", "талмуд", "талон", "талыш", "тальк", "таль", "тальянк", "там", "тамад", "тамарикс", "тамариск", "тамбур", "тамил", "тамиль", "таможен", "таможн", "тампон", "тамтам", "тангенц", "танго", "тандем", "танец", "танзани", "танзаний", "танин", "тантал", "тантьем", "тап", "тапк", "тапоч", "тарабан", "тарабар", "таракан", "таракаш", "тарант", "тарантас", "тарантелл", "тарантул", "тарань", "тарарам", "тарарах", "тарата", "таратай", "тарбаган", "тарелк", "тарелоч", "тарельч", "тарту", "тархан", "тархун", "татами", "татар", "тату", "тать", "тафт", "тафь", "тахе", "тахи", "тахин", "тахт", "тачанк", "тачеч", "тачк", "тварь", "твар", "твердо", "твердь", "тверёз", "твёрж", "твид", "твист", "твиши", "твой", "творог", "тебенев", "тебенёв", "тебенёк", "тебеньк", "тевтон", "тезавр", "тезаурус", "тёзк", "теин", "тейлор", "текин", "текстиль", "текстур", "телег", "тележ", "телекс", "тайп", "телеут", "факс", "теллур", "грей", "тембр", "темляк", "темляч", "хвой", "темпер", "темперамент", "тенденци", "тендер", "тенёт", "теннис", "тенор", "тент", "теорем", "теорий", "тепер", "теперь", "тёпл", "терат", "терем", "терилен", "термидор", "терминал", "терминаль", "термит", "бигуд", "термозит", "эмисси", "тёрн", "терн", "терпен", "терпент", "терпин", "терпк", "терпуг", "терпч", "терракот", "терр", "терренкур", "террикон", "террор", "терц", "тесём", "тест", "тесть", "тесьм", "тетан", "тетани", "тёт", "тетерев", "тетёр", "тетер", "тетив", "тетра", "тетрад", "тетрадь", "тетр", "теург", "тефтел", "тёш", "тёщ", "тибет", "тигель", "тигр", "тик", "тильбюри", "тильд", "тимол", "тимофе", "тимпан", "тимур", "тин", "типикон", "типун", "тирад", "тире", "тиристор", "титан", "титл", "титуль", "тиун", "тифл", "тифон", "ткемали", "тмин", "тог", "тогда", "того", "тож", "тоже", "той", "токай", "токкат", "толерантн", "толмач", "толокн", "толокон", "толочься", "брю", "толуол", "томагавк", "томас", "томат", "томн", "флюор", "томош", "томпак", "тондо", "тонзилл", "тоннел", "тоннель", "туннель", "ый]", "тонус", "топол", "тополь", "топор", "топчан", "топч", "топь", "торак", "каустик", "торб", "торбас", "тореадор", "тореро", "торец", "тори", "ториц", "торич", "торнадо", "тороват", "торок", "торош", "торс", "торт", "торшер", "торшон", "тост", "тот", "тотализатор", "тоталитар", "тотальн", "тотем", "тотчас", "тохар", "точно", "тпру", "траверз", "траверс", "травертин", "травести", "траектори", "трайбал", "трак", "тракт", "трактат", "трактир", "трактова", "трактов", "траль", "трамблёр", "трамвай", "трамплин", "транзит", "транзитивн", "гресси", "трансильван", "иордан", "транскриб", "транскрип", "трансмисс", "трансмисси", "трансмиттер", "транспарант", "транспир", "транспон", "транспортир", "уран", "трансферт", "трансцендент", "трансъ", "транше", "трап", "трапец", "трапеци", "трапп", "трас", "тратт", "траулер", "траур", "трафарет", "трафареч", "трах", "требух", "требуш", "тревог", "трейлер", "трел", "трель", "трельяж", "трембит", "тремол", "тремоло", "трензель", "тренчик", "трепак", "трепан", "трепанг", "трепел", "трепель", "треска", "трет", "ёво", "угол", "треф", "ёхъ", "треченто", "ёш", "оточ", "триад", "триангул", "триас", "триб", "тривиаль", "триггер", "девять:", "триенале", "тризн", "трико", "трик", "трикотаж", "триктрак", "триллион", "маран", "местр", "трио", "триод", "триодь", "триппер", "птих", "тритон", "триумвир", "триумф", "трифоль", "трихин", "троакар", "троглодит", "трок", "троллей", "тромбон", "флеб", "тромп", "тропарь", "трос", "тростник", "трость", "тротил", "тротуар", "трофей", "трофик", "трофич", "трохе", "трохей", "трох", "троцк", "трубадур", "трувер", "труп", "трупп", "трут", "трутень", "трутн", "трущоб", "трынк", "трю", "трюк", "трюм", "трюмо", "трюфел", "трюфель", "трюх", "тряп", "тряпь", "тсс", "туалет", "туарег", "туб", "тубероз", "тубо", "тув", "тугрик", "ту", "туес", "тужурк", "тузем", "тузлук", "тузлуч", "тук", "тукан", "тулей", "тулов", "тулуз", "тулумбас", "тулуп", "туль", "туляр", "емий", "тумак", "тумб", "тумбл", "тунгус", "туне", "тунец", "тунеяд", "туник", "тунис", "туннел", "тунц", "тупей", "тупик", "турбулентн", "турель", "турец", "туркестан", "туркмен", "турлы", "турмалин", "турман", "турне", "турнепс", "турник", "турникет", "турн", "турнюр", "турок", "турпан", "турсук", "турухтан", "турч", "тустеп", "тут", "тутти", "туф", "туфель", "туфл", "туфт", "туч", "тушеваль", "тушин", "тушканчик", "тушь", "тшш", "тщательн", "тщедуш", "тщеслав", "тщет", "ты", "тоб", "тыкв", "тыков", "тыл", "тыль", "тын", "тырк", "тырл", "тырс", "тысч", "тысяц", "тысячь", "тьфу", "тюбетей", "тюбик", "тюбинг", "тюл", "тюлен", "тюлень", "тюль", "тюльпан", "тюлюлю", "тюрбан", "тюрем", "тюрок", "тюрч", "тюрьм", "тютюн", "тюфяк", "тюфяч", "тюч", "тягч", "тят", "тять", "уби", "ублюдок", "ублюдоч", "убог", "убож", "убо", "убой", "убрус", "вековеч", "увертюр", "увечь", "увещ", "увол", "уволь", "увул", "увы", "углевод", "угле", "угожд", "уголовн", "уголов", "угоразд", "угор", "угорь", "угост", "угощ", "угр", "гробл", "грож", "угрюм", "угу", "удав", "удаль", "удел", "удель", "дивл", "удил", "удмурт", "удовольстви", "удод", "удостовер", "досто", "удруч", "душь", "удэ", "удэге", "удэгей", "уезд", "уже", "ужели", "ужель", "ужли", "ужо", "узбек", "узбеч", "уздень", "ы:", "узк", "бёдр", "очь", "узуальн", "узурп", "узус", "уйгур", "уйм", "уключин", "укромн", "укроп", "крощ", "уксус", "улан", "улей", "лепёт", "улик", "улит", "улиц", "уловк", "улус", "улуч", "ультимат", "ультимо", "ультрамарин", "микроб", "реак", "фарфор", "фиолетов", "ульч", "улюлю", "умбр", "мерщвл", "умлаут", "умляут", "исступлени", "умык", "ундевит", "ундин", "уни", "универ", "универсал", "универсальн", "универс", "уник", "уним", "унион", "унисон", "унитаз", "унитарн", "унтер", "унт", "унци", "уня", "упова", "упо", "упорн", "упраздн", "упред", "упруж", "пряжь", "упырь", "ура", "ураган", "урарт", "урду", "урем", "уретр", "урн", "бил", "урок", "урочищ", "уругва", "уругвай", "урюк", "урюч", "урядник", "уряднич", "усадьб", "усердн", "слажд", "усопш", "успени", "успен", "уссур", "сетречь", "устриц", "устрич", "сугубл", "утварь", "утёс", "утил", "утилитар", "утилитарн", "утк", "утл", "уток", "утоп", "утор", "утюг", "ухар", "ухарь", "ухит", "ухич", "ухищр", "ухмыл", "ухмыль", "хожь", "участв", "участк", "участь", "учред", "учуг", "учуж", "ушат", "шыр", "ушкуй", "ушл", "ущел", "ущель", "ущерб", "ущербл", "уязвл", "фаб", "фабиан", "фабльо", "фаблио", "фабул", "фавн", "фавор", "фавус", "фа", "фазан", "фазис", "фай", "файл", "факел", "факель", "цуг", "факир", "факсимиле", "факсимиль", "фактор", "фактори", "фактур", "факультатив", "фалалей", "фаланг", "фалбал", "фалд", "фалер", "фалл", "фаллос", "фальс", "фаль", "фальцет", "фальшь", "фамили", "фамильярн", "фанабери", "фанариот", "фанат", "фанг", "фанданго", "фанз", "фант", "фантази", "фантасмагор", "фантасмагори", "фантаст", "фантом", "фанфар", "фанфарон", "фарад", "фарадей", "фарандол", "фараон", "фарватер", "фаринг", "фарисей", "фармазон", "гноз", "гност", "пей", "фарс", "фарси", "фартук", "фартуч", "фарц", "фасад", "фасет", "фаск", "фасол", "фасоль", "фат", "фатал", "фаталь", "фатум", "фауст", "фашин", "фаэтон", "фаянс", "февраль", "федер", "феер", "феери", "фейербах", "фейерверк", "фейервероч", "фейхоа", "фекали", "фекаль", "феллах", "фелл", "фельд", "фебель", "фельдъ", "фельетон", "фемин", "фен", "фён", "феникс", "фенол", "феномен", "фено", "фенхель", "ферз", "ферзь", "ферлакур", "фермат", "фермер", "фермуар", "фернамбук", "ферр", "ферт", "ферул", "ферязь", "феск", "фестон", "фетиш", "фетр", "фехт", "фешенебельн", "фе", "фиалк", "фиаско", "лизин", "фиг", "фигаро", "фигляр", "фиде", "фидер", "фьельд", "фиельд", "физиогном", "физиократ", "фиксатуар", "фиксол", "фиксоль", "фикт", "фикус", "фикци", "филармон", "филармони", "филател", "филатели", "филе", "филёнк", "филёноч", "филёнч", "филёр", "филиал", "филиаль", "филигран", "филигрань", "филин", "филиппик", "филиппин", "филипп", "филистер", "филистимл", "филлит", "кладий", "филон", "филумен", "фильдекос", "фильдеперс", "фимиам", "финик", "финики", "финикий", "финифт", "финифть", "финлянд", "финтифлюшк", "фиорд", "фьорд", "фиоритур", "фирм", "фирн", "фисгармони", "фиск", "фискал", "фискаль", "фисташк", "фистул", "фитил", "фитиль", "бентос", "фитюльк", "фифи", "фихте", "фишеч", "фишк", "фишю", "флаг", "флагман", "флакон", "фламанд", "фламенко", "фламинго", "фламинг", "фланел", "фланель", "флан", "фланец", "фланк", "фланц", "флат", "флаттер", "флегм", "флегмон", "флейт", "флейц", "флексий", "флект", "флёр", "флёрдоранж", "флеш", "флешь", "флибустьер", "флигел", "флигель", "флогистон", "флокс", "фломастер", "флоренти", "флорентий", "флоридин", "флукту", "флюкту", "флуоресц", "флюоресц", "флюгарк", "флюгароч", "флюгер", "флюид", "фляг", "фляж", "фогт", "фойе", "фок", "фокстрот", "фолиант", "фолио", "фолликул", "фольг", "фольк", "фольклор", "фольксдойче", "фонарь", "енд", "форвард", "форд", "фордзон", "фордыбач", "форейтор", "форел", "форель", "форзац", "форинт", "формуляр", "форсунк", "форсуноч", "фортель", "фортепиан", "фортепьян", "фортепиано", "фортепьяно", "форточк", "форточ", "фортун", "форшмак", "форштадт", "фосген", "фоск", "есц", "фот", "проек", "топо", "фотофиниш", "эмульс", "этюд", "фофан", "фрагмент", "фраер", "фрак", "фраки", "фракий", "фрамуг", "фрамуж", "франк", "франклин", "франко", "франц", "франциск", "фрапп", "фратр", "фрау", "фрач", "фрегат", "фрейд", "фрейлейн", "фрейлин", "фрейм", "фрекен", "френ", "френч", "фреон", "фреск", "фри", "фривольн", "фригидн", "фриги", "фригий", "фрикадельк", "фрикасе", "фрик", "фристайл", "фритюр", "фриш", "фронд", "фронтон", "фру", "фтизи", "фуганок", "фуганоч", "фугас", "фугато", "фужер", "фузе", "фузи", "фук", "фукс", "фукси", "фуле", "фуляр", "фундамент", "фунд", "фундук", "фуникулёр", "фур", "фуражеч", "фуражк", "фури", "фурк", "фурнитур", "фурор", "фурункул", "фурч", "фурье", "р", "фут", "футляр", "футур", "фуфаеч", "фуфай", "фу:", "фуэте", "фьють", "фэ", "бэ", "эр", "фюзеляж", "хабанер", "хабар", "хавбек", "хавронь", "хав", "хадж", "хаджи", "хаз", "хазар", "хай", "хайл", "хакас", "хаки", "халд", "халдей", "халиф", "халтур", "халуп", "халцедон", "халяв", "хамелеон", "хамит", "хамовн", "хамь", "ханж", "ханты", "ханум", "ханурик", "хаос", "хаот", "харакири", "харатей", "харать", "хариус", "хар", "харти", "харчо", "хасид", "хат", "хауз", "хауса", "хафиз", "хахаль", "ньк", "хачапури", "хвать", "хворост", "хворь", "хвощ", "хво", "хевсур", "хедер", "хек", "хем", "сорбци", "херес", "херувим", "хетт", "хеш", "хибар", "хив", "хиджр", "хижин", "химер", "химк", "хинди", "хинду", "хинкали", "хиппи", "хипп", "хиро", "мант", "хитин", "хитон", "хламид", "хламидомонад", "хламь", "хлев", "хлестаков", "хлещ", "хлесть", "хлобыст", "хлопец", "хлопк", "хлопок", "хлопоч", "хлопч", "фенон", "филль", "пикр", "хлуп", "хлупь", "хлыщ", "хлюст", "хлябь", "хляск", "хляс", "хляст", "хлястик", "хмарь", "хмурь", "хмы", "хмырь", "хн", "хобби", "я:", "ходж", "хокке", "хоккей", "хокку", "холерич", "холе", "холк", "холл", "холоп", "холст", "холуй", "холщ", "холяв", "хомяк", "хомяч", "хонинг", "хоп", "хоппер", "хорал", "хораль", "хоре", "хорей", "хорёк", "ямб", "хором", "хорт", "хоругв", "хоругвь", "хорь", "хорьк", "хорьч", "хоть", "хотя", "хохлом", "хохм", "хохол", "хохо", "зда", "хребт", "хрен", "хрестоматий", "хрестомати", "хризантем", "хриз", "праз", "тил", "хрум", "хруп", "хрустал", "хрусталь", "хрущ", "хрущёв", "хрыч", "хряк", "хряп", "хряск", "хряс", "хряст", "хрясть", "хрясь", "хряч", "хулахуп", "хулигань", "хунвейбин", "хунт", "хунхуз", "хурал", "хурм", "хутор", "цанг", "цапл", "цапф", "царь", "цац", "цевк", "цевоч", "цевь", "цедр", "цезар", "цез", "цезур", "цейлон", "цейс", "цейтнот", "целков", "целл", "фан", "целлул", "целомудр", "цемянк", "цент", "центавр", "центнер", "фуж", "цео", "цепь", "цербер", "церебр", "спинальн", "церемони", "церемоний", "цер", "церкв", "церковь", "цесар", "цесарь", "цеце", "циан", "цибул", "цивил", "цивиль", "цигарк", "цигейк", "цидул", "цикад", "циклоп", "цикорий", "цикор", "цимбал", "цинандали", "циновк", "циновоч", "цирк", "циркон", "циркуляр", "циркум", "циркумфлекс", "цирр", "цирюль", "цитадель", "цитр", "цитрус", "циферблат", "цифир", "цифирь", "цицеро", "цо", "цоколь", "цоп", "цук", "цукат", "цунами", "цып", "цыпл", "цыц", "чабан", "чабер", "чабёр", "чабр", "чавыч", "чагатай", "чадр", "вые", "чайк", "чакан", "чалм", "чао", "чапыг", "чапыж", "чардаш", "чарльстон", "чартер", "чарт", "часовен", "часовн", "часом", "частик", "частн", "частух", "частушеч", "частушк", "чатал", "чать", "чаус", "чауш", "чахотк", "чахоточ", "чахохбили", "чач", "чачван", "чаш", "чебак", "чебот", "чёбот", "чебурах", "чебураш", "чебурек", "чебуреч", "чеддер", "чек", "чекмарь", "чекмень", "чекуш", "чёлк", "чёлн", "челн", "чел", "чёлоч", "челюсть", "челяд", "челядь", "чем", "чембало", "чембур", "чемер", "чемодан", "чемпион", "чепан", "чепец", "чепрак", "чепрач", "чепух", "чепч", "червл", "червон", "червь", "чердак", "чердач", "черевик", "черевич", "черёд", "черемис", "черёмух", "черёмуш", "черемш", "черенок", "череноч", "черепах", "черепаш", "черепит", "черепиц", "черепич", "черепок", "черес", "чересчур", "черешен", "черешн", "черешок", "черешч", "черкас", "черкес", "черкеш", "чернил", "черниль", "быль", "чёрств", "чёрт", "чертог", "чертополох", "чеснок", "чесноч", "честер", "чесуч", "четверг", "ерть", "чётч", "четь", "чех", "чехард", "чехол", "чехоль", "чечевиц", "чечевич", "чечен", "чечет", "чечёт", "чеш", "чешу", "чианури", "чибис", "чиви", "чигирь", "чиж", "чизель", "чий", "чилиг", "чили", "чилий", "чилим", "чиляг", "чинар", "чинквеченто", "почит", "чипс", "чирей", "чир", "чирок", "чифир", "чифирь", "чихирь", "чичероне", "чо", "чон", "чонгури", "чопорн", "чох", "чохом", "чрев", "чред", "чрезвычайн", "чтоб", "чуб", "чубар", "чубук", "чуваш", "чувяк", "чувяч", "чугун", "чудь", "чуеч", "чуйк", "чукот", "чукч", "чулан", "чулк", "чумаз", "чумак", "чумац", "чумиз", "чун", "чурбак", "чурбан", "чурбач", "чурек", "чурк", "чуроч", "чурчхел", "чут", "чухн", "чухон", "чучел", "чучель", "чушк", "чушь", "шабёр", "шабер", "шабли", "шаблон", "шавк", "шагрен", "шагрень", "шаеч", "шайк", "шайтан", "шакал", "шаланд", "шалаш", "шалбер", "шале", "шалман", "шалопай", "шалопут", "шалфей", "шаль", "шальвар", "шаман", "шаматон", "шамот", "шампан", "шампиньон", "шампунь", "шампур", "шандал", "шанеж", "шанец", "шансонетк", "шансонье", "шантаж", "шантрап", "шанцев", "шаньг", "шапито", "шапк", "шапоч", "шапч", "шарабан", "шарад", "шарах", "шариат", "шаривари", "шарлатан", "шарм", "шарманк", "шарман", "шаровар", "шаров", "шаромыг", "шарошеч", "шарошк", "шартрез", "шарф", "шассе", "шасси", "шасть", "шатен", "шатёр", "шатр", "шаф", "шафран", "шахер", "шашеч", "шаш", "шашк", "шашлык", "шашлыч", "шашн", "швабр", "шваль", "шварк", "швах", "швед", "швейцар", "швеллер", "шворень", "шкворень", "шебарш", "шебут", "шевалье", "шевелюр", "шевинг", "шевиот", "шевро", "шевр", "шеврон", "шедевр", "шезлонг", "шейк", "шейх", "шелк", "шеллак", "шеллач", "шеллинг", "шелох", "шелух", "шепел", "шепот", "шептал", "шепч", "шербет", "шеренг", "шеренож", "шериф", "шероховат", "шерп", "шерри", "шерф", "шершав", "шершень", "шершн", "шестерён", "шестерн", "шесть", "шибк", "шибч", "шиворот", "шиз", "шизофрен", "шик", "шикарн", "шиллинг", "шил", "шимми", "шимпанзе", "шинел", "шинель", "шинк", "шинков", "шинок", "шиншилл", "шиньон", "ширм", "широч", "шифон", "шифоньер", "шихт", "шиш", "шишеч", "шишк", "шкалик", "шкаль", "шканеч", "шканц", "шкатулк", "шкатулоч", "шкаф", "шквал", "шкваль", "шквар", "шкет", "шкив", "шкот", "шкур", "шлаг", "шлагбаум", "портланд", "шлам", "шланг", "шле", "шлей", "шлейф", "шлёнд", "цы", "шлеп", "шлих", "шлиц", "шлык", "шлыч", "шлюп", "шлягер", "шлямбур", "шлях", "шляхет", "шляхт", "шматок", "шмел", "шмель", "шмотк", "шмяк", "шнапс", "шнеллер", "шницель", "шницел", "шовин", "шоколад", "шомпол", "шомполь", "шорк", "шорох", "шорт", "шосс", "шотланд", "шоу", "шоф", "шпаг", "шпагат", "шпаж", "шпак", "шпал", "шпалер", "шпан", "шпангоут", "шпандырь", "шпаргал", "шпатель", "шпатл", "шпик", "шпилеч", "шпильк", "шпинат", "шпингалет", "шпинель", "шпион", "шпиц", "шпицрутен", "шплинт", "шприц", "шпрот", "шпул", "шпуль", "шпур", "шпын", "шрам", "шрапнель", "шредер", "шрифт", "штабел", "штабель", "штакетник", "штал", "штамб", "штамм", "штанген", "штандарт", "штапел", "штапель", "штатив", "штафирк", "штейгер", "штейн", "штекер", "штемпель", "штепсель", "штепсел", "штиблет", "штиль", "штифт", "штольн", "штопор", "шторм", "штос", "штрейк", "брехер", "штрек", "штук", "штукар", "штукарь", "штунд", "штурвал", "штурваль", "штурм", "штуцер", "штык", "штыр", "штырь", "шуан", "шуг", "шугай", "шулер", "шумер", "шумовк", "шурин", "шурь", "шурова", "шуров", "шурп", "шуруп", "шурф", "шуст", "шустр", "шушер", "шушун", "шхун", "щавел", "щавель", "щ", "щебеч", "щебн", "щегл", "щёголь", "щеголь", "щек", "щеколд", "щёкот", "щекоч", "щёл", "щёлок", "щёлоч", "щёлочь", "щелч", "щель", "щён", "щепетильн", "щепот", "щепоть", "щёточ", "щиколотк", "щипец", "щипл", "щиповк", "щипц", "щириц", "щук", "щупл", "щучина", "эбен", "эбонит", "эбули", "эва", "эвак", "эвапор", "эвдемон", "эвен", "эвенк", "эвкалипт", "эвклаз", "эволюци", "эврика", "эвристик", "эвристич", "эв", "эвтектик", "эвтектич", "эвфем", "эвфон", "эвфу", "эгалитар", "эге", "эгид", "эго", "эгрет", "эдак", "эдельвейс", "эдем", "эдици", "эжек", "эзоп", "эзофаг", "эй", "эйдет", "эйнштейн", "эйфори", "эк", "экарте", "эквадор", "эквилибр", "экви", "экзальт", "экзарх", "экзегез", "экзегет", "экзеку", "экзем", "экземпляр", "экзерсис", "экзистенци", "экзо", "экз", "экзот", "токсин", "экивок", "экип", "эклект", "эклер", "эклиптик", "эклиптич", "эконо", "экседр", "эксик", "эксит", "экскав", "экскремент", "экскурс", "экслибрис", "экспанс", "экспед", "эксперимент", "эксперт", "экспир", "эксплик", "эксплиц", "эксплоз", "экспозе", "экспози", "экспозици", "экспон", "экспресс", "экспромт", "экспропри", "экссудат", "экссудац", "экстаз", "экстат", "экстемпорале", "экстемпорали", "экстерн", "экстер", "цепт", "рецепц", "экстирпаци", "экстр", "экстравагантн", "экстраг", "экстрадици", "экстракт", "экстрак", "сенс", "экстрем", "экстренн", "эксфолиат", "эксфолиац", "эксцентр", "эксцесс", "эктаз", "экто", "эктоп", "экумен", "экю", "эласт", "элегантн", "элег", "электрик", "лебёдк", "ицин", "распредел", "стрик", "тельфер", "элементарн", "элениум", "элеутер", "элизий", "элизи", "эликсир", "элимин", "эллинг", "эллипс", "эллипсис", "элоквент", "элоквенц", "эль", "эльдорадо", "эльзас", "эльф", "элюви", "элювий", "элю", "элятив", "эман", "эмансип", "эмбарго", "эмблем", "эмбол", "эмбри", "мбри", "эмир", "эмиссар", "эмит", "эмиттер", "эм", "эммер", "эмпирей", "эмпир", "эмпири", "эму", "эмульси", "эмфаз", "эмфат", "эмфизем", "энанти", "эндем", "мит", "энд", "телий", "энео", "энерги", "энигмат", "еский", "дэ", "клитич", "птоз", "энто", "энтом", "энтузиазм", "энтузиаст", "энциклопед", "энциклопеди", "эоз", "эо", "эол", "эпат", "эпендим", "эпентез", "эпентет", "эпигон", "эпиграмм", "эпиграф", "эпидеми", "эпи", "эпизод", "зоот", "эпикуре", "эпикурей", "эпилепс", "эпилепт", "эпистол", "эпистроф", "эпиталам", "эпитафи", "эпители", "эпителий", "эпитет", "эпоксидн", "эполет", "эпонж", "эпопе", "эпос", "эпох", "эрб", "эргат", "эрго", "эре", "эрег", "эрек", "эрзац", "эрз", "эритр", "эрод", "эрот", "эруд", "эрупт", "эрупц", "эрцгерцог", "эскадр", "эскадриль", "эскалад", "эскалатор", "эскалаци", "эскалоп", "эскамот", "эскиз", "эскимо", "эскимос", "эскорт", "эскудо", "эскулап", "эспад", "эспадон", "эспадрон", "эспандер", "эспаньолк", "эспарто", "эсперант", "эсперанто", "эссе", "эст", "эстакад", "эстамп", "эстафет", "эстези", "эстокад", "эстомп", "эстон", "эстрагон", "эстрад", "этажерк", "эталон", "этик", "этиол", "эти", "это", "этот", "этруск", "этрус", "эф", "эфедр", "эфемер", "эфенди", "эфес", "эфиоп", "эхин", "эшафот", "юань", "юбил", "юбк", "юбоч", "юбч", "ювелир", "юдоль", "юд", "юз", "юкагир", "юкк", "юкол", "юмор", "юнак", "юнац", "юнг", "юниор", "юнкер", "юнкерс", "юнкерь", "нат", "юньнань", "юпитер", "юрид", "юрис", "пруденци", "юрт", "юс", "юст", "юстици", "юфт", "юфть", "яблок", "яблон", "яблонь", "яблоч", "явор", "ягд", "ягел", "ягель", "ягноб", "ягодиц", "ягодич", "ягуар", "ядрен", "ядрён", "язь", "яиц", "яич", "яйл", "яйц", "яко", "якобин", "якобы", "якорь", "якут", "якша", "ял", "ялт", "яма", "ямай", "январ", "январь", "янки", "янсен", "янтар", "янтарь", "янычар", "япон", "яранг", "ярд", "ярк", "ярлык", "ярлыч", "ярмарк", "ярм", "яров", "ярослав", "яруг", "ярч", "ярыг", "ярыж", "ярь", "ясак", "ясач", "ясель", "ясен", "ясень", "ясмин", "ясочк", "яспис", "яств", "ястреб", "ястык", "ястыч", "ясырь", "ятаган", "ятрыш", "ять", "яфетид", "яфет", "яхонт", "яче", "ячмен", "ячмень", "ячнев", "яшм", "ящериц", "ящерич", "ящик", "ящич", "ящур"]);
        static postfix = new $mol_spell_morphs(["а", "ива", "ова", "ствова", "ествова", "изова", "ирова", "изирова", "ства", "ка", "яка", "ича", "нича", "б", "об", "ытьб", "в", "ав", "ощав", "ев", "ив", "лив", "овлив", "елив", "члив", "чив", "ов", "овь", "тв", "ств", "овств", "еств", "инств", "тельств", "ляв", "аг", "инг", "ург", "уг", "ыг", "д", "ад", "иад", "арад", "оид", "ядь", "е", "ое", "ые", "аж", "ёж", "ёжь", "из", "оз", "и", "ки", "очки", "ушки", "нюшки", "унюшки", "еньки", "ошеньки", "охоньки", "ами", "ками", "ай", "атай", "o", "ей", "алей", "ачей", "ий", "овий", "стви", "ни", "ани", "овани", "ени", "арий", "ери", "орий", "ти", "ци", "аци", "изаци", "ици", "нци", "енци", "ачий", "ичий", "a", "ой", "кой", "уй", "тяй", "к", "ак", "чак", "авк", "овк", "ловк", "анек", "енек", "онек", "ышек", "ежк", "ик", "евик", "ник", "овник", "еник", "ейник", "арник", "атник", "льник", "истик", "чик", "щик", "овщик", "льщик", "айк", "ейк", "лк", "анк", "инк", "онк", "унк", "ок", "онок", "чонок", "ушок", "ерк", "урк", "ск", "вск", "евск", "овск", "еск", "ческ", "ическ", "истичес", "лезск", "эзск", "йск", "ейск", "ийск", "нск", "анск", "ианск", "енск", "инск", "унск", "тельск", "етк", "отк", "ютк", "ук", "чук", "ацк", "ецк", "чк", "ачк", "ечк", "ичка", "очк", "шк", "ашк", "ёшк", "ишк", "ушк", "ышк", "ык", "ульк", "усеньк", "ошеньк", "оньк", "охоньк", "юк", "як", "няк", "ль", "л", "ал", "аль", "овал", "ёл", "ель", "ел", "тель", "итель", "ил", "ол", "оль", "ул", "ыль", "изм", "онизм", "им", "ом", "м", "ком", "иком", "ышком", "няком", "уном", "ишом", "ым", "нь", "н", "ан", "уган", "иан", "овиан", "лан", "ман", "ебн", "обн", "евн", "ивн", "овн", "ень", "ен", "ён", "мен", "смен", "яжн", "знь", "езн", "изн", "овизн", "озн", "иозн", "ин", "бин", "овин", "лин", "елин", "нин", "анин", "жан", "чан", "овчан", "ичан", "инчан", "тян", "итян", "атин", "чин", "щин", "овщин", "льщин", "йн", "ейн", "нн", "анн", "ованн", "ированн", "енн", "ённ", "овенн", "ственн", "менн", "онн", "ионн", "ационн", "он", "арн", "орн", "сн", "снь", "отн", "ятн", "ун", "ичн", "иничн", "очн", "шн", "ашн", "ишн", "ышн", "льн", "альн", "идальн", "иальн", "ональн", "уальн", "ельн", "абельн", "ибельн", "тельн", "ительн", "ильн", "ынь", "иян", "о", "ко", "очко", "енько", "ошенько", "онько", "охонько", "но", "овато", "ар", "арь", "атарь", "ер", "p", "онер", "мейстер", "up", "ор", "вор", "тор", "атор", "итор", "ур", "тур", "amyp", "итур", "ырь", "яр", "с", "ис", "анс", "есс", "ус", "ариус", "ть", "т", "am", "ат", "оват", "иат", "дцать", "надцать", "чат", "евт", "ет", "итет", "ит", "овит", "нит", "инит", "ант", "ент", "мент", "амент", "емент", "от", "оть", "иот", "аст", "ист", "ость", "имость", "ность", "нность", "енность", "тость", "ут", "у", "ку", "еньку", "оньку", "ому", "ну", "ану", "оту", "х", "ах", "ках", "их", "ох", "ух", "ц", "ец", "авец", "овец", "лец", "омец", "нец", "енец", "инец", "иц", "овиц", "лиц", "ниц", "овниц", "ениц", "атниц", "униц", "ичниц", "очниц", "ешниц", "льниц", "тельниц", "льц", "ч", "ач", "ич", "евич", "ович", "нич", "уч", "ыч", "ш", "аш", "иш", "айш", "ейш", "ошь", "ош", "уш", "оныш", "ащ", "ищ", "бищ", "овищ", "лищ", "ущ", "еющ", "ы", "жды", "ажды", "ою", "ую", "остью", "мя", "ее", "ше", "учи", "ши", "вши", "вш", "ёх", "ся", "сь", "те", "ть"]);
        static foot = new $mol_spell_morphs(['а', 'ам', 'ами', 'ас', 'am', 'ax', 'ая', 'е', 'её', 'ей', 'ем', 'еми', 'емя', 'ex', 'ею', 'ёт', 'ёте', 'ёх', 'ёшь', 'и', 'ие', 'ий', 'им', 'ими', 'ит', 'ите', 'их', 'ишь', 'ию', 'м', 'ми', 'мя', 'о', 'ов', 'ого', 'ое', 'оё', 'ой', 'ом', 'ому', 'ою', 'cm', 'у', 'ум', 'умя', 'ут', 'ух', 'ую', 'шь']);
    }
    $.$mol_spell_ru = $mol_spell_ru;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_spell_any extends Object {
        static test(word) {
            return $mol_spell_ru.test(word);
        }
    }
    $.$mol_spell_any = $mol_spell_any;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_spell_demo extends $.$mol_spell_demo {
            report() {
                const wrong = [];
                const words = new Set(this.article().toLowerCase().match(/\p{Letter}{2,}/ug));
                for (const word of words) {
                    if ($mol_spell_any.test(word))
                        continue;
                    wrong.push(word);
                }
                return wrong.join('\n');
            }
        }
        __decorate([
            $mol_mem
        ], $mol_spell_demo.prototype, "report", null);
        $$.$mol_spell_demo = $mol_spell_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/spell/demo/demo.view.css", "[mol_spell_demo_report] {\n\tcolor: var(--mol_theme_focus);\n}\n");
})($ || ($ = {}));

;
	($.$mol_stack_demo) = class $mol_stack_demo extends ($.$mol_example_small) {
		Back(){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ("https://cataas.com/cat");
			return obj;
		}
		Front(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["❤🧡💛💚💙💜🤎🖤"]);
			return obj;
		}
		Collage(){
			const obj = new this.$.$mol_stack();
			(obj.sub) = () => ([(this.Back()), (this.Front())]);
			return obj;
		}
		sub(){
			return [(this.Collage())];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_stack_demo.prototype), "Back"));
	($mol_mem(($.$mol_stack_demo.prototype), "Front"));
	($mol_mem(($.$mol_stack_demo.prototype), "Collage"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/stack/demo/demo.view.css", "[mol_stack_demo_front] {\n\tmargin: auto;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_string_demo) = class $mol_string_demo extends ($.$mol_example_small) {
		name(next){
			if(next !== undefined) return next;
			return "";
		}
		Simple(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.name(next)));
			return obj;
		}
		Hint(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ("Batman");
			(obj.value) = (next) => ((this.name(next)));
			return obj;
		}
		broken(next){
			if(next !== undefined) return next;
			return "";
		}
		Broken(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ("Broken");
			(obj.value) = (next) => ((this.broken(next)));
			return obj;
		}
		name2(next){
			if(next !== undefined) return next;
			return "Jocker";
		}
		Filled(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.name2(next)));
			return obj;
		}
		Disabled(){
			const obj = new this.$.$mol_string();
			(obj.disabled) = () => (true);
			(obj.value) = (next) => ((this.name2(next)));
			return obj;
		}
		Button(){
			const obj = new this.$.$mol_string_button();
			(obj.value) = (next) => ((this.name2(next)));
			return obj;
		}
		title(){
			return "String input field in various states";
		}
		sub(){
			return [
				(this.Simple()), 
				(this.Hint()), 
				(this.Broken()), 
				(this.Filled()), 
				(this.Disabled()), 
				(this.Button())
			];
		}
		tags(){
			return [
				"input", 
				"text", 
				"field"
			];
		}
		aspects(){
			return ["Widget/Control", "Type/String"];
		}
	};
	($mol_mem(($.$mol_string_demo.prototype), "name"));
	($mol_mem(($.$mol_string_demo.prototype), "Simple"));
	($mol_mem(($.$mol_string_demo.prototype), "Hint"));
	($mol_mem(($.$mol_string_demo.prototype), "broken"));
	($mol_mem(($.$mol_string_demo.prototype), "Broken"));
	($mol_mem(($.$mol_string_demo.prototype), "name2"));
	($mol_mem(($.$mol_string_demo.prototype), "Filled"));
	($mol_mem(($.$mol_string_demo.prototype), "Disabled"));
	($mol_mem(($.$mol_string_demo.prototype), "Button"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_string_demo extends $.$mol_string_demo {
            broken(next) {
                return $mol_fail(new Error('Demo error'));
            }
        }
        $$.$mol_string_demo = $mol_string_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_switch_demo) = class $mol_switch_demo extends ($.$mol_example) {
		color(next){
			if(next !== undefined) return next;
			return "red";
		}
		option_red(){
			return "Red";
		}
		option_green(){
			return "Green";
		}
		option_blue(){
			return "Blue";
		}
		option_infernal(){
			return "Color which can not be displayed on your device";
		}
		Enabled(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.color(next)));
			(obj.options) = () => ({
				"red": (this.option_red()), 
				"green": (this.option_green()), 
				"blue": (this.option_blue()), 
				"infernal": (this.option_infernal())
			});
			return obj;
		}
		Enabled_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Read/Write");
			(obj.Content) = () => ((this.Enabled()));
			return obj;
		}
		Disabled(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.color(next)));
			(obj.enabled) = () => (false);
			(obj.options) = () => ({
				"red": (this.option_red()), 
				"green": (this.option_green()), 
				"blue": (this.option_blue())
			});
			return obj;
		}
		Disabled_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Read only");
			(obj.Content) = () => ((this.Disabled()));
			return obj;
		}
		Demo_items(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([(this.Enabled_labeler()), (this.Disabled_labeler())]);
			return obj;
		}
		title(){
			return "Color switchers in various state";
		}
		sub(){
			return [(this.Demo_items())];
		}
		tags(){
			return [
				"option", 
				"group", 
				"radio"
			];
		}
		aspects(){
			return ["Widget/Control"];
		}
	};
	($mol_mem(($.$mol_switch_demo.prototype), "color"));
	($mol_mem(($.$mol_switch_demo.prototype), "Enabled"));
	($mol_mem(($.$mol_switch_demo.prototype), "Enabled_labeler"));
	($mol_mem(($.$mol_switch_demo.prototype), "Disabled"));
	($mol_mem(($.$mol_switch_demo.prototype), "Disabled_labeler"));
	($mol_mem(($.$mol_switch_demo.prototype), "Demo_items"));


;
"use strict";

;
	($.$mol_tag_tree_demo) = class $mol_tag_tree_demo extends ($.$mol_example) {
		item_title(id){
			return "";
		}
		Item(id){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.item_title(id)));
			return obj;
		}
		Tree(){
			const obj = new this.$.$mol_tag_tree();
			(obj.Item) = (id) => ((this.Item(id)));
			(obj.levels_expanded) = () => (0);
			(obj.ids_tags) = () => ({
				"Batman": [
					"Side/Good", 
					"Universe/DC", 
					"Sex/Male"
				], 
				"Superman": [
					"Side/Good", 
					"Universe/DC", 
					"Sex/Male"
				], 
				"Aquaman": [
					"Side/Good", 
					"Universe/DC", 
					"Sex/Male"
				], 
				"Flash": [
					"Side/Good", 
					"Universe/DC", 
					"Sex/Male"
				], 
				"Jocker": [
					"Side/Bad", 
					"Universe/DC", 
					"Sex/Male"
				], 
				"Deadshot": [
					"Side/Bad", 
					"Universe/DC", 
					"Sex/Male"
				], 
				"Ironman": [
					"Side/Good", 
					"Universe/Marvel", 
					"Sex/Male"
				], 
				"Hulk": [
					"Side/Good", 
					"Universe/Marvel", 
					"Sex/Male"
				], 
				"Thor": [
					"Side/Good", 
					"Universe/Marvel", 
					"Sex/Male"
				], 
				"Spiderman": [
					"Side/Good", 
					"Universe/Marvel", 
					"Sex/Male"
				], 
				"Thanos": [
					"Side/Bad", 
					"Universe/Marvel", 
					"Sex/Male"
				], 
				"Locky": [
					"Side/Bad", 
					"Universe/Marvel", 
					"Sex/Male"
				], 
				"Harley Quinn": [
					"Side/Bad", 
					"Universe/DC", 
					"Sex/Female"
				], 
				"Wonder Woman": [
					"Side/Good", 
					"Universe/DC", 
					"Sex/Female"
				], 
				"Hela": [
					"Side/Bad", 
					"Universe/Marvel", 
					"Sex/Female"
				]
			});
			return obj;
		}
		title(){
			return "Autoatic tag tree";
		}
		sub(){
			return [(this.Tree())];
		}
		tags(){
			return ["taxonomy", "menu"];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem_key(($.$mol_tag_tree_demo.prototype), "Item"));
	($mol_mem(($.$mol_tag_tree_demo.prototype), "Tree"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_tag_tree_demo extends $.$mol_tag_tree_demo {
            item_title(path) {
                return path.at(-1);
            }
        }
        $$.$mol_tag_tree_demo = $mol_tag_tree_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_text_code_demo) = class $mol_text_code_demo extends ($.$mol_example_small) {
		source(){
			return "";
		}
		syntax(){
			return null;
		}
		uri_resolve(id){
			return "";
		}
		Text(){
			const obj = new this.$.$mol_text_code();
			(obj.sidebar_showed) = () => (true);
			(obj.text) = () => ((this.source()));
			(obj.syntax) = () => ((this.syntax()));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			return obj;
		}
		title(){
			return "Markdow visualization example";
		}
		sub(){
			return [(this.Text())];
		}
		tags(){
			return [
				"text", 
				"code", 
				"syntax highlighting"
			];
		}
		aspects(){
			return ["Widget/Text", "Type/String"];
		}
	};
	($mol_mem(($.$mol_text_code_demo.prototype), "Text"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_text_code_demo extends $.$mol_text_code_demo {
            source() {
                return this.$.$mol_fetch.text('web.js');
            }
            syntax() {
                return new $mol_syntax2({
                    ...this.$.$mol_syntax2_md_code.lexems,
                    'code-link': /\$\w+(?:_\w+)*/,
                });
            }
            uri_resolve(uri) {
                return `https://github.com/search?l=Markdown&q=org%3Ahyoo-ru+${encodeURIComponent(uri)}&type=Code`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_text_code_demo.prototype, "source", null);
        __decorate([
            $mol_mem
        ], $mol_text_code_demo.prototype, "syntax", null);
        $$.$mol_text_code_demo = $mol_text_code_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_text_demo) = class $mol_text_demo extends ($.$mol_example_large) {
		search(next){
			if(next !== undefined) return next;
			return "";
		}
		Search(){
			const obj = new this.$.$mol_search_jumper();
			(obj.query) = (next) => ((this.search(next)));
			(obj.Root) = () => ((this.View()));
			return obj;
		}
		Edit_icon(){
			const obj = new this.$.$mol_icon_pencil();
			return obj;
		}
		Edit(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ({"edit": ""});
			(obj.sub) = () => ([(this.Edit_icon())]);
			return obj;
		}
		View(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.text()));
			(obj.highlight) = () => ((this.search()));
			return obj;
		}
		View_page(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("Output");
			(obj.tools) = () => ([(this.Search()), (this.Edit())]);
			(obj.body) = () => ([(this.View())]);
			return obj;
		}
		Close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Close(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ({"edit": null});
			(obj.sub) = () => ([(this.Close_icon())]);
			return obj;
		}
		text(next){
			if(next !== undefined) return next;
			return "# Header level 1\n## Header level 2\n### Header level 3\n#### Header level 4\n##### Header level 5\n###### Header level 6\n\n# List\n\n- first item\n  1. first of first item\n  2. second of first item\n  > quote as item\n  > > quote in quote\n  > + list inside quote\n- second item\n\n# Inline Formatting\n\n- Some **strong text**\n- Some *emphasis text*\n- Some ~~deleted text~~\n- Some `short_code(\"foo\")` & ```long_code(`${bar}`)```\n- Some \"quoted text\"\n\n# Hyper Link\n\n* Some [link *with* title](http://example.org).\n* Auto http link: http://mol.hyoo.ru, (http://mol.hyoo.ru), http://mol.hyoo.ru.\n* Some [*unsafe* link](somescript:document.cookie).\n\n# Embedding\n\n## Image\n![](https://mol.hyoo.ru/mol/logo/logo.svg)\n\n## Video\n![](https://www.youtube.com/embed/XNt7DEkisKg)\n\n## Site\n![](https://life.hyoo.ru)\n\n## Inline\n\n- Badge: [![Deploy](https://github.com/hyoo-ru/mam_mol/actions/workflows/deploy.yml/badge.svg)](https://github.com/hyoo-ru/mam_mol/actions/workflows/deploy.yml)\n- Broken images: ![*Alternative* text](https://example.org/404.png) ![](https://example.org/404.svg)\n- Unsafe images: ![*Alternative* text](somescript:document.cookie) ![](somescript:document.cookie)\n\n# Preformatted Code\n\n```js\nclass SomeCode {\n\twith_prolog: true\n}\n```\n\n\tclass SomeCode {\n\t\twith_indents: true\n\t}\n\n# Table\n\n|           | ~~Column~~ 1 | ~~Column~~ 2 | ~~Column~~ 3\n|-----------|--------------|--------------|-------------\n| ~~Row~~ 1 | ~~Cell~~ 1x1 | ~~Cell~~ 2x1 | ~~Cell~~ 3x1\n| ~~Row~~ 2 | ~~Cell~~ 1x2 | ~~Cell~~ 2x2 | ~~Cell~~ 3x2\n| ~~Row~~ 3 | ~~Cell~~ 1x3 | ~~Cell~~ 2x3 | ~~Cell~~ 3x3\n| ~~Row~~ 4 | ~~Cell~~ 1x4 | ~~Cell~~ 2x4 | ~~Cell~~ 3x4\n| ~~Row~~ 5 | ~~Cell~~ 1x5 | ~~Cell~~ 2x5 | ~~Cell~~ 3x5\n| ~~Row~~ 6 | ~~Cell~~ 1x6 | ~~Cell~~ 2x6 | ~~Cell~~ 3x6\n| ~~Row~~ 7 | ~~Cell~~ 1x7 | ~~Cell~~ 2x7 | ~~Cell~~ 3x7\n| ~~Row~~ 8 | ~~Cell~~ 1x8 | ~~Cell~~ 2x8 | ~~Cell~~ 3x8\n| ~~Row~~ 9 | ~~Cell~~ 1x9 | ~~Cell~~ 2x9 | ~~Cell~~ 3x9\n";
		}
		Code(){
			const obj = new this.$.$mol_textarea();
			(obj.value) = (next) => ((this.text(next)));
			return obj;
		}
		Code_page(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("Input");
			(obj.tools) = () => ([(this.Close())]);
			(obj.body) = () => ([(this.Code())]);
			return obj;
		}
		pages(){
			return [(this.View_page()), (this.Code_page())];
		}
		Book(){
			const obj = new this.$.$mol_book2();
			(obj.Placeholder) = () => (null);
			(obj.pages) = () => ((this.pages()));
			return obj;
		}
		title(){
			return "Markdown visualization example";
		}
		sub(){
			return [(this.Book())];
		}
		tags(){
			return ["markdown", "marked"];
		}
		aspects(){
			return ["Widget/Text", "Type/String"];
		}
	};
	($mol_mem(($.$mol_text_demo.prototype), "search"));
	($mol_mem(($.$mol_text_demo.prototype), "Search"));
	($mol_mem(($.$mol_text_demo.prototype), "Edit_icon"));
	($mol_mem(($.$mol_text_demo.prototype), "Edit"));
	($mol_mem(($.$mol_text_demo.prototype), "View"));
	($mol_mem(($.$mol_text_demo.prototype), "View_page"));
	($mol_mem(($.$mol_text_demo.prototype), "Close_icon"));
	($mol_mem(($.$mol_text_demo.prototype), "Close"));
	($mol_mem(($.$mol_text_demo.prototype), "text"));
	($mol_mem(($.$mol_text_demo.prototype), "Code"));
	($mol_mem(($.$mol_text_demo.prototype), "Code_page"));
	($mol_mem(($.$mol_text_demo.prototype), "Book"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_text_demo extends $.$mol_text_demo {
            edit() {
                return this.$.$mol_state_arg.value('edit') !== null;
            }
            pages() {
                return [
                    this.View_page(),
                    ...this.edit() ? [this.Code_page()] : [],
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_text_demo.prototype, "pages", null);
        $$.$mol_text_demo = $mol_text_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/text/demo/demo.view.css", "[mol_text_demo_view_page] {\n\tflex: 1 0 40rem;\n}\n\n[mol_text_demo_code_page] {\n\tflex: 0 0 40rem;\n}\n\n[mol_text_demo_view_page_body],\n[mol_text_demo_code_page_body] {\n\tpadding: var(--mol_gap_block);\n}\n");
})($ || ($ = {}));

;
	($.$mol_textarea_demo) = class $mol_textarea_demo extends ($.$mol_example) {
		filled_descr(next){
			if(next !== undefined) return next;
			return "function hello( name = 'World' ) {\n\treturn `Hello, ${ name }!`\n}";
		}
		Filled_descr(){
			const obj = new this.$.$mol_textarea();
			(obj.sidebar_showed) = () => (true);
			(obj.hint) = () => ("source code");
			(obj.value) = (next) => ((this.filled_descr(next)));
			return obj;
		}
		symbols_hint(){
			return "";
		}
		Disabled(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.symbols_hint()));
			return obj;
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Filled_descr()), (this.Disabled())]);
			return obj;
		}
		title(){
			return "Text input field in various states";
		}
		sub(){
			return [(this.Content())];
		}
		tags(){
			return [
				"code", 
				"syntax", 
				"highlight"
			];
		}
		aspects(){
			return ["Widget/Control", "Type/String"];
		}
	};
	($mol_mem(($.$mol_textarea_demo.prototype), "filled_descr"));
	($mol_mem(($.$mol_textarea_demo.prototype), "Filled_descr"));
	($mol_mem(($.$mol_textarea_demo.prototype), "Disabled"));
	($mol_mem(($.$mol_textarea_demo.prototype), "Content"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_textarea_demo extends $.$mol_textarea_demo {
            symbols_hint() {
                const field = this.Filled_descr();
                const row = (prefix, name, value) => `! ;;${prefix} + ${name};;\n  ! ${value}\n    ! ;;${value.codePointAt(0)?.toString(16).toUpperCase().padStart(4, '0')};;`;
                let rows = [
                    ...Object.entries(field.symbols_alt()).map(([name, val]) => row('Alt', name, val)),
                    '\n',
                    ...Object.entries(field.symbols_alt_shift()).map(([name, val]) => row('Alt + Shift', name, val)),
                    '\n',
                    ...Object.entries(field.symbols_alt_ctrl()).map(([name, val]) => row('Alt + Ctrl', name, val)),
                ];
                return rows.join('\n');
            }
        }
        __decorate([
            $mol_mem
        ], $mol_textarea_demo.prototype, "symbols_hint", null);
        $$.$mol_textarea_demo = $mol_textarea_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/textarea/demo/demo.view.css", "[mol_textarea_demo] {\n\talign-self: stretch;\n}\n\n[mol_textarea_demo_inputs] {\n\tpadding: var(--mol_gap_block);\n}\n");
})($ || ($ = {}));

;
	($.$mol_theme_demo) = class $mol_theme_demo extends ($.$mol_example_large) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		hue_deg(){
			return "";
		}
		hue_spread_deg(){
			return "";
		}
		hue(next){
			if(next !== undefined) return next;
			return 240;
		}
		Hue(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.hue(next)));
			(obj.precision_change) = () => (15);
			return obj;
		}
		Hue_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Hue");
			(obj.Content) = () => ((this.Hue()));
			return obj;
		}
		hue_spread(next){
			if(next !== undefined) return next;
			return 90;
		}
		Hue_spread(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.hue_spread(next)));
			(obj.precision_change) = () => (15);
			return obj;
		}
		Hue_spread_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Hue spread");
			(obj.Content) = () => ((this.Hue_spread()));
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		Lights_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Lights");
			(obj.Content) = () => ((this.Lights()));
			return obj;
		}
		Config(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([
				(this.Hue_field()), 
				(this.Hue_spread_field()), 
				(this.Lights_field())
			]);
			return obj;
		}
		Base(){
			const obj = new this.$.$mol_theme_demo_case();
			(obj.theme) = () => ("$mol_theme_base");
			return obj;
		}
		Current(){
			const obj = new this.$.$mol_theme_demo_case();
			(obj.theme) = () => ("$mol_theme_current");
			return obj;
		}
		Special(){
			const obj = new this.$.$mol_theme_demo_case();
			(obj.theme) = () => ("$mol_theme_special");
			return obj;
		}
		Accent(){
			const obj = new this.$.$mol_theme_demo_case();
			(obj.theme) = () => ("$mol_theme_accent");
			return obj;
		}
		Cases(){
			const obj = new this.$.$mol_theme_demo_case();
			(obj.title) = () => ("Current light");
			(obj.inner) = () => ([
				(this.Base()), 
				(this.Current()), 
				(this.Special()), 
				(this.Accent())
			]);
			return obj;
		}
		Scroll(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.Cases())]);
			return obj;
		}
		plugins(){
			return [(this.Theme())];
		}
		style(){
			return {"--mol_theme_hue": (this.hue_deg()), "--mol_theme_hue_spread": (this.hue_spread_deg())};
		}
		sub(){
			return [(this.Config()), (this.Scroll())];
		}
		tags(){
			return ["theme", "skin"];
		}
		aspects(){
			return ["Type/Color"];
		}
	};
	($mol_mem(($.$mol_theme_demo.prototype), "Theme"));
	($mol_mem(($.$mol_theme_demo.prototype), "hue"));
	($mol_mem(($.$mol_theme_demo.prototype), "Hue"));
	($mol_mem(($.$mol_theme_demo.prototype), "Hue_field"));
	($mol_mem(($.$mol_theme_demo.prototype), "hue_spread"));
	($mol_mem(($.$mol_theme_demo.prototype), "Hue_spread"));
	($mol_mem(($.$mol_theme_demo.prototype), "Hue_spread_field"));
	($mol_mem(($.$mol_theme_demo.prototype), "Lights"));
	($mol_mem(($.$mol_theme_demo.prototype), "Lights_field"));
	($mol_mem(($.$mol_theme_demo.prototype), "Config"));
	($mol_mem(($.$mol_theme_demo.prototype), "Base"));
	($mol_mem(($.$mol_theme_demo.prototype), "Current"));
	($mol_mem(($.$mol_theme_demo.prototype), "Special"));
	($mol_mem(($.$mol_theme_demo.prototype), "Accent"));
	($mol_mem(($.$mol_theme_demo.prototype), "Cases"));
	($mol_mem(($.$mol_theme_demo.prototype), "Scroll"));
	($.$mol_theme_demo_case) = class $mol_theme_demo_case extends ($.$mol_view) {
		theme(){
			return "";
		}
		Card2_text(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ((this.title()));
			return obj;
		}
		Card2(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Card2_text())]);
			return obj;
		}
		Card1_text(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("\t$mol_theme.card");
			return obj;
		}
		Card1(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Card2()), (this.Card1_text())]);
			return obj;
		}
		Back(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("$mol_theme.back");
			return obj;
		}
		Line(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("$mol_theme.line");
			return obj;
		}
		Text(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("$mol_theme.text");
			return obj;
		}
		Field(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("$mol_theme.field");
			return obj;
		}
		Shade(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("$mol_theme.shade");
			return obj;
		}
		Focus(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("$mol_theme.focus");
			return obj;
		}
		Control(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("$mol_theme.control");
			return obj;
		}
		Hover(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("$mol_theme.hover");
			return obj;
		}
		Current(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("$mol_theme.curent");
			return obj;
		}
		Special(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ("$mol_theme.special");
			return obj;
		}
		Self(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([
				(this.Card1()), 
				(this.Back()), 
				(this.Line()), 
				(this.Text()), 
				(this.Field()), 
				(this.Shade()), 
				(this.Focus()), 
				(this.Control()), 
				(this.Hover()), 
				(this.Current()), 
				(this.Special())
			]);
			return obj;
		}
		title(){
			return (this.theme());
		}
		sub(){
			return [(this.Self()), ...(this.inner())];
		}
		inner(){
			return [];
		}
	};
	($mol_mem(($.$mol_theme_demo_case.prototype), "Card2_text"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Card2"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Card1_text"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Card1"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Back"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Line"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Text"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Field"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Shade"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Focus"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Control"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Hover"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Current"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Special"));
	($mol_mem(($.$mol_theme_demo_case.prototype), "Self"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_theme_demo extends $.$mol_theme_demo {
            hue_deg() {
                return this.hue() + 'deg';
            }
            hue_spread_deg() {
                return this.hue_spread() + 'deg';
            }
        }
        $$.$mol_theme_demo = $mol_theme_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($mol_theme_demo_case, {
            gap: $mol_gap.block,
            padding: $mol_gap.block,
            $mol_button_copy: {
                color: `inherit`,
                font: {
                    family: `monospace`,
                },
            },
            Shade: {
                color: $mol_theme.shade,
            },
            Field: {
                background: {
                    color: $mol_theme.field,
                },
                box: {
                    shadow: [{
                            x: 0,
                            y: 0,
                            blur: 0,
                            spread: `1px`,
                            color: $mol_theme.line,
                        }]
                },
            },
            Line: {
                box: {
                    shadow: [{
                            x: 0,
                            y: 0,
                            blur: 0,
                            spread: `1px`,
                            color: $mol_theme.line,
                        }]
                },
            },
            Focus: {
                color: $mol_theme.focus,
                background: {
                    color: $mol_theme.field,
                },
                box: {
                    shadow: [{
                            x: 0,
                            y: 0,
                            blur: 0,
                            spread: `1px`,
                            color: $mol_theme.focus,
                        }]
                },
            },
            Control: {
                color: $mol_theme.control,
            },
            Hover: {
                color: $mol_theme.control,
                background: {
                    color: $mol_theme.hover,
                },
            },
            Current: {
                color: $mol_theme.current,
            },
            Special: {
                color: $mol_theme.special,
            },
            Card1: {
                background: {
                    color: $mol_theme.card,
                },
                padding: $mol_gap.block,
                border: {
                    radius: $mol_gap.round,
                },
            },
            Card2: {
                textShadow: `0 0`,
                background: {
                    color: $mol_theme.card,
                },
                border: {
                    radius: $mol_gap.round,
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_time_duration_demo) = class $mol_time_duration_demo extends ($.$mol_example_code) {
		title(){
			return "Time processing library sandbox";
		}
		code(next){
			if(next !== undefined) return next;
			return "const week = new $mol_time_duration( 'P7D' )\nconst days = week.count( 'P1D' )";
		}
		aspects(){
			return ["Type/Time"];
		}
	};
	($mol_mem(($.$mol_time_duration_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_time_interval_demo) = class $mol_time_interval_demo extends ($.$mol_example_code) {
		title(){
			return "Time processing library sandbox";
		}
		code(next){
			if(next !== undefined) return next;
			return "const nextYear = new $mol_time_interval( '/P1Y' )\nconst anniversary = nextYear.end.toString( 'YYYY-MM-DD hh:mm' )";
		}
		aspects(){
			return ["Type/Time"];
		}
	};
	($mol_mem(($.$mol_time_interval_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_time_moment_demo) = class $mol_time_moment_demo extends ($.$mol_example_code) {
		title(){
			return "Time processing library sandbox";
		}
		code(next){
			if(next !== undefined) return next;
			return "const now = new $mol_time_moment\nconst today = now.toString( 'YYYY-MM-DD' )\nconst tomorrow = now.shift( 'P1D' ).toString( 'DD Mon' )";
		}
		aspects(){
			return ["Type/Time"];
		}
	};
	($mol_mem(($.$mol_time_moment_demo.prototype), "code"));


;
"use strict";

;
	($.$mol_toolbar) = class $mol_toolbar extends ($.$mol_view) {
		items(){
			return [];
		}
		Bar(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.items()));
			return obj;
		}
		expanded(next){
			if(next !== undefined) return next;
			return false;
		}
		Expand(){
			const obj = new this.$.$mol_check_expand();
			(obj.checked) = (next) => ((this.expanded(next)));
			return obj;
		}
		attr(){
			return {...(super.attr()), "mol_toolbar_expanded": (this.expanded())};
		}
		sub(){
			return [(this.Bar()), (this.Expand())];
		}
	};
	($mol_mem(($.$mol_toolbar.prototype), "Bar"));
	($mol_mem(($.$mol_toolbar.prototype), "expanded"));
	($mol_mem(($.$mol_toolbar.prototype), "Expand"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem, vh, per } = $mol_style_unit;
        $mol_style_define($mol_toolbar, {
            flex: {
                grow: 1,
                wrap: 'wrap',
                direction: 'row-reverse',
            },
            display: 'flex',
            position: 'relative',
            overflow: 'hidden',
            Bar: {
                display: 'flex',
                justifyContent: 'flex-end',
                flex: {
                    grow: 1,
                    shrink: 1,
                    wrap: 'wrap',
                },
                margin: {
                    right: rem(2.5),
                },
                minWidth: 0,
                maxHeight: rem(2.5),
            },
            Expand: {
                height: rem(2.5),
                margin: {
                    top: rem(-2.5),
                    left: rem(-2.5),
                },
                Icon: {
                    transform: 'rotate(90deg)',
                },
            },
            '@': {
                mol_toolbar_expanded: {
                    true: {
                        Bar: {
                            maxHeight: vh(100),
                        },
                        Expand: {
                            Icon: {
                                transform: 'rotate(270deg)',
                            },
                        },
                    },
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_toolbar extends $.$mol_toolbar {
        }
        $$.$mol_toolbar = $mol_toolbar;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_content_copy) = class $mol_icon_content_copy extends ($.$mol_icon) {
		path(){
			return "M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_content_cut) = class $mol_icon_content_cut extends ($.$mol_icon) {
		path(){
			return "M19,3L13,9L15,11L22,4V3M12,12.5A0.5,0.5 0 0,1 11.5,12A0.5,0.5 0 0,1 12,11.5A0.5,0.5 0 0,1 12.5,12A0.5,0.5 0 0,1 12,12.5M6,20A2,2 0 0,1 4,18C4,16.89 4.9,16 6,16A2,2 0 0,1 8,18C8,19.11 7.1,20 6,20M6,8A2,2 0 0,1 4,6C4,4.89 4.9,4 6,4A2,2 0 0,1 8,6C8,7.11 7.1,8 6,8M9.64,7.64C9.87,7.14 10,6.59 10,6A4,4 0 0,0 6,2A4,4 0 0,0 2,6A4,4 0 0,0 6,10C6.59,10 7.14,9.87 7.64,9.64L10,12L7.64,14.36C7.14,14.13 6.59,14 6,14A4,4 0 0,0 2,18A4,4 0 0,0 6,22A4,4 0 0,0 10,18C10,17.41 9.87,16.86 9.64,16.36L12,14L19,21H22V20L9.64,7.64Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_content_paste) = class $mol_icon_content_paste extends ($.$mol_icon) {
		path(){
			return "M19,20H5V4H7V7H17V4H19M12,2A1,1 0 0,1 13,3A1,1 0 0,1 12,4A1,1 0 0,1 11,3A1,1 0 0,1 12,2M19,2H14.82C14.4,0.84 13.3,0 12,0C10.7,0 9.6,0.84 9.18,2H5A2,2 0 0,0 3,4V20A2,2 0 0,0 5,22H19A2,2 0 0,0 21,20V4A2,2 0 0,0 19,2Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_delete) = class $mol_icon_delete extends ($.$mol_icon) {
		path(){
			return "M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z";
		}
	};


;
"use strict";

;
	($.$mol_toolbar_demo) = class $mol_toolbar_demo extends ($.$mol_example_small) {
		search_hint(){
			return "Search...";
		}
		Search(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ((this.search_hint()));
			return obj;
		}
		replace_hint(){
			return "Replace...";
		}
		Replace(){
			const obj = new this.$.$mol_string();
			(obj.hint) = () => ((this.replace_hint()));
			return obj;
		}
		approve_label(){
			return "Approve";
		}
		Approve(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ((this.approve_label()));
			return obj;
		}
		decline_label(){
			return "Decline";
		}
		Decline(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.decline_label()));
			return obj;
		}
		Copy_icon(){
			const obj = new this.$.$mol_icon_content_copy();
			return obj;
		}
		Copy(){
			const obj = new this.$.$mol_button_minor();
			(obj.sub) = () => ([(this.Copy_icon())]);
			return obj;
		}
		Cut_icon(){
			const obj = new this.$.$mol_icon_content_cut();
			return obj;
		}
		Cut(){
			const obj = new this.$.$mol_button_minor();
			(obj.sub) = () => ([(this.Cut_icon())]);
			return obj;
		}
		Paste_icon(){
			const obj = new this.$.$mol_icon_content_paste();
			return obj;
		}
		Paste(){
			const obj = new this.$.$mol_button_minor();
			(obj.sub) = () => ([(this.Paste_icon())]);
			return obj;
		}
		Delete_icon(){
			const obj = new this.$.$mol_icon_delete();
			return obj;
		}
		Delete(){
			const obj = new this.$.$mol_button_minor();
			(obj.sub) = () => ([(this.Delete_icon())]);
			return obj;
		}
		Toolbar(){
			const obj = new this.$.$mol_toolbar();
			(obj.items) = () => ([
				(this.Search()), 
				(this.Replace()), 
				(this.Approve()), 
				(this.Decline()), 
				(this.Copy()), 
				(this.Cut()), 
				(this.Paste()), 
				(this.Delete())
			]);
			return obj;
		}
		title(){
			return "Foldable toolbar demo";
		}
		sub(){
			return [(this.Toolbar())];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_toolbar_demo.prototype), "Search"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Replace"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Approve"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Decline"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Copy_icon"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Copy"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Cut_icon"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Cut"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Paste_icon"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Paste"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Delete_icon"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Delete"));
	($mol_mem(($.$mol_toolbar_demo.prototype), "Toolbar"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($mol_toolbar_demo, {
            alignSelf: 'stretch'
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_transit) = class $mol_transit extends ($.$mol_ghost) {
		animation_name_style(){
			return "";
		}
		reset(next){
			if(next !== undefined) return next;
			return null;
		}
		style(){
			return {"animationName": (this.animation_name_style())};
		}
		event(){
			return {"animationend": (next) => (this.reset(next))};
		}
	};
	($mol_mem(($.$mol_transit.prototype), "reset"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_transit extends $.$mol_transit {
            view_rect_prev(reset) {
                return this.view_rect();
            }
            reset(next) {
                this.animation_stylesheet(null);
            }
            animation_name() {
                return 'mol_transit_aniation_' + $mol_key(this).slice(1, -1);
            }
            animation_name_style() {
                return this.animation_stylesheet() ? this.animation_name() : '';
            }
            animation_stylesheet(next) {
                const rect_next = this.view_rect();
                const rect_prev = $mol_mem_cached(() => this.view_rect_prev()) ?? null;
                this.view_rect_prev();
                if (next !== undefined)
                    return next;
                if (!rect_prev || !rect_next)
                    return null;
                const dx = Math.round(rect_prev.left - rect_next.left);
                const dy = Math.round(rect_prev.top - rect_next.top);
                const sx = rect_prev.width / rect_next.width;
                const sy = rect_prev.width / rect_next.width;
                const prev = $mol_mem_cached(() => this.animation_stylesheet());
                if (prev)
                    return prev;
                const name = this.animation_name();
                const el = $mol_style_attach(`${this.dom_id()}.animation()`, `
				@keyframes ${name} {
					from {
						transform: translate( ${dx}px, ${dy}px ) scale( ${sx}, ${sy} )
					}
					to {
						transform: translate(0,0) scale(1,1)
					}
				}
			`);
                if (el)
                    Object.assign(el, {
                        destructor() {
                            el.remove();
                        }
                    });
                return el;
            }
            auto() {
                this.animation_stylesheet();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_transit.prototype, "view_rect_prev", null);
        __decorate([
            $mol_memo.method
        ], $mol_transit.prototype, "animation_name", null);
        __decorate([
            $mol_mem
        ], $mol_transit.prototype, "animation_name_style", null);
        __decorate([
            $mol_mem
        ], $mol_transit.prototype, "animation_stylesheet", null);
        $$.$mol_transit = $mol_transit;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($mol_transit, {
            transition: 'none',
            animation: {
                duration: `.25s`,
                timingFunction: `ease-out`,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_transit_demo) = class $mol_transit_demo extends ($.$mol_example_large) {
		align(next){
			if(next !== undefined) return next;
			return "center";
		}
		Align(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.align(next)));
			(obj.options) = () => ({
				"flex-start": "left", 
				"center": "center", 
				"flex-end": "right"
			});
			return obj;
		}
		justify(next){
			if(next !== undefined) return next;
			return "center";
		}
		Justify(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.justify(next)));
			(obj.options) = () => ({
				"flex-start": "top", 
				"center": "center", 
				"flex-end": "bottom"
			});
			return obj;
		}
		Float(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ([(this.Align()), (this.Justify())]);
			return obj;
		}
		Transit(){
			const obj = new this.$.$mol_transit();
			(obj.Sub) = () => ((this.Float()));
			return obj;
		}
		title(){
			return "Layout transition";
		}
		style(){
			return {"justify-content": (this.justify()), "align-items": (this.align())};
		}
		sub(){
			return [(this.Transit())];
		}
		aspects(){
			return ["Widget/Layout"];
		}
	};
	($mol_mem(($.$mol_transit_demo.prototype), "align"));
	($mol_mem(($.$mol_transit_demo.prototype), "Align"));
	($mol_mem(($.$mol_transit_demo.prototype), "justify"));
	($mol_mem(($.$mol_transit_demo.prototype), "Justify"));
	($mol_mem(($.$mol_transit_demo.prototype), "Float"));
	($mol_mem(($.$mol_transit_demo.prototype), "Transit"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_transit_demo extends $.$mol_transit_demo {
        }
        $$.$mol_transit_demo = $mol_transit_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($mol_transit_demo, {
            Justify: {
                flex: {
                    grow: 0,
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_video_player) = class $mol_video_player extends ($.$mol_view) {
		uri(){
			return "";
		}
		controls(){
			return true;
		}
		autoplay(){
			return true;
		}
		inline(){
			return true;
		}
		loop(){
			return false;
		}
		muted(){
			return false;
		}
		poster(){
			return "";
		}
		stream(){
			return null;
		}
		revolume(next){
			if(next !== undefined) return next;
			return null;
		}
		retime(next){
			if(next !== undefined) return next;
			return null;
		}
		redurate(next){
			if(next !== undefined) return next;
			return null;
		}
		playing_event(next){
			if(next !== undefined) return next;
			return null;
		}
		play_event(next){
			if(next !== undefined) return next;
			return null;
		}
		pause_event(next){
			if(next !== undefined) return next;
			return null;
		}
		dom_name(){
			return "video";
		}
		playing(next){
			if(next !== undefined) return next;
			return false;
		}
		play(){
			return null;
		}
		pause(){
			return null;
		}
		volume(next){
			if(next !== undefined) return next;
			return 0;
		}
		time(next){
			if(next !== undefined) return next;
			return 0;
		}
		duration(){
			return 0;
		}
		attr(){
			return {
				"src": (this.uri()), 
				"controls": (this.controls()), 
				"autoplay": (this.autoplay()), 
				"playsinline": (this.inline()), 
				"loop": (this.loop()), 
				"muted": (this.muted()), 
				"poster": (this.poster())
			};
		}
		field(){
			return {"srcObject": (this.stream())};
		}
		event(){
			return {
				"volumechange": (next) => (this.revolume(next)), 
				"timeupdate": (next) => (this.retime(next)), 
				"durationchange": (next) => (this.redurate(next)), 
				"playing": (next) => (this.playing_event(next)), 
				"play": (next) => (this.play_event(next)), 
				"pause": (next) => (this.pause_event(next))
			};
		}
	};
	($mol_mem(($.$mol_video_player.prototype), "revolume"));
	($mol_mem(($.$mol_video_player.prototype), "retime"));
	($mol_mem(($.$mol_video_player.prototype), "redurate"));
	($mol_mem(($.$mol_video_player.prototype), "playing_event"));
	($mol_mem(($.$mol_video_player.prototype), "play_event"));
	($mol_mem(($.$mol_video_player.prototype), "pause_event"));
	($mol_mem(($.$mol_video_player.prototype), "playing"));
	($mol_mem(($.$mol_video_player.prototype), "volume"));
	($mol_mem(($.$mol_video_player.prototype), "time"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_video_player extends $.$mol_video_player {
            dom_node() {
                return super.dom_node();
            }
            volume(next) {
                this.revolume();
                if (next === undefined) {
                    return this.dom_node().volume;
                }
                else {
                    return this.dom_node().volume = Math.max(0, Math.min(next, 1));
                }
            }
            time(next) {
                this.retime();
                if (next === undefined) {
                    return this.dom_node().currentTime;
                }
                else {
                    return this.dom_node().currentTime = Math.max(0, Math.min(next, this.duration()));
                }
            }
            duration() {
                this.redurate();
                return this.dom_node().duration;
            }
            playing(next) {
                const node = this.dom_node();
                this.playing_event();
                this.play_event();
                if (next === undefined)
                    return !node.paused;
                if (next && node.paused)
                    $mol_wire_sync(node).play();
                if (!next && !node.paused)
                    node.pause();
                return !node.paused;
            }
            play() {
                this.playing(true);
            }
            pause() {
                this.playing(false);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_video_player.prototype, "volume", null);
        __decorate([
            $mol_mem
        ], $mol_video_player.prototype, "time", null);
        __decorate([
            $mol_mem
        ], $mol_video_player.prototype, "duration", null);
        __decorate([
            $mol_mem
        ], $mol_video_player.prototype, "playing", null);
        $$.$mol_video_player = $mol_video_player;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/video/player/player.view.css", "[mol_video_player] {\n\tflex: 1 1 auto;\n}\n");
})($ || ($ = {}));

;
	($.$mol_video_player_demo) = class $mol_video_player_demo extends ($.$mol_example_large) {
		files(){
			return (this.Open().files());
		}
		Open(){
			const obj = new this.$.$mol_button_open();
			return obj;
		}
		Playing_icon(){
			const obj = new this.$.$mol_icon_play();
			return obj;
		}
		Playing(){
			const obj = new this.$.$mol_check_icon();
			(obj.checked) = (next) => ((this.playing(next)));
			(obj.Icon) = () => ((this.Playing_icon()));
			return obj;
		}
		Duration(){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ([(this.duration())]);
			return obj;
		}
		Duration_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Duration");
			(obj.content) = () => ([(this.Duration())]);
			return obj;
		}
		Time(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.time(next)));
			(obj.precision_view) = () => (0.001);
			return obj;
		}
		Time_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Time");
			(obj.content) = () => ([(this.Time())]);
			return obj;
		}
		Volume(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.volume(next)));
			(obj.precision) = () => (0.001);
			return obj;
		}
		Volume_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Volume");
			(obj.content) = () => ([(this.Volume())]);
			return obj;
		}
		Controls(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([
				(this.Open()), 
				(this.Playing()), 
				(this.Duration_labeler()), 
				(this.Time_labeler()), 
				(this.Volume_labeler())
			]);
			return obj;
		}
		uri(){
			return "";
		}
		playing(next){
			return (this.Player().playing(next));
		}
		volume(next){
			return (this.Player().volume(next));
		}
		time(next){
			return (this.Player().time(next));
		}
		duration(){
			return (this.Player().duration());
		}
		Player(){
			const obj = new this.$.$mol_video_player();
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
		title(){
			return "Reactive video player";
		}
		sub(){
			return [(this.Controls()), (this.Player())];
		}
		tags(){
			return ["palyback"];
		}
		aspects(){
			return ["Media/Video"];
		}
	};
	($mol_mem(($.$mol_video_player_demo.prototype), "Open"));
	($mol_mem(($.$mol_video_player_demo.prototype), "Playing_icon"));
	($mol_mem(($.$mol_video_player_demo.prototype), "Playing"));
	($mol_mem(($.$mol_video_player_demo.prototype), "Duration"));
	($mol_mem(($.$mol_video_player_demo.prototype), "Duration_labeler"));
	($mol_mem(($.$mol_video_player_demo.prototype), "Time"));
	($mol_mem(($.$mol_video_player_demo.prototype), "Time_labeler"));
	($mol_mem(($.$mol_video_player_demo.prototype), "Volume"));
	($mol_mem(($.$mol_video_player_demo.prototype), "Volume_labeler"));
	($mol_mem(($.$mol_video_player_demo.prototype), "Controls"));
	($mol_mem(($.$mol_video_player_demo.prototype), "Player"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_video_player_demo extends $.$mol_video_player_demo {
            uri() {
                const file = this.files()[0];
                if (!file)
                    return null;
                return URL.createObjectURL(file);
            }
        }
        $$.$mol_video_player_demo = $mol_video_player_demo;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_video_camera) = class $mol_video_camera extends ($.$mol_video_player) {
		transform(){
			return "";
		}
		facing(){
			return "user";
		}
		aspect(){
			return 1;
		}
		size(){
			return 720;
		}
		width(){
			return (this.size());
		}
		height(){
			return (this.size());
		}
		brightness(){
			return 128;
		}
		sharpness(){
			return 2;
		}
		contrast(){
			return 32;
		}
		saturation(){
			return 64;
		}
		temperature(){
			return 4000;
		}
		torch(){
			return false;
		}
		controls(){
			return false;
		}
		style(){
			return {"transform": (this.transform())};
		}
		video_constraints(){
			return {
				"facingMode": (this.facing()), 
				"aspectRatio": (this.aspect()), 
				"width": {"ideal": (this.width())}, 
				"height": {"ideal": (this.height())}
			};
		}
		video_settings(){
			return {
				"brightness": (this.brightness()), 
				"sharpness": (this.sharpness()), 
				"contrast": (this.contrast()), 
				"saturation": (this.saturation()), 
				"advanced": [{"colorTemperature": (this.temperature())}, {"torch": (this.torch())}]
			};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_video_camera extends $.$mol_video_camera {
            stream_raw() {
                const stream = $mol_wire_sync(navigator.mediaDevices).getUserMedia({
                    video: this.video_constraints(),
                });
                return Object.assign(stream, {
                    destructor: () => stream.getTracks().forEach(track => track.stop())
                });
            }
            stream() {
                const settings = this.video_settings();
                const stream = this.stream_raw();
                for (const track of stream.getVideoTracks()) {
                    for (const param in settings) {
                        if (param === 'advanced') {
                            for (const constraint of settings.advanced) {
                                try {
                                    track.applyConstraints({ advanced: [constraint] });
                                }
                                catch (error) {
                                    $mol_fail_log(error);
                                }
                            }
                        }
                        else if (settings[param] !== null) {
                            try {
                                track.applyConstraints({ [param]: settings[param] });
                            }
                            catch (error) {
                                $mol_fail_log(error);
                            }
                        }
                    }
                }
                return stream;
            }
            dom_node_actual() {
                return super.dom_node_actual();
            }
            transform() {
                return this.facing() === 'user' ? 'scaleX(-1)' : '';
            }
        }
        __decorate([
            $mol_mem
        ], $mol_video_camera.prototype, "stream_raw", null);
        __decorate([
            $mol_mem
        ], $mol_video_camera.prototype, "stream", null);
        $$.$mol_video_camera = $mol_video_camera;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_flashlight) = class $mol_icon_flashlight extends ($.$mol_icon) {
		path(){
			return "M9,10L6,5H18L15,10H9M18,4H6V2H18V4M9,22V11H15V22H9M12,13A1,1 0 0,0 11,14A1,1 0 0,0 12,15A1,1 0 0,0 13,14A1,1 0 0,0 12,13Z";
		}
	};


;
"use strict";

;
	($.$mol_video_camera_demo) = class $mol_video_camera_demo extends ($.$mol_example_large) {
		Player(){
			const obj = new this.$.$mol_video_camera();
			(obj.torch) = () => ((this.torch()));
			(obj.brightness) = () => ((this.brightness()));
			(obj.sharpness) = () => ((this.sharpness()));
			(obj.contrast) = () => ((this.contrast()));
			(obj.saturation) = () => ((this.saturation()));
			(obj.temperature) = () => ((this.temperature()));
			return obj;
		}
		View(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([(this.Player())]);
			return obj;
		}
		torch(next){
			if(next !== undefined) return next;
			return false;
		}
		Torch_icon(){
			const obj = new this.$.$mol_icon_flashlight();
			return obj;
		}
		Torch(){
			const obj = new this.$.$mol_check_icon();
			(obj.checked) = (next) => ((this.torch(next)));
			(obj.Icon) = () => ((this.Torch_icon()));
			return obj;
		}
		Torch_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Torch");
			(obj.content) = () => ([(this.Torch())]);
			return obj;
		}
		brightness(next){
			if(next !== undefined) return next;
			return 128;
		}
		Brightness(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.brightness(next)));
			(obj.precision_change) = () => (8);
			return obj;
		}
		Brightness_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Brightness");
			(obj.content) = () => ([(this.Brightness())]);
			return obj;
		}
		sharpness(next){
			if(next !== undefined) return next;
			return 3;
		}
		Sharpness(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.sharpness(next)));
			return obj;
		}
		Sharpness_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Sharpness");
			(obj.content) = () => ([(this.Sharpness())]);
			return obj;
		}
		contrast(next){
			if(next !== undefined) return next;
			return 32;
		}
		Contrast(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.contrast(next)));
			(obj.precision_change) = () => (4);
			return obj;
		}
		Contrast_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Contrast");
			(obj.content) = () => ([(this.Contrast())]);
			return obj;
		}
		saturation(next){
			if(next !== undefined) return next;
			return 64;
		}
		Saturation(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.saturation(next)));
			(obj.precision_change) = () => (8);
			return obj;
		}
		Saturation_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Saturation");
			(obj.content) = () => ([(this.Saturation())]);
			return obj;
		}
		temperature(next){
			if(next !== undefined) return next;
			return 4000;
		}
		Temperature(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.temperature(next)));
			(obj.precision_change) = () => (100);
			return obj;
		}
		Temperature_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Temperature");
			(obj.content) = () => ([(this.Temperature())]);
			return obj;
		}
		Controls(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ([
				(this.Torch_labeler()), 
				(this.Brightness_labeler()), 
				(this.Sharpness_labeler()), 
				(this.Contrast_labeler()), 
				(this.Saturation_labeler()), 
				(this.Temperature_labeler())
			]);
			return obj;
		}
		Scroll(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.View()), (this.Controls())]);
			return obj;
		}
		title(){
			return "Reactive video camera";
		}
		sub(){
			return [(this.Scroll())];
		}
		tags(){
			return ["capture"];
		}
		aspects(){
			return ["Media/Video"];
		}
	};
	($mol_mem(($.$mol_video_camera_demo.prototype), "Player"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "View"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "torch"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Torch_icon"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Torch"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Torch_labeler"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "brightness"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Brightness"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Brightness_labeler"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "sharpness"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Sharpness"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Sharpness_labeler"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "contrast"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Contrast"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Contrast_labeler"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "saturation"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Saturation"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Saturation_labeler"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "temperature"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Temperature"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Temperature_labeler"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Controls"));
	($mol_mem(($.$mol_video_camera_demo.prototype), "Scroll"));


;
"use strict";

;
	($.$mol_password_demo) = class $mol_password_demo extends ($.$mol_example_small) {
		pass(next){
			if(next !== undefined) return next;
			return "Hello world";
		}
		Simple(){
			const obj = new this.$.$mol_password();
			(obj.value) = (next) => ((this.pass(next)));
			return obj;
		}
		pass2(next){
			if(next !== undefined) return next;
			return "";
		}
		Hint(){
			const obj = new this.$.$mol_password();
			(obj.value) = (next) => ((this.pass2(next)));
			(obj.hint) = () => ("Top secret");
			return obj;
		}
		title(){
			return "Password input field based on $mol_string";
		}
		sub(){
			return [(this.Simple()), (this.Hint())];
		}
		tags(){
			return ["input"];
		}
		aspects(){
			return ["Widget/Control", "Type/String"];
		}
	};
	($mol_mem(($.$mol_password_demo.prototype), "pass"));
	($mol_mem(($.$mol_password_demo.prototype), "Simple"));
	($mol_mem(($.$mol_password_demo.prototype), "pass2"));
	($mol_mem(($.$mol_password_demo.prototype), "Hint"));


;
"use strict";

;
	($.$mol_lights_demo) = class $mol_lights_demo extends ($.$mol_example_small) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		Lighter(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		Sample(){
			const obj = new this.$.$mol_view();
			(obj.plugins) = () => ([(this.Theme())]);
			(obj.sub) = () => ([(this.Lighter())]);
			return obj;
		}
		title(){
			return "Switcher between light/dark themes (usually for `$mol_theme_auto` plugin).";
		}
		sub(){
			return [(this.Sample())];
		}
		tags(){
			return [
				"light", 
				"dark", 
				"theme", 
				"switcher", 
				"toggle"
			];
		}
		aspects(){
			return ["Widget/Control/Button", "Theme"];
		}
	};
	($mol_mem(($.$mol_lights_demo.prototype), "Theme"));
	($mol_mem(($.$mol_lights_demo.prototype), "Lighter"));
	($mol_mem(($.$mol_lights_demo.prototype), "Sample"));


;
"use strict";

;
	($.$mol_locale_demo) = class $mol_locale_demo extends ($.$mol_example_small) {
		All_languages(){
			const obj = new this.$.$mol_locale_select();
			return obj;
		}
		All_languages_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("All languages example");
			(obj.content) = () => ([(this.All_languages())]);
			return obj;
		}
		List_of_languages(){
			const obj = new this.$.$mol_locale_select();
			(obj.dictionary) = () => ({"ru": "Russian", "en": "English"});
			return obj;
		}
		List_of_languages_labeler(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Or you can give user select from your list");
			(obj.content) = () => ([(this.List_of_languages())]);
			return obj;
		}
		title(){
			return "Example usages of $mol_locale component";
		}
		sub(){
			return [(this.All_languages_labeler()), (this.List_of_languages_labeler())];
		}
		tags(){
			return ["language", "l10n"];
		}
		aspects(){
			return ["Widget/Control"];
		}
	};
	($mol_mem(($.$mol_locale_demo.prototype), "All_languages"));
	($mol_mem(($.$mol_locale_demo.prototype), "All_languages_labeler"));
	($mol_mem(($.$mol_locale_demo.prototype), "List_of_languages"));
	($mol_mem(($.$mol_locale_demo.prototype), "List_of_languages_labeler"));


;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_mol extends $.$hyoo_mol {
            hubhabRedirect() {
                if (this.$.$mol_state_arg.value('section') === 'articles') {
                    document.location.assign('https://habhub.hyoo.ru/' + document.location.hash);
                }
            }
            auto() {
                this.hubhabRedirect();
            }
            Placeholder() {
                if (this.spread() === 'docs')
                    return this.Docs().Placeholder();
                if (!this.spread())
                    return super.Placeholder();
                return null;
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_mol.prototype, "hubhabRedirect", null);
        $$.$hyoo_mol = $hyoo_mol;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/mol/mol.view.css", "[hyoo_mol_menu] {\n\tflex: 0 0 18rem;\n}\n\n[hyoo_mol_main] {\n\tflex: 0 0 60rem;\n}\n\n[hyoo_mol_slides] {\n\tflex: 1000 0 80rem;\n}\n\n[hyoo_mol_view_tree] {\n\tflex: 1000 0 60rem;\n}\n\n[hyoo_mol_icons] {\n\tflex: 1000 0 40rem;\n}\n\n[hyoo_page_menu_aura_showing],\n[hyoo_mol_docs_menu_lights] {\n\tdisplay: none;\n}\n");
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    function $mol_test(set) {
        for (let name in set) {
            const code = set[name];
            const test = (typeof code === 'string') ? new Function('', code) : code;
            $_1.$mol_test_all.push(test);
        }
        $mol_test_schedule();
    }
    $_1.$mol_test = $mol_test;
    $_1.$mol_test_mocks = [];
    $_1.$mol_test_all = [];
    async function $mol_test_run() {
        for (var test of $_1.$mol_test_all) {
            let context = Object.create($$);
            for (let mock of $_1.$mol_test_mocks)
                await mock(context);
            const res = test(context);
            if ($mol_promise_like(res)) {
                await new Promise((done, fail) => {
                    res.then(done, fail);
                    setTimeout(() => fail(new Error('Test timeout: ' + test.name)), 1000);
                });
            }
        }
        $$.$mol_log3_done({
            place: '$mol_test',
            message: 'All tests passed',
            count: $_1.$mol_test_all.length,
        });
    }
    $_1.$mol_test_run = $mol_test_run;
    let scheduled = false;
    function $mol_test_schedule() {
        if (scheduled)
            return;
        scheduled = true;
        setTimeout(async () => {
            scheduled = false;
            await $mol_test_run();
            $$.$mol_test_complete();
        }, 1000);
    }
    $_1.$mol_test_schedule = $mol_test_schedule;
    $_1.$mol_test_mocks.push(context => {
        let seed = 0;
        context.Math = Object.create(Math);
        context.Math.random = () => Math.sin(seed++);
        const forbidden = ['XMLHttpRequest', 'fetch'];
        for (let api of forbidden) {
            context[api] = new Proxy(function () { }, {
                get() {
                    $mol_fail_hidden(new Error(`${api} is forbidden in tests`));
                },
                apply() {
                    $mol_fail_hidden(new Error(`${api} is forbidden in tests`));
                },
            });
        }
    });
    $mol_test({
        'mocked Math.random'($) {
            console.assert($.Math.random() === 0);
            console.assert($.Math.random() === Math.sin(1));
        },
        'forbidden XMLHttpRequest'($) {
            try {
                console.assert(void new $.XMLHttpRequest);
            }
            catch (error) {
                console.assert(error.message === 'XMLHttpRequest is forbidden in tests');
            }
        },
        'forbidden fetch'($) {
            try {
                console.assert(void $.fetch(''));
            }
            catch (error) {
                console.assert(error.message === 'fetch is forbidden in tests');
            }
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_test_complete() {
        process.exit(0);
    }
    $.$mol_test_complete = $mol_test_complete;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test_mocks.push($ => $.$mol_fail_log = () => false);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'FQN of anon function'($) {
            const $$ = Object.assign($, { $mol_func_name_test: (() => () => { })() });
            $mol_assert_equal($$.$mol_func_name_test.name, '');
            $mol_assert_equal($$.$mol_func_name($$.$mol_func_name_test), '$mol_func_name_test');
            $mol_assert_equal($$.$mol_func_name_test.name, '$mol_func_name_test');
        },
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Make empty div'() {
            $mol_assert_equal(($mol_jsx("div", null)).outerHTML, '<div></div>');
        },
        'Define native field'() {
            const dom = $mol_jsx("input", { value: '123' });
            $mol_assert_equal(dom.outerHTML, '<input value="123">');
            $mol_assert_equal(dom.value, '123');
        },
        'Define classes'() {
            const dom = $mol_jsx("div", { class: 'foo bar' });
            $mol_assert_equal(dom.outerHTML, '<div class="foo bar"></div>');
        },
        'Define styles'() {
            const dom = $mol_jsx("div", { style: { color: 'red' } });
            $mol_assert_equal(dom.outerHTML, '<div style="color: red;"></div>');
        },
        'Define dataset'() {
            const dom = $mol_jsx("div", { dataset: { foo: 'bar' } });
            $mol_assert_equal(dom.outerHTML, '<div data-foo="bar"></div>');
        },
        'Define attributes'() {
            const dom = $mol_jsx("div", { lang: "ru", hidden: true });
            $mol_assert_equal(dom.outerHTML, '<div lang="ru" hidden=""></div>');
        },
        'Define child nodes'() {
            const dom = $mol_jsx("div", null,
                "hello",
                $mol_jsx("strong", null, "world"),
                "!");
            $mol_assert_equal(dom.outerHTML, '<div>hello<strong>world</strong>!</div>');
        },
        'Make fragment'() {
            const dom = $mol_jsx($mol_jsx_frag, null,
                $mol_jsx("br", null),
                $mol_jsx("hr", null));
            $mol_assert_equal($mol_dom_serialize(dom), '<br xmlns="http://www.w3.org/1999/xhtml" /><hr xmlns="http://www.w3.org/1999/xhtml" />');
        },
        'Spread fragment'() {
            const dom = $mol_jsx("div", null,
                $mol_jsx($mol_jsx_frag, null,
                    $mol_jsx("br", null),
                    $mol_jsx("hr", null)));
            $mol_assert_equal(dom.outerHTML, '<div><br><hr></div>');
        },
        'Function as component'() {
            const Button = (props, target) => {
                return $mol_jsx("button", { title: props.hint }, target());
            };
            const dom = $mol_jsx(Button, { id: "foo", hint: "click me" }, () => 'hey!');
            $mol_assert_equal(dom.outerHTML, '<button id="foo" title="click me" class="Button">hey!</button>');
        },
        'Nested guid generation'() {
            const Foo = () => {
                return $mol_jsx("div", null,
                    $mol_jsx(Bar, { id: "bar" },
                        $mol_jsx("img", { id: "icon" })));
            };
            const Bar = (props, icon) => {
                return $mol_jsx("span", null,
                    icon,
                    $mol_jsx("i", { id: "label" }));
            };
            const dom = $mol_jsx(Foo, { id: "foo" });
            $mol_assert_equal(dom.outerHTML, '<div id="foo" class="Foo"><span id="foo/bar" class="Foo_bar Bar"><img id="foo/icon" class="Foo_icon"><i id="foo/bar/label" class="Foo_bar_label Bar_label"></i></span></div>');
        },
        'Fail on non unique ids'() {
            const App = () => {
                return $mol_jsx("div", null,
                    $mol_jsx("span", { id: "bar" }),
                    $mol_jsx("span", { id: "bar" }));
            };
            $mol_assert_fail(() => $mol_jsx(App, { id: "foo" }), 'JSX already has tag with id "foo/bar"');
        },
        'Owner based guid generationn'() {
            const Foo = () => {
                return $mol_jsx("div", null,
                    $mol_jsx(Bar, { id: "middle", icon: () => $mol_jsx("img", { id: "icon" }) }));
            };
            const Bar = (props) => {
                return $mol_jsx("span", null, props.icon());
            };
            const dom = $mol_jsx(Foo, { id: "app" });
            $mol_assert_equal(dom.outerHTML, '<div id="app" class="Foo"><span id="app/middle" class="Foo_middle Bar"><img id="app/icon" class="Foo_icon"></span></div>');
        },
        'Fail on same ids from different caller'() {
            const Foo = () => {
                return $mol_jsx("div", null,
                    $mol_jsx("img", { id: "icon" }),
                    $mol_jsx(Bar, { id: "bar", icon: () => $mol_jsx("img", { id: "icon" }) }));
            };
            const Bar = (props) => {
                return $mol_jsx("span", null, props.icon());
            };
            $mol_assert_fail(() => $mol_jsx(Foo, { id: "foo" }), 'JSX already has tag with id "foo/icon"');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'lazy calls'() {
            let calls = 0;
            const list = $mol_range2(index => (++calls, index), () => 10);
            $mol_assert_equal(true, list instanceof Array);
            $mol_assert_equal(list.length, 10);
            $mol_assert_equal(list[-1], undefined);
            $mol_assert_equal(list[0], 0);
            $mol_assert_equal(list[9], 9);
            $mol_assert_equal(list[9.5], undefined);
            $mol_assert_equal(list[10], undefined);
            $mol_assert_equal(calls, 2);
        },
        'infinity list'() {
            let calls = 0;
            const list = $mol_range2(index => (++calls, index));
            $mol_assert_equal(list.length, Number.POSITIVE_INFINITY);
            $mol_assert_equal(list[0], 0);
            $mol_assert_equal(list[4], 4);
            $mol_assert_equal(list[Number.MAX_SAFE_INTEGER], Number.MAX_SAFE_INTEGER);
            $mol_assert_equal(list[Number.POSITIVE_INFINITY], undefined);
            $mol_assert_equal(calls, 3);
        },
        'stringify'() {
            const list = $mol_range2(i => i, () => 5);
            $mol_assert_equal(list.toString(), '0,1,2,3,4');
            $mol_assert_equal(list.join(';'), '0;1;2;3;4');
        },
        'for-of'() {
            let log = '';
            for (let i of $mol_range2(i => i + 1, () => 5)) {
                log += i;
            }
            $mol_assert_equal(log, '12345');
        },
        'for-in'() {
            let log = '';
            for (let i in $mol_range2(i => i, () => 5)) {
                log += i;
            }
            $mol_assert_equal(log, '01234');
        },
        'forEach'() {
            let log = '';
            $mol_range2(i => i, () => 5).forEach(i => log += i);
            $mol_assert_equal(log, '01234');
        },
        'reduce'() {
            let calls = 0;
            const list = $mol_range2().slice(1, 6);
            $mol_assert_equal(list.reduce((s, v) => s + v), 15);
            $mol_assert_equal(list.reduce((s, v) => s + v, 5), 20);
        },
        'lazy concat'() {
            let calls1 = 0;
            let calls2 = 0;
            const list = $mol_range2(index => (++calls1, index), () => 5).concat([0, 1, 2, 3, 4], $mol_range2(index => (++calls2, index), () => 5));
            $mol_assert_equal(true, list instanceof Array);
            $mol_assert_equal(list.length, 15);
            $mol_assert_equal(list[0], 0);
            $mol_assert_equal(list[4], 4);
            $mol_assert_equal(list[5], 0);
            $mol_assert_equal(list[9], 4);
            $mol_assert_equal(list[10], 0);
            $mol_assert_equal(list[14], 4);
            $mol_assert_equal(list[15], undefined);
            $mol_assert_equal(calls1, 2);
            $mol_assert_equal(calls2, 2);
        },
        'lazy filter'() {
            let calls = 0;
            const list = $mol_range2(index => (++calls, index), () => 15).filter(v => v % 2).slice(0, 3);
            $mol_assert_equal(true, list instanceof Array);
            $mol_assert_equal(list.length, 3);
            $mol_assert_equal(list[0], 1);
            $mol_assert_equal(list[2], 5);
            $mol_assert_equal(list[3], undefined);
            $mol_assert_equal(calls, 8);
        },
        'lazy reverse'() {
            let calls = 0;
            const list = $mol_range2(index => (++calls, index), () => 10).toReversed().slice(0, 3);
            $mol_assert_equal(true, list instanceof Array);
            $mol_assert_equal(list.length, 3);
            $mol_assert_equal(list[0], 9);
            $mol_assert_equal(list[2], 7);
            $mol_assert_equal(list[3], undefined);
            $mol_assert_equal(calls, 2);
        },
        'lazy map'() {
            let calls1 = 0;
            let calls2 = 0;
            const source = $mol_range2(index => (++calls1, index), () => 5);
            const target = source.map((item, index, self) => {
                ++calls2;
                $mol_assert_equal(source, self);
                return index + 10;
            }, () => 5);
            $mol_assert_equal(true, target instanceof Array);
            $mol_assert_equal(target.length, 5);
            $mol_assert_equal(target[0], 10);
            $mol_assert_equal(target[4], 14);
            $mol_assert_equal(target[5], undefined);
            $mol_assert_equal(calls1, 2);
            $mol_assert_equal(calls2, 2);
        },
        'lazy slice'() {
            let calls = 0;
            const list = $mol_range2(index => (++calls, index), () => 10).slice(3, 7);
            $mol_assert_equal(true, list instanceof Array);
            $mol_assert_equal(list.length, 4);
            $mol_assert_equal(list[0], 3);
            $mol_assert_equal(list[3], 6);
            $mol_assert_equal(list[4], undefined);
            $mol_assert_equal(calls, 2);
        },
        'lazy some'() {
            let calls = 0;
            $mol_assert_equal(true, $mol_range2(index => (++calls, index), () => 5).some(v => v >= 2));
            $mol_assert_equal(calls, 3);
            $mol_assert_equal(false, $mol_range2(i => i, () => 0).some(v => true));
            $mol_assert_equal(true, $mol_range2(i => i).some(v => v > 5));
        },
        'lazy every'() {
            let calls = 0;
            $mol_assert_equal(false, $mol_range2(index => (++calls, index), () => 5).every(v => v < 2));
            $mol_assert_equal(calls, 3);
            $mol_assert_equal(true, $mol_range2(i => i, () => 0).every(v => false));
            $mol_assert_equal(false, $mol_range2(i => i).every(v => v < 5));
        },
        'lazyfy'() {
            let calls = 0;
            const list = $mol_range2([0, 1, 2, 3, 4, 5]).map(i => (++calls, i + 10)).slice(2);
            $mol_assert_equal(true, list instanceof Array);
            $mol_assert_equal(list.length, 4);
            $mol_assert_equal(calls, 0);
            $mol_assert_equal(list[0], 12);
            $mol_assert_equal(list[3], 15);
            $mol_assert_equal(list[4], undefined);
            $mol_assert_equal(calls, 2);
        },
        'prevent modification'() {
            const list = $mol_range2(i => i, () => 5);
            $mol_assert_fail(() => list.push(4), TypeError);
            $mol_assert_fail(() => list.pop(), TypeError);
            $mol_assert_fail(() => list.unshift(4), TypeError);
            $mol_assert_fail(() => list.shift(), TypeError);
            $mol_assert_fail(() => list.splice(1, 2), TypeError);
            $mol_assert_fail(() => list[1] = 2, TypeError);
            $mol_assert_fail(() => list.reverse(), TypeError);
            $mol_assert_fail(() => list.sort(), TypeError);
            $mol_assert_equal(list.toString(), '0,1,2,3,4');
        }
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'nulls & undefineds'() {
            $mol_assert_ok($mol_compare_deep(null, null));
            $mol_assert_ok($mol_compare_deep(undefined, undefined));
            $mol_assert_not($mol_compare_deep(undefined, null));
            $mol_assert_not($mol_compare_deep({}, null));
        },
        'number'() {
            $mol_assert_ok($mol_compare_deep(1, 1));
            $mol_assert_ok($mol_compare_deep(Number.NaN, Number.NaN));
            $mol_assert_not($mol_compare_deep(1, 2));
            $mol_assert_ok($mol_compare_deep(Object(1), Object(1)));
            $mol_assert_not($mol_compare_deep(Object(1), Object(2)));
        },
        'POJO'() {
            $mol_assert_ok($mol_compare_deep({}, {}));
            $mol_assert_not($mol_compare_deep({ a: 1 }, { b: 2 }));
            $mol_assert_not($mol_compare_deep({ a: 1 }, { a: 2 }));
            $mol_assert_not($mol_compare_deep({}, { a: undefined }));
            $mol_assert_not($mol_compare_deep({ a: 1, b: 2 }, { b: 2, a: 1 }));
            $mol_assert_ok($mol_compare_deep({ a: { b: 1 } }, { a: { b: 1 } }));
            $mol_assert_ok($mol_compare_deep(Object.create(null), Object.create(null)));
        },
        'Array'() {
            $mol_assert_ok($mol_compare_deep([], []));
            $mol_assert_ok($mol_compare_deep([1, [2]], [1, [2]]));
            $mol_assert_not($mol_compare_deep([1, 2], [1, 3]));
            $mol_assert_not($mol_compare_deep([1, 2,], [1, 3, undefined]));
            $mol_assert_not($mol_compare_deep($mol_range2().slice(0, 0), new Array()));
            $mol_assert_not($mol_compare_deep($mol_range2(), $mol_range2()));
        },
        'Non POJO are different'() {
            class Thing extends Object {
            }
            $mol_assert_not($mol_compare_deep(new Thing, new Thing));
            $mol_assert_not($mol_compare_deep(() => 1, () => 1));
            $mol_assert_not($mol_compare_deep(new RangeError('Test error'), new RangeError('Test error')));
        },
        'POJO with symbols'() {
            const sym = Symbol();
            $mol_assert_ok($mol_compare_deep({ [sym]: true }, { [sym]: true }));
            $mol_assert_not($mol_compare_deep({ [Symbol()]: true }, { [Symbol()]: true }));
        },
        'same POJOs with cyclic reference'() {
            const a = { foo: {} };
            a['self'] = a;
            const b = { foo: {} };
            b['self'] = b;
            $mol_assert_ok($mol_compare_deep(a, b));
        },
        'same POJOs with cyclic reference with cache warmup'() {
            const obj1 = { test: 1, obj3: null };
            const obj1_copy = { test: 1, obj3: null };
            const obj2 = { test: 2, obj1 };
            const obj2_copy = { test: 2, obj1: obj1_copy };
            const obj3 = { test: 3, obj2 };
            const obj3_copy = { test: 3, obj2: obj2_copy };
            obj1.obj3 = obj3;
            obj1_copy.obj3 = obj3_copy;
            $mol_assert_not($mol_compare_deep(obj1, {}));
            $mol_assert_not($mol_compare_deep(obj2, {}));
            $mol_assert_not($mol_compare_deep(obj3, {}));
            $mol_assert_ok($mol_compare_deep(obj3, obj3_copy));
        },
        'Date'() {
            $mol_assert_ok($mol_compare_deep(new Date(12345), new Date(12345)));
            $mol_assert_not($mol_compare_deep(new Date(12345), new Date(12346)));
        },
        'RegExp'() {
            $mol_assert_ok($mol_compare_deep(/\x22/mig, /\x22/mig));
            $mol_assert_not($mol_compare_deep(/\x22/mig, /\x21/mig));
            $mol_assert_not($mol_compare_deep(/\x22/mig, /\x22/mg));
        },
        'Error'() {
            $mol_assert_not($mol_compare_deep(new Error('xxx'), new Error('xxx')));
            const fail = (message) => new Error(message);
            $mol_assert_ok($mol_compare_deep(...['xxx', 'xxx'].map(msg => new Error(msg))));
            $mol_assert_not($mol_compare_deep(...['xxx', 'yyy'].map(msg => new Error(msg))));
        },
        'Map'() {
            $mol_assert_ok($mol_compare_deep(new Map, new Map));
            $mol_assert_ok($mol_compare_deep(new Map([[1, [2]]]), new Map([[1, [2]]])));
            $mol_assert_ok($mol_compare_deep(new Map([[[1], 2]]), new Map([[[1], 2]])));
            $mol_assert_not($mol_compare_deep(new Map([[1, 2]]), new Map([[1, 3]])));
            $mol_assert_not($mol_compare_deep(new Map([[[1], 2]]), new Map([[[3], 2]])));
        },
        'Set'() {
            $mol_assert_ok($mol_compare_deep(new Set, new Set));
            $mol_assert_ok($mol_compare_deep(new Set([1, [2]]), new Set([1, [2]])));
            $mol_assert_not($mol_compare_deep(new Set([1]), new Set([2])));
        },
        'Uint8Array'() {
            $mol_assert_ok($mol_compare_deep(new Uint8Array, new Uint8Array));
            $mol_assert_ok($mol_compare_deep(new Uint8Array([0]), new Uint8Array([0])));
            $mol_assert_not($mol_compare_deep(new Uint8Array([0]), new Uint8Array([1])));
        },
        'DataView'() {
            $mol_assert_ok($mol_compare_deep(new DataView(new Uint8Array().buffer), new DataView(new Uint8Array().buffer)));
            $mol_assert_ok($mol_compare_deep(new DataView(new Uint8Array([0]).buffer), new DataView(new Uint8Array([0]).buffer)));
            $mol_assert_not($mol_compare_deep(new DataView(new Uint8Array([0]).buffer), new DataView(new Uint8Array([1]).buffer)));
        },
        'Serializale'() {
            class User {
                name;
                rand;
                constructor(name, rand = Math.random()) {
                    this.name = name;
                    this.rand = rand;
                }
                [Symbol.toPrimitive](mode) {
                    return this.name;
                }
            }
            $mol_assert_ok($mol_compare_deep(new User('Jin'), new User('Jin')));
            $mol_assert_not($mol_compare_deep(new User('Jin'), new User('John')));
        },
        'Iterable'() {
            $mol_assert_ok($mol_compare_deep(new URLSearchParams({ foo: 'bar' }), new URLSearchParams({ foo: 'bar' })));
            $mol_assert_not($mol_compare_deep(new URLSearchParams({ foo: 'xxx' }), new URLSearchParams({ foo: 'yyy' })));
            $mol_assert_not($mol_compare_deep(new URLSearchParams({ foo: 'xxx', bar: 'yyy' }), new URLSearchParams({ bar: 'yyy', foo: 'xxx' })));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'must be false'() {
            $mol_assert_not(0);
        },
        'must be true'() {
            $mol_assert_ok(1);
        },
        'two must be equal'() {
            $mol_assert_equal(2, 2);
        },
        'three must be equal'() {
            $mol_assert_equal(2, 2, 2);
        },
        'two must be unique'() {
            $mol_assert_unique([2], [3]);
        },
        'three must be unique'() {
            $mol_assert_unique([1], [2], [3]);
        },
        'two must be alike'() {
            $mol_assert_like([3], [3]);
        },
        'three must be alike'() {
            $mol_assert_like([3], [3], [3]);
        },
        'two object must be alike'() {
            $mol_assert_like({ a: 1 }, { a: 1 });
        },
        'three object must be alike'() {
            $mol_assert_like({ a: 1 }, { a: 1 }, { a: 1 });
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test_mocks.push($ => {
        $.$mol_log3_come = () => { };
        $.$mol_log3_done = () => { };
        $.$mol_log3_fail = () => { };
        $.$mol_log3_warn = () => { };
        $.$mol_log3_rise = () => { };
        $.$mol_log3_area = () => () => { };
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'get'() {
            const proxy = $mol_delegate({}, () => ({ foo: 777 }));
            $mol_assert_equal(proxy.foo, 777);
        },
        'has'() {
            const proxy = $mol_delegate({}, () => ({ foo: 777 }));
            $mol_assert_equal('foo' in proxy, true);
        },
        'set'() {
            const target = { foo: 777 };
            const proxy = $mol_delegate({}, () => target);
            proxy.foo = 123;
            $mol_assert_equal(target.foo, 123);
        },
        'getOwnPropertyDescriptor'() {
            const proxy = $mol_delegate({}, () => ({ foo: 777 }));
            $mol_assert_like(Object.getOwnPropertyDescriptor(proxy, 'foo'), {
                value: 777,
                writable: true,
                enumerable: true,
                configurable: true,
            });
        },
        'ownKeys'() {
            const proxy = $mol_delegate({}, () => ({ foo: 777, [Symbol.toStringTag]: 'bar' }));
            $mol_assert_like(Reflect.ownKeys(proxy), ['foo', Symbol.toStringTag]);
        },
        'getPrototypeOf'() {
            class Foo {
            }
            const proxy = $mol_delegate({}, () => new Foo);
            $mol_assert_equal(Object.getPrototypeOf(proxy), Foo.prototype);
        },
        'setPrototypeOf'() {
            class Foo {
            }
            const target = {};
            const proxy = $mol_delegate({}, () => target);
            Object.setPrototypeOf(proxy, Foo.prototype);
            $mol_assert_equal(Object.getPrototypeOf(target), Foo.prototype);
        },
        'instanceof'() {
            class Foo {
            }
            const proxy = $mol_delegate({}, () => new Foo);
            $mol_assert_ok(proxy instanceof Foo);
            $mol_assert_ok(proxy instanceof $mol_delegate);
        },
        'autobind'() {
            class Foo {
            }
            const proxy = $mol_delegate({}, () => new Foo);
            $mol_assert_ok(proxy instanceof Foo);
            $mol_assert_ok(proxy instanceof $mol_delegate);
        },
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'span for same uri'($) {
            const span = new $mol_span('test.ts', '', 1, 3, 4);
            const child = span.span(4, 5, 8);
            $mol_assert_equal(child.uri, 'test.ts');
            $mol_assert_equal(child.row, 4);
            $mol_assert_equal(child.col, 5);
            $mol_assert_equal(child.length, 8);
        },
        'span after of given position'($) {
            const span = new $mol_span('test.ts', '', 1, 3, 4);
            const child = span.after(11);
            $mol_assert_equal(child.uri, 'test.ts');
            $mol_assert_equal(child.row, 1);
            $mol_assert_equal(child.col, 7);
            $mol_assert_equal(child.length, 11);
        },
        'slice span - regular'($) {
            const span = new $mol_span('test.ts', '', 1, 3, 5);
            const child = span.slice(1, 4);
            $mol_assert_equal(child.row, 1);
            $mol_assert_equal(child.col, 4);
            $mol_assert_equal(child.length, 3);
            const child2 = span.slice(2, 2);
            $mol_assert_equal(child2.col, 5);
            $mol_assert_equal(child2.length, 0);
        },
        'slice span - negative'($) {
            const span = new $mol_span('test.ts', '', 1, 3, 5);
            const child = span.slice(-3, -1);
            $mol_assert_equal(child.row, 1);
            $mol_assert_equal(child.col, 5);
            $mol_assert_equal(child.length, 2);
        },
        'slice span - out of range'($) {
            const span = new $mol_span('test.ts', '', 1, 3, 5);
            $mol_assert_fail(() => span.slice(-1, 3), `End value '3' can't be less than begin value (test.ts#1:3/5)`);
            $mol_assert_fail(() => span.slice(1, 6), `End value '6' out of range (test.ts#1:3/5)`);
            $mol_assert_fail(() => span.slice(1, 10), `End value '10' out of range (test.ts#1:3/5)`);
        },
        'error handling'($) {
            const span = new $mol_span('test.ts', '', 1, 3, 4);
            const error = span.error('Some error');
            $mol_assert_equal(error.message, 'Some error (test.ts#1:3/4)');
        }
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'inserting'($) {
            $mol_assert_equal($.$mol_tree2_from_string('a b c d\n')
                .insert($mol_tree2.struct('x'), 'a', 'b', 'c')
                .toString(), 'a b x\n');
            $mol_assert_equal($.$mol_tree2_from_string('a b\n')
                .insert($mol_tree2.struct('x'), 'a', 'b', 'c', 'd')
                .toString(), 'a b c x\n');
            $mol_assert_equal($.$mol_tree2_from_string('a b c d\n')
                .insert($mol_tree2.struct('x'), 0, 0, 0)
                .toString(), 'a b x\n');
            $mol_assert_equal($.$mol_tree2_from_string('a b\n')
                .insert($mol_tree2.struct('x'), 0, 0, 0, 0)
                .toString(), 'a b \\\n\tx\n');
            $mol_assert_equal($.$mol_tree2_from_string('a b c d\n')
                .insert($mol_tree2.struct('x'), null, null, null)
                .toString(), 'a b x\n');
            $mol_assert_equal($.$mol_tree2_from_string('a b\n')
                .insert($mol_tree2.struct('x'), null, null, null, null)
                .toString(), 'a b \\\n\tx\n');
        },
        'deleting'($) {
            $mol_assert_equal($.$mol_tree2_from_string('a b c d\n')
                .insert(null, 'a', 'b', 'c')
                .toString(), 'a b\n');
            $mol_assert_equal($.$mol_tree2_from_string('a b c d\n')
                .insert(null, 0, 0, 0)
                .toString(), 'a b\n');
        },
        'hack'($) {
            const res = $.$mol_tree2_from_string(`foo bar xxx\n`)
                .hack({
                'bar': (input, belt) => [input.struct('777', input.hack(belt))],
            });
            $mol_assert_equal(res.map(String), ['foo 777 xxx\n']);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'tree parsing'($) {
            $mol_assert_equal($.$mol_tree2_from_string("foo\nbar\n").kids.length, 2);
            $mol_assert_equal($.$mol_tree2_from_string("foo\nbar\n").kids[1].type, "bar");
            $mol_assert_equal($.$mol_tree2_from_string("foo\n\n\n").kids.length, 1);
            $mol_assert_equal($.$mol_tree2_from_string("=foo\n\\bar\n").kids.length, 2);
            $mol_assert_equal($.$mol_tree2_from_string("=foo\n\\bar\n").kids[1].value, "bar");
            $mol_assert_equal($.$mol_tree2_from_string("foo bar \\pol\n").kids[0].kids[0].kids[0].value, "pol");
            $mol_assert_equal($.$mol_tree2_from_string("foo bar\n\t\\pol\n\t\\men\n").kids[0].kids[0].kids[1].value, "men");
            $mol_assert_equal($.$mol_tree2_from_string('foo bar \\text\n').toString(), 'foo bar \\text\n');
        },
        'Too many tabs'($) {
            const tree = `
				foo
						bar
			`;
            $mol_assert_fail(() => {
                $.$mol_tree2_from_string(tree, 'test');
            }, 'Too many tabs\ntest#3:1/6\n!!!!!!\n\t\t\t\t\t\tbar');
        },
        'Too few tabs'($) {
            const tree = `
					foo
				bar
			`;
            $mol_assert_fail(() => {
                $.$mol_tree2_from_string(tree, 'test');
            }, 'Too few tabs\ntest#3:1/4\n!!!!\n\t\t\t\tbar');
        },
        'Wrong nodes separator at start'($) {
            const tree = `foo\n \tbar\n`;
            $mol_assert_fail(() => {
                $.$mol_tree2_from_string(tree, 'test');
            }, 'Wrong nodes separator\ntest#2:1/2\n!!\n \tbar');
        },
        'Wrong nodes separator in the middle'($) {
            const tree = `foo  bar\n`;
            $mol_assert_fail(() => {
                $.$mol_tree2_from_string(tree, 'test');
            }, 'Wrong nodes separator\ntest#1:5/1\n    !\nfoo  bar');
        },
        'Unexpected EOF, LF required'($) {
            const tree = `	foo`;
            $mol_assert_fail(() => {
                $.$mol_tree2_from_string(tree, 'test');
            }, 'Unexpected EOF, LF required\ntest#1:5/1\n	   !\n	foo');
        },
        'Errors skip and collect'($) {
            const tree = `foo  bar`;
            const errors = [];
            const $$ = $.$mol_ambient({
                $mol_fail: (error) => {
                    errors.push(error.message);
                    return null;
                }
            });
            const res = $$.$mol_tree2_from_string(tree, 'test');
            $mol_assert_like(errors, [
                'Wrong nodes separator\ntest#1:5/1\n    !\nfoo  bar',
                'Unexpected EOF, LF required\ntest#1:9/1\n        !\nfoo  bar',
            ]);
            $mol_assert_equal(res.toString(), 'foo bar\n');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'fromJSON'() {
            $mol_assert_equal($mol_tree2_from_json([]).toString(), '/\n');
            $mol_assert_equal($mol_tree2_from_json([false, true]).toString(), '/\n\tfalse\n\ttrue\n');
            $mol_assert_equal($mol_tree2_from_json([0, 1, 2.3]).toString(), '/\n\t0\n\t1\n\t2.3\n');
            $mol_assert_equal($mol_tree2_from_json(new Uint16Array([1, 10, 256])).toString(), '\\\x01\x00\n\\\x00\x00\x01\n');
            $mol_assert_equal($mol_tree2_from_json(['', 'foo', 'bar\nbaz']).toString(), '/\n\t\\\n\t\\foo\n\t\\\n\t\t\\bar\n\t\t\\baz\n');
            $mol_assert_equal($mol_tree2_from_json({ 'foo': false, 'bar\nbaz': 'lol' }).toString(), '*\n\tfoo false\n\t\\\n\t\t\\bar\n\t\t\\baz\n\t\t\\lol\n');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'init with overload'() {
            class X extends $mol_object {
                foo() {
                    return 1;
                }
            }
            var x = X.make({
                foo: () => 2,
            });
            $mol_assert_equal(x.foo(), 2);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'auto name'() {
            class Invalid extends $mol_error_mix {
            }
            const mix = new Invalid('foo');
            $mol_assert_equal(mix.name, 'Invalid_Error');
        },
        'simpe mix'() {
            const mix = new $mol_error_mix('foo', {}, new Error('bar'), new Error('lol'));
            $mol_assert_equal(mix.message, 'foo');
            $mol_assert_equal(mix.errors.map(e => e.message), ['bar', 'lol']);
        },
        'provide additional info'() {
            class Invalid extends $mol_error_mix {
            }
            const mix = new $mol_error_mix('Wrong password', {}, new Invalid('Too short', { value: 'p@ssw0rd', hint: '> 8 letters' }), new Invalid('Too simple', { value: 'p@ssw0rd', hint: 'need capital letter' }));
            const hints = [];
            if (mix instanceof $mol_error_mix) {
                for (const er of mix.errors) {
                    if (er instanceof Invalid) {
                        hints.push(er.cause?.hint ?? '');
                    }
                }
            }
            $mol_assert_equal(hints, ['> 8 letters', 'need capital letter']);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'Collect deps'() {
            const pub1 = new $mol_wire_pub;
            const pub2 = new $mol_wire_pub;
            const sub = new $mol_wire_pub_sub;
            const bu1 = sub.track_on();
            try {
                pub1.promote();
                pub2.promote();
                pub2.promote();
            }
            finally {
                sub.track_cut();
                sub.track_off(bu1);
            }
            pub1.emit();
            pub2.emit();
            $mol_assert_like(sub.pub_list, [pub1, pub2, pub2]);
            const bu2 = sub.track_on();
            try {
                pub1.promote();
                pub1.promote();
                pub2.promote();
            }
            finally {
                sub.track_cut();
                sub.track_off(bu2);
            }
            pub1.emit();
            pub2.emit();
            $mol_assert_like(sub.pub_list, [pub1, pub1, pub2]);
        },
        'cyclic detection'($) {
            const sub1 = new $mol_wire_pub_sub;
            const sub2 = new $mol_wire_pub_sub;
            const bu1 = sub1.track_on();
            try {
                const bu2 = sub2.track_on();
                try {
                    $mol_assert_fail(() => sub1.promote(), 'Circular subscription');
                }
                finally {
                    sub2.track_cut();
                    sub2.track_off(bu2);
                }
            }
            finally {
                sub1.track_cut();
                sub1.track_off(bu1);
            }
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_after_mock_queue = [];
    function $mol_after_mock_warp() {
        const queue = $.$mol_after_mock_queue.splice(0);
        for (const task of queue)
            task();
    }
    $.$mol_after_mock_warp = $mol_after_mock_warp;
    class $mol_after_mock_commmon extends $mol_object2 {
        task;
        promise = Promise.resolve();
        cancelled = false;
        id;
        constructor(task) {
            super();
            this.task = task;
            $.$mol_after_mock_queue.push(task);
        }
        destructor() {
            const index = $.$mol_after_mock_queue.indexOf(this.task);
            if (index >= 0)
                $.$mol_after_mock_queue.splice(index, 1);
        }
    }
    $.$mol_after_mock_commmon = $mol_after_mock_commmon;
    class $mol_after_mock_timeout extends $mol_after_mock_commmon {
        delay;
        constructor(delay, task) {
            super(task);
            this.delay = delay;
        }
    }
    $.$mol_after_mock_timeout = $mol_after_mock_timeout;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test_mocks.push($ => {
        $.$mol_after_tick = $mol_after_mock_commmon;
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Sync execution'() {
            class Sync extends $mol_object2 {
                static calc(a, b) {
                    return a + b;
                }
            }
            __decorate([
                $mol_wire_method
            ], Sync, "calc", null);
            $mol_assert_equal(Sync.calc(1, 2), 3);
        },
        async 'async <=> sync'() {
            class SyncAsync extends $mol_object2 {
                static async val(a) {
                    return a;
                }
                static sum(a, b) {
                    const syn = $mol_wire_sync(this);
                    return syn.val(a) + syn.val(b);
                }
                static async calc(a, b) {
                    return 5 + await $mol_wire_async(this).sum(a, b);
                }
            }
            $mol_assert_equal(await SyncAsync.calc(1, 2), 8);
        },
        async 'Idempotence control'() {
            class Idempotence extends $mol_object2 {
                static logs_idemp = 0;
                static logs_unidemp = 0;
                static log_idemp() {
                    this.logs_idemp += 1;
                }
                static log_unidemp() {
                    this.logs_unidemp += 1;
                }
                static async val(a) {
                    return a;
                }
                static sum(a, b) {
                    this.log_idemp();
                    this.log_unidemp();
                    const syn = $mol_wire_sync(this);
                    return syn.val(a) + syn.val(b);
                }
                static async calc(a, b) {
                    return 5 + await $mol_wire_async(this).sum(a, b);
                }
            }
            __decorate([
                $mol_wire_method
            ], Idempotence, "log_idemp", null);
            $mol_assert_equal(await Idempotence.calc(1, 2), 8);
            $mol_assert_equal(Idempotence.logs_idemp, 1);
            $mol_assert_equal(Idempotence.logs_unidemp, 3);
        },
        async 'Error handling'() {
            class Handle extends $mol_object2 {
                static async sum(a, b) {
                    $mol_fail(new Error('test error ' + (a + b)));
                }
                static check() {
                    try {
                        return $mol_wire_sync(Handle).sum(1, 2);
                    }
                    catch (error) {
                        if ($mol_promise_like(error))
                            $mol_fail_hidden(error);
                        $mol_assert_equal(error.message, 'test error 3');
                    }
                }
            }
            await $mol_wire_async(Handle).check();
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'test types'($) {
            class A {
                static a() {
                    return '';
                }
                static b() {
                    return $mol_wire_async(this).a();
                }
            }
        },
        async 'Latest method calls wins'($) {
            class NameLogger extends $mol_object2 {
                static $ = $;
                static first = [];
                static last = [];
                static send(next) {
                    $mol_wire_sync(this.first).push(next);
                    $$.$mol_wait_timeout(0);
                    this.last.push(next);
                }
            }
            const name = $mol_wire_async(NameLogger).send;
            name('john');
            const promise = name('jin');
            $.$mol_after_mock_warp();
            await promise;
            $mol_assert_equal(NameLogger.first, ['john', 'jin']);
            $mol_assert_equal(NameLogger.last, ['jin']);
        },
        async 'Latest function calls wins'($) {
            const first = [];
            const last = [];
            function send_name(next) {
                $mol_wire_sync(first).push(next);
                $$.$mol_wait_timeout(0);
                last.push(next);
            }
            const name = $mol_wire_async(send_name);
            name('john');
            const promise = name('jin');
            $.$mol_after_mock_warp();
            await promise;
            $mol_assert_equal(first, ['john', 'jin']);
            $mol_assert_equal(last, ['jin']);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'test types'($) {
            class A {
                static a() {
                    return Promise.resolve('');
                }
                static b() {
                    return $mol_wire_sync(this).a();
                }
            }
        },
        async 'test method from host'($) {
            let count = 0;
            class A {
                static a() {
                    return $mol_wire_sync(this).b();
                }
                static b() { return Promise.resolve(++count); }
            }
            $mol_assert_equal(await $mol_wire_async(A).a(), 1, count);
        },
        async 'test function'($) {
            let count = 0;
            class A {
                static a() {
                    return $mol_wire_sync(this.b)();
                }
                static b() { return Promise.resolve(++count); }
            }
            $mol_assert_equal(await $mol_wire_async(A).a(), 1, count);
        },
        async 'test construct itself'($) {
            class A {
                static instances = [];
                static a() {
                    const a = new ($mol_wire_sync(A))();
                    this.instances.push(a);
                    $mol_wire_sync(this).b();
                }
                static b() { return Promise.resolve(); }
            }
            await $mol_wire_async(A).a();
            $mol_assert_equal(A.instances.length, 2);
            $mol_assert_equal(A.instances[0] instanceof A);
            $mol_assert_equal(A.instances[0], A.instances[1]);
        }
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test_mocks.push($ => {
        $.$mol_after_timeout = $mol_after_mock_timeout;
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test_mocks.push($ => {
        $.$mol_after_work = $mol_after_mock_timeout;
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    var $$;
    (function ($$) {
        $mol_test_mocks.push($ => {
            $.$mol_wait_timeout = function $mol_wait_timeout_mock(timeout) { };
            $.$mol_wait_timeout_async = async function $mol_wait_timeout_async_mock(timeout) { };
        });
    })($$ = $_1.$$ || ($_1.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    var $$;
    (function ($$) {
        $mol_test_mocks.push($ => {
            $.$mol_wait_rest = function $mol_wait_rest_mock() { };
            $.$mol_wait_rest_async = async function $mol_wait_rest_async_mock() { };
        });
    })($$ = $_1.$$ || ($_1.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        async 'exec timeout auto kill child process'($) {
            let close_mock = () => { };
            const error_message = 'Run error, timeout';
            function mol_run_spawn_sync_mock() {
                return {
                    output: [],
                    stdout: error_message,
                    stderr: '',
                    status: 0,
                    signal: null,
                    pid: 123,
                };
            }
            function mol_run_spawn_mock() {
                return {
                    on(name, cb) {
                        if (name === 'exit')
                            close_mock = cb;
                    },
                    kill() { close_mock(); }
                };
            }
            const context_mock = $.$mol_ambient({
                $mol_run_spawn_sync: mol_run_spawn_sync_mock,
                $mol_run_spawn: mol_run_spawn_mock
            });
            class $mol_run_mock extends $mol_run {
                static get $() { return context_mock; }
                static async_enabled() {
                    return true;
                }
            }
            let message = '';
            try {
                const res = await $mol_wire_async($mol_run_mock).spawn({
                    command: 'sleep 10',
                    dir: '.',
                    timeout: 10,
                    env: { 'MOL_RUN_ASYNC': '1' }
                });
            }
            catch (e) {
                message = e.message;
            }
            $mol_assert_equal(message, error_message);
        }
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'Cached channel'($) {
            class App extends $mol_object2 {
                static $ = $;
                static value(next = 1) {
                    return next + 1;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "value", null);
            $mol_assert_equal(App.value(), 2);
            App.value(2);
            $mol_assert_equal(App.value(), 3);
        },
        'Read Pushed'($) {
            class App extends $mol_object2 {
                static $ = $;
                static value(next = 0) {
                    return next;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "value", null);
            $mol_assert_equal(App.value(1), 1);
            $mol_assert_equal(App.value(), 1);
        },
        'Mem overrides mem'($) {
            class Base extends $mol_object2 {
                static $ = $;
                static value(next = 1) {
                    return next + 1;
                }
            }
            __decorate([
                $mol_wire_solo
            ], Base, "value", null);
            class Middle extends Base {
                static value(next) {
                    return super.value(next) + 1;
                }
            }
            __decorate([
                $mol_wire_solo
            ], Middle, "value", null);
            class App extends Middle {
                static value(next) {
                    return super.value(next) * 3;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "value", null);
            $mol_assert_equal(App.value(), 9);
            $mol_assert_equal(App.value(5), 21);
            $mol_assert_equal(App.value(), 21);
        },
        'Auto recalculation of cached values'($) {
            class App extends $mol_object2 {
                static $ = $;
                static xxx(next) {
                    return next || 1;
                }
                static yyy() {
                    return this.xxx() + 1;
                }
                static zzz() {
                    return this.yyy() + 1;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "xxx", null);
            __decorate([
                $mol_wire_solo
            ], App, "yyy", null);
            __decorate([
                $mol_wire_solo
            ], App, "zzz", null);
            $mol_assert_equal(App.yyy(), 2);
            $mol_assert_equal(App.zzz(), 3);
            App.xxx(5);
            $mol_assert_equal(App.zzz(), 7);
        },
        'Skip recalculation when actually no dependency changes'($) {
            const log = [];
            class App extends $mol_object2 {
                static $ = $;
                static xxx(next) {
                    log.push('xxx');
                    return next || 1;
                }
                static yyy() {
                    log.push('yyy');
                    return [Math.sign(this.xxx())];
                }
                static zzz() {
                    log.push('zzz');
                    return this.yyy()[0] + 1;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "xxx", null);
            __decorate([
                $mol_wire_solo
            ], App, "yyy", null);
            __decorate([
                $mol_wire_solo
            ], App, "zzz", null);
            App.zzz();
            $mol_assert_like(log, ['zzz', 'yyy', 'xxx']);
            App.xxx(5);
            $mol_assert_like(log, ['zzz', 'yyy', 'xxx', 'xxx']);
            App.zzz();
            $mol_assert_like(log, ['zzz', 'yyy', 'xxx', 'xxx', 'yyy']);
        },
        'Flow: Auto'($) {
            class App extends $mol_object2 {
                static get $() { return $; }
                static source(next = 1) { return next; }
                static condition(next = true) { return next; }
                static counter = 0;
                static result() {
                    const res = this.condition() ? this.source() : 0;
                    return res + this.counter++;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "source", null);
            __decorate([
                $mol_wire_solo
            ], App, "condition", null);
            __decorate([
                $mol_wire_solo
            ], App, "result", null);
            $mol_assert_equal(App.result(), 1);
            $mol_assert_equal(App.counter, 1);
            App.source(10);
            $mol_assert_equal(App.result(), 11);
            $mol_assert_equal(App.counter, 2);
            App.condition(false);
            $mol_assert_equal(App.result(), 2);
            $mol_assert_equal(App.counter, 3);
            $mol_wire_fiber.sync();
            $mol_assert_equal(App.source(), 1);
            App.source(20);
            $mol_assert_equal(App.result(), 2);
            $mol_assert_equal(App.counter, 3);
            App.condition(true);
            $mol_assert_equal(App.result(), 23);
            $mol_assert_equal(App.counter, 4);
        },
        'Dupes: Equality'($) {
            let counter = 0;
            class App extends $mol_object2 {
                static $ = $;
                static foo(next) {
                    return next ?? { numbs: [1] };
                }
                static bar() {
                    return { ...this.foo(), count: ++counter };
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "foo", null);
            __decorate([
                $mol_wire_solo
            ], App, "bar", null);
            $mol_assert_like(App.bar(), { numbs: [1], count: 1 });
            App.foo({ numbs: [1] });
            $mol_assert_like(App.bar(), { numbs: [1], count: 1 });
            App.foo({ numbs: [2] });
            $mol_assert_like(App.bar(), { numbs: [2], count: 2 });
        },
        'Cycle: Fail'($) {
            class App extends $mol_object2 {
                static $ = $;
                static foo() {
                    return this.bar() + 1;
                }
                static bar() {
                    return this.foo() + 1;
                }
                static test() {
                    $mol_assert_fail(() => App.foo(), 'Circular subscription');
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "foo", null);
            __decorate([
                $mol_wire_solo
            ], App, "bar", null);
            __decorate([
                $mol_wire_method
            ], App, "test", null);
            App.test();
        },
        'Different order of pull and push'($) {
            class App extends $mol_object2 {
                static $ = $;
                static store(next = 0) {
                    return next;
                }
                static fast(next) {
                    return this.store(next);
                }
                static slow(next) {
                    if (next !== undefined)
                        this.slow();
                    return this.store(next);
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "store", null);
            __decorate([
                $mol_wire_solo
            ], App, "fast", null);
            __decorate([
                $mol_wire_solo
            ], App, "slow", null);
            App.fast();
            $mol_assert_equal(App.slow(666), 666);
            $mol_assert_equal(App.fast(), App.slow(), 666);
            App.store(777);
            $mol_assert_equal(App.fast(), App.slow(), 777);
        },
        'Actions inside invariant'($) {
            class App extends $mol_object2 {
                static $ = $;
                static count(next = 0) {
                    return next;
                }
                static count2() {
                    return this.count();
                }
                static res() {
                    const count = this.count2();
                    if (!count)
                        this.count(count + 1);
                    return count + 1;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "count", null);
            __decorate([
                $mol_wire_solo
            ], App, "count2", null);
            __decorate([
                $mol_wire_solo
            ], App, "res", null);
            $mol_assert_like(App.res(), 1);
            App.count(5);
            $mol_assert_like(App.res(), 6);
        },
        async 'Toggle with async'($) {
            class App extends $mol_object2 {
                static $ = $;
                static checked(next = false) {
                    $$.$mol_wait_timeout(0);
                    return next;
                }
                static toggle() {
                    const prev = this.checked();
                    $mol_assert_unique(this.checked(!prev), prev);
                }
                static res() {
                    return this.checked();
                }
                static test() {
                    $mol_assert_equal(App.res(), false);
                    App.toggle();
                    $mol_assert_equal(App.res(), true);
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "checked", null);
            __decorate([
                $mol_wire_method
            ], App, "toggle", null);
            __decorate([
                $mol_wire_solo
            ], App, "res", null);
            __decorate([
                $mol_wire_method
            ], App, "test", null);
            await $mol_wire_async(App).test();
        },
        'Restore after error'($) {
            class App extends $mol_object2 {
                static get $() { return $; }
                static condition(next = false) { return next; }
                static broken() {
                    if (this.condition()) {
                        $mol_fail(new Error('test error'));
                    }
                    return 1;
                }
                static result() {
                    return this.broken();
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "condition", null);
            __decorate([
                $mol_wire_solo
            ], App, "broken", null);
            __decorate([
                $mol_wire_solo
            ], App, "result", null);
            $mol_assert_equal(App.result(), 1);
            App.condition(true);
            $mol_assert_fail(() => App.result(), 'test error');
            App.condition(false);
            $mol_assert_equal(App.result(), 1);
        },
        async 'Wait for data'($) {
            class App extends $mol_object2 {
                static $ = $;
                static async source() {
                    return 'Jin';
                }
                static middle() {
                    return $mol_wire_sync(this).source();
                }
                static target() {
                    return this.middle();
                }
                static test() {
                    $mol_assert_equal(App.target(), 'Jin');
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "middle", null);
            __decorate([
                $mol_wire_solo
            ], App, "target", null);
            __decorate([
                $mol_wire_method
            ], App, "test", null);
            await $mol_wire_async(App).test();
        },
        'Auto destroy on long alone'($) {
            let destroyed = false;
            class App extends $mol_object2 {
                static $ = $;
                static showing(next = true) {
                    return next;
                }
                static details() {
                    return {
                        destructor() {
                            destroyed = true;
                        }
                    };
                }
                static render() {
                    return this.showing() ? this.details() : null;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "showing", null);
            __decorate([
                $mol_wire_solo
            ], App, "details", null);
            __decorate([
                $mol_wire_solo
            ], App, "render", null);
            const details = App.render();
            $mol_assert_ok(details);
            App.showing(false);
            $mol_assert_not(App.render());
            App.showing(true);
            $mol_assert_equal(App.render(), details);
            $mol_wire_fiber.sync();
            $mol_assert_not(destroyed);
            App.showing(false);
            $mol_wire_fiber.sync();
            $mol_assert_ok(destroyed);
            App.showing(true);
            $mol_assert_unique(App.render(), details);
        },
        async 'Hold pubs while wait async task'($) {
            class App extends $mol_object2 {
                static $ = $;
                static counter = 0;
                static resets(next) {
                    return ($mol_wire_probe(() => this.resets()) ?? -1) + 1;
                }
                static async wait() { }
                static value() {
                    return ++this.counter;
                }
                static result() {
                    if (this.resets())
                        $mol_wire_sync(this).wait();
                    return this.value();
                }
                static test() {
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "resets", null);
            __decorate([
                $mol_wire_solo
            ], App, "value", null);
            __decorate([
                $mol_wire_solo
            ], App, "result", null);
            __decorate([
                $mol_wire_method
            ], App, "test", null);
            $mol_assert_equal(App.result(), 1);
            App.resets(null);
            $mol_wire_fiber.sync();
            $mol_assert_equal(await $mol_wire_async(App).result(), 1);
        },
        'Owned value has js-path name'() {
            class App extends $mol_object2 {
                static title() {
                    return new $mol_object2;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "title", null);
            $mol_assert_equal(`${App.title()}`, 'App.title<>');
        },
        'Unsubscribe from temp pubs on complete'($) {
            class Random extends $mol_object2 {
                static $ = $;
                static seed() {
                    return Math.random();
                }
                static resets(next) {
                    return Math.random();
                }
                static value() {
                    this.resets();
                    return this.seed();
                }
            }
            __decorate([
                $mol_wire_method
            ], Random, "seed", null);
            __decorate([
                $mol_wire_solo
            ], Random, "resets", null);
            __decorate([
                $mol_wire_solo
            ], Random, "value", null);
            const first = Random.value();
            Random.resets(null);
            $mol_assert_unique(Random.value(), first);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        async 'Error caching'($) {
            const next_cached = 123;
            class Some extends $mol_object2 {
                static $ = $;
                static data(id, next) {
                    if (next)
                        return next;
                    setTimeout(() => {
                        $mol_wire_async(this).data(id, next_cached);
                    }, 10);
                    $mol_fail_hidden(new Promise(() => { }));
                }
                static run() {
                    return this.data('1');
                }
            }
            __decorate([
                $mol_wire_plex
            ], Some, "data", null);
            __decorate([
                $mol_wire_method
            ], Some, "run", null);
            const val = await $mol_wire_async(Some).run();
            $mol_assert_equal(val, next_cached);
        },
        'Memoize by single simple key'($) {
            class Team extends $mol_object2 {
                static $ = $;
                static user_name(user, next) {
                    return next ?? user;
                }
                static user_names() {
                    return [
                        this.user_name('jin'),
                        this.user_name('john'),
                    ];
                }
            }
            __decorate([
                $mol_wire_plex
            ], Team, "user_name", null);
            __decorate([
                $mol_wire_solo
            ], Team, "user_names", null);
            $mol_assert_like(Team.user_names(), ['jin', 'john']);
            Team.user_name('jin', 'JIN');
            $mol_assert_like(Team.user_names(), ['JIN', 'john']);
        },
        'Memoize by single complex key'($) {
            class Map extends $mol_object2 {
                static $ = $;
                static tile(pos) {
                    return new String(`/tile=${pos}`);
                }
                static test() {
                    $mol_assert_like(this.tile([0, 1]), new String('/tile=0,1'));
                    $mol_assert_equal(this.tile([0, 1]), this.tile([0, 1]));
                }
            }
            __decorate([
                $mol_wire_plex
            ], Map, "tile", null);
            __decorate([
                $mol_wire_method
            ], Map, "test", null);
            Map.test();
        },
        'Owned value has js-path name'() {
            class App extends $mol_object2 {
                static like(friend) {
                    return new $mol_object2;
                }
                static relation([friend, props]) {
                    return new $mol_object2;
                }
            }
            __decorate([
                $mol_wire_plex
            ], App, "like", null);
            __decorate([
                $mol_wire_plex
            ], App, "relation", null);
            $mol_assert_equal(`${App.like(123)}`, 'App.like<123>');
            $mol_assert_equal(`${App.relation([123, [456]])}`, 'App.relation<[123,[456]]>');
        },
        'Deep deps'($) {
            class Fib extends $mol_object2 {
                static $ = $;
                static sums = 0;
                static value(index, next) {
                    if (next)
                        return next;
                    if (index < 2)
                        return 1;
                    ++this.sums;
                    return this.value(index - 1) + this.value(index - 2);
                }
            }
            __decorate([
                $mol_wire_plex
            ], Fib, "value", null);
            $mol_assert_equal(Fib.value(4), 5);
            $mol_assert_equal(Fib.sums, 3);
            Fib.value(1, 2);
            $mol_assert_equal(Fib.value(4), 8);
            $mol_assert_equal(Fib.sums, 6);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Previous value'() {
            class Cache extends $mol_object2 {
                static store(next) {
                    if (!next)
                        return {};
                    return {
                        ...$mol_wire_probe(() => this.store()) ?? {},
                        ...next,
                    };
                }
            }
            __decorate([
                $mol_wire_solo
            ], Cache, "store", null);
            $mol_assert_like(Cache.store(), {});
            $mol_assert_like(Cache.store({ foo: 666 }), { foo: 666 });
            $mol_assert_like(Cache.store({ bar: 777 }), { foo: 666, bar: 777 });
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'run callback'() {
            class Plus1 extends $mol_wrapper {
                static wrap(task) {
                    return function (...args) {
                        return task.call(this, ...args) + 1;
                    };
                }
            }
            $mol_assert_equal(Plus1.run(() => 2), 3);
        },
        'wrap function'() {
            class Plus1 extends $mol_wrapper {
                static wrap(task) {
                    return function (...args) {
                        return task.call(this, ...args) + 1;
                    };
                }
            }
            const obj = {
                level: 2,
                pow: Plus1.func(function (a) {
                    return a ** this.level;
                })
            };
            $mol_assert_equal(obj.pow(2), 5);
        },
        'decorate field getter'() {
            class Plus1 extends $mol_wrapper {
                static last = 0;
                static wrap(task) {
                    return function (...args) {
                        return Plus1.last = (task.call(this, ...args) || 0) + 1;
                    };
                }
            }
            class Foo {
                static get two() {
                    return 1;
                }
                static set two(next) { }
            }
            __decorate([
                Plus1.field
            ], Foo, "two", null);
            $mol_assert_equal(Foo.two, 2);
            Foo.two = 3;
            $mol_assert_equal(Plus1.last, 2);
            $mol_assert_equal(Foo.two, 2);
        },
        'decorate instance method'() {
            class Plus1 extends $mol_wrapper {
                static wrap(task) {
                    return function (...args) {
                        return task.call(this, ...args) + 1;
                    };
                }
            }
            class Foo1 {
                level = 2;
                pow(a) {
                    return a ** this.level;
                }
            }
            __decorate([
                Plus1.method
            ], Foo1.prototype, "pow", null);
            const Foo2 = Foo1;
            const foo = new Foo2;
            $mol_assert_equal(foo.pow(2), 5);
        },
        'decorate static method'() {
            class Plus1 extends $mol_wrapper {
                static wrap(task) {
                    return function (...args) {
                        return task.call(this, ...args) + 1;
                    };
                }
            }
            class Foo {
                static level = 2;
                static pow(a) {
                    return a ** this.level;
                }
            }
            __decorate([
                Plus1.method
            ], Foo, "pow", null);
            $mol_assert_equal(Foo.pow(2), 5);
        },
        'decorate class'() {
            class BarInc extends $mol_wrapper {
                static wrap(task) {
                    return function (...args) {
                        const foo = task.call(this, ...args);
                        foo.bar++;
                        return foo;
                    };
                }
            }
            let Foo = class Foo {
                bar;
                constructor(bar) {
                    this.bar = bar;
                }
            };
            Foo = __decorate([
                BarInc.class
            ], Foo);
            $mol_assert_equal(new Foo(2).bar, 3);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'memoize field'() {
            class Foo {
                static one = 1;
                static get two() {
                    return ++this.one;
                }
                static set two(next) { }
            }
            __decorate([
                $mol_memo.field
            ], Foo, "two", null);
            $mol_assert_equal(Foo.two, 2);
            $mol_assert_equal(Foo.two, 2);
            Foo.two = 3;
            $mol_assert_equal(Foo.two, 3);
            $mol_assert_equal(Foo.two, 3);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Primitives'() {
            $mol_assert_equal($mol_key(null), 'null');
            $mol_assert_equal($mol_key(false), 'false');
            $mol_assert_equal($mol_key(true), 'true');
            $mol_assert_equal($mol_key(0), '0');
            $mol_assert_equal($mol_key(1n << 64n), '18446744073709551616n');
            $mol_assert_equal($mol_key(''), '""');
        },
        'Array & POJO'() {
            $mol_assert_equal($mol_key([null]), '[null]');
            $mol_assert_equal($mol_key({ foo: 0 }), '{"foo":0}');
            $mol_assert_equal($mol_key({ foo: [false] }), '{"foo":[false]}');
        },
        'Uint8Array'() {
            $mol_assert_equal($mol_key(new Uint8Array([1, 2])), '[1,2]');
            $mol_assert_equal($mol_key([new Uint8Array([1, 2])]), '[[1,2]]');
            $mol_assert_equal($mol_key({ foo: new Uint8Array([1, 2]) }), '{"foo":[1,2]}');
        },
        'Function'() {
            const func = () => { };
            $mol_assert_equal($mol_key(func), $mol_key(func));
            $mol_assert_unique($mol_key(func), $mol_key(() => { }));
        },
        'Objects'() {
            class User {
            }
            const jin = new User();
            $mol_assert_equal($mol_key(jin), $mol_key(jin));
            $mol_assert_unique($mol_key(jin), $mol_key(new User()));
        },
        'Elements'() {
            const foo = $mol_jsx("div", null, "bar");
            $mol_assert_equal($mol_key(foo), $mol_key(foo));
            $mol_assert_unique($mol_key(foo), $mol_key($mol_jsx("div", null, "bar")));
        },
        'Custom JSON representation'() {
            class User {
                name;
                age;
                constructor(name, age) {
                    this.name = name;
                    this.age = age;
                }
                toJSON() { return { name: this.name }; }
            }
            $mol_assert_equal($mol_key(new User('jin', 18)), '{"name":"jin"}');
        },
        'Special native classes'() {
            $mol_assert_equal($mol_key(new Date('xyz')), 'null');
            $mol_assert_equal($mol_key(new Date('2001-01-02T03:04:05.678Z')), '"2001-01-02T03:04:05.678Z"');
            $mol_assert_equal($mol_key(/./), '"/./"');
            $mol_assert_equal($mol_key(/\./gimsu), '"/\\\\./gimsu"');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test_mocks.push($ => {
        $.$mol_after_frame = $mol_after_mock_commmon;
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $mol_wire_log.active();
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'const returns stored value'() {
            const foo = { bar: $mol_const(Math.random()) };
            $mol_assert_equal(foo.bar(), foo.bar());
            $mol_assert_equal(foo.bar(), foo.bar['()']);
        },
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'id auto generation'($) {
            class $mol_view_test_item extends $mol_view {
            }
            class $mol_view_test_block extends $mol_view {
                static $ = $;
                element(id) {
                    return new $mol_view_test_item();
                }
            }
            __decorate([
                $mol_mem_key
            ], $mol_view_test_block.prototype, "element", null);
            var x = $mol_view_test_block.Root(0);
            $mol_assert_equal(x.dom_node().id, '$mol_view_test_block.Root(0)');
            $mol_assert_equal(x.element(0).dom_node().id, '$mol_view_test_block.Root(0).element(0)');
        },
        'caching ref to dom node'($) {
            var x = new class extends $mol_view {
            };
            x.$ = $;
            $mol_assert_equal(x.dom_node(), x.dom_node());
        },
        'content render'($) {
            class $mol_view_test extends $mol_view {
                sub() {
                    return ['lol', 5];
                }
            }
            var x = new $mol_view_test();
            x.$ = $;
            var node = x.dom_tree();
            $mol_assert_equal(node.innerHTML, 'lol5');
        },
        'bem attributes generation'($) {
            class $mol_view_test_item extends $mol_view {
            }
            class $mol_view_test_block extends $mol_view {
                Element(id) {
                    return new $mol_view_test_item();
                }
            }
            __decorate([
                $mol_mem_key
            ], $mol_view_test_block.prototype, "Element", null);
            var x = new $mol_view_test_block();
            x.$ = $;
            $mol_assert_equal(x.dom_node().getAttribute('mol_view_test_block'), '');
            $mol_assert_equal(x.dom_node().getAttribute('mol_view'), '');
            $mol_assert_equal(x.Element(0).dom_node().getAttribute('mol_view_test_block_element'), '');
            $mol_assert_equal(x.Element(0).dom_node().getAttribute('mol_view_test_item'), '');
            $mol_assert_equal(x.Element(0).dom_node().getAttribute('mol_view'), '');
        },
        'render custom attributes'($) {
            class $mol_view_test extends $mol_view {
                attr() {
                    return {
                        'href': '#haha',
                        'required': true,
                        'hidden': false,
                    };
                }
            }
            var x = new $mol_view_test();
            x.$ = $;
            var node = x.dom_tree();
            $mol_assert_equal(node.getAttribute('href'), '#haha');
            $mol_assert_equal(node.getAttribute('required'), 'true');
            $mol_assert_equal(node.getAttribute('hidden'), null);
        },
        'render custom fields'($) {
            class $mol_view_test extends $mol_view {
                field() {
                    return {
                        'hidden': true
                    };
                }
            }
            var x = new $mol_view_test();
            x.$ = $;
            var node = x.dom_tree();
            $mol_assert_equal(node.hidden, true);
        },
        'attach event handlers'($) {
            var clicked = false;
            class $mol_view_test extends $mol_view {
                event() {
                    return {
                        'click': (next) => this.event_click(next)
                    };
                }
                event_click(next) {
                    clicked = true;
                }
            }
            var x = new $mol_view_test();
            x.$ = $;
            var node = x.dom_node();
            node.click();
            $mol_assert_ok(clicked);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_style_sheet_test1 extends $mol_view {
        Item() { return new $mol_view; }
    }
    $.$mol_style_sheet_test1 = $mol_style_sheet_test1;
    class $mol_style_sheet_test2 extends $mol_view {
        List() { return new $mol_style_sheet_test1; }
    }
    $.$mol_style_sheet_test2 = $mol_style_sheet_test2;
    $mol_test({
        'component block styles'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                display: 'block',
                zIndex: 1,
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test] {\n\tdisplay: block;\n\tz-index: 1;\n}\n');
        },
        'various units'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const { px, per } = $mol_style_unit;
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                width: per(50),
                height: px(50),
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test] {\n\twidth: 50%;\n\theight: 50px;\n}\n');
        },
        'various functions'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const { calc } = $mol_style_func;
            const { px, per } = $mol_style_unit;
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                width: calc(`${per(100)} - ${px(1)}`),
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test] {\n\twidth: calc(100% - 1px);\n}\n');
        },
        'property groups'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const { px } = $mol_style_unit;
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                flex: {
                    grow: 5
                }
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test] {\n\tflex-grow: 5;\n}\n');
        },
        'custom properties'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                '--isVariable': 'yes',
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test] {\n\t--is-variable: yes;\n}\n');
        },
        'custom property groups'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const { px } = $mol_style_unit;
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                '--variable': {
                    test: px(5)
                }
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test] {\n\t--variable-test: 5px;\n}\n');
        },
        'property shorthand'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const { px } = $mol_style_unit;
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                padding: [px(5), 'auto']
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test] {\n\tpadding: 5px auto;\n}\n');
        },
        'sequenced values'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const { url } = $mol_style_func;
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                background: {
                    image: [[url('foo')], [url('bar')]],
                },
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test] {\n\tbackground-image: url("foo"),url("bar");\n}\n');
        },
        'sequenced structs'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const { rem } = $mol_style_unit;
            const { hsla } = $mol_style_func;
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                box: {
                    shadow: [
                        {
                            inset: true,
                            x: 0,
                            y: 0,
                            blur: rem(.5),
                            spread: 0,
                            color: 'red',
                        },
                        {
                            inset: false,
                            x: 0,
                            y: 0,
                            blur: rem(.5),
                            spread: 0,
                            color: 'blue',
                        },
                    ],
                },
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test] {\n\tbox-shadow: inset 0 0 0.5rem 0 red,0 0 0.5rem 0 blue;\n}\n');
        },
        'component block styles with pseudo class'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                ':focus': {
                    color: 'red',
                    display: 'block',
                },
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test]:focus {\n\tcolor: red;\n\tdisplay: block;\n}\n');
        },
        'component block styles with pseudo element'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                '::first-line': {
                    color: 'red',
                    display: 'block',
                },
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test]::first-line {\n\tcolor: red;\n\tdisplay: block;\n}\n');
        },
        'component block styles with media query'() {
            class $mol_style_sheet_test extends $mol_view {
            }
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                '@media': {
                    'print': {
                        color: 'red',
                        display: 'block',
                    },
                },
            });
            $mol_assert_equal(sheet, '@media print {\n[mol_style_sheet_test] {\n\tcolor: red;\n\tdisplay: block;\n}\n}\n');
        },
        'component block styles with attribute value'() {
            class $mol_style_sheet_test extends $mol_view {
                attr() {
                    return {
                        mol_theme: '$mol_theme_dark'
                    };
                }
            }
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                '@': {
                    mol_theme: {
                        '$mol_theme_dark': {
                            color: 'red',
                            display: 'block',
                        },
                    },
                },
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test]:where([mol_theme="$mol_theme_dark"]) {\n\tcolor: red;\n\tdisplay: block;\n}\n');
        },
        'component element styles'() {
            class $mol_style_sheet_test extends $mol_view {
                Item() { return new $mol_view; }
            }
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                Item: {
                    color: 'red',
                    display: 'block',
                },
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test_item] {\n\tcolor: red;\n\tdisplay: block;\n}\n');
        },
        'component element of element styles'() {
            const sheet = $mol_style_sheet($mol_style_sheet_test2, {
                List: {
                    Item: {
                        color: 'red',
                        display: 'block',
                    },
                },
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test2_list_item] {\n\tcolor: red;\n\tdisplay: block;\n}\n');
        },
        'component element styles with block attribute value'() {
            class $mol_style_sheet_test extends $mol_view {
                Item() { return new $mol_view; }
                attr() {
                    return {
                        mol_theme: '$mol_theme_dark'
                    };
                }
            }
            const sheet = $mol_style_sheet($mol_style_sheet_test, {
                '@': {
                    mol_theme: {
                        '$mol_theme_dark': {
                            Item: {
                                color: 'red',
                            },
                        },
                    },
                },
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test]:where([mol_theme="$mol_theme_dark"]) :where([mol_style_sheet_test_item]) {\n\tcolor: red;\n}\n');
        },
        'inner component styles by class'() {
            const sheet = $mol_style_sheet($mol_style_sheet_test2, {
                $mol_style_sheet_test1: {
                    color: 'red',
                    display: 'block',
                },
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test2] :where([mol_style_sheet_test1]) {\n\tcolor: red;\n\tdisplay: block;\n}\n');
        },
        'child component styles by class'() {
            const sheet = $mol_style_sheet($mol_style_sheet_test2, {
                '>': {
                    $mol_style_sheet_test1: {
                        color: 'red',
                        display: 'block',
                    },
                },
            });
            $mol_assert_equal(sheet, '[mol_style_sheet_test2] > :where([mol_style_sheet_test1]) {\n\tcolor: red;\n\tdisplay: block;\n}\n');
        },
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    class TestClass extends Uint8Array {
    }
    $mol_test({
        'Uint8Array vs itself'() {
            $mol_assert_ok($mol_compare_array(new Uint8Array, new Uint8Array));
            $mol_assert_ok($mol_compare_array(new Uint8Array([0]), new Uint8Array([0])));
            $mol_assert_not($mol_compare_array(new Uint8Array([0]), new Uint8Array([1])));
        },
        'Uint8Array vs subclassed array'() {
            $mol_assert_not($mol_compare_array(new Uint8Array, new TestClass));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'decode utf8 string'() {
            const str = 'Hello, ΧΨΩЫ';
            const encoded = new Uint8Array([72, 101, 108, 108, 111, 44, 32, 206, 167, 206, 168, 206, 169, 208, 171]);
            $mol_assert_equal($mol_charset_decode(encoded), str);
            $mol_assert_equal($mol_charset_decode(encoded, 'utf8'), str);
        },
        'decode empty string'() {
            const encoded = new Uint8Array([]);
            $mol_assert_equal($mol_charset_decode(encoded), '');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'encode utf8 string'() {
            const str = 'Hello, ΧΨΩЫ';
            const encoded = new Uint8Array([72, 101, 108, 108, 111, 44, 32, 206, 167, 206, 168, 206, 169, 208, 171]);
            $mol_assert_like($mol_charset_encode(str), encoded);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'local get set delete'() {
            var key = '$mol_state_local_test:' + Math.random();
            $mol_assert_equal($mol_state_local.value(key), null);
            $mol_state_local.value(key, 123);
            $mol_assert_equal($mol_state_local.value(key), 123);
            $mol_state_local.value(key, null);
            $mol_assert_equal($mol_state_local.value(key), null);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test_mocks.push(context => {
        class $mol_state_local_mock extends $mol_state_local {
            static state = {};
            static value(key, next = this.state[key]) {
                return this.state[key] = (next || null);
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_state_local_mock, "value", null);
        context.$mol_state_local = $mol_state_local_mock;
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test_mocks.push($ => {
        class $mol_locale_mock extends $mol_locale {
            lang(next = 'en') { return next; }
            static source(lang) {
                return {};
            }
        }
        __decorate([
            $mol_mem
        ], $mol_locale_mock.prototype, "lang", null);
        __decorate([
            $mol_mem_key
        ], $mol_locale_mock, "source", null);
        $.$mol_locale = $mol_locale_mock;
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    var $$;
    (function ($$) {
        $mol_test({
            'handle clicks by default'($) {
                let clicked = false;
                const clicker = $mol_button.make({
                    $,
                    click: (event) => { clicked = true; },
                });
                const element = clicker.dom_tree();
                const event = $mol_dom_context.document.createEvent('mouseevent');
                event.initEvent('click', true, true);
                element.dispatchEvent(event);
                $mol_assert_ok(clicked);
            },
            'no handle clicks if disabled'($) {
                let clicked = false;
                const clicker = $mol_button.make({
                    $,
                    click: (event) => { clicked = true; },
                    enabled: () => false,
                });
                const element = clicker.dom_tree();
                const event = $mol_dom_context.document.createEvent('mouseevent');
                event.initEvent('click', true, true);
                element.dispatchEvent(event);
                $mol_assert_not(clicked);
            },
            async 'Store error'($) {
                const clicker = $mol_button.make({
                    $,
                    click: (event) => $.$mol_fail(new Error('Test error')),
                });
                const event = $mol_dom_context.document.createEvent('mouseevent');
                $mol_assert_fail(() => clicker.event_activate(event), 'Test error');
                await Promise.resolve();
                $mol_assert_equal(clicker.status()[0].message, 'Test error');
            },
        });
    })($$ = $_1.$$ || ($_1.$$ = {}));
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'escape'() {
            const specials = $mol_regexp.from('.*+?^${}()|[]\\');
            $mol_assert_equal(specials.source, '\\.\\*\\+\\?\\^\\$\\{\\}\\(\\)\\|\\[\\]\\\\');
        },
        'char code'() {
            const space = $mol_regexp.from(32);
            $mol_assert_like(' '.match(space), [' ']);
        },
        'repeat fixed'() {
            const { repeat, decimal_only: digit } = $mol_regexp;
            const year = repeat(digit, 4, 4);
            $mol_assert_like('#2020#'.match(year), ['2020']);
        },
        'greedy repeat'() {
            const { repeat, repeat_greedy, latin_only: letter } = $mol_regexp;
            $mol_assert_like('abc'.match(repeat(letter, 1, 2)), ['a', 'b', 'c']);
            $mol_assert_like('abc'.match(repeat_greedy(letter, 1, 2)), ['ab', 'c']);
        },
        'repeat range'() {
            const { repeat_greedy, decimal_only: digit } = $mol_regexp;
            const year = repeat_greedy(digit, 2, 4);
            $mol_assert_like('#2#'.match(year), null);
            $mol_assert_like('#20#'.match(year), ['20']);
            $mol_assert_like('#2020#'.match(year), ['2020']);
            $mol_assert_like('#20201#'.match(year), ['2020']);
        },
        'repeat from'() {
            const { repeat_greedy, latin_only: letter } = $mol_regexp;
            const name = repeat_greedy(letter, 2);
            $mol_assert_like('##'.match(name), null);
            $mol_assert_like('#a#'.match(name), null);
            $mol_assert_like('#ab#'.match(name), ['ab']);
            $mol_assert_like('#abc#'.match(name), ['abc']);
        },
        'from string'() {
            const regexp = $mol_regexp.from('[\\d]');
            $mol_assert_equal(regexp.source, '\\[\\\\d\\]');
            $mol_assert_equal(regexp.flags, 'gsu');
        },
        'from regexp'() {
            const regexp = $mol_regexp.from(/[\d]/i);
            $mol_assert_equal(regexp.source, '[\\d]');
            $mol_assert_equal(regexp.flags, 'i');
        },
        'split'() {
            const regexp = $mol_regexp.from(';');
            $mol_assert_like('aaa;bbb;ccc'.split(regexp), ['aaa', ';', 'bbb', ';', 'ccc']);
            $mol_assert_like('aaa;;ccc'.split(regexp), ['aaa', ';', '', ';', 'ccc']);
            $mol_assert_like('aaa'.split(regexp), ['aaa']);
            $mol_assert_like(''.split(regexp), ['']);
        },
        'test for matching'() {
            const regexp = $mol_regexp.from('foo');
            $mol_assert_like(regexp.test(''), false);
            $mol_assert_like(regexp.test('fo'), false);
            $mol_assert_like(regexp.test('foo'), true);
            $mol_assert_like(regexp.test('foobar'), true);
            $mol_assert_like(regexp.test('barfoo'), true);
        },
        'case ignoring'() {
            const xxx = $mol_regexp.from('x', { ignoreCase: true });
            $mol_assert_like(xxx.flags, 'gisu');
            $mol_assert_like(xxx.exec('xx')[0], 'x');
            $mol_assert_like(xxx.exec('XX')[0], 'X');
        },
        'multiline mode'() {
            const { end, from } = $mol_regexp;
            const xxx = from(['x', end], { multiline: true });
            $mol_assert_like(xxx.exec('x\ny')[0], 'x');
            $mol_assert_like(xxx.flags, 'gmsu');
        },
        'flags override'() {
            const triplet = $mol_regexp.from($mol_regexp.from(/.../, { ignoreCase: true }), { multiline: true });
            $mol_assert_like(triplet.toString(), '/.../gmsu');
        },
        'sequence'() {
            const { begin, end, decimal_only: digit, repeat, from } = $mol_regexp;
            const year = repeat(digit, 4, 4);
            const dash = '-';
            const month = repeat(digit, 2, 2);
            const day = repeat(digit, 2, 2);
            const date = from([begin, year, dash, month, dash, day, end]);
            $mol_assert_like(date.exec('2020-01-02')[0], '2020-01-02');
        },
        'optional'() {
            const name = $mol_regexp.from(['A', ['4']]);
            $mol_assert_equal('AB'.match(name)[0], 'A');
            $mol_assert_equal('A4'.match(name)[0], 'A4');
        },
        'anon variants'() {
            const name = $mol_regexp.from(['A', $mol_regexp.vary(['4', '5'])]);
            $mol_assert_equal('AB'.match(name), null);
            $mol_assert_equal('A4'.match(name)[0], 'A4');
            $mol_assert_equal('A5'.match(name)[0], 'A5');
        },
        'only groups'() {
            const regexp = $mol_regexp.from({ dog: '@' });
            $mol_assert_like([...'#'.matchAll(regexp)][0].groups, undefined);
            $mol_assert_like([...'@'.matchAll(regexp)][0].groups, { dog: '@' });
        },
        'catch skipped'() {
            const regexp = $mol_regexp.from(/(@)(\d?)/g);
            $mol_assert_like([...'[[@]]'.matchAll(regexp)].map(f => [...f]), [
                ['[['],
                ['@', '@', ''],
                [']]'],
            ]);
        },
        'enum variants'() {
            let Sex;
            (function (Sex) {
                Sex["male"] = "male";
                Sex["female"] = "female";
            })(Sex || (Sex = {}));
            const sexism = $mol_regexp.from(Sex);
            $mol_assert_like([...''.matchAll(sexism)].length, 0);
            $mol_assert_like([...'trans'.matchAll(sexism)][0].groups, undefined);
            $mol_assert_like([...'male'.matchAll(sexism)][0].groups, { male: 'male', female: '' });
            $mol_assert_like([...'female'.matchAll(sexism)][0].groups, { male: '', female: 'female' });
        },
        'recursive only groups'() {
            let Sex;
            (function (Sex) {
                Sex["male"] = "male";
                Sex["female"] = "female";
            })(Sex || (Sex = {}));
            const sexism = $mol_regexp.from({ Sex });
            $mol_assert_like([...''.matchAll(sexism)].length, 0);
            $mol_assert_like([...'male'.matchAll(sexism)][0].groups, { Sex: 'male', male: 'male', female: '' });
            $mol_assert_like([...'female'.matchAll(sexism)][0].groups, { Sex: 'female', male: '', female: 'female' });
        },
        'sequence with groups'() {
            const { begin, end, decimal_only: digit, repeat, from } = $mol_regexp;
            const year = repeat(digit, 4, 4);
            const dash = '-';
            const month = repeat(digit, 2, 2);
            const day = repeat(digit, 2, 2);
            const regexp = from([begin, { year }, dash, { month }, dash, { day }, end]);
            const found = [...'2020-01-02'.matchAll(regexp)];
            $mol_assert_like(found[0].groups, {
                year: '2020',
                month: '01',
                day: '02',
            });
        },
        'sequence with groups of mixed type'() {
            const prefix = '/';
            const postfix = '/';
            const regexp = $mol_regexp.from([{ prefix }, /(\w+)/, { postfix }, /([gumi]*)/]);
            $mol_assert_like([...'/foo/mi'.matchAll(regexp)], [
                Object.assign(["/foo/mi", "/", "foo", "/", "mi"], {
                    groups: {
                        prefix: '/',
                        postfix: '/',
                    },
                    index: 0,
                    input: "/",
                }),
            ]);
        },
        'recursive sequence with groups'() {
            const { begin, end, decimal_only: digit, repeat, from } = $mol_regexp;
            const year = repeat(digit, 4, 4);
            const dash = '-';
            const month = repeat(digit, 2, 2);
            const day = repeat(digit, 2, 2);
            const regexp = from([
                begin, { date: [{ year }, dash, { month }] }, dash, { day }, end
            ]);
            const found = [...'2020-01-02'.matchAll(regexp)];
            $mol_assert_like(found[0].groups, {
                date: '2020-01',
                year: '2020',
                month: '01',
                day: '02',
            });
        },
        'parse multiple'() {
            const { decimal_only: digit, from } = $mol_regexp;
            const regexp = from({ digit });
            $mol_assert_like([...'123'.matchAll(regexp)].map(f => f.groups), [
                { digit: '1' },
                { digit: '2' },
                { digit: '3' },
            ]);
        },
        'named variants'() {
            const { begin, or, end, from } = $mol_regexp;
            const sexism = from([
                begin, 'sex = ', { sex: ['male', or, 'female'] }, end
            ]);
            $mol_assert_like([...'sex = male'.matchAll(sexism)][0].groups, { sex: 'male' });
            $mol_assert_like([...'sex = female'.matchAll(sexism)][0].groups, { sex: 'female' });
            $mol_assert_like([...'sex = malefemale'.matchAll(sexism)][0].groups, undefined);
        },
        'force after'() {
            const { latin_only: letter, force_after, from } = $mol_regexp;
            const regexp = from([letter, force_after('.')]);
            $mol_assert_like('x.'.match(regexp), ['x']);
            $mol_assert_like('x,'.match(regexp), null);
        },
        'forbid after'() {
            const { latin_only: letter, forbid_after, from } = $mol_regexp;
            const regexp = from([letter, forbid_after('.')]);
            $mol_assert_like('x.'.match(regexp), null);
            $mol_assert_like('x,'.match(regexp), ['x']);
        },
        'char except'() {
            const { char_except, latin_only, tab } = $mol_regexp;
            const name = char_except(latin_only, tab);
            $mol_assert_like('a'.match(name), null);
            $mol_assert_like('\t'.match(name), null);
            $mol_assert_like('('.match(name), ['(']);
        },
        'unicode only'() {
            const { unicode_only, from } = $mol_regexp;
            const name = from([
                unicode_only('Script', 'Cyrillic'),
                unicode_only('Hex_Digit'),
            ]);
            $mol_assert_like('FF'.match(name), null);
            $mol_assert_like('ФG'.match(name), null);
            $mol_assert_like('ФF'.match(name), ['ФF']);
        },
        'generate by optional with inner group'() {
            const { begin, end, from } = $mol_regexp;
            const animals = from([begin, '#', ['^', { dog: '@' }], end]);
            $mol_assert_equal(animals.generate({}), '#');
            $mol_assert_equal(animals.generate({ dog: false }), '#');
            $mol_assert_equal(animals.generate({ dog: true }), '#^@');
            $mol_assert_fail(() => animals.generate({ dog: '$' }), 'Wrong param: dog=$');
        },
        'generate by optional with inner group with variants'() {
            const { begin, end, from } = $mol_regexp;
            const animals = from([begin, '#', ['^', { animal: { dog: '@', fox: '&' } }], end]);
            $mol_assert_equal(animals.generate({}), '#');
            $mol_assert_equal(animals.generate({ dog: true }), '#^@');
            $mol_assert_equal(animals.generate({ fox: true }), '#^&');
            $mol_assert_fail(() => animals.generate({ dog: '$' }), 'Wrong param: dog=$');
        },
        'complex example'() {
            const { begin, end, char_only, char_range, latin_only, slash_back, repeat_greedy, from, } = $mol_regexp;
            const atom_char = char_only(latin_only, "!#$%&'*+/=?^`{|}~-");
            const atom = repeat_greedy(atom_char, 1);
            const dot_atom = from([atom, repeat_greedy(['.', atom])]);
            const name_letter = char_only(char_range(0x01, 0x08), 0x0b, 0x0c, char_range(0x0e, 0x1f), 0x21, char_range(0x23, 0x5b), char_range(0x5d, 0x7f));
            const quoted_pair = from([
                slash_back,
                char_only(char_range(0x01, 0x09), 0x0b, 0x0c, char_range(0x0e, 0x7f))
            ]);
            const name = repeat_greedy({ name_letter, quoted_pair });
            const quoted_name = from(['"', { name }, '"']);
            const local_part = from({ dot_atom, quoted_name });
            const domain = dot_atom;
            const mail = from([begin, local_part, '@', { domain }, end]);
            $mol_assert_equal('foo..bar@example.org'.match(mail), null);
            $mol_assert_equal('foo..bar"@example.org'.match(mail), null);
            $mol_assert_like([...'foo.bar@example.org'.matchAll(mail)][0].groups, {
                dot_atom: "foo.bar",
                quoted_name: "",
                name: "",
                name_letter: "",
                quoted_pair: "",
                domain: "example.org",
            });
            $mol_assert_like([...'"foo..bar"@example.org'.matchAll(mail)][0].groups, {
                dot_atom: "",
                quoted_name: '"foo..bar"',
                name: "foo..bar",
                name_letter: "r",
                quoted_pair: "",
                domain: "example.org",
            });
            $mol_assert_equal(mail.generate({ dot_atom: 'foo.bar', domain: 'example.org' }), 'foo.bar@example.org');
            $mol_assert_equal(mail.generate({ name: 'foo..bar', domain: 'example.org' }), '"foo..bar"@example.org');
            $mol_assert_fail(() => mail.generate({ dot_atom: 'foo..bar', domain: 'example.org' }), 'Wrong param: dot_atom=foo..bar');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_test({
            'Empty needle'() {
                const app = new $mol_dimmer;
                app.needle = () => '  ';
                app.haystack = () => 'foo  bar';
                $mol_assert_like(app.strings(), ['foo  bar']);
            },
            'Empty haystack'() {
                const app = new $mol_dimmer;
                app.needle = () => 'foo  bar';
                app.haystack = () => '';
                $mol_assert_like(app.strings(), ['']);
            },
            'Not found'() {
                const app = new $mol_dimmer;
                app.needle = () => 'foo';
                app.haystack = () => ' bar ';
                $mol_assert_like(app.strings(), [' bar ']);
            },
            'One found'() {
                const app = new $mol_dimmer;
                app.needle = () => 'foo';
                app.haystack = () => ' barfoo ';
                $mol_assert_like(app.strings(), [' bar', 'foo', ' ']);
            },
            'Multiple found'() {
                const app = new $mol_dimmer;
                app.needle = () => 'foo';
                app.haystack = () => ' foobarfoo foo';
                $mol_assert_like(app.strings(), [' ', 'foo', 'bar', 'foo', ' ', 'foo']);
            },
            'Fuzzy search'() {
                const app = new $mol_dimmer;
                app.needle = () => 'foo bar';
                app.haystack = () => ' barfoo ';
                $mol_assert_like(app.strings(), [' ', 'bar', '', 'foo', ' ']);
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test_mocks.push(context => {
        class $mol_state_arg_mock extends $mol_state_arg {
            static $ = context;
            static href(next) { return next || ''; }
            static go(next) {
                this.href(this.link(next));
            }
        }
        __decorate([
            $mol_mem
        ], $mol_state_arg_mock, "href", null);
        __decorate([
            $mol_action
        ], $mol_state_arg_mock, "go", null);
        context.$mol_state_arg = $mol_state_arg_mock;
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'all cases of using maybe'() {
            $mol_assert_equal($mol_maybe(0)[0], 0);
            $mol_assert_equal($mol_maybe(false)[0], false);
            $mol_assert_equal($mol_maybe(null)[0], void 0);
            $mol_assert_equal($mol_maybe(void 0)[0], void 0);
            $mol_assert_equal($mol_maybe(void 0).map(v => v.toString())[0], void 0);
            $mol_assert_equal($mol_maybe(0).map(v => v.toString())[0], '0');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'config by value'() {
            const N = $mol_data_setup((a) => a, 5);
            $mol_assert_equal(N.config, 5);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let sex;
    (function (sex) {
        sex[sex["male"] = 0] = "male";
        sex[sex["female"] = 1] = "female";
    })(sex || (sex = {}));
    let gender;
    (function (gender) {
        gender["bisexual"] = "bisexual";
        gender["trans"] = "transgender";
    })(gender || (gender = {}));
    $mol_test({
        'config of enum'() {
            const Sex = $mol_data_enum('sex', sex);
            $mol_assert_like(Sex.config, {
                name: 'sex',
                dict: sex,
            });
        },
        'name of enum'() {
            const Sex = $mol_data_enum('sex', sex);
            $mol_assert_equal(Sex.config.name, 'sex');
        },
        'Is right value of enum'() {
            const Sex = $mol_data_enum('sex', sex);
            $mol_assert_equal(Sex(0), sex.male);
        },
        'Is wrong value of enum'() {
            const Sex = $mol_data_enum('sex', sex);
            $mol_assert_fail(() => Sex(2), `2 is not value of sex enum`);
        },
        'Is name instead of value'() {
            const Sex = $mol_data_enum('sex', sex);
            $mol_assert_fail(() => Sex('male'), `male is not value of sex enum`);
        },
        'Is common object field'() {
            const Sex = $mol_data_enum('sex', sex);
            $mol_assert_fail(() => Sex('__proto__'), `__proto__ is not value of sex enum`);
        },
    });
    $mol_test({
        'config of enum'() {
            const Gender = $mol_data_enum('gender', gender);
            $mol_assert_like(Gender.config, {
                name: 'gender',
                dict: gender,
            });
        },
        'Is right value of enum'() {
            const Gender = $mol_data_enum('gender', gender);
            $mol_assert_equal(Gender('transgender'), gender.trans);
        },
        'Is wrong value of enum'() {
            const Gender = $mol_data_enum('gender', gender);
            $mol_assert_fail(() => Gender('xxx'), `xxx is not value of gender enum`);
        },
        'Is name instead of value'() {
            const Gender = $mol_data_enum('gender', gender);
            $mol_assert_fail(() => Gender('trans'), `trans is not value of gender enum`);
        },
        'Is common object field'() {
            const Gender = $mol_data_enum('gender', gender);
            $mol_assert_fail(() => Gender('__proto__'), `__proto__ is not value of gender enum`);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const png = new Uint8Array([0x1a, 0x0a, 0x00, 0x49, 0x48, 0x78, 0xda]);
    $mol_test({
        'base64 encode string'() {
            $mol_assert_equal($mol_base64_encode('Hello, ΧΨΩЫ'), 'SGVsbG8sIM6nzqjOqdCr');
        },
        'base64 encode binary'() {
            $mol_assert_equal($mol_base64_encode(png), 'GgoASUh42g==');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const png = new Uint8Array([0x1a, 0x0a, 0x00, 0x49, 0x48, 0x78, 0xda]);
    $mol_test({
        'base64 decode string'() {
            $mol_assert_like($mol_base64_decode('SGVsbG8sIM6nzqjOqdCr'), new TextEncoder().encode('Hello, ΧΨΩЫ'));
        },
        'base64 decode binary'() {
            $mol_assert_like($mol_base64_decode('GgoASUh42g=='), png);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    const common = [
        $mol_int62_to_string({
            lo: 12 << 0 | 13 << 8 | 14 << 16 | 15 << 24,
            hi: 13 << 0 | 14 << 8 | 15 << 16 | 16 << 24,
        }),
        $mol_int62_to_string({
            lo: 2 << 0 | 3 << 8 | 4 << 16 | 5 << 24,
            hi: 3 << 0 | 4 << 8 | 5 << 16 | 6 << 24,
        }),
        $mol_int62_to_string({
            lo: 4 << 0 | 5 << 8 | 6 << 16 | 7 << 24,
            hi: 5 << 0 | 6 << 8 | 7 << 16 | 8 << 24,
        }),
        $mol_int62_to_string({
            lo: 10 << 0 | 11 << 8 | 12 << 16 | 13 << 24,
            hi: 11 << 0 | 12 << 8 | 13 << 16 | 14 << 24,
        }),
        $mol_int62_to_string({
            lo: 6 << 0 | 7 << 8 | 8 << 16 | 9 << 24,
            hi: 7 << 0 | 8 << 8 | 9 << 16 | 10 << 24,
        }),
        $mol_int62_to_string({
            lo: 8 << 0 | 9 << 8 | 10 << 16 | 11 << 24,
            hi: 9 << 0 | 10 << 8 | 11 << 16 | 12 << 24,
        }),
        1 << 0 | 2 << 8 | 3 << 16 | 4 << 24,
    ];
    $mol_test({
        'pack and unpack unit with null'($) {
            const source = new $hyoo_crowd_unit(...common, null, null);
            const packed = $hyoo_crowd_unit_bin.from_unit(source);
            const unpacked = packed.unit();
            source.bin = packed;
            $mol_assert_like(source, unpacked);
        },
        'pack and unpack unit with json'($) {
            const source = new $hyoo_crowd_unit(...common, { a: [1] }, null);
            const packed = $hyoo_crowd_unit_bin.from_unit(source);
            const unpacked = packed.unit();
            source.bin = packed;
            $mol_assert_like(source, unpacked);
        },
        'pack and unpack unit with bin'($) {
            const source = new $hyoo_crowd_unit(...common, new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8]), null);
            const packed = $hyoo_crowd_unit_bin.from_unit(source);
            const unpacked = packed.unit();
            source.bin = packed;
            $mol_assert_like(source, unpacked);
        },
        async 'sign / verify'($) {
            const source = new $hyoo_crowd_unit(...common, { a: [1] }, null);
            const packed = $hyoo_crowd_unit_bin.from_unit(source);
            const key = await $.$mol_crypto_auditor_pair();
            packed.sign(new Uint8Array(await key.private.sign(packed.sens())));
            const sign = packed.sign();
            $mol_assert_ok(await key.public.verify(packed.sens(), sign));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'same list'() {
            const list = $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "a"),
                $mol_jsx("p", { "data-rev": "old" }, "b"),
                $mol_jsx("p", { "data-rev": "old" }, "c"));
            $mol_reconcile({
                prev: [...list.children],
                from: 0,
                to: 3,
                next: 'abc',
                equal: (next, prev) => prev.textContent === next,
                drop: (prev, lead) => list.removeChild(prev),
                insert: (next, lead) => list.insertBefore($mol_jsx("p", { "data-rev": "new" }, next), lead ? lead.nextSibling : list.firstChild),
                replace: (next, prev, lead) => {
                    prev.textContent = next;
                    prev.setAttribute('data-rev', 'up');
                    return prev;
                },
            });
            $mol_assert_equal(list, $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "a"),
                $mol_jsx("p", { "data-rev": "old" }, "b"),
                $mol_jsx("p", { "data-rev": "old" }, "c")));
        },
        'insert items'() {
            const list = $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "a"),
                $mol_jsx("p", { "data-rev": "old" }, "b"),
                $mol_jsx("p", { "data-rev": "old" }, "c"),
                $mol_jsx("p", { "data-rev": "old" }, "d"));
            $mol_reconcile({
                prev: [...list.children],
                from: 1,
                to: 3,
                next: 'bXYc',
                equal: (next, prev) => prev.textContent === next,
                drop: (prev, lead) => list.removeChild(prev),
                insert: (next, lead) => list.insertBefore($mol_jsx("p", { "data-rev": "new" }, next), lead ? lead.nextSibling : list.firstChild),
                replace: (next, prev, lead) => {
                    prev.textContent = next;
                    prev.setAttribute('data-rev', 'up');
                    return prev;
                },
            });
            $mol_assert_equal(list, $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "a"),
                $mol_jsx("p", { "data-rev": "old" }, "b"),
                $mol_jsx("p", { "data-rev": "new" }, "X"),
                $mol_jsx("p", { "data-rev": "new" }, "Y"),
                $mol_jsx("p", { "data-rev": "old" }, "c"),
                $mol_jsx("p", { "data-rev": "old" }, "d")));
        },
        'append items'() {
            const list = $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "a"));
            $mol_reconcile({
                prev: [...list.children],
                from: 2,
                to: 3,
                next: 'bc',
                equal: (next, prev) => prev.textContent === next,
                drop: (prev, lead) => list.removeChild(prev),
                insert: (next, lead) => list.insertBefore($mol_jsx("p", { "data-rev": "new" }, next), lead ? lead.nextSibling : list.firstChild),
                replace: (next, prev, lead) => {
                    prev.textContent = next;
                    prev.setAttribute('data-rev', 'up');
                    return prev;
                },
            });
            $mol_assert_equal(list, $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "a"),
                $mol_jsx("p", { "data-rev": "new" }, "b"),
                $mol_jsx("p", { "data-rev": "new" }, "c")));
        },
        'split item'() {
            const list = $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "a"),
                $mol_jsx("p", { "data-rev": "old" }, "bc"),
                $mol_jsx("p", { "data-rev": "old" }, "d"));
            $mol_reconcile({
                prev: [...list.children],
                from: 0,
                to: 3,
                next: 'abcd',
                equal: (next, prev) => prev.textContent === next,
                drop: (prev, lead) => list.removeChild(prev),
                insert: (next, lead) => list.insertBefore($mol_jsx("p", { "data-rev": "new" }, next), lead ? lead.nextSibling : list.firstChild),
                replace: (next, prev, lead) => {
                    prev.textContent = next;
                    prev.setAttribute('data-rev', 'up');
                    return prev;
                },
            });
            $mol_assert_equal(list, $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "a"),
                $mol_jsx("p", { "data-rev": "new" }, "b"),
                $mol_jsx("p", { "data-rev": "up" }, "c"),
                $mol_jsx("p", { "data-rev": "old" }, "d")));
        },
        'drop items'() {
            const list = $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "A"),
                $mol_jsx("p", { "data-rev": "old" }, "B"),
                $mol_jsx("p", { "data-rev": "old" }, "x"),
                $mol_jsx("p", { "data-rev": "old" }, "y"),
                $mol_jsx("p", { "data-rev": "old" }, "C"),
                $mol_jsx("p", { "data-rev": "old" }, "D"));
            $mol_reconcile({
                prev: [...list.children],
                from: 1,
                to: 5,
                next: 'BC',
                equal: (next, prev) => prev.textContent === next,
                drop: (prev, lead) => list.removeChild(prev),
                insert: (next, lead) => list.insertBefore($mol_jsx("p", { "data-rev": "new" }, next), lead ? lead.nextSibling : list.firstChild),
                replace: (next, prev, lead) => {
                    prev.textContent = next;
                    prev.setAttribute('data-rev', 'up');
                    return prev;
                },
            });
            $mol_assert_equal(list, $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "A"),
                $mol_jsx("p", { "data-rev": "old" }, "B"),
                $mol_jsx("p", { "data-rev": "old" }, "C"),
                $mol_jsx("p", { "data-rev": "old" }, "D")));
        },
        'update items'() {
            const list = $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "a"),
                $mol_jsx("p", { "data-rev": "old" }, "B"),
                $mol_jsx("p", { "data-rev": "old" }, "C"),
                $mol_jsx("p", { "data-rev": "old" }, "d"));
            $mol_reconcile({
                prev: [...list.children],
                from: 1,
                to: 3,
                next: 'XY',
                equal: (next, prev) => prev.textContent === next,
                drop: (prev, lead) => list.removeChild(prev),
                insert: (next, lead) => list.insertBefore($mol_jsx("p", { "data-rev": "new" }, next), lead ? lead.nextSibling : list.firstChild),
                replace: (next, prev, lead) => {
                    prev.textContent = next;
                    prev.setAttribute('data-rev', 'up');
                    return prev;
                },
            });
            $mol_assert_equal(list, $mol_jsx("body", null,
                $mol_jsx("p", { "data-rev": "old" }, "a"),
                $mol_jsx("p", { "data-rev": "up" }, "X"),
                $mol_jsx("p", { "data-rev": "up" }, "Y"),
                $mol_jsx("p", { "data-rev": "old" }, "d")));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'empty string'() {
            $mol_assert_like(''.match($hyoo_crowd_tokenizer), null);
        },
        'new lines'() {
            $mol_assert_like('\n\r\n'.match($hyoo_crowd_tokenizer), ['\n', '\r\n']);
        },
        'numbers'() {
            $mol_assert_like('123'.match($hyoo_crowd_tokenizer), ['123']);
        },
        'emoji'() {
            $mol_assert_like('😀😁'.match($hyoo_crowd_tokenizer), ['😀', '😁']);
        },
        'emoji with modifier'() {
            $mol_assert_like('👩🏿👩🏿'.match($hyoo_crowd_tokenizer), ['👩🏿', '👩🏿']);
        },
        'combo emoji with modifier'() {
            $mol_assert_like('👩🏿‍🤝‍🧑🏿👩🏿‍🤝‍🧑🏿'.match($hyoo_crowd_tokenizer), ['👩🏿‍🤝‍🧑🏿', '👩🏿‍🤝‍🧑🏿']);
        },
        'word with spaces'() {
            $mol_assert_like('foo1  bar2'.match($hyoo_crowd_tokenizer), ['foo1', ' ', ' bar2']);
        },
        'word with diactric'() {
            $mol_assert_like('Е́е́'.match($hyoo_crowd_tokenizer), ['Е́е́']);
        },
        'word with punctuation'() {
            $mol_assert_like('foo--bar'.match($hyoo_crowd_tokenizer), ['foo', '--', 'bar']);
        },
        'CamelCase'() {
            $mol_assert_like('Foo1BAR2'.match($hyoo_crowd_tokenizer), ['Foo1', 'BAR2']);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'number'() {
            const dict = new $mol_dict();
            $mol_assert_equal(dict.get(123), undefined);
            $mol_assert_equal(dict.has(123), false);
            dict.set(123, 321);
            $mol_assert_equal(dict.get(123), 321);
            $mol_assert_equal(dict.has(123), true);
            dict.delete(123);
            $mol_assert_equal(dict.get(123), undefined);
            $mol_assert_equal(dict.has(123), false);
        },
        'pojo as key'() {
            const dict = new $mol_dict();
            $mol_assert_equal(dict.get({ foo: 123 }), undefined);
            $mol_assert_equal(dict.has({ foo: 123 }), false);
            dict.set({ foo: 123 }, 321);
            $mol_assert_equal(dict.get({ foo: 123 }), 321);
            $mol_assert_equal(dict.has({ foo: 123 }), true);
            dict.delete({ foo: 123 });
            $mol_assert_equal(dict.get({ foo: 123 }), undefined);
            $mol_assert_equal(dict.has({ foo: 123 }), false);
        },
        'array as key'() {
            const dict = new $mol_dict();
            $mol_assert_equal(dict.get([123]), undefined);
            $mol_assert_equal(dict.has([123]), false);
            dict.set([123], 321);
            $mol_assert_equal(dict.get([123]), 321);
            $mol_assert_equal(dict.has([123]), true);
            dict.delete([123]);
            $mol_assert_equal(dict.get([123]), undefined);
            $mol_assert_equal(dict.has([123]), false);
        },
        'html element as key'() {
            const el = $mol_jsx("div", null);
            const dict = new $mol_dict();
            $mol_assert_equal(dict.get(el), undefined);
            $mol_assert_equal(dict.has(el), false);
            dict.set(el, 321);
            $mol_assert_equal(dict.get(el), 321);
            $mol_assert_equal(dict.has(el), true);
            $mol_assert_equal(dict.get($mol_jsx("div", null)), undefined);
            $mol_assert_equal(dict.has($mol_jsx("div", null)), false);
            dict.delete(el);
            $mol_assert_equal(dict.get(el), undefined);
            $mol_assert_equal(dict.has(el), false);
        },
        'for-of key restore'() {
            const dict = new $mol_dict([[[123], 321]]);
            const keys = [];
            const vals = [];
            for (const [key, val] of dict) {
                keys.push(key);
                vals.push(val);
            }
            $mol_assert_like(keys, [[123]]);
            $mol_assert_like(vals, [321]);
        },
        'method iterators key restore'() {
            const dict = new $mol_dict([[[123], 321]]);
            $mol_assert_like([...dict.keys()], [[123]]);
            $mol_assert_like([...dict.values()], [321]);
            $mol_assert_like([...dict.entries()], [[[123], 321]]);
        },
        'forEach key restore'() {
            const dict = new $mol_dict([[[123], 321]]);
            const keys = [];
            const vals = [];
            dict.forEach((val, key) => {
                keys.push(key);
                vals.push(val);
            });
            $mol_assert_like(keys, [[123]]);
            $mol_assert_like(vals, [321]);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'fresh'() {
            const clock = new $hyoo_crowd_clock;
            clock.see_peer('b_33', 1);
            clock.see_peer('m_66', 2);
            $mol_assert_ok(clock.fresh('m_66', 3));
            $mol_assert_ok(clock.fresh('x_99', 1));
            $mol_assert_not(clock.fresh('m_66', 1));
        },
        'fork'() {
            const left = new $hyoo_crowd_clock;
            left.see_peer('b_33', 1);
            left.see_peer('m_66', 2);
            const right = new $hyoo_crowd_clock(left);
            $mol_assert_equal(right.last_time, 2);
            $mol_assert_like([...right], [
                ['b_33', 1],
                ['m_66', 2],
            ]);
        },
        'generate'() {
            const clock = new $hyoo_crowd_clock;
            clock.see_peer('b_33', $mol_int62_min + 1);
            clock.see_peer('m_66', $mol_int62_min + 2);
            const now = clock.now();
            const time1 = clock.tick('b_33');
            $mol_assert_like(time1, now);
            $mol_assert_like(clock.last_time, now);
            clock.see_peer('m_66', clock.now() + 10);
            const time2 = clock.tick('m_66');
            $mol_assert_like(time2, now + 11);
            $mol_assert_like(clock.last_time, now + 11);
        },
        'ahead'() {
            const clock1 = new $hyoo_crowd_clock;
            clock1.see_peer('b_33', 1);
            clock1.see_peer('m_66', 2);
            const clock2 = new $hyoo_crowd_clock;
            clock2.see_peer('b_33', 1);
            clock2.see_peer('x_99', 2);
            const clock3 = new $hyoo_crowd_clock;
            clock3.see_peer('b_33', 1);
            clock3.see_peer('m_66', 2);
            clock3.see_peer('x_99', 2);
            $mol_assert_ok(clock1.ahead(clock2));
            $mol_assert_ok(clock2.ahead(clock1));
            $mol_assert_ok(clock3.ahead(clock1));
            $mol_assert_ok(clock3.ahead(clock2));
            $mol_assert_not(clock1.ahead(clock3));
            $mol_assert_not(clock2.ahead(clock3));
        },
        'bin'() {
            const clocks1 = [new $hyoo_crowd_clock, new $hyoo_crowd_clock];
            clocks1[$hyoo_crowd_unit_group.auth].see_peer('b_33', 1);
            clocks1[$hyoo_crowd_unit_group.data].see_peer('b_33', 2);
            const bin = $hyoo_crowd_clock_bin.from('2_b', clocks1, 0);
            $mol_assert_like(bin.land(), '2_b');
            const clocks2 = [new $hyoo_crowd_clock, new $hyoo_crowd_clock];
            clocks2[$hyoo_crowd_unit_group.auth].see_bin(bin, $hyoo_crowd_unit_group.auth);
            clocks2[$hyoo_crowd_unit_group.data].see_bin(bin, $hyoo_crowd_unit_group.data);
            $mol_assert_like(clocks2.map(clock => new Map(clock)), [
                new Map([
                    ['b_33', 1],
                ]),
                new Map([
                    ['b_33', 2],
                ]),
            ]);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        async 'world delta & apply'() {
            const world1 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const world2 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const land1 = await world1.grab();
            const land2 = await world1.grab();
            land1.chief.as($hyoo_crowd_list).list([123, 456]);
            land2.chief.as($hyoo_crowd_list).list([456, 789]);
            for await (const batch of world1.delta()) {
                $mol_assert_like((await world2.apply(batch)).forbid, new Map);
            }
            $mol_assert_like(world2.land(land1.id()).chief.as($hyoo_crowd_list).list(), [123, 456]);
            $mol_assert_like(world2.land(land2.id()).chief.as($hyoo_crowd_list).list(), [456, 789]);
        },
        async 'land delta & apply'() {
            const world1 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const world2 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const land = world1.land(world1.peer.id);
            land.chief.as($hyoo_crowd_list).list([123, 456]);
            const batch = await world1.delta_batch(land);
            $mol_assert_like((await world2.apply(batch)).forbid, new Map);
            $mol_assert_like(world2.land(land.id()).chief.as($hyoo_crowd_list).list(), [123, 456]);
        },
        async 'ignore changes from far future'() {
            const world1 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const world2 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const land = await world1.grab();
            const clock = land.clock_data;
            clock.see_time(clock.now() + 60 * 60 * 24 * 10);
            land.chief.as($hyoo_crowd_reg).numb(123);
            const batch = await world1.delta_batch(land);
            $mol_assert_like([...(await world2.apply(batch)).forbid.values()], ['Far future']);
            $mol_assert_like(world2.land(land.id()).delta().length, 3);
        },
        async 'ignore auth as another peer'() {
            const world1 = new $hyoo_crowd_world({ ...await $hyoo_crowd_peer.generate(), id: '1_1' });
            const world2 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const land = await world1.grab();
            land.chief.as($hyoo_crowd_reg).numb(123);
            const batch = await world1.delta_batch(land);
            $mol_assert_like([...(await world2.apply(batch)).forbid.values()], ['Alien join key', 'No auth key']);
            $mol_assert_like(world2.land(land.id()).delta().length, 2);
        },
        async 'ignore auth without key'() {
            const world1 = new $hyoo_crowd_world({ ...await $hyoo_crowd_peer.generate(), key_public_serial: [] });
            const world2 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const land = world1.land('1_1');
            land.chief.as($hyoo_crowd_reg).numb(123);
            const batch = await world1.delta_batch(land);
            $mol_assert_like([...(await world2.apply(batch)).forbid.values()], ['No join key', 'Level too low']);
            $mol_assert_like(world2.land(land.id()).delta().length, 0);
        },
        async 'ignore changes with wrong signs'() {
            const world1 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const world2 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const land = await world1.grab();
            const batch = await world1.delta_batch(land);
            batch[152] = ~batch[152];
            $mol_assert_like([...(await world2.apply(batch)).forbid.values()], ['Wrong join sign', 'Level too low']);
            $mol_assert_like(world2.land(land.id()).delta().length, 0);
        },
        async 'ignore update auth except auth removing'() {
            const peer = await $hyoo_crowd_peer.generate();
            const world1 = new $hyoo_crowd_world(peer);
            const world2 = new $hyoo_crowd_world(peer);
            const land1 = await world1.grab();
            const land2 = world2.land(land1.id());
            land2.clock_auth.tick(peer.id);
            land2.clock_data.tick(peer.id);
            land1.chief.as($hyoo_crowd_reg).numb(123);
            land2.chief.as($hyoo_crowd_reg).numb(234);
            const batch = await world1.delta_batch(land1);
            $mol_assert_like([...(await world2.apply(batch)).forbid.values()], []);
            $mol_assert_like(land2.delta().length, 5);
            land1.chief.as($hyoo_crowd_reg).numb(345);
            land1.leave();
            const batch2 = await world1.delta_batch(land1);
            $mol_assert_like([...(await world2.apply(batch2)).forbid.values()], ['No auth key']);
            $mol_assert_like(land2.chief.as($hyoo_crowd_reg).numb(), 123);
        },
        async 'levels'() {
            const world1 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const world2 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const peer = await $hyoo_crowd_peer.generate();
            const land1 = await world1.grab();
            const land2 = world2.land(land1.id());
            land1.chief.sub('foo', $hyoo_crowd_reg).numb(123);
            for await (const batch of world1.delta()) {
                $mol_assert_like([...(await world2.apply(batch)).forbid.values()], []);
            }
            land2.chief.sub('foo', $hyoo_crowd_reg).numb(234);
            land2.chief.sub('bar', $hyoo_crowd_reg).numb(234);
            land2.level(peer.id, $hyoo_crowd_peer_level.law);
            $mol_assert_like(land1.delta().length, 4);
            level_get: {
                const batch = await world2.delta_batch(land2);
                $mol_assert_like([...(await world1.apply(batch)).forbid.values()], ['Level too low', 'Level too low']);
                $mol_assert_like(land1.delta().length, 5);
                $mol_assert_like(land1.chief.sub('foo', $hyoo_crowd_reg).numb(), 123);
                $mol_assert_like(land1.chief.sub('bar', $hyoo_crowd_reg).numb(), 0);
                $mol_assert_like(land1.level(peer.id), $hyoo_crowd_peer_level.get);
            }
            level_add: {
                land1.level(land2.peer().id, $hyoo_crowd_peer_level.add);
                const batch = await world2.delta_batch(land2);
                $mol_assert_like([...(await world1.apply(batch)).forbid.values()], ['Level too low']);
                $mol_assert_like(land1.delta().length, 7);
                $mol_assert_like(land1.chief.sub('foo', $hyoo_crowd_reg).numb(), 123);
                $mol_assert_like(land1.chief.sub('bar', $hyoo_crowd_reg).numb(), 234);
                $mol_assert_like(land1.level(peer.id), $hyoo_crowd_peer_level.get);
            }
            level_mod: {
                land1.level(land2.peer().id, $hyoo_crowd_peer_level.mod);
                const batch = await world2.delta_batch(land2);
                $mol_assert_like([...(await world1.apply(batch)).forbid.values()], []);
                $mol_assert_like(land1.delta().length, 7);
                $mol_assert_like(land1.chief.sub('foo', $hyoo_crowd_reg).numb(), 234);
                $mol_assert_like(land1.chief.sub('bar', $hyoo_crowd_reg).numb(), 234);
                $mol_assert_like(land1.level(peer.id), $hyoo_crowd_peer_level.get);
            }
            level_law: {
                land1.level(land2.peer().id, $hyoo_crowd_peer_level.law);
                for await (const batch of world1.delta()) {
                    $mol_assert_like([...(await world2.apply(batch)).forbid.values()], []);
                }
                land2.level(peer.id, $hyoo_crowd_peer_level.law);
                const batch = await world2.delta_batch(land2);
                $mol_assert_like([...(await world1.apply(batch)).forbid.values()], []);
                $mol_assert_like(land1.delta().length, 8);
                $mol_assert_like(land1.chief.sub('foo', $hyoo_crowd_reg).numb(), 234);
                $mol_assert_like(land1.chief.sub('bar', $hyoo_crowd_reg).numb(), 234);
                $mol_assert_like(land1.level(peer.id), $hyoo_crowd_peer_level.law);
            }
        },
        async 'default level'() {
            const world1 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const world2 = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
            const peer = await $hyoo_crowd_peer.generate();
            const land1 = await world1.grab();
            const land2 = world2.land(land1.id());
            land1.chief.sub('foo', $hyoo_crowd_reg).numb(123);
            const batch = await world1.delta_batch(land1);
            $mol_assert_like([...(await world2.apply(batch)).forbid.values()], []);
            land2.chief.sub('foo', $hyoo_crowd_reg).numb(234);
            land2.chief.sub('bar', $hyoo_crowd_reg).numb(234);
            land2.level(peer.id, $hyoo_crowd_peer_level.law);
            $mol_assert_like(land1.delta().length, 4);
            level_add: {
                land1.level_base($hyoo_crowd_peer_level.add);
                const batch = await world2.delta_batch(land2);
                $mol_assert_like([...(await world1.apply(batch)).forbid.values()], ['Level too low']);
                $mol_assert_like(land1.delta().length, 7);
                $mol_assert_like(land1.chief.sub('foo', $hyoo_crowd_reg).numb(), 123);
                $mol_assert_like(land1.chief.sub('bar', $hyoo_crowd_reg).numb(), 234);
                $mol_assert_like(land1.level(peer.id), $hyoo_crowd_peer_level.add);
            }
            level_mod: {
                land1.level_base($hyoo_crowd_peer_level.mod);
                const batch = await world2.delta_batch(land2);
                $mol_assert_like([...(await world1.apply(batch)).forbid.values()], []);
                $mol_assert_like(land1.delta().length, 7);
                $mol_assert_like(land1.chief.sub('foo', $hyoo_crowd_reg).numb(), 234);
                $mol_assert_like(land1.chief.sub('bar', $hyoo_crowd_reg).numb(), 234);
                $mol_assert_like(land1.level(peer.id), $hyoo_crowd_peer_level.mod);
            }
            level_law: {
                land1.level_base($hyoo_crowd_peer_level.law);
                for await (const batch of world1.delta()) {
                    $mol_assert_like([...(await world2.apply(batch)).forbid.values()], []);
                }
                land2.level(peer.id, $hyoo_crowd_peer_level.law);
                const batch = await world2.delta_batch(land2);
                $mol_assert_like([...(await world1.apply(batch)).forbid.values()], []);
                $mol_assert_like(land1.delta().length, 7);
                $mol_assert_like(land1.chief.sub('foo', $hyoo_crowd_reg).numb(), 234);
                $mol_assert_like(land1.chief.sub('bar', $hyoo_crowd_reg).numb(), 234);
                $mol_assert_like(land1.level(peer.id), $hyoo_crowd_peer_level.law);
            }
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    async function make_land() {
        const world = new $hyoo_crowd_world(await $hyoo_crowd_peer.generate());
        return world.grab();
    }
    $mol_test({
        async 'Join & Leave'() {
            const store = await make_land();
            $mol_assert_like(store.peers(), [store.id(), store.peer_id()]);
            $mol_assert_like(store.residents(), []);
            const peer = await $hyoo_crowd_peer.generate();
            store.join();
            $mol_assert_like(store.peers(), [store.id(), store.peer_id()]);
            $mol_assert_like(store.residents(), [store.peer_id()]);
            store.level(peer.id, $hyoo_crowd_peer_level.add);
            $mol_assert_like(store.peers(), [store.id(), store.peer_id(), peer.id]);
            $mol_assert_like(store.residents(), [store.peer_id()]);
            store.leave();
            $mol_assert_like(store.peers(), [store.id(), store.peer_id(), peer.id]);
            $mol_assert_like(store.residents(), []);
        },
        async 'Default state'() {
            const store = await make_land();
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).value(), null);
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).bool(), false);
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).numb(), 0);
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).str(), '');
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), []);
            $mol_assert_like(store.delta().length, 2);
        },
        async 'Return default state'() {
            const store = await make_land();
            const reg = store.chief.as($hyoo_crowd_reg);
            const list = store.chief.as($hyoo_crowd_list);
            const text = store.chief.as($hyoo_crowd_text);
            $mol_assert_like(reg.bool(false), false);
            $mol_assert_like(reg.str(''), '');
            $mol_assert_like(reg.numb(0), 0);
            $mol_assert_like(text.str(''), '');
            $mol_assert_like(reg.value(null), null);
            $mol_assert_like(list.list(), []);
        },
        async 'Serial changes'() {
            const store = await make_land();
            Object.assign(store.peer(), { key_public_serial: null });
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).value(), null);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), []);
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).bool(), false);
            store.chief.as($hyoo_crowd_reg).bool(true);
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).value(), true);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), [true]);
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).numb(), 1);
            store.chief.as($hyoo_crowd_reg).numb(1);
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).value(), 1);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), [1]);
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).str(), '1');
            store.chief.as($hyoo_crowd_reg).str('x');
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).value(), 'x');
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['x']);
            store.chief.as($hyoo_crowd_reg).value(null);
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).value(), null);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), []);
            $mol_assert_like(store.delta().map(unit => unit.data).slice(1), [3, null]);
        },
        async 'Name spaces'() {
            const store = await make_land();
            store.chief.sub('foo', $hyoo_crowd_struct).sub('bar', $hyoo_crowd_reg).numb(111);
            store.chief.sub('foo', $hyoo_crowd_struct).sub('ton', $hyoo_crowd_reg).numb(222);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), []);
            $mol_assert_like(store.chief.sub('foo', $hyoo_crowd_list).list(), []);
            $mol_assert_like(store.chief.sub('foo', $hyoo_crowd_struct).sub('bar', $hyoo_crowd_list).list(), [111]);
            $mol_assert_like(store.chief.sub('foo', $hyoo_crowd_struct).sub('ton', $hyoo_crowd_list).list(), [222]);
        },
        async 'Name spaces merging'() {
            const left = await make_land();
            left.chief.sub('foo', $hyoo_crowd_list).list([111]);
            const right = await make_land();
            right.clock_data.tick(right.peer().id);
            right.chief.sub('foo', $hyoo_crowd_list).list([222]);
            const left_delta = left.delta();
            const right_delta = right.delta();
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_like(left.chief.sub('foo', $hyoo_crowd_list).list(), right.chief.sub('foo', $hyoo_crowd_list).list(), [222, 111]);
        },
        async 'Ignore same changes'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_reg).str('foo');
            const time = store.clock_data.last_time;
            store.chief.as($hyoo_crowd_reg).str('foo');
            store.chief.as($hyoo_crowd_list).list(['foo']);
            $mol_assert_like(store.delta().map(unit => unit.time).slice(2), [time + 2, time]);
        },
        async 'Serial insert values'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_list).insert(['foo']);
            store.chief.as($hyoo_crowd_list).insert(['bar']);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['foo', 'bar']);
        },
        async 'Concurent insert values'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_list).insert(['foo'], 0);
            store.chief.as($hyoo_crowd_list).insert(['bar'], 0);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['bar', 'foo']);
        },
        async 'Insert value between others'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_list).insert(['foo']);
            store.chief.as($hyoo_crowd_list).insert(['bar']);
            store.chief.as($hyoo_crowd_list).insert(['lol'], 1);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['foo', 'lol', 'bar']);
        },
        async 'Insert value inside other'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_list).insert(['foo']);
            store.chief.nodes($hyoo_crowd_list)[0].insert(['bar']);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['foo']);
            $mol_assert_like(store.chief.nodes($hyoo_crowd_list)[0].list(), ['bar']);
        },
        async 'Insert before removed before changed'() {
            const store = await make_land();
            const node = store.chief.as($hyoo_crowd_list);
            node.list(['foo', 'bar']);
            node.list(['xxx', 'foo', 'bar']);
            node.list(['xxx', 'bars']);
            $mol_assert_like(node.list(), ['xxx', 'bars']);
        },
        async 'Move existen Unit'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_text).str('FooBarLol');
            store.chief.as($hyoo_crowd_list).move(0, 2);
            $mol_assert_like(store.chief.as($hyoo_crowd_text).str(), 'BarFooLol');
        },
        async 'Many moves'() {
            const store = await make_land();
            const text = store.chief.as($hyoo_crowd_text);
            const list = store.chief.as($hyoo_crowd_list);
            text.str('FooBarLol');
            list.move(2, 1);
            list.move(2, 1);
            list.move(0, 3);
            list.move(2, 1);
            $mol_assert_like(text.str(), 'BarFooLol');
        },
        async 'Separated sublists'() {
            const store = await make_land();
            const text = store.chief.as($hyoo_crowd_text);
            const list = store.chief.as($hyoo_crowd_list);
            text.str('AaBbCcDdEeFf');
            list.move(3, 5);
            list.move(3, 5);
            list.move(5, 4);
            list.move(0, 2);
            list.move(0, 2);
            list.move(2, 1);
            $mol_assert_like(text.str(), 'AaCcBbDdFfEe');
        },
        async 'Deltas for different versions'() {
            const store = await make_land();
            Object.assign(store.peer(), { key_public_serial: null });
            store.clock_data.see_time(store.clock_data.now() + 60);
            store.chief.as($hyoo_crowd_list).list(['foo', 'bar', 'lol']);
            $mol_assert_like(store.delta([
                new $hyoo_crowd_clock,
                new $hyoo_crowd_clock([
                    [store.peer().id, store.clock_data.last_time - 3],
                ])
            ]).map(unit => unit.data).slice(2), ['foo', 'bar', 'lol']);
            $mol_assert_like(store.delta([
                new $hyoo_crowd_clock,
                new $hyoo_crowd_clock([
                    [store.peer().id, store.clock_data.last_time - 2],
                ])
            ]).map(unit => unit.data).slice(2), ['bar', 'lol']);
            $mol_assert_like(store.delta([
                new $hyoo_crowd_clock,
                new $hyoo_crowd_clock([
                    [store.peer().id, store.clock_data.last_time - 1],
                ])
            ]).map(unit => unit.data).slice(2), ['lol']);
            $mol_assert_like(store.delta([
                new $hyoo_crowd_clock,
                new $hyoo_crowd_clock([
                    [store.peer().id, store.clock_data.last_time],
                ])
            ]).slice(2), []);
        },
        async 'Delete without subtree and ignore inserted into deleted'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_text).str('foo');
            const b2 = store.chief.nodes($hyoo_crowd_text)[0];
            b2.str('bar');
            const b3 = b2.nodes($hyoo_crowd_text)[0];
            b3.str('lol');
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).value(), 'foo');
            $mol_assert_like(b2.as($hyoo_crowd_reg).value(), 'bar');
            $mol_assert_like(b3.as($hyoo_crowd_reg).value(), 'lol');
            store.chief.as($hyoo_crowd_list).cut(0);
            $mol_assert_like(store.chief.as($hyoo_crowd_reg).value(), null);
            $mol_assert_like(b2.as($hyoo_crowd_reg).value(), 'bar');
            $mol_assert_like(b3.as($hyoo_crowd_reg).value(), 'lol');
        },
        async 'Put/get list'() {
            const store = await make_land();
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), []);
            store.chief.as($hyoo_crowd_list).list(['foo', 'bar', 'foo']);
            const first = store.chief.nodes($hyoo_crowd_list)[0];
            first.list(['bar', 'foo', 'bar']);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['foo', 'bar', 'foo']);
            $mol_assert_like(first.list(), ['bar', 'foo', 'bar']);
        },
        async 'Put/get text'() {
            const store1 = await make_land();
            store1.chief.as($hyoo_crowd_text).str('foo bar foo');
            $mol_assert_like(store1.chief.as($hyoo_crowd_text).str(), 'foo bar foo');
            $mol_assert_like(store1.chief.as($hyoo_crowd_list).list(), ['foo', ' bar', ' foo']);
            const store2 = store1.fork(await $hyoo_crowd_peer.generate());
            store2.chief.as($hyoo_crowd_text).str('barFFFoo  bar');
            $mol_assert_like(store2.chief.as($hyoo_crowd_text).str(), 'barFFFoo  bar');
            $mol_assert_like(store2.chief.as($hyoo_crowd_list).list(), ['bar', 'FFFoo', ' ', ' bar']);
        },
        async 'Text modifications'() {
            const store1 = await make_land();
            store1.chief.as($hyoo_crowd_text).str('foo bar');
            const store2 = store1.fork(await $hyoo_crowd_peer.generate());
            store2.chief.as($hyoo_crowd_text).str('foo  bar');
            $mol_assert_like(store1.chief.units().map(unit => unit.self), [
                store2.chief.units()[0].self,
                store2.chief.units()[2].self,
            ]);
            const store3 = store2.fork(await $hyoo_crowd_peer.generate());
            store3.chief.as($hyoo_crowd_text).str('foo ton bar');
            $mol_assert_like(store2.chief.units().map(unit => unit.self), [
                store3.chief.units()[0].self,
                store3.chief.units()[1].self,
                store3.chief.units()[2].self,
            ]);
            const store4 = store3.fork(await $hyoo_crowd_peer.generate());
            store4.chief.as($hyoo_crowd_text).str('foo bar');
            $mol_assert_like([
                store3.chief.units()[0].self,
                store3.chief.units()[2].self,
            ], store4.chief.units().map(unit => unit.self));
            const store5 = store3.fork(await $hyoo_crowd_peer.generate());
            store5.chief.as($hyoo_crowd_text).str('foo ');
            $mol_assert_like([
                store4.chief.units()[0].self,
                store4.chief.units()[1].self,
            ], store5.chief.units().map(unit => unit.self));
        },
        async 'Change sequences'() {
            const store = await make_land();
            $mol_assert_like(store.chief.as($hyoo_crowd_text).str(), '');
            store.chief.as($hyoo_crowd_text).str('foo');
            $mol_assert_like(store.chief.as($hyoo_crowd_text).str(), 'foo');
            store.chief.as($hyoo_crowd_text).str('foo bar');
            $mol_assert_like(store.chief.as($hyoo_crowd_text).str(), 'foo bar');
            store.chief.as($hyoo_crowd_text).str('foo lol bar');
            $mol_assert_like(store.chief.as($hyoo_crowd_text).str(), 'foo lol bar');
            store.chief.as($hyoo_crowd_text).str('lol bar');
            $mol_assert_like(store.chief.as($hyoo_crowd_text).str(), 'lol bar');
            store.chief.as($hyoo_crowd_text).str('foo bar');
            $mol_assert_like(store.chief.as($hyoo_crowd_text).str(), 'foo bar');
        },
        async 'Merge different sequences'() {
            const left = await make_land();
            left.chief.as($hyoo_crowd_text).str('foo bar.');
            const right = await make_land();
            right.clock_data.tick(right.peer().id);
            right.chief.as($hyoo_crowd_text).str('xxx yyy.');
            const left_delta = left.delta();
            const right_delta = right.delta();
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_like(left.chief.as($hyoo_crowd_text).str(), right.chief.as($hyoo_crowd_text).str(), 'xxx yyy.foo bar.');
        },
        async 'Merge different insertions to same place of same sequence'() {
            const base = await make_land();
            base.chief.as($hyoo_crowd_text).str('foo bar');
            const left = base.fork(await $hyoo_crowd_peer.generate());
            left.chief.as($hyoo_crowd_text).str('foo xxx bar');
            const right = base.fork(await $hyoo_crowd_peer.generate());
            right.clock_data.tick(right.peer().id);
            right.chief.as($hyoo_crowd_text).str('foo yyy bar');
            const left_delta = left.delta(base.clocks);
            const right_delta = right.delta(base.clocks);
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_like(left.chief.as($hyoo_crowd_text).str(), right.chief.as($hyoo_crowd_text).str(), 'foo yyy xxx bar');
        },
        async 'Insert after moved'() {
            const base = await make_land();
            base.chief.as($hyoo_crowd_text).str('FooBarZak');
            const left = base.fork(await $hyoo_crowd_peer.generate());
            left.chief.as($hyoo_crowd_text).str('FooXxxBarZak');
            const right = base.fork(await $hyoo_crowd_peer.generate());
            right.clock_data.tick(right.peer().id);
            right.insert(right.chief.units()[0], '0_0', 2);
            const left_delta = left.delta(base.clocks);
            const right_delta = right.delta(base.clocks);
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_like(left.chief.as($hyoo_crowd_text).str(), right.chief.as($hyoo_crowd_text).str(), 'BarFooXxxZak');
        },
        async 'Insert before moved left'() {
            const base = await make_land();
            base.chief.as($hyoo_crowd_text).str('fooBarZak');
            const left = base.fork(await $hyoo_crowd_peer.generate());
            left.chief.as($hyoo_crowd_text).str('FooXxxBarZak');
            const right = base.fork(await $hyoo_crowd_peer.generate());
            right.clock_data.tick(right.peer().id);
            right.insert(right.chief.units()[1], '0_0', 0);
            const left_delta = left.delta(base.clocks);
            const right_delta = right.delta(base.clocks);
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_like(left.chief.as($hyoo_crowd_text).str(), right.chief.as($hyoo_crowd_text).str(), 'BarFooXxxZak');
        },
        async 'Insert before moved right'() {
            const base = await make_land();
            base.chief.as($hyoo_crowd_text).str('FooBarZakPew');
            const left = base.fork(await $hyoo_crowd_peer.generate());
            left.chief.as($hyoo_crowd_text).str('FooXxxBarZakPew');
            const right = base.fork(await $hyoo_crowd_peer.generate());
            right.clock_data.tick(right.peer().id);
            right.insert(right.chief.units()[1], '0_0', 4);
            const left_delta = left.delta(base.clocks);
            const right_delta = right.delta(base.clocks);
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_like(left.chief.as($hyoo_crowd_text).str(), right.chief.as($hyoo_crowd_text).str(), 'FooZakXxxPewBar');
        },
        async 'Insert after removed'() {
            const base = await make_land();
            base.chief.as($hyoo_crowd_text).str('FooBar');
            const left = base.fork(await $hyoo_crowd_peer.generate());
            left.chief.as($hyoo_crowd_text).str('FooXxxBar');
            const right = base.fork(await $hyoo_crowd_peer.generate());
            right.clock_data.tick(right.peer().id);
            right.chief.as($hyoo_crowd_text).str('Bar');
            const left_delta = left.delta(base.clocks);
            const right_delta = right.delta(base.clocks);
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_like(left.chief.as($hyoo_crowd_text).str(), right.chief.as($hyoo_crowd_text).str(), 'XxxBar');
        },
        async 'Insert after removed out'() {
            const base = await make_land();
            base.node('1_1', $hyoo_crowd_text).str('FooBarZak');
            const left = base.fork(await $hyoo_crowd_peer.generate());
            left.node('1_1', $hyoo_crowd_text).str('FooBarXxxZak');
            const right = base.fork(await $hyoo_crowd_peer.generate());
            right.clock_data.tick(right.peer().id);
            right.insert(right.node('1_1', $hyoo_crowd_node).units()[1], '2_2', 0);
            const left_delta = left.delta(base.clocks);
            const right_delta = right.delta(base.clocks);
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_like(left.node('1_1', $hyoo_crowd_text).str(), right.node('1_1', $hyoo_crowd_text).str(), 'FooZakXxx');
            $mol_assert_like(left.node('2_2', $hyoo_crowd_text).str(), left.node('2_2', $hyoo_crowd_text).str(), 'Bar');
        },
        async 'Insert before changed'() {
            const base = await make_land();
            base.chief.as($hyoo_crowd_text).str('XxxYyyZzz');
            const left = base.fork(await $hyoo_crowd_peer.generate());
            left.chief.as($hyoo_crowd_text).str('XxxFooYyyZzz');
            const right = base.fork(await $hyoo_crowd_peer.generate());
            right.clock_data.tick(right.peer().id);
            right.chief.as($hyoo_crowd_text).str('XxxBarZzz');
            const left_delta = left.delta(base.clocks);
            const right_delta = right.delta(base.clocks);
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_like(left.chief.as($hyoo_crowd_text).str(), right.chief.as($hyoo_crowd_text).str(), 'XxxBarFooZzz');
        },
        async 'Insert between moved'() {
            const base = await make_land();
            base.chief.as($hyoo_crowd_list).list([111, 222, 333, 444, 555, 666]);
            const left = base.fork(await $hyoo_crowd_peer.generate());
            left.chief.as($hyoo_crowd_list).list([111, 222, 777, 333, 444, 555, 666]);
            const right = base.fork(await $hyoo_crowd_peer.generate());
            right.clock_data.tick(right.peer().id);
            right.insert(right.chief.units()[1], '0_0', 5);
            right.insert(right.chief.units()[1], '0_0', 5);
            const left_delta = left.delta(base.clocks);
            const right_delta = right.delta(base.clocks);
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_like(left.chief.as($hyoo_crowd_list).list(), right.chief.as($hyoo_crowd_list).list(), [111, 444, 555, 222, 333, 777, 666]);
        },
        async 'Merge text changes'() {
            const base = await make_land();
            base.chief.as($hyoo_crowd_text).str('Hello World and fun!');
            const left = base.fork(await $hyoo_crowd_peer.generate());
            const right = base.fork(await $hyoo_crowd_peer.generate());
            right.clock_data.tick(right.peer().id);
            left.chief.as($hyoo_crowd_text).str('Hello Alice and fun!');
            right.chief.as($hyoo_crowd_text).str('Bye World and fun!');
            const left_delta = left.delta();
            const right_delta = right.delta();
            left.apply(right_delta);
            right.apply(left_delta);
            $mol_assert_equal(left.chief.as($hyoo_crowd_text).str(), right.chief.as($hyoo_crowd_text).str(), 'Bye Alice and fun!');
        },
        async 'Write into token'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_text).str('foobar');
            store.chief.as($hyoo_crowd_text).write('xyz', 3);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['fooxyzbar']);
        },
        async 'Write into token with split'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_text).str('foobar');
            store.chief.as($hyoo_crowd_text).write('XYZ', 2, 4);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['fo', 'XYZar']);
        },
        async 'Write over few tokens'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_text).str('xxx foo bar yyy');
            store.chief.as($hyoo_crowd_text).write('X Y Z', 6, 9);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['xxx', ' fo', 'X', ' Y', ' Zar', ' yyy']);
        },
        async 'Write whole token'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_text).str('xxxFoo yyy');
            store.chief.as($hyoo_crowd_text).write('bar', 3, 7);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['xxxbaryyy']);
        },
        async 'Write whole text'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_text).str('foo bar');
            store.chief.as($hyoo_crowd_text).write('xxx', 0, 7);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['xxx']);
        },
        async 'Write at the end'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_text).str('foo');
            store.chief.as($hyoo_crowd_text).write('bar');
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['foobar']);
        },
        async 'Write between tokens'() {
            const store = await make_land();
            store.chief.as($hyoo_crowd_text).str('foo bar');
            store.chief.as($hyoo_crowd_text).write('xxx', 4);
            $mol_assert_like(store.chief.as($hyoo_crowd_list).list(), ['foo', ' xxxbar']);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    async function make_land(id = '1_1') {
        return $hyoo_crowd_land.make({
            id: $mol_const(id),
            peer: $mol_const(await $hyoo_crowd_peer.generate()),
        });
    }
    $mol_test({
        async 'list add & insert & drop'() {
            const land = await make_land();
            const node = land.chief.as($hyoo_crowd_list);
            node.list([1, 2]);
            $mol_assert_like(node.list(), [1, 2]);
            node.add(3);
            $mol_assert_like(node.list(), [1, 2, 3]);
            node.add(3);
            $mol_assert_like(node.list(), [1, 2, 3]);
            node.insert([2]);
            $mol_assert_like(node.list(), [1, 2, 3, 2]);
            node.insert([2], 0);
            $mol_assert_like(node.list(), [2, 1, 2, 3, 2]);
            node.drop(2);
            $mol_assert_like(node.list(), [1, 3]);
            node.drop(2);
            $mol_assert_like(node.list(), [1, 3]);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        async 'string: Offset <=> Point'() {
            const store = $hyoo_crowd_land.make({});
            store.chief.as($hyoo_crowd_text).str('fooBar');
            const [first, second] = store.chief.units();
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .point_by_offset(0), [first.self, 0]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .offset_by_point([first.self, 0]), [first.self, 0]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .point_by_offset(3), [first.self, 3]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .offset_by_point([first.self, 3]), [first.self, 3]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .offset_by_point([first.self, 5]), [first.self, 5]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .point_by_offset(5), [second.self, 2]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .offset_by_point([second.self, 2]), [second.self, 5]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .point_by_offset(6), [second.self, 3]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .offset_by_point([second.self, 3]), [second.self, 6]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .point_by_offset(7), ['0_0', 1]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text)
                .offset_by_point(['0_0', 1]), ['0_0', 7]);
        },
        async 'text: Offset <=> Point'() {
            const store = $hyoo_crowd_land.make({});
            store.chief.as($hyoo_crowd_text).text('foo bar\n666 777');
            const [first, second] = store.chief.nodes($hyoo_crowd_text);
            $mol_assert_like(store.chief.as($hyoo_crowd_text).point_by_offset(0), [first.units()[0].self, 0]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text).offset_by_point([first.units()[0].self, 0]), [first.units()[0].self, 0]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text).point_by_offset(8), [first.units()[2].self, 1]);
            $mol_assert_like(store.chief.as($hyoo_crowd_text).offset_by_point([first.units()[2].self, 1]), [first.units()[2].self, 8]);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    async function make_land(id = '1_1') {
        return $hyoo_crowd_land.make({
            id: $mol_const(id),
            peer: $mol_const(await $hyoo_crowd_peer.generate()),
        });
    }
    $mol_test({
        async 'save and load buffers'() {
            const land = await make_land();
            const node = land.chief.as($hyoo_crowd_blob);
            const source = new Uint8Array(2 ** 15 + 1);
            source[2 ** 15 + 1] = 255;
            node.buffer(source);
            $mol_assert_like(node.list().length, 2);
            $mol_assert_like(node.buffer(), source);
        },
        async 'save and load blobs'() {
            const land = await make_land();
            const node = land.chief.as($hyoo_crowd_blob);
            const source = new Uint8Array(2 ** 15 + 1);
            source[2 ** 15 + 1] = 255;
            await $mol_wire_async(node).blob(new $mol_blob([source], { type: 'test/test' }));
            $mol_assert_like('test/test', node.blob().type);
            $mol_assert_like(source, new Uint8Array(await node.blob().arrayBuffer()));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'parse and serial'() {
            $mol_assert_equal(new $mol_time_duration('P42.1Y').toString(), 'P42.1YT');
            $mol_assert_equal(new $mol_time_duration('P42.1M').toString(), 'P42.1MT');
            $mol_assert_equal(new $mol_time_duration('P42.1D').toString(), 'P42.1DT');
            $mol_assert_equal(new $mol_time_duration('PT42.1h').toString(), 'PT42.1H');
            $mol_assert_equal(new $mol_time_duration('PT42.1m').toString(), 'PT42.1M');
            $mol_assert_equal(new $mol_time_duration('PT42.1s').toString(), 'PT42.1S');
            $mol_assert_equal(new $mol_time_duration('P1Y2M3DT4h5m6.7s').toString(), 'P1Y2M3DT4H5M6.7S');
        },
        'format typed'() {
            $mol_assert_equal(new $mol_time_duration('P1Y2M3DT4h5m6s').toString('P#Y#M#DT#h#m#s'), 'P1Y2M3DT4H5M6S');
        },
        'format readable'() {
            $mol_assert_equal(new $mol_time_duration('P1Y2M3DT4h5m6s').toString('hh:mm:ss.sss'), '04:05:06.000');
        },
        'normalization'() {
            $mol_assert_equal(new $mol_time_duration('P1Y2M3DT44h55m66s').normal.toString(), 'P1Y2M4DT20H56M6S');
        },
        'comparison'() {
            const iso = 'P1Y1M1DT1h1m1s';
            $mol_assert_equal(new $mol_time_duration(iso), new $mol_time_duration(iso));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'parse and serial'() {
            $mol_assert_equal(new $mol_time_moment('2014').toString(), '2014');
            $mol_assert_equal(new $mol_time_moment('2014-01').toString(), '2014-01');
            $mol_assert_equal(new $mol_time_moment('2014-01-02').toString(), '2014-01-02');
            $mol_assert_equal(new $mol_time_moment('2014-01-02T03').toString(), '2014-01-02T03');
            $mol_assert_equal(new $mol_time_moment('2014-01-02T03:04').toString(), '2014-01-02T03:04');
            $mol_assert_equal(new $mol_time_moment('2014-01-02T03:04:05').toString(), '2014-01-02T03:04:05');
            $mol_assert_equal(new $mol_time_moment('2014-01-02T03:04:05.006').toString(), '2014-01-02T03:04:05.006');
            $mol_assert_equal(new $mol_time_moment('2014-01-02T03:04:05.006Z').toString(), '2014-01-02T03:04:05.006+00:00');
            $mol_assert_equal(new $mol_time_moment('2014-01-02T03:04:05.006+07:00').toString(), '2014-01-02T03:04:05.006+07:00');
            $mol_assert_equal(new $mol_time_moment('2014-01-02T03:04:05+07:08').toString(), '2014-01-02T03:04:05+07:08');
            $mol_assert_equal(new $mol_time_moment('2014-01-02T03:04+07:08').toString(), '2014-01-02T03:04+07:08');
            $mol_assert_equal(new $mol_time_moment('T03:04+07:08').toString(), 'T03:04+07:08');
            $mol_assert_equal(new $mol_time_moment('T03:04:05').toString(), 'T03:04:05');
            $mol_assert_equal(new $mol_time_moment('T03:04').toString(), 'T03:04');
            $mol_assert_equal(new $mol_time_moment('T03').toString(), 'T03');
        },
        'format simple'() {
            $mol_assert_equal(new $mol_time_moment('2014-01-02T01:02:03.000000').toString('AD YY-M-D h:m:s'), '21 14-1-2 1:2:3');
        },
        'format padded'() {
            $mol_assert_equal(new $mol_time_moment('2014-01-02T01:02:03.000').toString('YYYY-MM-DD hh:mm:ss'), '2014-01-02 01:02:03');
        },
        'format time zone'() {
            $mol_assert_equal(new $mol_time_moment('2014-01-02T01:02:03+05:00').toString('Z'), '+05:00');
        },
        'format names'() {
            $mol_assert_ok(new $mol_time_moment('2014-01-02T01:02:03.000').toString('Month Mon | WeekDay WD'));
        },
        'shifting'() {
            $mol_assert_equal(new $mol_time_moment('T15:54:58.243+03:00').shift({}).toString(), 'T15:54:58.243+03:00');
            $mol_assert_equal(new $mol_time_moment('2014-01-02').shift('P1Y').toString(), '2015-01-02');
            $mol_assert_equal(new $mol_time_moment('2014-01-02').shift('P12M').toString(), '2015-01-02');
            $mol_assert_equal(new $mol_time_moment('2014-01-02').shift('P365D').toString(), '2015-01-02');
            $mol_assert_equal(new $mol_time_moment('2014-01-02').shift('PT8760h').toString(), '2015-01-02');
            $mol_assert_equal(new $mol_time_moment('2014-01').shift('PT8760h').toString(), '2015-01');
            $mol_assert_equal(new $mol_time_moment('2014-01').shift('PT-8760h').toString(), '2013-01');
        },
        'normalization'() {
            $mol_assert_equal(new $mol_time_moment({ year: 2015, month: 6, day: 34 }).normal.toString(), '2015-08-04');
            $mol_assert_equal(new $mol_time_moment('2024-09-30 19:00+03:00').normal.month, 8);
        },
        'renormalization'() {
            $mol_assert_equal(new $mol_time_moment('2024-08').normal.toString(), '2024-08');
            $mol_assert_equal(new $mol_time_moment('2024-11').normal.toString(), '2024-11');
        },
        'iso week day'() {
            $mol_assert_equal(new $mol_time_moment('2017-09-17').weekday, $mol_time_moment_weekdays.sunday);
            $mol_assert_equal(new $mol_time_moment('2017-09-18').weekday, $mol_time_moment_weekdays.monday);
        },
        'change offset'() {
            $mol_assert_equal(new $mol_time_moment('2021-04-10 +03:00').toOffset('Z').toString(), '2021-04-09T21:00:00+00:00');
        },
        'comparison'() {
            const iso = '2021-01-02T03:04:05.678+09:10';
            $mol_assert_like(new $mol_time_moment(iso), new $mol_time_moment(iso));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_sync_masters = [
        `localhost:9090`,
        $mol_dom_context.document.location.origin.replace(/^\w+:\/\//, ''),
    ];
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        '$mol_syntax2_md_flow'() {
            const check = (input, right) => {
                const tokens = [];
                $mol_syntax2_md_flow.tokenize(input, (...token) => tokens.push(token));
                $mol_assert_equal(tokens, right);
            };
            check('Hello,\nWorld..\r\n\r\n\nof Love!', [
                ['block', 'Hello,\n', ['Hello,', '\n'], 0],
                ['block', 'World..\r\n\r\n\n', ['World..', '\r\n\r\n\n'], 7],
                ['block', 'of Love!', ['of Love!', ''], 19],
            ]);
            check('# Header1\n\nHello!\n\n## Header2', [
                ['header', '# Header1\n\n', ['#', ' ', 'Header1', '\n\n'], 0],
                ['block', 'Hello!\n\n', ['Hello!', '\n\n'], 11],
                ['header', '## Header2', ['##', ' ', 'Header2', ''], 19],
            ]);
            check('```\nstart()\n```\n\n```jam.js\nrestart()\n```\n\nHello!\n\n```\nstop()\n```', [
                ['code', '```\nstart()\n```\n\n', ['```', '', 'start()\n', '```', '\n\n'], 0],
                ['code', '```jam.js\nrestart()\n```\n\n', ['```', 'jam.js', 'restart()\n', '```', '\n\n'], 17],
                ['block', 'Hello!\n\n', ['Hello!', '\n\n'], 42],
                ['code', '```\nstop()\n```', ['```', '', 'stop()\n', '```', ''], 50],
            ]);
            check('| header1 | header2\n|----|----\n| Cell11 | Cell12\n| Cell21 | Cell22\n\n| Cell11 | Cell12\n| Cell21 | Cell22\n', [
                ['table', '| header1 | header2\n|----|----\n| Cell11 | Cell12\n| Cell21 | Cell22\n\n', ['| header1 | header2\n|----|----\n| Cell11 | Cell12\n| Cell21 | Cell22\n', '\n'], 0],
                ['table', '| Cell11 | Cell12\n| Cell21 | Cell22\n', ['| Cell11 | Cell12\n| Cell21 | Cell22\n', ''], 68],
            ]);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'null by default'() {
            const key = String(Math.random());
            $mol_assert_equal($mol_state_session.value(key), null);
        },
        'storing'() {
            const key = String(Math.random());
            $mol_state_session.value(key, '$mol_state_session_test');
            $mol_assert_equal($mol_state_session.value(key), '$mol_state_session_test');
            $mol_state_session.value(key, null);
            $mol_assert_equal($mol_state_session.value(key), null);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'return result without errors'() {
            $mol_assert_equal($mol_try(() => false), false);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'strong'() {
            const res = [...'**text**'.matchAll($hyoo_marked_line)][0].groups;
            $mol_assert_equal(res.strong, '**text**');
            $mol_assert_equal(res.marker, '**');
            $mol_assert_equal(res.content, 'text');
        },
        'emphasis'() {
            const res = [...'//text//'.matchAll($hyoo_marked_line)][0].groups;
            $mol_assert_equal(res.emphasis, '//text//');
            $mol_assert_equal(res.marker, '//');
            $mol_assert_equal(res.content, 'text');
        },
        'insertion'() {
            const res = [...'++text++'.matchAll($hyoo_marked_line)][0].groups;
            $mol_assert_equal(res.insertion, '++text++');
            $mol_assert_equal(res.marker, '++');
            $mol_assert_equal(res.content, 'text');
        },
        'deletion'() {
            const res = [...'--text--'.matchAll($hyoo_marked_line)][0].groups;
            $mol_assert_equal(res.deletion, '--text--');
            $mol_assert_equal(res.marker, '--');
            $mol_assert_equal(res.content, 'text');
        },
        'code'() {
            const res = [...';;text;;'.matchAll($hyoo_marked_line)][0].groups;
            $mol_assert_equal(res.code, ';;text;;');
            $mol_assert_equal(res.marker, ';;');
            $mol_assert_equal(res.content, 'text');
        },
        'nested simple'() {
            const res = [...'**//foo//bar**'.matchAll($hyoo_marked_line)][0].groups;
            $mol_assert_equal(res.strong, '**//foo//bar**');
            $mol_assert_equal(res.marker, '**');
            $mol_assert_equal(res.content, '//foo//bar');
        },
        'nested simple overlap'() {
            const res = [...'**//foo**bar//'.matchAll($hyoo_marked_line)];
            $mol_assert_equal(res[0].groups.strong, '**//foo**');
            $mol_assert_equal(res[0].groups.marker, '**');
            $mol_assert_equal(res[0].groups.content, '//foo');
            $mol_assert_equal(res[1][0], 'bar//');
        },
        'link'() {
            const res = [...'\\\\text\\url\\\\'.matchAll($hyoo_marked_line)][0].groups;
            $mol_assert_equal(res.link, '\\\\text\\url\\\\');
            $mol_assert_equal(res.marker, '\\\\');
            $mol_assert_equal(res.content, 'text');
            $mol_assert_equal(res.uri, 'url');
        },
        'embed'() {
            const res = [...'""text\\url""'.matchAll($hyoo_marked_line)][0].groups;
            $mol_assert_equal(res.embed, '""text\\url""');
            $mol_assert_equal(res.marker, '""');
            $mol_assert_equal(res.content, 'text');
            $mol_assert_equal(res.uri, 'url');
        },
        'link with embed'() {
            const res = [...'\\\\""text\\url1""\\url2\\\\'.matchAll($hyoo_marked_line)][0].groups;
            $mol_assert_equal(res.link, '\\\\""text\\url1""\\url2\\\\');
            $mol_assert_equal(res.marker, '\\\\');
            $mol_assert_equal(res.content, '""text\\url1""');
            $mol_assert_equal(res.uri, 'url2');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'header level 1'() {
            const res = [...`= text\n`.matchAll($hyoo_marked_flow)][0].groups;
            $mol_assert_equal(res.header, '= text\n');
            $mol_assert_equal(res.marker, '=');
            $mol_assert_equal(res.content, 'text');
        },
        'header level 6'() {
            const res = [...`====== text\n`.matchAll($hyoo_marked_flow)][0].groups;
            $mol_assert_equal(res.header, '====== text\n');
            $mol_assert_equal(res.marker, '======');
            $mol_assert_equal(res.content, 'text');
        },
        'header level too many'() {
            const res = [...`======= text\n`.matchAll($hyoo_marked_flow)][0].groups;
            $mol_assert_equal(res.paragraph, '======= text\n');
            $mol_assert_equal(res.content, '======= text');
        },
        'different blocks'() {
            const text = `
				= header
				paragraph
				= header
			`.replace(/^\t+/gm, '');
            const res = [...text.matchAll($hyoo_marked_flow)];
            $mol_assert_equal(res[0].groups.paragraph, '\n');
            $mol_assert_equal(res[0].groups.content, '');
            $mol_assert_equal(res[1].groups.header, '= header\n');
            $mol_assert_equal(res[1].groups.marker, '=');
            $mol_assert_equal(res[1].groups.content, 'header');
            $mol_assert_equal(res[2].groups.paragraph, 'paragraph\n');
            $mol_assert_equal(res[2].groups.content, 'paragraph');
            $mol_assert_equal(res[3].groups.header, '= header\n');
            $mol_assert_equal(res[3].groups.marker, '=');
            $mol_assert_equal(res[3].groups.content, 'header');
        },
        'plain list'() {
            const text = `
				- foo
				- bar
			`.slice(1).replace(/^\t+/gm, '');
            const res = [...text.matchAll($hyoo_marked_flow)][0].groups;
            $mol_assert_equal(res.list, '- foo\n- bar\n');
        },
        'nested lists'() {
            const text = `
				- foo
				  + bar
				- lol
			`.slice(1).replace(/^\t+/gm, '');
            const res = [...text.matchAll($hyoo_marked_flow)][0].groups;
            $mol_assert_equal(res.list, '- foo\n  + bar\n- lol\n');
        },
        'quote'() {
            const text = `
				" foo
				" bar
			`.slice(1).replace(/^\t+/gm, '');
            const res = [...text.matchAll($hyoo_marked_flow)][0].groups;
            $mol_assert_equal(res.quote, '" foo\n" bar\n');
        },
        'quote in list'() {
            const text = `
				- foo
				  " bar
				- lol
			`.slice(1).replace(/^\t+/gm, '');
            const res = [...text.matchAll($hyoo_marked_flow)][0].groups;
            $mol_assert_equal(res.list, '- foo\n  " bar\n- lol\n');
        },
        'table'() {
            const text = `
				! foo
				  ! bar
				! lol
				  ! 777
			`.slice(1).replace(/^\t+/gm, '');
            const res = [...text.matchAll($hyoo_marked_flow)][0].groups;
            $mol_assert_equal(res.table, '! foo\n  ! bar\n! lol\n  ! 777\n');
        },
        'script'() {
            const text = `
			    foo
			 ++ bar
			 -- lol
			 ** 777
			`.slice(1).replace(/^\t+/gm, '');
            const res = [...text.matchAll($hyoo_marked_flow)][0].groups;
            $mol_assert_equal(res.script, '    foo\n ++ bar\n -- lol\n ** 777\n');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Special'() {
            $mol_assert_equal($mol_si_short(0), '0');
            $mol_assert_equal($mol_si_short(1 / 0), '∞');
            $mol_assert_equal($mol_si_short(-1 / 0), '-∞');
            $mol_assert_equal($mol_si_short(0 / 0), '∅');
        },
        'M'() {
            $mol_assert_equal($mol_si_short(0), '0');
            $mol_assert_equal($mol_si_short(0.999500), '1.00');
            $mol_assert_equal($mol_si_short(-0.999600), '-1.00');
            $mol_assert_equal($mol_si_short(999.4), '999');
            $mol_assert_equal($mol_si_short(-999.4), '-999');
        },
        'L'() {
            $mol_assert_equal($mol_si_short(999.5), '1.00k');
            $mol_assert_equal($mol_si_short(-999.5), '-1.00k');
            $mol_assert_equal($mol_si_short(999_400), '999k');
            $mol_assert_equal($mol_si_short(-999_400), '-999k');
        },
        'XL'() {
            $mol_assert_equal($mol_si_short(999_500), '1.00M');
            $mol_assert_equal($mol_si_short(-999_600), '-1.00M');
            $mol_assert_equal($mol_si_short(999_400_000), '999M');
            $mol_assert_equal($mol_si_short(-999_400_000), '-999M');
        },
        'S'() {
            $mol_assert_equal($mol_si_short(0.999400), '999m');
            $mol_assert_equal($mol_si_short(-0.999400), '-999m');
            $mol_assert_equal($mol_si_short(0.000_999_500), '1.00m');
            $mol_assert_equal($mol_si_short(-0.000_999_500), '-1.00m');
        },
        'XS'() {
            $mol_assert_equal($mol_si_short(0.000_999_400), '999µ');
            $mol_assert_equal($mol_si_short(-0.000_999_400), '-999µ');
            $mol_assert_equal($mol_si_short(0.000_000_999_600), '1.00µ');
            $mol_assert_equal($mol_si_short(-0.000_000_999_600), '-1.00µ');
        },
        'With unit'() {
            $mol_assert_equal($mol_si_short(0, 's'), '0 s');
            $mol_assert_equal($mol_si_short(1 / 0, 's'), '∞ s');
            $mol_assert_equal($mol_si_short(0 / 0, 's'), '∅ s');
            $mol_assert_equal($mol_si_short(123, 'Hz'), '123 Hz');
            $mol_assert_equal($mol_si_short(1234, 'g'), '1.23 kg');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'empty hash'() {
            $mol_assert_equal($mol_crypto_hash(new Uint8Array([])), new Uint8Array([218, 57, 163, 238, 94, 107, 75, 13, 50, 85, 191, 239, 149, 96, 24, 144, 175, 216, 7, 9]));
        },
        'three bytes hash'() {
            $mol_assert_equal($mol_crypto_hash(new Uint8Array([255, 254, 253])), new Uint8Array([240, 150, 38, 243, 255, 128, 96, 0, 72, 215, 207, 228, 19, 149, 113, 52, 2, 125, 27, 77]));
        },
        'six bytes hash'() {
            $mol_assert_equal($mol_crypto_hash(new Uint8Array([0, 255, 10, 250, 32, 128])), new Uint8Array([23, 25, 155, 181, 46, 200, 221, 83, 254, 0, 166, 68, 91, 255, 67, 140, 114, 88, 218, 155]));
        },
        'seven bytes hash'() {
            $mol_assert_equal($mol_crypto_hash(new Uint8Array([1, 2, 3, 4, 5, 6, 7])), new Uint8Array([140, 31, 40, 252, 47, 72, 194, 113, 214, 196, 152, 240, 242, 73, 205, 222, 54, 92, 84, 197]));
        },
        async 'reference'() {
            const data = new Uint8Array([255, 254, 253]);
            $mol_assert_equal($mol_crypto_hash(data), new Uint8Array(await $mol_crypto_native.subtle.digest('SHA-1', data)));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_crypto_salt() {
        return $mol_crypto_native.getRandomValues(new Uint8Array(16));
    }
    $.$mol_crypto_salt = $mol_crypto_salt;
    $.$mol_crypto_salt_once = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_ae_encode(buffer) {
        return $mol_base64_encode(buffer).replace(/\+/g, 'æ').replace(/\//g, 'Æ').replace(/=/g, '');
    }
    $.$mol_base64_ae_encode = $mol_base64_ae_encode;
    function $mol_base64_ae_decode(str) {
        return $mol_base64_decode(str.replace(/æ/g, '+').replace(/Æ/g, '/'));
    }
    $.$mol_base64_ae_decode = $mol_base64_ae_decode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_buffer extends DataView {
        static from(array) {
            if (typeof array === 'number')
                array = new Uint8Array(array);
            if (typeof array === 'string')
                array = $mol_base64_ae_decode(array);
            return new this(array.buffer, array.byteOffset, array.byteLength);
        }
        static toString() {
            return $$.$mol_func_name(this);
        }
        getUint48(offset, LE = false) {
            if (offset % 4) {
                return this.getUint16(offset, LE) + this.getUint32(offset + 2, LE) * 2 ** 16;
            }
            else {
                return this.getUint32(offset, LE) + this.getUint16(offset + 4, LE) * 2 ** 32;
            }
        }
        setUint48(offset, value, LE = false) {
            if (offset % 4) {
                this.setUint16(offset, value & ((1 << 16) - 1), LE);
                this.setUint32(offset + 2, (value / 2 ** 16) | 0, LE);
            }
            else {
                this.setUint32(offset, value | 0, LE);
                this.setUint16(offset + 4, (value / 2 ** 32) | 0, LE);
            }
        }
        int8(offset, next) {
            if (next === undefined)
                return this.getInt8(offset);
            if (next >= -(2 ** 7) && next < 2 ** 7)
                return this.setInt8(offset, next), next;
            $mol_fail(new Error(`Wrong int8 value ${next}`));
        }
        uint8(offset, next) {
            if (next === undefined)
                return this.getUint8(offset);
            if (next >= 0 && next < 2 ** 8)
                return this.setUint8(offset, next), next;
            $mol_fail(new Error(`Wrong uint8 value ${next}`));
        }
        int16(offset, next) {
            if (next === undefined)
                return this.getInt16(offset, true);
            if (next >= -(2 ** 15) && next < 2 ** 15)
                return this.setInt16(offset, next, true), next;
            $mol_fail(new Error(`Wrong int16 value ${next}`));
        }
        uint16(offset, next) {
            if (next === undefined)
                return this.getUint16(offset, true);
            if (next >= 0 && next < 2 ** 16)
                return this.setUint16(offset, next, true), next;
            $mol_fail(new Error(`Wrong uint16 value ${next}`));
        }
        int32(offset, next) {
            if (next === undefined)
                return this.getInt32(offset, true);
            if (next >= -(2 ** 31) && next < 2 ** 31)
                return this.setInt32(offset, next, true), next;
            $mol_fail(new Error(`Wrong int32 value ${next}`));
        }
        uint32(offset, next) {
            if (next === undefined)
                return this.getUint32(offset, true);
            if (next >= 0 && next < 2 ** 32)
                return this.setUint32(offset, next, true), next;
            $mol_fail(new Error(`Wrong uint32 value ${next}`));
        }
        uint48(offset, next) {
            if (next === undefined)
                return this.getUint48(offset, true);
            if (next >= 0 && next < 2 ** 48)
                return this.setUint48(offset, next, true), next;
            $mol_fail(new Error(`Wrong uint48 value ${next}`));
        }
        int64(offset, next) {
            if (next === undefined)
                return this.getBigInt64(offset, true);
            if (next >= -(2 ** 63) && next < 2 ** 63)
                return this.setBigInt64(offset, next, true), next;
            $mol_fail(new Error(`Wrong int64 value ${next}`));
        }
        uint64(offset, next) {
            if (next === undefined)
                return this.getBigUint64(offset, true);
            if (next >= 0 && next < 2 ** 64)
                return this.setBigUint64(offset, next, true), next;
            $mol_fail(new Error(`Wrong uint64 value ${next}`));
        }
        float32(offset, next) {
            if (next !== undefined)
                this.setFloat32(offset, next, true);
            return this.getFloat32(offset, true);
        }
        float64(offset, next) {
            if (next !== undefined)
                this.setFloat64(offset, next, true);
            return this.getFloat64(offset, true);
        }
        asArray() {
            return new Uint8Array(this.buffer, this.byteOffset, this.byteLength);
        }
        toString() {
            return $mol_base64_ae_encode(this.asArray());
        }
    }
    $.$mol_buffer = $mol_buffer;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const algorithm = {
        name: 'ECDSA',
        hash: 'SHA-1',
        namedCurve: "P-256",
    };
    class $mol_crypto_key extends $mol_buffer {
        static from(serial) {
            if (typeof serial === 'string') {
                serial = new Uint8Array([
                    ...$mol_base64_url_decode(serial.slice(0, 43)),
                    ...$mol_base64_url_decode(serial.slice(43, 86)),
                    ...$mol_base64_url_decode(serial.slice(86, 129)),
                ]);
            }
            return super.from(serial);
        }
        asArray() {
            return new Uint8Array(this.buffer, this.byteOffset, this.byteLength);
        }
        toString() {
            const arr = this.asArray();
            return $mol_base64_url_encode(arr.subarray(0, 32))
                + $mol_base64_url_encode(arr.subarray(32, 64))
                + $mol_base64_url_encode(arr.subarray(64));
        }
    }
    __decorate([
        $mol_memo.method
    ], $mol_crypto_key.prototype, "toString", null);
    $.$mol_crypto_key = $mol_crypto_key;
    class $mol_crypto_key_public extends $mol_crypto_key {
        static size_str = 86;
        static size_bin = 64;
        async native() {
            const str = this.toString();
            return $mol_crypto_native.subtle.importKey('jwk', {
                crv: "P-256",
                ext: true,
                key_ops: ['verify'],
                kty: "EC",
                x: str.slice(0, 43),
                y: str.slice(43, 86),
            }, algorithm, true, ['verify']);
        }
        async verify(data, sign) {
            return await $mol_crypto_native.subtle.verify(algorithm, await this.native(), sign, data);
        }
    }
    __decorate([
        $mol_memo.method
    ], $mol_crypto_key_public.prototype, "native", null);
    $.$mol_crypto_key_public = $mol_crypto_key_public;
    class $mol_crypto_key_private extends $mol_crypto_key {
        static size_str = 129;
        static size_bin = 96;
        static size_sign = 64;
        static async generate() {
            const pair = await $mol_crypto_native.subtle.generateKey(algorithm, true, ['sign', 'verify']);
            const { x, y, d } = await $mol_crypto_native.subtle.exportKey('jwk', pair.privateKey);
            return this.from(x + y + d);
        }
        async native() {
            const str = this.toString();
            return await $mol_crypto_native.subtle.importKey('jwk', {
                crv: "P-256",
                ext: true,
                key_ops: ['sign'],
                kty: "EC",
                x: str.slice(0, 43),
                y: str.slice(43, 86),
                d: str.slice(86, 129),
            }, algorithm, true, ['sign']);
        }
        public() {
            return new $mol_crypto_key_public(this.buffer, this.byteOffset, this.byteOffset + 64);
        }
        async sign(data) {
            return new Uint8Array(await $mol_crypto_native.subtle.sign(algorithm, await this.native(), data));
        }
    }
    __decorate([
        $mol_memo.method
    ], $mol_crypto_key_private.prototype, "native", null);
    __decorate([
        $mol_memo.method
    ], $mol_crypto_key_private.prototype, "public", null);
    $.$mol_crypto_key_private = $mol_crypto_key_private;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        async 'sizes'() {
            const secret = await $mol_crypto_secret.generate();
            const key = await secret.serial();
            $mol_assert_equal(key.byteLength, $mol_crypto_secret.size);
            const data = new Uint8Array([1, 2, 3]);
            const salt = $mol_crypto_salt();
            const closed = await secret.encrypt(data, salt);
            $mol_assert_equal(closed.byteLength, 16);
        },
        async 'decrypt self encrypted with auto generated key'() {
            const secret = await $mol_crypto_secret.generate();
            const data = new Uint8Array([1, 2, 3]);
            const salt = $mol_crypto_salt();
            const closed = await secret.encrypt(data, salt);
            const opened = await secret.decrypt(closed, salt);
            $mol_assert_equal(data, opened);
        },
        async 'decrypt encrypted with exported auto generated key'() {
            const data = new Uint8Array([1, 2, 3]);
            const salt = $mol_crypto_salt();
            const Alice = await $mol_crypto_secret.generate();
            const closed = await Alice.encrypt(data, salt);
            const Bob = await $mol_crypto_secret.from(await Alice.serial());
            const opened = await Bob.decrypt(closed, salt);
            $mol_assert_equal(data, opened);
        },
        async 'derivation from public & private keys'() {
            const A = await $mol_crypto_key_private.generate();
            const B = await $mol_crypto_key_private.generate();
            const AK = await $mol_crypto_secret.derive(A.toString(), B.public().toString());
            const BK = await $mol_crypto_secret.derive(B.toString(), A.public().toString());
            $mol_assert_equal(await AK.serial(), await BK.serial());
        },
        async 'derivation from passwod'() {
            const data = new Uint8Array([1, 2, 3]);
            const salt1 = $mol_crypto_salt();
            const secret = await $mol_crypto_secret.pass('hello', salt1);
            const salt2 = $mol_crypto_salt();
            const closed = await secret.encrypt(data, salt2);
            const opened = await secret.decrypt(closed, salt2);
            $mol_assert_equal(data, opened);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        async 'put, get, drop, count records and clear store'() {
            const db = await $$.$mol_db('$mol_db_test', mig => mig.store_make('letters'));
            const trans = db.change('letters');
            try {
                const { letters } = trans.stores;
                $mol_assert_like(await letters.get(1), undefined);
                $mol_assert_like(await letters.get(2), undefined);
                $mol_assert_like(await letters.count(), 0);
                await letters.put('a');
                await letters.put('b', 1);
                await letters.put('c', 2);
                $mol_assert_like(await letters.get(1), 'b');
                $mol_assert_like(await letters.get(2), 'c');
                $mol_assert_like(await letters.count(), 2);
                await letters.drop(1);
                $mol_assert_like(await letters.get(1), undefined);
                $mol_assert_like(await letters.count(), 1);
                await letters.clear();
                $mol_assert_like(await letters.count(), 0);
            }
            finally {
                trans.abort();
                db.kill();
            }
        },
        async 'select by query'() {
            const db = await $$.$mol_db('$mol_db_test', mig => mig.store_make('letters'));
            const trans = db.change('letters');
            try {
                const { letters } = trans.stores;
                await letters.put('a');
                await letters.put('b');
                await letters.put('c');
                await letters.put('d');
                $mol_assert_like(await letters.select(), ['a', 'b', 'c', 'd']);
                $mol_assert_like(await letters.select(null, 2), ['a', 'b']);
                $mol_assert_like(await letters.select($mol_dom_context.IDBKeyRange.bound(2, 3)), ['b', 'c']);
            }
            finally {
                trans.abort();
                db.kill();
            }
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        async 'take and drop db'() {
            const db = await $$.$mol_db('$mol_db_test');
            await db.kill();
        },
        async 'make and drop store in separate migrations'() {
            try {
                const db1 = await $$.$mol_db('$mol_db_test', mig => mig.store_make('temp'));
                db1.destructor();
                $mol_assert_like(db1.stores, ['temp']);
                $mol_assert_like(db1.version, 2);
                const db2 = await $$.$mol_db('$mol_db_test', mig => mig.store_make('temp'), mig => mig.store_drop('temp'));
                db2.destructor();
                $mol_assert_like(db2.stores, []);
                $mol_assert_like(db2.version, 3);
            }
            finally {
                const db0 = await $$.$mol_db('$mol_db_test');
                await db0.kill();
            }
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        async 'unique index'() {
            const db = await $$.$mol_db('$mol_db_test', mig => mig.store_make('users'), mig => mig.stores.users.index_make('names', ['name'], true));
            const trans = db.change('users');
            try {
                const { users } = trans.stores;
                await users.put({ name: 'Jin' }, 'jin');
                await users.put({ name: 'John' }, 'john');
                await users.put({ name: 'Bin' }, 'bin');
                const { names } = users.indexes;
                $mol_assert_like(await names.get(['Jin']), { name: 'Jin' });
                $mol_assert_like(await names.get(['John']), { name: 'John' });
                $mol_assert_like(await names.count(), 3);
                $mol_assert_like(await names.select($mol_dom_context.IDBKeyRange.bound(['J'], ['J\uFFFF'])), [{ name: 'Jin' }, { name: 'John' }]);
                try {
                    await users.put({ name: 'Jin' }, 'jin2');
                    $mol_fail(new Error('Exception expected'));
                }
                catch (error) {
                    $mol_assert_unique(error.message, 'Exception expected');
                }
            }
            finally {
                trans.abort();
                await db.kill();
            }
        },
        async 'multi path index'() {
            const db = await $$.$mol_db('$mol_db_test', mig => mig.store_make('users'), mig => mig.stores.users.index_make('names', ['first', 'last']));
            const trans = db.change('users');
            try {
                const { users } = trans.stores;
                await users.put({ first: 'Jin', last: 'Johnson' }, 'jin');
                await users.put({ first: 'John', last: 'Jinson' }, 'john');
                await users.put({ first: 'Bond', last: 'James' }, '007');
                const { names } = users.indexes;
                $mol_assert_like(await names.get(['Jin', 'Johnson']), { first: 'Jin', last: 'Johnson' });
                $mol_assert_like(await names.get(['John', 'Jinson']), { first: 'John', last: 'Jinson' });
                $mol_assert_like(await names.count(), 3);
                $mol_assert_like(await names.select($mol_dom_context.IDBKeyRange.bound(['Jin', 'Johnson'], ['John', 'Jinson'])), [{ first: 'Jin', last: 'Johnson' }, { first: 'John', last: 'Jinson' }]);
            }
            finally {
                trans.abort();
                await db.kill();
            }
        },
        async 'multiple indexes'() {
            const db = await $$.$mol_db('$mol_db_test', mig => mig.store_make('users'), mig => mig.stores.users.index_make('names', ['name'], true), mig => mig.stores.users.index_make('ages', ['age']));
            const trans = db.change('users');
            try {
                const { users } = trans.stores;
                await users.put({ name: 'Jin', age: 18 }, 'jin');
                await users.put({ name: 'John', age: 18 }, 'john');
                const { names, ages } = users.indexes;
                $mol_assert_like(await names.select(['Jin']), [{ name: 'Jin', age: 18 }]);
                $mol_assert_like(await names.select(['John']), [{ name: 'John', age: 18 }]);
                $mol_assert_like(await names.count(), 2);
                $mol_assert_like(await ages.select([18]), [{ name: 'Jin', age: 18 }, { name: 'John', age: 18 }]);
                $mol_assert_like(await ages.count(), 2);
            }
            finally {
                trans.abort();
                await db.kill();
            }
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test_mocks.push($ => {
        $.$hyoo_sync_client = class extends $hyoo_sync_yard {
            land_init(land) { }
        };
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'simple sort'() {
            const list = ['abc', 'ac', 'ab'];
            list.sort($mol_compare_text());
            $mol_assert_equal(`${list}`, 'ab,abc,ac');
        },
        'sort ignoring spaces around'() {
            const list = [' a', '\tb', ' b'];
            list.sort($mol_compare_text());
            $mol_assert_equal(`${list}`, ' a,\tb, b');
        },
        'sort ignoring letter case'() {
            const list = ['A', 'B', 'a'];
            list.sort($mol_compare_text());
            $mol_assert_equal(`${list}`, 'A,a,B');
        },
        'sort with custom serializer'() {
            const list = ['abc', 'ab', 'ac'];
            list.sort($mol_compare_text(str => str.split('').reverse().join('')));
            $mol_assert_equal(`${list}`, 'ab,ac,abc');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'function'() {
            $mol_assert_not($mol_func_is_class(function () { }));
        },
        'generator'() {
            $mol_assert_not($mol_func_is_class(function* () { }));
        },
        'async'() {
            $mol_assert_not($mol_func_is_class(async function () { }));
        },
        'arrow'() {
            $mol_assert_not($mol_func_is_class(() => null));
        },
        'named class'() {
            $mol_assert_ok($mol_func_is_class(class Foo {
            }));
        },
        'unnamed class'() {
            $mol_assert_ok($mol_func_is_class(class {
            }));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'Cached field'($) {
            class App extends $mol_object2 {
                static $ = $;
                static low = 1;
                static get high() {
                    return this.low + 1;
                }
                static set high(next) {
                    this.low = next - 1;
                }
                static test() {
                    $mol_assert_equal(App.high, 2);
                    App.high = 3;
                    $mol_assert_equal(App.high, 3);
                }
            }
            __decorate([
                $mol_wire_field
            ], App, "low", void 0);
            __decorate([
                $mol_wire_field
            ], App, "high", null);
            __decorate([
                $mol_wire_method
            ], App, "test", null);
            App.test();
        },
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'define as methods'() {
            const { foo, bar, lol } = $mol_wire_let({
                foo(next = 1) { return next; },
                bar() { return this.foo() + 1; },
                lol(next) { return this.foo(next); },
            });
            $mol_assert_equal(foo(), 1);
            $mol_assert_equal(bar(), 2);
            $mol_assert_equal(foo(5), 5);
            $mol_assert_equal(bar(), 6);
            $mol_assert_equal(lol(10), 10);
            $mol_assert_equal(bar(), 11);
        },
        'define as closures'() {
            const { foo, bar, lol } = $mol_wire_let({
                foo: (next = 1) => next,
                bar: () => foo() + 1,
                lol: (next) => foo(next),
            });
            $mol_assert_equal(foo(), 1);
            $mol_assert_equal(bar(), 2);
            $mol_assert_equal(foo(5), 5);
            $mol_assert_equal(bar(), 6);
            $mol_assert_equal(lol(10), 10);
            $mol_assert_equal(bar(), 11);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'Watch one value'($) {
            class App extends $mol_object2 {
                static $ = $;
                static set = new $mol_wire_set();
                static lucky() {
                    return this.set.has(777);
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "lucky", null);
            $mol_assert_equal(App.lucky(), false);
            App.set.add(666);
            $mol_assert_equal(App.lucky(), false);
            App.set.add(777);
            $mol_assert_equal(App.lucky(), true);
            App.set.delete(777);
            $mol_assert_equal(App.lucky(), false);
        },
        'Watch item channel'($) {
            class App extends $mol_object2 {
                static $ = $;
                static set = new $mol_wire_set();
                static lucky() {
                    return this.set.item(777);
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "lucky", null);
            $mol_assert_equal(App.lucky(), false);
            App.set.item(666, true);
            $mol_assert_equal(App.lucky(), false);
            App.set.item(777, true);
            $mol_assert_equal(App.lucky(), true);
            App.set.item(777, false);
            $mol_assert_equal(App.lucky(), false);
        },
        'Watch size'($) {
            class App extends $mol_object2 {
                static $ = $;
                static set = new $mol_wire_set();
                static size() {
                    return this.set.size;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "size", null);
            $mol_assert_equal(App.size(), 0);
            App.set.add(666);
            $mol_assert_equal(App.size(), 1);
            App.set.add(777);
            $mol_assert_equal(App.size(), 2);
            App.set.delete(777);
            $mol_assert_equal(App.size(), 1);
        },
        'Watch for-of'($) {
            class App extends $mol_object2 {
                static $ = $;
                static set = new $mol_wire_set();
                static sum() {
                    let res = 0;
                    for (const val of this.set) {
                        res += val;
                    }
                    return res;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "sum", null);
            $mol_assert_equal(App.sum(), 0);
            App.set.add(111);
            $mol_assert_equal(App.sum(), 111);
            App.set.add(222);
            $mol_assert_equal(App.sum(), 333);
            App.set.delete(111);
            $mol_assert_equal(App.sum(), 222);
        },
        'Watch forEach'($) {
            class App extends $mol_object2 {
                static $ = $;
                static set = new $mol_wire_set();
                static sum() {
                    let res = 0;
                    this.set.forEach(val => res += val);
                    return res;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "sum", null);
            $mol_assert_equal(App.sum(), 0);
            App.set.add(111);
            $mol_assert_equal(App.sum(), 111);
            App.set.add(222);
            $mol_assert_equal(App.sum(), 333);
            App.set.delete(111);
            $mol_assert_equal(App.sum(), 222);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'Watch one value'($) {
            class App extends $mol_object2 {
                static $ = $;
                static dict = new $mol_wire_dict();
                static lucky() {
                    return this.dict.get(777);
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "lucky", null);
            $mol_assert_equal(App.lucky(), undefined);
            App.dict.set(666, 6666);
            $mol_assert_equal(App.lucky(), undefined);
            App.dict.set(777, 7777);
            $mol_assert_equal(App.lucky(), 7777);
            App.dict.delete(777);
            $mol_assert_equal(App.lucky(), undefined);
        },
        'Watch item channel'($) {
            class App extends $mol_object2 {
                static $ = $;
                static dict = new $mol_wire_dict();
                static lucky() {
                    return this.dict.item(777);
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "lucky", null);
            $mol_assert_equal(App.lucky(), null);
            App.dict.item(666, 6666);
            $mol_assert_equal(App.lucky(), null);
            App.dict.item(777, 7777);
            $mol_assert_equal(App.lucky(), 7777);
            App.dict.item(777, null);
            $mol_assert_equal(App.lucky(), null);
        },
        'Watch size'($) {
            class App extends $mol_object2 {
                static $ = $;
                static dict = new $mol_wire_dict();
                static size() {
                    return this.dict.size;
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "size", null);
            $mol_assert_equal(App.size(), 0);
            App.dict.set(666, 6666);
            $mol_assert_equal(App.size(), 1);
            App.dict.set(777, 7777);
            $mol_assert_equal(App.size(), 2);
            App.dict.delete(777);
            $mol_assert_equal(App.size(), 1);
        },
        'Watch for-of'($) {
            class App extends $mol_object2 {
                static $ = $;
                static dict = new $mol_wire_dict();
                static sum() {
                    let keys = 0;
                    let vals = 0;
                    for (const [key, val] of this.dict) {
                        keys += key;
                        vals += val;
                    }
                    return [keys, vals];
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "sum", null);
            $mol_assert_like(App.sum(), [0, 0]);
            App.dict.set(111, 1111);
            $mol_assert_like(App.sum(), [111, 1111]);
            App.dict.set(222, 2222);
            $mol_assert_like(App.sum(), [333, 3333]);
            App.dict.delete(111);
            $mol_assert_like(App.sum(), [222, 2222]);
        },
        'Watch forEach'($) {
            class App extends $mol_object2 {
                static $ = $;
                static dict = new $mol_wire_dict();
                static sum() {
                    let keys = 0;
                    let vals = 0;
                    this.dict.forEach((val, key) => {
                        keys += key;
                        vals += val;
                    });
                    return [keys, vals];
                }
            }
            __decorate([
                $mol_wire_solo
            ], App, "sum", null);
            $mol_assert_like(App.sum(), [0, 0]);
            App.dict.set(111, 1111);
            $mol_assert_like(App.sum(), [111, 1111]);
            App.dict.set(222, 2222);
            $mol_assert_like(App.sum(), [333, 3333]);
            App.dict.delete(111);
            $mol_assert_like(App.sum(), [222, 2222]);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    function get_parts(str) {
        return $$.$mol_view_tree2_prop_parts($mol_tree2.struct(str));
    }
    $mol_test({
        'wrong order'($) {
            $mol_assert_fail(() => {
                get_parts('some_bla?*');
            }, 'Required prop like some*? at `?#1:1/0`');
        },
        'empty'($) {
            $mol_assert_fail(() => {
                get_parts('');
            }, 'Required prop like some*? at `?#1:1/0`');
        },
        'prop in upper case'($) {
            const parts = get_parts('Close_icon');
            $mol_assert_equal(parts.name, 'Close_icon');
            $mol_assert_equal(parts.key, '');
            $mol_assert_equal(parts.next, '');
        },
        'prop with index'($) {
            const parts = get_parts('some_bla*');
            $mol_assert_equal(parts.name, 'some_bla');
            $mol_assert_equal(parts.key, '*');
            $mol_assert_equal(parts.next, '');
        },
        'prop with index and value'($) {
            const parts = get_parts('some_bla*?');
            $mol_assert_equal(parts.name, 'some_bla');
            $mol_assert_equal(parts.key, '*');
            $mol_assert_equal(parts.next, '?');
        },
        'legacy indexed'($) {
            const parts = get_parts('Some*default');
            $mol_assert_equal(parts.name, 'Some');
            $mol_assert_equal(parts.key, '*default');
            $mol_assert_equal(parts.next, '');
        },
        'legacy indexed value'($) {
            const parts = get_parts('Some*k?v');
            $mol_assert_equal(parts.name, 'Some');
            $mol_assert_equal(parts.key, '*k');
            $mol_assert_equal(parts.next, '?');
        }
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    var $$;
    (function ($$) {
        const d = '$';
        const file_name = '/mol/view/tree2/class/props.test.ts';
        function normalize($, src, dest) {
            const mod = $.$mol_tree2_from_string(src, file_name);
            const input = $.$mol_view_tree2_class_props(mod.kids[0]).join('');
            const output = dest ? $$.$mol_tree2_from_string(dest, 'reference').toString() : '';
            return { input, output };
        }
        $mol_test({
            'dupes merge'($) {
                const src = `
				${d}my_test ${d}my_super
					query? \\
					Query $mol_string
						value? <=> query? \\
					Suggest_label ${d}mol_dimmer
						needle <= query? \\
						key * escape? <=> clear? null
					Clear ${d}mol_button_minor
						click?event <=> clear?event null
			`;
                const dest = `
				query? \\
				clear?event null
				Query $mol_string value? <=> query?
				Suggest_label $mol_dimmer
					needle <= query?
					key * escape? <=> clear?
				Clear $mol_button_minor click?event <=> clear?event
			`;
                const res = normalize($, src, dest);
                $mol_assert_equal(res.input, res.output);
            },
            'left and bidi common'($) {
                const src = `
				${d}my_test ${d}my_super
					title @ \\title
					sub2 /
						<= Close_icon ${d}mol_icon_cross
					sub /
						<= Title ${d}mol_view
							sub /
								<= title
						<= Close ${d}mol_button
							title \\close
							click?event <=> close?event null
			`;
                const dest = `
				Close_icon ${d}mol_icon_cross
				Title ${d}mol_view sub / <= title
				close?event null
				Close ${d}mol_button
					title \\close
					click?event <=> close?event
				title @ \\title
				sub2 / <= Close_icon
				sub /
					<= Title
					<= Close
			`;
                const res = normalize($, src, dest);
                $mol_assert_equal(res.input, res.output);
            },
            'right bind levels'($) {
                const src = `
				${d}my_test ${d}my_super
					Dog ${d}mol_view_tree2_class_test_dog
						Mouth => Dog_mouth
							animation => dog_animation
					plugins /
						<= Human* ${d}mol_view_tree2_class_test_human
							Mouth => Human_mouth
								animation => human_animation
									text => human_text
			`;
                const dest = `
				Dog_mouth = Dog Mouth
				dog_animation = Dog_mouth animation
				Human_mouth = Human* Mouth
				human_animation = Human_mouth animation
				human_text = human_animation text
				Human* $mol_view_tree2_class_test_human Mouth => Human_mouth animation => human_animation text => human_text
				Dog $mol_view_tree2_class_test_dog Mouth => Dog_mouth animation => dog_animation
				plugins / <= Human*
			`;
                const res = normalize($, src, dest);
                $mol_assert_equal(res.input, res.output);
            },
            'good right bind dupes'($) {
                const src = `
				${d}my_test ${d}my_super
					Suggest_label ${d}mol_dimmer
						clear? => clear?
					Clear ${d}mol_button_minor
						click?e <=> clear?e
			`;
                const dest = `
				clear? = Suggest_label clear?
				Suggest_label $mol_dimmer clear? => clear?
				Clear $mol_button_minor click?e <=> clear?e
			`;
                const res = normalize($, src, dest);
                $mol_assert_equal(res.input, res.output);
            },
            'conflicting right bind dupes'($) {
                const src = `
				${d}my_test ${d}my_super
					Suggest_label ${d}mol_dimmer
						clear => clear
					Clear ${d}mol_button_minor
						click?event <=> clear?event null
			`;
                $mol_assert_fail(() => normalize($, src).input, `Need an equal default values at \`/mol/view/tree2/class/props.test.ts#4:16/5\` vs \`/mol/view/tree2/class/props.test.ts#6:23/11\`
<=>
/mol/view/tree2/class/props.test.ts#6:19/3
click?event
/mol/view/tree2/class/props.test.ts#6:7/11
$mol_button_minor
/mol/view/tree2/class/props.test.ts#5:12/17
Clear
/mol/view/tree2/class/props.test.ts#5:6/5`);
            },
        });
    })($$ = $_1.$$ || ($_1.$$ = {}));
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'single function'() {
            const stringify = $mol_data_pipe((input) => input.toString());
            $mol_assert_equal(stringify(5), '5');
        },
        'two functions'() {
            const isLong = $mol_data_pipe((input) => input.toString(), (input) => input.length > 2);
            $mol_assert_equal(isLong(5.0), false);
            $mol_assert_equal(isLong(5.1), true);
        },
        'three functions'() {
            const pattern = $mol_data_pipe((input) => input.toString(), (input) => new RegExp(input), (input) => input.toString());
            $mol_assert_equal(pattern(5), '/5/');
        },
        'classes'() {
            class Box {
                value;
                constructor(value) {
                    this.value = value;
                }
            }
            const boxify = $mol_data_pipe((input) => input.toString(), Box);
            $mol_assert_ok(boxify(5) instanceof Box);
            $mol_assert_like(boxify(5).value, '5');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const convert = $mol_data_pipe($mol_tree2_from_string, $mol_tree2_js_to_text, $mol_tree2_text_to_string);
    $mol_test({
        'boolean'() {
            $mol_assert_equal(convert(`
					true
				`), 'true\n');
        },
        'number'() {
            $mol_assert_equal(convert(`
					1.2
				`), '1.2\n');
            $mol_assert_equal(convert(`
					1e+2
				`), '1e+2\n');
            $mol_assert_equal(convert(`
					-Infinity
				`), '-Infinity\n');
            $mol_assert_equal(convert(`
					NaN
				`), 'NaN\n');
        },
        'variable'() {
            $mol_assert_equal(convert(`
					a
				`), 'a\n');
            $mol_assert_equal(convert(`
					$
				`), '$\n');
            $mol_assert_equal(convert(`
					a0
				`), 'a0\n');
        },
        'string'() {
            $mol_assert_equal(convert(`
					\\
						\\foo
						\\bar
				`), '"foo\\nbar"\n');
            $mol_assert_equal(convert(`
					\`\`
						\\foo
						bar
				`), '`foo${bar}`\n');
        },
        'wrong name'() {
            $mol_assert_fail(() => convert(`
					foo+bar
				`), 'Wrong node type\nfoo+bar\n?#2:6/7');
        },
        'array'() {
            $mol_assert_equal(convert(`
					[,]
				`), '[]\n');
            $mol_assert_equal(convert(`
					[,]
						1
						2
				`), '[1, 2]\n');
        },
        'last'() {
            $mol_assert_equal(convert(`
					(,)
						1
						2
				`), '(1, 2)\n');
        },
        'scope'() {
            $mol_assert_equal(convert(`
					{;}
						1
						2
				`), '{\n\t1;\n\t2;\n}\n');
        },
        'object'() {
            $mol_assert_equal(convert(`
					{,}
				`), '{}\n');
            $mol_assert_equal(convert(`
					{,}
						foo
						bar
				`), '{foo, bar}\n');
            $mol_assert_equal(convert(`
					{,}
						:
							\\foo
							1
						:
							bar
							2
				`), '{"foo": 1, [bar]: 2}\n');
        },
        'regexp'() {
            $mol_assert_equal(convert(`
					/./
						.source \\foo\\n
						.multiline
						.ignoreCase
						.global
				`), '/foo\\\\n/mig\n');
        },
        'unary'() {
            $mol_assert_equal(convert(`
					void yield* yield await ~ ! - + 1
				`), 'void yield* yield await ~!-+1\n');
        },
        'binary'() {
            $mol_assert_equal(convert(`
					(+)
						1
						2
						3
				`), '(\n\t1 + \n\t2 + \n\t3\n)\n');
            $mol_assert_equal(convert(`
					@++ foo
				`), 'foo++\n');
        },
        'chain'() {
            $mol_assert_equal(convert(`
					()
						foo
						[] \\bar
						[] 1
				`), '(foo.bar[1])\n');
            $mol_assert_equal(convert(`
					()
						foo
						[] 1
						(,)
				`), '(foo[1]())\n');
            $mol_assert_equal(convert(`
					()
						[,] 0
						[] 1
						(,)
							2
							3
				`), '([0][1](2, 3))\n');
        },
        'function'() {
            $mol_assert_equal(convert(`
					=>
						(,)
						1
				`), '() => 1\n');
            $mol_assert_equal(convert(`
					async=>
						(,)
						1
				`), 'async () => 1\n');
            $mol_assert_equal(convert(`
					function
						foo
						(,)
						{;}
				`), 'function foo(){}\n');
            $mol_assert_equal(convert(`
					function
						(,) foo
						{;} debugger
				`), 'function (foo){\n\tdebugger;\n}\n');
            $mol_assert_equal(convert(`
					function*
						(,)
						{;}
				`), 'function* (){}\n');
            $mol_assert_equal(convert(`
					async
						(,)
						{;}
				`), 'async function (){}\n');
            $mol_assert_equal(convert(`
					async*
						(,) foo
						{;} debugger
				`), 'async function* (foo){\n\tdebugger;\n}\n');
        },
        'class'() {
            $mol_assert_equal(convert(`
					class
						Foo
						{}
				`), 'class Foo {}\n');
            $mol_assert_equal(convert(`
					class
						Foo
						extends Bar
						{}
				`), 'class Foo extends Bar {}\n');
            $mol_assert_equal(convert(`
					class {}
						.
							\\foo
							(,)
							{;}
				`), 'class {\n\tfoo(){}\n}\n');
            $mol_assert_equal(convert(`
					class {}
						static
							\\foo
							(,)
							{;}
				`), 'class {\n\tstatic ["foo"](){}\n}\n');
            $mol_assert_equal(convert(`
					class {}
						get
							\\foo
							(,)
							{;}
				`), 'class {\n\tget ["foo"](){}\n}\n');
            $mol_assert_equal(convert(`
					class {}
						set
							\\foo
							(,) bar
							{;}
				`), 'class {\n\tset ["foo"](bar){}\n}\n');
        },
        'if'() {
            $mol_assert_equal(convert(`
					?:
						1
						2
						3
				`), '1 ? 2 : 3\n');
            $mol_assert_equal(convert(`
					if
						() 1
						{;} 2
				`), 'if(1) {\n\t2;\n}\n');
            $mol_assert_equal(convert(`
					if
						() 1
						{;} 2
						{;} 3
				`), 'if(1) {\n\t2;\n}else{\n\t3;\n}\n');
        },
        'assign'() {
            $mol_assert_equal(convert(`
					=
						foo
						bar
				`), 'foo = bar\n');
            $mol_assert_equal(convert(`
					=
						[,]
							foo
							bar
						[,]
							1
							2
				`), '[foo, bar] = [1, 2]\n');
            $mol_assert_equal(convert(`
					let foo
				`), 'let foo\n');
            $mol_assert_equal(convert(`
					let
						foo
						bar
				`), 'let foo = bar\n');
            $mol_assert_equal(convert(`
					+=
						foo
						bar
				`), 'foo += bar\n');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'atoms'($) {
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("null\n").kids[0]), null);
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("true\n").kids[0]), true);
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("false\n").kids[0]), false);
        },
        'numbers'($) {
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("1\n").kids[0]), 1);
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("1.2\n").kids[0]), 1.2);
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("1.2e+2\n").kids[0]), 120);
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("NaN\n").kids[0]), Number.NaN);
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("+Infinity\n").kids[0]), Number.POSITIVE_INFINITY);
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("-Infinity\n").kids[0]), Number.NEGATIVE_INFINITY);
        },
        'string'($) {
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("\\foo\n").kids[0]), 'foo');
            $mol_assert_equal($.$mol_tree2_to_json($.$mol_tree2_from_string("\\\n\t\\foo\n\t\\bar\n").kids[0]), 'foo\nbar');
        },
        'array'($) {
            $mol_assert_like($.$mol_tree2_to_json($.$mol_tree2_from_string("/\n").kids[0]), []);
            $mol_assert_like($.$mol_tree2_to_json($.$mol_tree2_from_string("/\n\t\\foo\n\t\\bar\n").kids[0]), ['foo', 'bar']);
            $mol_assert_like($.$mol_tree2_to_json($.$mol_tree2_from_string("/\n\t- \\foo\n\t\\bar\n").kids[0]), ['bar']);
        },
        'object'($) {
            $mol_assert_like($.$mol_tree2_to_json($.$mol_tree2_from_string("*\n").kids[0]), {});
            $mol_assert_like($.$mol_tree2_to_json($.$mol_tree2_from_string("*\n\t\\foo\n\t\t\\bar\n").kids[0]), { foo: 'bar' });
            $mol_assert_like($.$mol_tree2_to_json($.$mol_tree2_from_string("*\n\t\\\n\t\t\\foo\n\t\t\\bar\n\t\t\\lol\n").kids[0]), { 'foo\nbar': 'lol' });
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'min'() {
            $mol_assert_equal($mol_vlq_encode(Number.MIN_SAFE_INTEGER), '//////H');
        },
        'negative'() {
            $mol_assert_equal($mol_vlq_encode(-1), 'D');
        },
        'zero'() {
            $mol_assert_equal($mol_vlq_encode(0), 'A');
        },
        'binom'() {
            $mol_assert_equal($mol_vlq_encode(67), 'mE');
        },
        'max'() {
            $mol_assert_equal($mol_vlq_encode(Number.MAX_SAFE_INTEGER), '+/////H');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'sample source mapped lang'($) {
            const source = {
                script1: `1@\n2`,
                script2: `***`
            };
            const span = {
                script1: $mol_span.entire('script1', source.script1),
                script2: $mol_span.entire('script2', source.script2),
            };
            const tree = $mol_tree2.list([
                $mol_tree2.struct('line', [
                    $mol_tree2.data('"use strict";', [], span.script1.after()),
                    $mol_tree2.data('console.log(11);', [], span.script1.slice(0, 1)),
                    $mol_tree2.data('console.log(21);', [], span.script2),
                    $mol_tree2.data('console.log(12);', [], span.script1.span(2, 1, 1)),
                ], span.script1),
            ], span.script1);
            $mol_assert_like($.$mol_tree2_text_to_string(tree), '"use strict";console.log(11);console.log(21);console.log(12);\n');
            $mol_assert_like($.$mol_tree2_text_to_sourcemap(tree), {
                "version": 3,
                "sources": [
                    "script1",
                    "script2"
                ],
                "sourcesContent": [source.script1, source.script2],
                "mappings": "AAAA,AAAI,aAAJ,gBCAA,gBDCA;"
            });
        }
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        '$mol_leb128'() {
            $mol_assert_like($mol_leb128_encode(0), new Uint8Array([0]));
            $mol_assert_like($mol_leb128_encode(624485), new Uint8Array([0xE5, 0x8E, 0x26]));
            $mol_assert_equal($mol_leb128_decode(new Uint8Array([0xE5, 0x8E, 0x26])), 624485);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'hello world'() {
            const buffer = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 146, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 5, 104, 101, 108, 108, 111, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 16, 11, 11, 146, 128, 128, 128, 0, 1, 0, 65, 16, 11, 12, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 0]);
            const wasm = new $mol_wasm_module(buffer).instance();
            const hello = wasm.get('hello');
            $mol_assert_equal(wasm.string(hello(), 11), 'Hello World');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'module'($) {
            const code = $.$mol_tree2_from_string(``);
            $mol_assert_like(new Uint8Array($.$mol_tree2_wasm_to_module(code).buffer), new Uint8Array([0, 0x61, 0x73, 0x6d, 0x1, 0, 0, 0]));
        },
        'custom section'($) {
            const code = $.$mol_tree2_from_string(`
				custom xxx
			`);
            $mol_assert_like(new Uint8Array($.$mol_tree2_wasm_to_module(code).buffer), new Uint8Array([
                0, 0x61, 0x73, 0x6d, 0x1, 0, 0, 0, 0,
                0x4, 0x3, 0x78, 0x78, 0x78
            ]));
        },
        'type section with value types'($) {
            const code = $.$mol_tree2_from_string(`
				type xxx
					=> i32
					=> i64
					=> f32
					<= f64
			`);
            $mol_assert_like(new Uint8Array($.$mol_tree2_wasm_to_module(code).buffer), new Uint8Array([
                0, 0x61, 0x73, 0x6d, 0x01, 0, 0, 0,
                0x01, 0x08, 0x01, 0x60, 0x03, 0x7f, 0x7e, 0x7d, 0x01, 0x7c
            ]));
        },
        'import section'($) {
            const code = $.$mol_tree2_from_string(`
				type nothing
				import foo.bar func nothing
			`);
            $mol_assert_like(new Uint8Array($.$mol_tree2_wasm_to_module(code).buffer), new Uint8Array([
                0, 0x61, 0x73, 0x6d, 0x01, 0, 0, 0,
                0x01, 0x04, 0x01, 0x60, 0, 0,
                0x02, 0x0b, 0x01, 0x03, 0x66, 0x6f, 0x6f, 0x03, 0x62, 0x61, 0x72, 0, 0
            ]));
        },
        'export imported identity'($) {
            const code = $.$mol_tree2_from_string(`
				type identity
					=> i32
					<= i32
				import foo.bar func identity
				export xxx.yyy func identity
			`);
            const instance = $.$mol_tree2_wasm_to_module(code).instance({ foo: { bar: (a) => a } });
            const identity = instance.get('xxx.yyy');
            $mol_assert_like(identity(123), 123);
        },
        'export internal identity'($) {
            const code = $.$mol_tree2_from_string(`
				type identity
					=> i32
					<= i32
				func identity local.get 0
				export id func identity
			`);
            const instance = $.$mol_tree2_wasm_to_module(code).instance();
            const identity = instance.get('id');
            $mol_assert_like(identity(123), 123);
        },
        'export increase'($) {
            const code = $.$mol_tree2_from_string(`
				type inc32
					=> i32
					<= i32
				func inc32
					local.get 0
					i32.const 1
					i32.add
				export increase func inc32
			`);
            const instance = $.$mol_tree2_wasm_to_module(code).instance();
            const inc = instance.get('increase');
            $mol_assert_like(inc(2), 3);
        },
        'export function that returns pair'($) {
            const code = $.$mol_tree2_from_string(`
				type pair
					<= i32
					<= i32
				func pair
					i32.const 1
					i32.const 2
				export pair func pair
			`);
            const instance = $.$mol_tree2_wasm_to_module(code).instance();
            const pair = instance.get('pair');
            $mol_assert_like(pair(), [1, 2]);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    const run = $mol_data_pipe($mol_tree2_from_string.bind($$), $mol_view_tree2_to_locale.bind($$));
    $mol_test({
        'Locale simple'($) {
            const locales = run(`
				Foo Object
					localized @ \\bla
			`);
            $mol_assert_equal(locales['Foo_localized'], 'bla');
        },
        'Locale structural'($) {
            const locales = run(`
				Foo Object
					bar *
						loc @ \\v1
						baz *
							loc2 @ \\v2
			`);
            $mol_assert_equal(locales['Foo_bar_loc'], 'v1');
            $mol_assert_equal(locales['Foo_bar_baz_loc2'], 'v2');
        },
        'Locale factory'($) {
            const locales = run(`
				Bar Object
					loc \\v0
				Foo Object
					button Bar
						loc @ \\v1
			`);
            $mol_assert_equal(locales['Foo_button_loc'], 'v1');
        },
        'Locale bidi bind localized'($) {
            const locales = run(`
				Foo Object
					a? <=> b? @ \\v1
			`);
            $mol_assert_equal(locales['Foo_b'], 'v1');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'test'($) {
            const root = {
                ...$mol_jack,
                'foo': input => [input.struct('FOO')],
                'FOO': input => [input.struct('FAIL')],
            };
            $mol_assert_like($.$mol_tree2_from_string(`
					test
						case foo
						case tree FOO
				`)
                .hack(root)
                .toString(), $.$mol_tree2_from_string(`
					test
						case foo
						case tree FOO
				`)
                .toString());
            $mol_assert_fail(() => $.$mol_tree2_from_string(`
					test
						case \\foo
						case \\bar
				`).hack(root), 'args[0] ≠ args[1]\n\\foo\n\n---\n\\bar\n\ntest\n?#2:6/4');
        },
        'jack test'($) {
            const tests = $.$mol_tree2_from_string(`
				test
					name \\commented code
					case
						one
						no two
					case tree
						ONE
				test
					name \\name of struct node as value node
					case type
						one
						\\one
					case tree
						\\ONE
						\\
				test
					name \\kids of struct node
					case kids tree one two
					case tree two
				test
					name \\first element of list
					case head
						one
						two
						three
					case tree ONE
				test
					name \\list without first element
					case headless
						one
						two
						three
					case tree
						TWO
						THREE
				test
					name \\reversed list
					case reversed
						one
						two
						three
					case tree
						THREE
						TWO
						ONE
				test
					name \\quote tree
					name \\make tree node by type, value and sub list
					case tree head
						\\
						\\one
							\\two
						three
					case struct
						\\head
						struct \\
						data
							\\one
							\\two
						struct \\three
				test
					name \\evaluated jack code
					case jack head
						one
						two
						three
					case tree ONE
				test
					name \\define and use custom simple macro
					case jack
						hack PI float 3.14
						hack pi PI
						pi
					case float 3.14
				test
					name \\define and use custom macro with arguments
					case jack
						hack tail head reversed from
						tail
							one
							two
							three
					case tree THREE
			`);
            const res = tests.hack({
                ...$mol_jack.meta,
                'one': input => [input.struct('ONE')],
                'two': input => [input.struct('TWO')],
                'three': input => [input.struct('THREE')],
                'ONE': input => [input.struct('XXX')],
                'TWO': input => [input.struct('XXX')],
                'THREE': input => [input.struct('XXX')],
            });
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_tree2_wasm_to_bytes = $mol_data_pipe($mol_tree2_wasm_to_bin, $mol_tree2_bin_to_bytes);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_tree2_wasm_to_module = $mol_data_pipe($mol_tree2_wasm_to_bytes, $mol_wasm_module);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'equal paths'() {
            const diff = $mol_diff_path([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]);
            $mol_assert_like(diff, {
                prefix: [1, 2, 3, 4],
                suffix: [[], [], []],
            });
        },
        'different suffix'() {
            const diff = $mol_diff_path([1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 5, 4]);
            $mol_assert_like(diff, {
                prefix: [1, 2],
                suffix: [[3, 4], [3, 5], [5, 4]],
            });
        },
        'one contains other'() {
            const diff = $mol_diff_path([1, 2, 3, 4], [1, 2], [1, 2, 3]);
            $mol_assert_like(diff, {
                prefix: [1, 2],
                suffix: [[3, 4], [], [3]],
            });
        },
        'fully different'() {
            const diff = $mol_diff_path([1, 2], [3, 4], [5, 6]);
            $mol_assert_like(diff, {
                prefix: [],
                suffix: [[1, 2], [3, 4], [5, 6]],
            });
        },
    });
})($ || ($ = {}));

;
	($.$mol_view_tree2_to_js_test_ex_array_slot_foo) = class $mol_view_tree2_to_js_test_ex_array_slot_foo extends ($.$mol_object) {
		ins1(){
			return "ins1";
		}
		sub_ins1(){
			return 1;
		}
		sub_ins(){
			return [(this.sub_ins1())];
		}
		ins2(){
			return "ins2";
		}
		insert(){
			return [
				2, 
				3, 
				(this.ins1()), 
				...(this.sub_ins()), 
				(this.ins2())
			];
		}
		foot2(){
			return "foot2";
		}
		foot(){
			return [
				1, 
				true, 
				"foot1", 
				...(this.insert()), 
				(this.foot2())
			];
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_simple_nan_foo) = class $mol_view_tree2_to_js_test_ex_simple_nan_foo extends ($.$mol_object) {
		a(){
			return NaN;
		}
		b(){
			return +NaN;
		}
		c(){
			return -NaN;
		}
		d(){
			return +Infinity;
		}
		e(){
			return -Infinity;
		}
		f(){
			return Infinity;
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_structural_foo) = class $mol_view_tree2_to_js_test_ex_structural_foo extends ($.$mol_object) {
		lol(){
			return 2;
		}
		bar(){
			return {
				"alpha": 1, 
				"beta": {}, 
				"xxx": (this.lol())
			};
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_array_union_foo) = class $mol_view_tree2_to_js_test_ex_array_union_foo extends ($.$mol_object) {
		foo(){
			return "c";
		}
		bar(){
			return [
				"a", 
				(this.foo()), 
				"b"
			];
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_array_number_foo) = class $mol_view_tree2_to_js_test_ex_array_number_foo extends ($.$mol_object) {
		bar(){
			return [
				-NaN, 
				-Infinity, 
				+Infinity, 
				0
			];
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_bidi_indexed_foo) = class $mol_view_tree2_to_js_test_ex_bidi_indexed_foo extends ($.$mol_object) {
		owner(id, next){
			if(next !== undefined) return next;
			return null;
		}
		indexed(id, next){
			return (this.owner(id, next));
		}
	};
	($mol_mem_key(($.$mol_view_tree2_to_js_test_ex_bidi_indexed_foo.prototype), "owner"));


;
	($.$mol_view_tree2_to_js_test_ex_array_boolean_foo) = class $mol_view_tree2_to_js_test_ex_array_boolean_foo extends ($.$mol_object) {
		bar(){
			return [false, true];
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_array_indexed_foo) = class $mol_view_tree2_to_js_test_ex_array_indexed_foo extends ($.$mol_object) {
		tag1(id){
			return "t1";
		}
		tag2(id){
			return "t2";
		}
		slot(id){
			return [(this.tag2(id))];
		}
		tags(id){
			return [(this.tag1(id)), ...(this.slot(id))];
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_bidi_chaining_foo) = class $mol_view_tree2_to_js_test_ex_bidi_chaining_foo extends ($.$mol_object) {
		c(next){
			if(next !== undefined) return next;
			return null;
		}
		b(next){
			return (this.c(next));
		}
		a(next){
			return (this.b(next));
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_bidi_chaining_foo.prototype), "c"));


;
	($.$mol_view_tree2_to_js_test_ex_bidi_fallback_foo) = class $mol_view_tree2_to_js_test_ex_bidi_fallback_foo extends ($.$mol_object) {
		bar2(next){
			if(next !== undefined) return next;
			return 1;
		}
		bar1(next){
			return (this.bar2(next));
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_bidi_fallback_foo.prototype), "bar2"));


;
	($.$mol_view_tree2_to_js_test_ex_left_chaining_foo) = class $mol_view_tree2_to_js_test_ex_left_chaining_foo extends ($.$mol_object) {
		d(next){
			if(next !== undefined) return next;
			return 0;
		}
		c(next){
			if(next !== undefined) return next;
			return (this.d());
		}
		b(){
			return (this.c());
		}
		a(){
			return (this.b());
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_left_chaining_foo.prototype), "d"));
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_left_chaining_foo.prototype), "c"));


;
	($.$mol_view_tree2_to_js_test_ex_right_indexed_foo) = class $mol_view_tree2_to_js_test_ex_right_indexed_foo extends ($.$mol_object) {
		a(next){
			if(next !== undefined) return next;
			return {"some": 123};
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_right_indexed_foo.prototype), "a"));
	($.$mol_view_tree2_to_js_test_ex_right_indexed_bar) = class $mol_view_tree2_to_js_test_ex_right_indexed_bar extends ($.$mol_object) {
		b(id){
			return (this.Cls(id).a());
		}
		Cls(id){
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_right_indexed_foo();
			return obj;
		}
	};
	($mol_mem_key(($.$mol_view_tree2_to_js_test_ex_right_indexed_bar.prototype), "Cls"));


;
	($.$mol_view_tree2_to_js_test_ex_simple_string_foo) = class $mol_view_tree2_to_js_test_ex_simple_string_foo extends ($.$mol_object) {
		hardcoded(){
			return "First\nSecond";
		}
		localized(){
			return (this.$.$mol_locale.text("$mol_view_tree2_to_js_test_ex_simple_string_foo_localized"));
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_left_read_only_foo) = class $mol_view_tree2_to_js_test_ex_left_read_only_foo extends ($.$mol_object) {
		bar2(next){
			if(next !== undefined) return next;
			return 1;
		}
		bar1(){
			return (this.bar2());
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_left_read_only_foo.prototype), "bar2"));


;
	($.$mol_view_tree2_to_js_test_ex_right_hierarchy_foo) = class $mol_view_tree2_to_js_test_ex_right_hierarchy_foo extends ($.$mol_object) {
		indexed_title(id, next){
			return (this.Indexed(id).title(next));
		}
		indexed_id(id){
			return 0;
		}
		prj_domain(id){
			return (this.prj().domain(id));
		}
		prj_user(id){
			return (this.prj_domain(id).user());
		}
		prj_user_id(id){
			return (this.prj_user(id).id());
		}
		Indexed(id){
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_right_hierarchy_bar();
			(obj.id) = () => ((this.indexed_id(id)));
			return obj;
		}
		prj(){
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_right_hierarchy_bar();
			return obj;
		}
	};
	($mol_mem_key(($.$mol_view_tree2_to_js_test_ex_right_hierarchy_foo.prototype), "Indexed"));
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_right_hierarchy_foo.prototype), "prj"));


;
	($.$mol_view_tree2_to_js_test_ex_right_read_only_foo) = class $mol_view_tree2_to_js_test_ex_right_read_only_foo extends ($.$mol_object) {
		a(id, next){
			if(next !== undefined) return next;
			return null;
		}
	};
	($mol_mem_key(($.$mol_view_tree2_to_js_test_ex_right_read_only_foo.prototype), "a"));
	($.$mol_view_tree2_to_js_test_ex_right_read_only_bar) = class $mol_view_tree2_to_js_test_ex_right_read_only_bar extends ($.$mol_object) {
		b(id, next){
			return (this.Obj().a(id, next));
		}
		Obj(){
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_right_read_only_foo();
			return obj;
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_right_read_only_bar.prototype), "Obj"));


;
	($.$mol_view_tree2_to_js_test_ex_structural_dict_foo) = class $mol_view_tree2_to_js_test_ex_structural_dict_foo extends ($.$mol_object) {
		bar(){
			return {"alpha": 1, "beta": "a"};
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_array_with_types_foo) = class $mol_view_tree2_to_js_test_ex_array_with_types_foo extends ($.$mol_object) {
		arr(){
			return [];
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_array_inheritance_foo) = class $mol_view_tree2_to_js_test_ex_array_inheritance_foo extends ($.$mol_object) {
		arr(){
			return ["v1"];
		}
	};
	($.$mol_view_tree2_to_js_test_ex_array_inheritance_bar) = class $mol_view_tree2_to_js_test_ex_array_inheritance_bar extends ($.$mol_view_tree2_to_js_test_ex_array_inheritance_foo) {
		arr(){
			return [
				"v3", 
				...(super.arr()), 
				"v4"
			];
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_bidi_legacy_value_foo) = class $mol_view_tree2_to_js_test_ex_bidi_legacy_value_foo extends ($.$mol_object) {
		b(next){
			if(next !== undefined) return next;
			return 1;
		}
		a(next){
			return (this.b(next));
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_bidi_legacy_value_foo.prototype), "b"));


;
	($.$mol_view_tree2_to_js_test_ex_simple_typed_null_foo) = class $mol_view_tree2_to_js_test_ex_simple_typed_null_foo extends ($.$mol_object) {
		a(){
			return null;
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_bidi_in_dictionary_foo) = class $mol_view_tree2_to_js_test_ex_bidi_in_dictionary_foo extends ($.$mol_object) {
		run(next){
			if(next !== undefined) return next;
			return null;
		}
		event(){
			return {"click": (next) => (this.run(next))};
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_bidi_in_dictionary_foo.prototype), "run"));


;
	($.$mol_view_tree2_to_js_test_ex_right_in_left_foo) = class $mol_view_tree2_to_js_test_ex_right_in_left_foo extends ($.$mol_object) {
		a(){
			return null;
		}
	};
	($.$mol_view_tree2_to_js_test_ex_right_in_left_bar) = class $mol_view_tree2_to_js_test_ex_right_in_left_bar extends ($.$mol_object) {
		b(){
			return (this.Cls().a());
		}
		Cls(){
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_right_in_left_foo();
			return obj;
		}
		Menu_title(){
			return (this.Menu().Title());
		}
		Menu(){
			const obj = new this.$.$mol_page();
			return obj;
		}
		foo(){
			return (this.Cls());
		}
		pages(){
			return [(this.Menu())];
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_right_in_left_bar.prototype), "Cls"));
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_right_in_left_bar.prototype), "Menu"));


;
	($.$mol_view_tree2_to_js_test_ex_simple_empty_class_foo) = class $mol_view_tree2_to_js_test_ex_simple_empty_class_foo extends ($.$mol_object) {};


;
	($.$mol_view_tree2_to_js_test_ex_simple_two_classes_foo) = class $mol_view_tree2_to_js_test_ex_simple_two_classes_foo extends ($.$mol_object) {
		str(){
			return "some";
		}
	};
	($.$mol_view_tree2_to_js_test_ex_simple_two_classes_bar) = class $mol_view_tree2_to_js_test_ex_simple_two_classes_bar extends ($.$mol_view_tree2_to_js_test_ex_simple_two_classes_foo) {
		str(){
			return "some2";
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_simple_factory_props_bar) = class $mol_view_tree2_to_js_test_ex_simple_factory_props_bar extends ($.$mol_object) {
		sub(){
			return [];
		}
		loc(){
			return "v2";
		}
		deep(){
			return {"loc": (this.$.$mol_locale.text("$mol_view_tree2_to_js_test_ex_simple_factory_props_bar_deep_loc"))};
		}
		some(){
			return false;
		}
	};
	($.$mol_view_tree2_to_js_test_ex_simple_factory_props_foo) = class $mol_view_tree2_to_js_test_ex_simple_factory_props_foo extends ($.$mol_object) {
		button(){
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_simple_factory_props_bar();
			(obj.some) = () => (true);
			(obj.loc) = () => ((this.$.$mol_locale.text("$mol_view_tree2_to_js_test_ex_simple_factory_props_foo_button_loc")));
			(obj.deep) = () => ({"loc": (this.$.$mol_locale.text("$mol_view_tree2_to_js_test_ex_simple_factory_props_foo_button_deep_loc"))});
			(obj.sub) = () => ([1]);
			return obj;
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_simple_factory_props_foo.prototype), "button"));


;
	($.$mol_view_tree2_to_js_test_ex_simple_default_indexed_foo) = class $mol_view_tree2_to_js_test_ex_simple_default_indexed_foo extends ($.$mol_object) {
		a_b(id, next){
			if(next !== undefined) return next;
			return 0;
		}
		legacy(id, next){
			if(next !== undefined) return next;
			return 0;
		}
	};
	($mol_mem_key(($.$mol_view_tree2_to_js_test_ex_simple_default_indexed_foo.prototype), "a_b"));
	($mol_mem_key(($.$mol_view_tree2_to_js_test_ex_simple_default_indexed_foo.prototype), "legacy"));


;
	($.$mol_view_tree2_to_js_test_ex_structural_complex_key_foo) = class $mol_view_tree2_to_js_test_ex_structural_complex_key_foo extends ($.$mol_object) {
		dictionary(){
			return {
				"raw data key": "1", 
				"key2": "2", 
				"key3": "3"
			};
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_array_constructor_tuple_foo) = class $mol_view_tree2_to_js_test_ex_array_constructor_tuple_foo extends ($.$mol_object) {
		text(){
			return "123";
		}
		text_blob(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_klass_tuple([(this.text())], {"type": "text/plain"});
			return obj;
		}
		blobs(){
			return [(this.text_blob())];
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_array_constructor_tuple_foo.prototype), "text_blob"));


;
	($.$mol_view_tree2_to_js_test_ex_left_second_level_index_bar) = class $mol_view_tree2_to_js_test_ex_left_second_level_index_bar extends ($.$mol_object) {
		localized(){
			return "";
		}
	};
	($.$mol_view_tree2_to_js_test_ex_left_second_level_index_foo) = class $mol_view_tree2_to_js_test_ex_left_second_level_index_foo extends ($.$mol_object) {
		some(id, next){
			if(next !== undefined) return next;
			return (this.$.$mol_locale.text("$mol_view_tree2_to_js_test_ex_left_second_level_index_foo_some"));
		}
		owner(id, next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_left_second_level_index_bar();
			(obj.localized) = () => ((this.some(id)));
			return obj;
		}
		cls(id){
			return (this.owner(id));
		}
	};
	($mol_mem_key(($.$mol_view_tree2_to_js_test_ex_left_second_level_index_foo.prototype), "some"));
	($mol_mem_key(($.$mol_view_tree2_to_js_test_ex_left_second_level_index_foo.prototype), "owner"));


;
	($.$mol_view_tree2_to_js_test_ex_structural_quoted_props_foo) = class $mol_view_tree2_to_js_test_ex_structural_quoted_props_foo extends ($.$mol_object) {
		bar(){
			return {"a$": 1, "b-t": {}};
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_structural_spread_other_foo) = class $mol_view_tree2_to_js_test_ex_structural_spread_other_foo extends ($.$mol_object) {
		test(){
			return {"aaa": 123};
		}
		field(){
			return {"bbb": 321, ...(this.test())};
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_array_of_array_or_object_foo) = class $mol_view_tree2_to_js_test_ex_array_of_array_or_object_foo extends ($.$mol_object) {
		complex(){
			return [
				"1", 
				[true], 
				["1", 21], 
				{"a": 1, "str": "some"}
			];
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_bidi_localized_in_object_foo) = class $mol_view_tree2_to_js_test_ex_bidi_localized_in_object_foo extends ($.$mol_object) {
		outer(next){
			if(next !== undefined) return next;
			return (this.$.$mol_locale.text("$mol_view_tree2_to_js_test_ex_bidi_localized_in_object_foo_outer"));
		}
		obj(){
			return {"loc": (next) => (this.outer(next))};
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_bidi_localized_in_object_foo.prototype), "outer"));


;
	($.$mol_view_tree2_to_js_test_ex_bidi_with_default_object_foo) = class $mol_view_tree2_to_js_test_ex_bidi_with_default_object_foo extends ($.$mol_object) {
		owner(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_object();
			return obj;
		}
		class(next){
			return (this.owner(next));
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_bidi_with_default_object_foo.prototype), "owner"));


;
	($.$mol_view_tree2_to_js_test_ex_left_in_array_and_object_bar) = class $mol_view_tree2_to_js_test_ex_left_in_array_and_object_bar extends ($.$mol_object) {
		rows(){
			return [];
		}
	};
	($.$mol_view_tree2_to_js_test_ex_left_in_array_and_object_foo) = class $mol_view_tree2_to_js_test_ex_left_in_array_and_object_foo extends ($.$mol_object) {
		content(){
			return [];
		}
		Obj(){
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_left_in_array_and_object_bar();
			(obj.rows) = () => ((this.content()));
			return obj;
		}
		obj(){
			return {"prop": (this.Obj())};
		}
		arr(){
			return [(this.Obj())];
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_left_in_array_and_object_foo.prototype), "Obj"));


;
	($.$mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_bar) = class $mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_bar extends ($.$mol_object) {
		expanded(){
			return "";
		}
	};
	($.$mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_foo) = class $mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_foo extends ($.$mol_object) {
		owner(id, next){
			if(next !== undefined) return next;
			return "w";
		}
		indexed(id, next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_bar();
			(obj.expanded) = () => ((this.owner(id, next)));
			return obj;
		}
	};
	($mol_mem_key(($.$mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_foo.prototype), "owner"));
	($mol_mem_key(($.$mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_foo.prototype), "indexed"));


;
	($.$mol_view_tree2_to_js_test_ex_array_spread_other_bar) = class $mol_view_tree2_to_js_test_ex_array_spread_other_bar extends ($.$mol_object) {
		sup(){
			return ["v1"];
		}
		arr(){
			return ["v2", ...(this.sup())];
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_structural_with_inheritance_foo) = class $mol_view_tree2_to_js_test_ex_structural_with_inheritance_foo extends ($.$mol_object) {
		field(){
			return {"xxx": 123, "xxy": "test"};
		}
	};
	($.$mol_view_tree2_to_js_test_ex_structural_with_inheritance_bar) = class $mol_view_tree2_to_js_test_ex_structural_with_inheritance_bar extends ($.$mol_view_tree2_to_js_test_ex_structural_with_inheritance_foo) {
		field(){
			return {
				"yyy": 234, 
				...(super.field()), 
				"zzz": 345
			};
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_bidi_localized_default_value_foo) = class $mol_view_tree2_to_js_test_ex_bidi_localized_default_value_foo extends ($.$mol_object) {
		b(next){
			if(next !== undefined) return next;
			return (this.$.$mol_locale.text("$mol_view_tree2_to_js_test_ex_bidi_localized_default_value_foo_b"));
		}
		a(next){
			return (this.b(next));
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_bidi_localized_default_value_foo.prototype), "b"));


;
	($.$mol_view_tree2_to_js_test_ex_simple_mutable_and_read_only_foo) = class $mol_view_tree2_to_js_test_ex_simple_mutable_and_read_only_foo extends ($.$mol_object) {
		readonly(){
			return null;
		}
		mutable(next){
			if(next !== undefined) return next;
			return null;
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_simple_mutable_and_read_only_foo.prototype), "mutable"));


;
	($.$mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo) = class $mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo extends ($.$mol_object) {
		bar(){
			return {"loc": (this.$.$mol_locale.text("$mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo_bar_loc")), "baz": {"loc2": (this.$.$mol_locale.text("$mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo_bar_baz_loc2"))}};
		}
	};


;
	($.$mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_bar) = class $mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_bar extends ($.$mol_object) {
		rows(){
			return [];
		}
	};
	($.$mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_foo) = class $mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_foo extends ($.$mol_object) {
		content(){
			return 123;
		}
		Obj(){
			const obj = new this.$.$mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_bar();
			(obj.rows) = () => ([(this.content())]);
			return obj;
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_foo.prototype), "Obj"));


;
	($.$mol_view_tree2_to_js_test_ex_bidi_with_separate_default_in_right_part_foo) = class $mol_view_tree2_to_js_test_ex_bidi_with_separate_default_in_right_part_foo extends ($.$mol_object) {
		b(next){
			if(next !== undefined) return next;
			return false;
		}
		a(next){
			return (this.b(next));
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_bidi_with_separate_default_in_right_part_foo.prototype), "b"));


;
	($.$mol_view_tree2_to_js_test_ex_bidi_doubing_right_part_with_same_default_foo) = class $mol_view_tree2_to_js_test_ex_bidi_doubing_right_part_with_same_default_foo extends ($.$mol_object) {
		b(next){
			if(next !== undefined) return next;
			return false;
		}
		a(next){
			return (this.b(next));
		}
		c(next){
			return (this.b(next));
		}
	};
	($mol_mem(($.$mol_view_tree2_to_js_test_ex_bidi_doubing_right_part_with_same_default_foo.prototype), "b"));


;
"use strict";
var $;
(function ($) {
    class $mol_view_tree2_to_js_test_ex_klass_tuple extends $mol_object {
        tuple;
        some;
        constructor(tuple = [], some) {
            super();
            this.tuple = tuple;
            this.some = some;
        }
    }
    $.$mol_view_tree2_to_js_test_ex_klass_tuple = $mol_view_tree2_to_js_test_ex_klass_tuple;
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_view_tree2_to_js_test_ex_right_hierarchy_bar extends $mol_object {
        title(next) {
            return 123 + (next ?? 0);
        }
        id() {
            return 0;
        }
        domain(id) {
            return {
                user() {
                    return {
                        id() {
                            return 1 + id;
                        }
                    };
                }
            };
        }
    }
    __decorate([
        $mol_mem
    ], $mol_view_tree2_to_js_test_ex_right_hierarchy_bar.prototype, "title", null);
    __decorate([
        $mol_mem_key
    ], $mol_view_tree2_to_js_test_ex_right_hierarchy_bar.prototype, "domain", null);
    $.$mol_view_tree2_to_js_test_ex_right_hierarchy_bar = $mol_view_tree2_to_js_test_ex_right_hierarchy_bar;
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($_1) {
    const str2js = (function (data, url) {
        const tree = this.$mol_tree2_from_string(data, url);
        const js_tree = this.$mol_view_tree2_to_js(tree);
        const js_text = this.$mol_tree2_js_to_text(js_tree);
        const js_str = this.$mol_tree2_text_to_string_mapped_js(js_text);
        return js_str;
    }).bind($);
    function $mol_view_tree2_to_js_test_run(tree) {
        class $mol_view_mock extends $mol_object {
        }
        const $ = { $mol_object: $mol_view_mock };
        $mol_view_mock[$mol_ambient_ref] = $;
        const src_uri = `.view.tree`;
        const js = str2js(tree, src_uri);
        eval(js);
        return $;
    }
    $_1.$mol_view_tree2_to_js_test_run = $mol_view_tree2_to_js_test_run;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'Bidi bind fallback'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_fallback_foo;
            const foo = _foo.make({});
            $mol_assert_equal(foo.bar1(), foo.bar2(), 1);
            $mol_assert_equal(foo.bar2(2), foo.bar1(), 2);
            $mol_assert_equal(foo.bar1(1), foo.bar1(), 1);
            $mol_assert_equal(foo.bar1(1), foo.bar2(), 1);
            $mol_assert_equal(foo.bar2(3), foo.bar2(), foo.bar1(), 3);
        },
        'Bidi bind legacy value'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_legacy_value_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.a(), foo.b(), 1);
            $mol_assert_like(foo.b(2), foo.a(), 2);
        },
        'Bidi bind in dictionary'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_in_dictionary_foo;
            $mol_assert_like(_foo.make({ $ }).event().click({}), {});
        },
        'Bidi bind chaining'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_chaining_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.c(), foo.b(), foo.a());
        },
        'Bidi bind indexed'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_indexed_foo;
            const foo = _foo.make({ $ });
            foo.owner(1, 'a');
            foo.owner(2, 'b'),
                $mol_assert_like(foo.owner(1), foo.indexed(1), 'a');
            $mol_assert_like(foo.owner(1, 'a2'), foo.indexed(1), 'a2');
            $mol_assert_like(foo.owner(2), foo.indexed(2), 'b');
        },
        'Bidi bind indexed second level'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_foo;
            const _bar = $mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_bar;
            _foo.$.$mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_bar = _bar;
            const foo = _foo.make({ $ });
            foo.owner(1, 'a');
            foo.owner(2, 'b');
            $mol_assert_like(foo.owner(1), foo.indexed(1).expanded(), 'a');
            $mol_assert_like(foo.owner(2), foo.indexed(2).expanded(), 'b');
        },
        'Bidi bind doubing right part with same default'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_doubing_right_part_with_same_default_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.b(), foo.c(), foo.a(), false);
        },
        'Bidi bind with separate default in right part'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_with_separate_default_in_right_part_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.b(), foo.a());
        },
        'Bidi bind index from outer scope throws error'($) {
            $mol_assert_fail(() => {
                $mol_view_tree2_to_js_test_run(`
					Foo $mol_view
						a!? $mol_view
							expanded <=> cell_test_expanded!? null
				`);
            }, `Required prop like some*? at \`.view.tree#4:21/20\`
<=>
.view.tree#4:17/3
expanded
.view.tree#4:8/8
$mol_view
.view.tree#3:11/9
a!?
.view.tree#3:7/3`);
        },
        'Bidi bind with default object'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_with_default_object_foo;
            const foo = _foo.make({ $ });
            const view = new $mol_object;
            foo.owner(view);
            $mol_assert_like(foo.owner(), foo.class(), view);
        },
        'Bidi bind localized default value'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_localized_default_value_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.b(), foo.a(), `$mol_view_tree2_to_js_test_ex_bidi_localized_default_value_foo_b`);
        },
        'Bidi bind localized in object'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_bidi_localized_in_object_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.obj().loc(), foo.outer(), `$mol_view_tree2_to_js_test_ex_bidi_localized_in_object_foo_outer`);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'Left bind read only'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_left_read_only_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.bar1(), foo.bar1(2), foo.bar1(), foo.bar2(), 1);
            $mol_assert_like(foo.bar2(2), foo.bar1(), 2);
        },
        'Left bind second level index'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_left_second_level_index_foo;
            const foo = _foo.make({ $ });
            $mol_assert_ok(foo.owner(1) instanceof $mol_object);
            $mol_assert_like(foo.some(1), foo.some(1), `$mol_view_tree2_to_js_test_ex_left_second_level_index_foo_some`);
            $mol_assert_equal(foo.owner(1), foo.cls(1));
            $mol_assert_equal(foo.owner(1).localized(), foo.some(1));
            $mol_assert_equal(foo.cls(2), foo.owner(2));
        },
        'Left bind in array and object'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_left_in_array_and_object_foo;
            const foo = _foo.make({ $ });
            $mol_assert_equal(foo.obj().prop, foo.arr()[0], foo.Obj());
        },
        'Left bind with separate default and comment'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.Obj().rows(), [123]);
        },
        'Left bind chaining'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_left_chaining_foo;
            const foo = _foo.make({ $ });
            $mol_assert_equal(foo.d(), foo.c(), foo.b(), foo.a(), 0);
            $mol_assert_equal(foo.d(1), foo.c(), foo.b(), foo.a(), 1);
            $mol_assert_equal(foo.a(2), foo.b(2), foo.c(), foo.d(), 1);
            $mol_assert_equal(foo.c(2), foo.b(), foo.a(), 2);
            $mol_assert_equal(foo.d(1), 1);
            $mol_assert_equal(foo.d(3), foo.c(), foo.b(), foo.a(), 3);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'Array boolean'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_array_boolean_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.bar(), [false, true]);
        },
        'Array number'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_array_number_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.bar(), [
                Number.NaN,
                Number.NEGATIVE_INFINITY,
                Number.POSITIVE_INFINITY,
                0,
            ]);
        },
        'Array with types'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_array_with_types_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.arr(), []);
        },
        'Array of array or object'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_array_of_array_or_object_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.complex(), ['1', [true], ['1', 21], { a: 1, str: 'some' }]);
        },
        'Array inheritance'($) {
            const _bar = $mol_view_tree2_to_js_test_ex_array_inheritance_bar;
            $mol_assert_like(_bar.make({ $ }).arr(), ['v3', 'v1', 'v4']);
        },
        'Array spread other'($) {
            const _bar = $mol_view_tree2_to_js_test_ex_array_spread_other_bar;
            const bar = _bar.make({ $ });
            $mol_assert_like(bar.arr(), ['v2', 'v1']);
            $mol_assert_like(bar.arr()[1], bar.sup()[0]);
        },
        'Array slot'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_array_slot_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.foot(), [1, true, 'foot1', 2, 3, 'ins1', 1, 'ins2', 'foot2']);
        },
        'Array indexed'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_array_indexed_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.tags(1), ['t1', 't2']);
            $mol_assert_like(foo.slot(1), ['t2']);
        },
        'Array union'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_array_union_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.bar(), ['a', 'c', 'b']);
        },
        'Array constructor tuple'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_array_constructor_tuple_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.text_blob().tuple, ['123']);
            $mol_assert_like(foo.blobs(), [
                foo.text_blob(),
            ]);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'Right bind read only'($) {
            const _bar = $mol_view_tree2_to_js_test_ex_right_read_only_bar;
            const bar = _bar.make({ $: _bar.$ });
            $mol_assert_like(bar.Obj().a(1), bar.b(1));
        },
        'Right bind in left bind'($) {
            const _bar = $mol_view_tree2_to_js_test_ex_right_in_left_bar;
            const bar = _bar.make({ $: _bar.$ });
            $mol_assert_like(bar.foo(), bar.Cls());
            $mol_assert_like(bar.foo().a(), bar.Cls().a(), bar.b());
        },
        'Right bind indexed'($) {
            const _bar = $mol_view_tree2_to_js_test_ex_right_indexed_bar;
            const bar = _bar.make({ $: _bar.$ });
            $mol_assert_equal(bar.Cls(1).a(), bar.b(1));
            $mol_assert_like(bar.b(1), { some: 123 });
            $mol_assert_equal(bar.Cls(1).a() === bar.b(2), false);
        },
        'Right hierarchy'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_right_hierarchy_foo;
            const foo = _foo.make({ $: _foo.$ });
            $mol_assert_like(foo.prj_user_id(1), 2);
        },
        'Right mixed args'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_right_hierarchy_foo;
            const foo = _foo.make({ $: _foo.$ });
            foo.indexed_id = id => id + 25;
            $mol_assert_like(foo.indexed_title(1), 123);
            $mol_assert_like(foo.Indexed(0).id(), 25);
            $mol_assert_like(foo.Indexed(1).id(), 26);
            $mol_assert_like(foo.indexed_title(0, 2), 125);
        }
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'simple empty class'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_simple_empty_class_foo;
            $mol_assert_ok(_foo.make({ $ }) instanceof _foo);
        },
        'simple mutable and read only channels'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_simple_mutable_and_read_only_foo;
            const foo = _foo.make({ $ });
            $mol_assert_equal(foo.readonly(), foo.readonly(1), foo.readonly(), null);
            $mol_assert_equal(foo.mutable(), null);
            $mol_assert_equal(foo.mutable(2), foo.mutable(), 2);
        },
        'simple string channel'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_simple_string_foo;
            $mol_assert_equal(_foo.make({ $ }).hardcoded(), 'First\nSecond');
            $mol_assert_equal(_foo.make({ $ }).localized(), `$mol_view_tree2_to_js_test_ex_simple_string_foo_localized`);
        },
        'simple default indexed channel'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_simple_default_indexed_foo;
            const foo = _foo.make({ $ });
            $mol_assert_equal(foo.a_b(0, 1), foo.a_b(0), 1);
            $mol_assert_equal(foo.legacy(0, 1), foo.legacy(0), 1);
        },
        'simple throw if cyrillic name'($) {
            $mol_assert_fail(() => {
                $mol_view_tree2_to_js_test_run(`
					Foo $mol_object
						sub / <= Чlose_icon $mol_object
				`);
            }, `Required prop like some*? at \`.view.tree#3:16/10\`
<=
.view.tree#3:13/2
/
.view.tree#3:11/1
sub
.view.tree#3:7/3`);
        },
        'simple empty legacy indexed channel throws error'($) {
            $mol_assert_fail(() => {
                $mol_view_tree2_to_js_test_run(`
					Foo $mol_object
						a!? null
				`);
            }, 'Required prop like some*? at `.view.tree#3:7/3`');
            $mol_assert_fail(() => {
                $mol_view_tree2_to_js_test_run(`
					Foo $mol_object
						b! 1
				`);
            }, 'Required prop like some*? at `.view.tree#3:7/2`');
        },
        'simple two classes'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_simple_two_classes_foo;
            const _bar = $mol_view_tree2_to_js_test_ex_simple_two_classes_bar;
            const a = _foo.make({ $ });
            const b = _bar.make({ $ });
            $mol_assert_ok(b instanceof _foo);
            $mol_assert_ok(b instanceof _bar);
            $mol_assert_equal(a.str(), 'some');
            $mol_assert_equal(b.str(), 'some2');
        },
        'simple commented node'($) {
            const { Foo } = $mol_view_tree2_to_js_test_run(`
				- Foo $mol_object
					a!? $mol_object
						expanded <=> cell_test_expanded!? null
			`);
            $mol_assert_ok(Foo === undefined);
        },
        'simple factory props'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_simple_factory_props_foo;
            const foo = _foo.make({ $ });
            $mol_assert_ok(typeof foo.button().sub === 'function');
            $mol_assert_ok(typeof foo.button().some === 'function');
            $mol_assert_equal(foo.button().loc(), `$mol_view_tree2_to_js_test_ex_simple_factory_props_foo_button_loc`);
            $mol_assert_equal(foo.button().deep().loc, `$mol_view_tree2_to_js_test_ex_simple_factory_props_foo_button_deep_loc`);
            $mol_assert_equal(foo.button().sub()[0], 1);
        },
        'simple nan'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_simple_nan_foo;
            const foo = _foo.make({ $ });
            $mol_assert_equal(foo.a(), foo.b(), foo.c(), NaN);
            $mol_assert_equal(foo.d(), Infinity);
            $mol_assert_equal(foo.e(), -Infinity);
            $mol_assert_equal(foo.f(), Infinity);
        },
        'simple typed null'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_simple_typed_null_foo;
            const foo = _foo.make({ $ });
            $mol_assert_equal(foo.a(), null);
        },
        'extra char'($) {
            $mol_assert_fail(() => {
                $mol_view_tree2_to_js_test_run(`
					Foo $mol_object
						item_чount 50
				`);
            }, 'Required prop like some*? at `.view.tree#3:7/10`');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    $mol_test({
        'Structural channel'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_structural_foo;
            $mol_assert_like(_foo.make({ $ }).bar(), {
                alpha: 1,
                beta: {},
                xxx: 2,
            });
        },
        'Structural dict'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_structural_dict_foo;
            $mol_assert_like(_foo.make({ $ }).bar(), {
                alpha: 1,
                beta: 'a',
            });
        },
        'Structural channel with inheritance'($) {
            const _bar = $mol_view_tree2_to_js_test_ex_structural_with_inheritance_bar;
            $mol_assert_like(_bar.make({ $ }).field(), {
                yyy: 234,
                xxx: 123,
                xxy: 'test',
                zzz: 345,
            });
        },
        'Structural channel spread other'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_structural_spread_other_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.field(), {
                bbb: 321,
                aaa: 123,
            });
        },
        'Structural channel localized prop value'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.bar(), {
                'loc': `$mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo_bar_loc`,
                'baz': { 'loc2': `$mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo_bar_baz_loc2` }
            });
        },
        'Structural channel quoted props'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_structural_quoted_props_foo;
            $mol_assert_like(_foo.make({ $ }).bar(), {
                'a$': 1,
                'b-t': {},
            });
        },
        'Structural complex key'($) {
            const _foo = $mol_view_tree2_to_js_test_ex_structural_complex_key_foo;
            const foo = _foo.make({ $ });
            $mol_assert_like(foo.dictionary(), {
                'raw data key': '1',
                'key2': '2',
                'key3': '3'
            });
        }
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'empty array'() {
            $mol_assert_like($mol_array_chunks([], () => true), []);
        },
        'one chunk'() {
            $mol_assert_like($mol_array_chunks([1, 2, 3, 4, 5], () => false), [[1, 2, 3, 4, 5]]);
        },
        'last empty chunk'() {
            $mol_assert_like($mol_array_chunks([1, 2, 3, 4, 5], (_, i) => i === 4), [[1, 2, 3, 4, 5]]);
        },
        'chunk for every item'() {
            $mol_assert_like($mol_array_chunks([1, 2, 3, 4, 5], () => true), [[1], [2], [3], [4], [5]]);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'trim array'() {
            const array = [undefined, null, 0, false, null, undefined, undefined];
            const correct = [undefined, null, 0, false, null];
            $mol_array_trim(array);
            $mol_assert_like(array, correct);
        }
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'triplets'() {
            $mol_assert_equal(new $mol_time_interval('2015-01-01/P1M').end.toString(), '2015-02-01');
            $mol_assert_equal(new $mol_time_interval('P1M/2015-02-01').start.toString(), '2015-01-01');
            $mol_assert_equal(new $mol_time_interval('2015-01-01/2015-02-01').duration.toString(), 'PT2678400S');
        },
        'comparison'() {
            const iso = '2021-01-02/2022-03-04';
            $mol_assert_like(new $mol_time_interval(iso), new $mol_time_interval(iso));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Vector limiting'() {
            let point = new $mol_vector_3d(7, 10, 13);
            const res = point.limited([[1, 5], [15, 20], [5, 10]]);
            $mol_assert_equal(res.x, 5);
            $mol_assert_equal(res.y, 15);
            $mol_assert_equal(res.z, 10);
        },
        'Vector adding scalar'() {
            let point = new $mol_vector_3d(1, 2, 3);
            let res = point.added0(5);
            $mol_assert_equal(res.x, 6);
            $mol_assert_equal(res.y, 7);
            $mol_assert_equal(res.z, 8);
        },
        'Vector adding vector'() {
            let point = new $mol_vector_3d(1, 2, 3);
            let res = point.added1([5, 10, 15]);
            $mol_assert_equal(res.x, 6);
            $mol_assert_equal(res.y, 12);
            $mol_assert_equal(res.z, 18);
        },
        'Vector multiplying scalar'() {
            let point = new $mol_vector_3d(2, 3, 4);
            let res = point.multed0(-1);
            $mol_assert_equal(res.x, -2);
            $mol_assert_equal(res.y, -3);
            $mol_assert_equal(res.z, -4);
        },
        'Vector multiplying vector'() {
            let point = new $mol_vector_3d(2, 3, 4);
            let res = point.multed1([5, 2, -2]);
            $mol_assert_equal(res.x, 10);
            $mol_assert_equal(res.y, 6);
            $mol_assert_equal(res.z, -8);
        },
        'Matrix adding matrix'() {
            let matrix = new $mol_vector_matrix(...[[1, 2], [3, 4], [5, 6]]);
            let res = matrix.added2([[10, 20], [30, 40], [50, 60]]);
            $mol_assert_equal(res[0][0], 11);
            $mol_assert_equal(res[0][1], 22);
            $mol_assert_equal(res[1][0], 33);
            $mol_assert_equal(res[1][1], 44);
            $mol_assert_equal(res[2][0], 55);
            $mol_assert_equal(res[2][1], 66);
        },
        'Matrix multiplying matrix'() {
            let matrix = new $mol_vector_matrix(...[[2, 3], [4, 5], [6, 7]]);
            let res = matrix.multed2([[2, 3], [4, 5], [6, 7]]);
            $mol_assert_equal(res[0][0], 4);
            $mol_assert_equal(res[0][1], 9);
            $mol_assert_equal(res[1][0], 16);
            $mol_assert_equal(res[1][1], 25);
            $mol_assert_equal(res[2][0], 36);
            $mol_assert_equal(res[2][1], 49);
        },
        'Range expanding'() {
            let range = $mol_vector_range_full.inversed;
            const expanded = range.expanded0(10).expanded0(5);
            $mol_assert_like([...expanded], [5, 10]);
        },
        'Vector of range expanding by vector'() {
            let dimensions = new $mol_vector_2d($mol_vector_range_full.inversed, $mol_vector_range_full.inversed);
            const expanded = dimensions.expanded1([1, 7]).expanded1([3, 5]);
            $mol_assert_like([...expanded.x], [1, 3]);
            $mol_assert_like([...expanded.y], [5, 7]);
        },
        'Vector of range expanding by vector of range'() {
            let dimensions = new $mol_vector_2d($mol_vector_range_full.inversed, $mol_vector_range_full.inversed);
            const expanded = dimensions
                .expanded2([[1, 3], [7, 9]])
                .expanded2([[2, 4], [6, 8]]);
            $mol_assert_like([...expanded.x], [1, 4]);
            $mol_assert_like([...expanded.y], [6, 9]);
        },
        'Vector of infinity range expanding by vector of range'() {
            let dimensions = new $mol_vector_2d($mol_vector_range_full.inversed, $mol_vector_range_full.inversed);
            const next = new $mol_vector_2d($mol_vector_range_full.inversed, $mol_vector_range_full.inversed);
            const expanded = next
                .expanded2(dimensions);
            $mol_assert_like([...expanded.x], [Infinity, -Infinity]);
            $mol_assert_like([...expanded.y], [Infinity, -Infinity]);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'serial & parse'() {
            const data = [
                { foo: '123', bar: '456' },
                { foo: 'x"xx', bar: 'y"y"y' },
            ];
            $mol_assert_like($mol_csv_parse($mol_csv_serial(data)), data);
        },
        'parse & serial'() {
            const csv = 'foo,bar\n"123","456"\n"x""xx","y""y""y"';
            $mol_assert_like($mol_csv_serial($mol_csv_parse(csv)), csv);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is number'() {
            $mol_data_number(0);
        },
        'Is not number'() {
            $mol_assert_fail(() => {
                $mol_data_number('x');
            }, 'x is not a number');
        },
        'Is object number'() {
            $mol_assert_fail(() => {
                $mol_data_number(new Number(''));
            }, '0 is not a number');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is empty array'() {
            $mol_data_array($mol_data_number)([]);
        },
        'Is array'() {
            $mol_data_array($mol_data_number)([1, 2]);
        },
        'Is not array'() {
            $mol_assert_fail(() => {
                $mol_data_array($mol_data_number)({ [0]: 1, length: 1, map: () => { } });
            }, '[object Object] is not an array');
        },
        'Has wrong item'() {
            $mol_assert_fail(() => {
                $mol_data_array($mol_data_number)([1, '1']);
            }, '[1] 1 is not a number');
        },
        'Has wrong deep item'() {
            $mol_assert_fail(() => {
                $mol_data_array($mol_data_array($mol_data_number))([[], [0, 0, false]]);
            }, '[1] [2] false is not a number');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is boolean - true'() {
            $mol_data_boolean(true);
        },
        'Is boolean - false'() {
            $mol_data_boolean(false);
        },
        'Is not boolean'() {
            $mol_assert_fail(() => {
                $mol_data_boolean('x');
            }, 'x is not a boolean');
        },
        'Is object boolean'() {
            $mol_assert_fail(() => {
                $mol_data_boolean(new Boolean(''));
            }, 'false is not a boolean');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'is same number'() {
            const Nan = $mol_data_const(Number.NaN);
            Nan(Number.NaN);
        },
        'is equal object'() {
            const Tags = $mol_data_const({ tags: ['deep', 'equals'] });
            Tags({ tags: ['deep', 'equals'] });
        },
        'is different number'() {
            const Five = $mol_data_const(5);
            $mol_assert_fail(() => Five(6), '6 is not 5');
        },
        'is different object'() {
            const Tags = $mol_data_const({ tags: ['deep', 'equals'] });
            $mol_assert_fail(() => Tags({ tags: ['shallow', 'equals'] }), `{"tags":["shallow","equals"]} is not {"tags":["deep","equals"]}`);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is empty dict'() {
            $mol_data_dict($mol_data_number)({});
        },
        'Is dict'() {
            $mol_data_dict($mol_data_number)({ foo: 123 });
        },
        'Is not dict'() {
            $mol_assert_fail(() => {
                $mol_data_dict($mol_data_number)([123]);
            }, '123 is not an Object');
        },
        'Has wrong item'() {
            $mol_assert_fail(() => {
                $mol_data_dict($mol_data_number)({ foo: 1, bar: '1' });
            }, '["bar"] 1 is not a number');
        },
        'Has wrong deep item'() {
            $mol_assert_fail(() => {
                $mol_data_dict($mol_data_dict($mol_data_number))({ foo: { bar: false } });
            }, '["foo"] ["bar"] false is not a number');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is string'() {
            $mol_data_string('');
        },
        'Is not string'() {
            $mol_assert_fail(() => {
                $mol_data_string(0);
            }, '0 is not a string');
        },
        'Is object string'() {
            $mol_assert_fail(() => {
                $mol_data_string(new String('x'));
            }, 'x is not a string');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is fit'() {
            $mol_data_pattern(/^-$/)('-');
        },
        'Is not fit'() {
            $mol_assert_fail(() => {
                $mol_data_pattern(/^-$/)('+');
            }, '+ is not a /^-$/');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is email'() {
            $mol_data_email('foo@bar');
        },
        'Has not host'() {
            $mol_assert_fail(() => {
                $mol_data_email('foo@');
            }, 'foo@ is not a /.+@.+/');
        },
        'Has not name'() {
            $mol_assert_fail(() => {
                $mol_data_email('@bar');
            }, '@bar is not a /.+@.+/');
        },
        'Has not @'() {
            $mol_assert_fail(() => {
                $mol_data_email('foo.bar');
            }, 'foo.bar is not a /.+@.+/');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is same class'() {
            $mol_data_instance(Date)(new Date);
        },
        'Is sub class'() {
            $mol_data_instance(Object)(new Date);
        },
        'Is super class'() {
            $mol_assert_fail(() => {
                $mol_data_instance(Date)(new Object);
            }, '[object Object] is not a Date');
        },
        'Is another class'() {
            $mol_assert_fail(() => {
                $mol_data_instance(Date)(new Array);
            }, ' is not a Date');
        },
        'Is not object'() {
            $mol_assert_fail(() => {
                $mol_data_instance(Date)(null);
            }, 'null is not a Date');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is integer'() {
            $mol_data_integer(0);
        },
        'Is float'() {
            $mol_assert_fail(() => {
                $mol_data_integer(1.1);
            }, '1.1 is not an integer');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'tagged typing'() {
            const { Weight, Length } = $mol_data_tagged({
                Weight: $mol_data_integer,
                Length: $mol_data_integer,
            });
            Length(20);
            let len = Length(10);
            len = 20;
            let num = len;
            len = Length(Weight(20));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Nominal typing'() {
            const Weight = $mol_data_nominal({ Weight: $mol_data_integer });
            const Length = $mol_data_nominal({ Length: $mol_data_integer });
            let len = Length(10);
            len = Length(20);
            len = 20;
            let num = len;
            len = Weight(20);
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is null'() {
            $mol_data_nullable($mol_data_number)(null);
        },
        'Is not null'() {
            $mol_data_nullable($mol_data_number)(0);
        },
        'Is undefined'() {
            $mol_assert_fail(() => {
                const Type = $mol_data_nullable($mol_data_number);
                Type(undefined);
            }, 'undefined is not a number');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const Age = $mol_data_optional($mol_data_number);
    const Age_or_zero = $mol_data_optional($mol_data_number, () => 0);
    $mol_test({
        'Is not present'() {
            $mol_assert_equal(Age(undefined), undefined);
        },
        'Is present'() {
            $mol_assert_equal(Age(0), 0);
        },
        'Fallbacked'() {
            $mol_assert_equal(Age_or_zero(undefined), 0);
        },
        'Is null'() {
            $mol_assert_fail(() => Age(null), 'null is not a number');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Closed number range'() {
            const Pos = $mol_data_range(0, 1);
            Pos(Number.EPSILON);
            $mol_assert_fail(() => Pos(1), '1 is out range (0,1)');
            $mol_assert_fail(() => Pos(0), '0 is out range (0,1)');
            $mol_assert_fail(() => Pos(Number.POSITIVE_INFINITY), 'Infinity is out range (0,1)');
            $mol_assert_fail(() => Pos(Number.NEGATIVE_INFINITY), '-Infinity is out range (0,1)');
            $mol_assert_fail(() => Pos(NaN), 'NaN is out range (0,1)');
        },
        'Open number range'() {
            const Pos = $mol_data_range(0, Number.POSITIVE_INFINITY);
            Pos(Number.EPSILON);
            Pos(Number.MAX_VALUE);
            $mol_assert_fail(() => Pos(0), '0 is out range (0,Infinity)');
            $mol_assert_fail(() => Pos(Number.POSITIVE_INFINITY), 'Infinity is out range (0,Infinity)');
            $mol_assert_fail(() => Pos(Number.NEGATIVE_INFINITY), '-Infinity is out range (0,Infinity)');
            $mol_assert_fail(() => Pos(NaN), 'NaN is out range (0,Infinity)');
        },
        'String range'() {
            const Code = $mol_data_range('A', 'B');
            Code('Aa');
            Code('AZ');
            $mol_assert_fail(() => Code('A'), 'A is out range (A,B)');
            $mol_assert_fail(() => Code('B'), 'B is out range (A,B)');
        },
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Fit to record'() {
            const User = $mol_data_record({ age: $mol_data_number });
            User({ age: 0 });
        },
        'Extends record'() {
            const User = $mol_data_record({ age: $mol_data_number });
            User({ age: 0, name: 'Jin' });
        },
        'Shrinks record'() {
            $mol_assert_fail(() => {
                const User = $mol_data_record({ age: $mol_data_number, name: $mol_data_string });
                User({ age: 0 });
            }, '["name"] undefined is not a string');
        },
        'Shrinks deep record'() {
            $mol_assert_fail(() => {
                const User = $mol_data_record({ wife: $mol_data_record({ age: $mol_data_number }) });
                User({ wife: {} });
            }, '["wife"] ["age"] undefined is not a number');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Is first'() {
            $mol_data_variant($mol_data_number, $mol_data_string)(0);
        },
        'Is second'() {
            $mol_data_variant($mol_data_number, $mol_data_string)('');
        },
        'Is false'() {
            $mol_assert_fail(() => {
                $mol_data_variant($mol_data_number, $mol_data_string)(false);
            }, 'false is not any of variants');
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'convertion to primitives'() {
            var unit = new $mol_unit_money_usd(5);
            $mol_assert_equal(unit.valueOf(), 5);
            $mol_assert_equal(unit * 2, 10);
            $mol_assert_equal(unit + '', '$5');
            $mol_assert_equal(`${unit}`, '$5');
            $mol_assert_equal(unit.toString(), '$5');
            $mol_assert_equal(String(unit), '$5');
        },
        'arithmetic'() {
            var usd1 = new $mol_unit_money_usd(2);
            var usd2 = new $mol_unit_money_usd(3);
            var rur = new $mol_unit_money_rub(2);
            $mol_assert_equal($mol_unit.summ(usd1, usd2).toString(), '$5');
            $mol_assert_equal(usd1.mult(2).toString(), '$4');
        },
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Wrap & unwrap'() {
            const val = [1];
            const mut = $mol_mutable(val);
            $mol_assert_equal(val, mut());
        },
        'Deep array'() {
            const val = [[1], [2], [3]];
            const mut = $mol_mutable(val);
            $mol_assert_equal(mut[1][0](v => -v), -2);
            $mol_assert_unique(val, mut());
            $mol_assert_equal(val[0], mut()[0]);
            $mol_assert_equal(val[2], mut()[2]);
            $mol_assert_unique(val[1], mut()[1]);
            $mol_assert_like(mut()[1], [-2]);
        },
        'Array insert'() {
            const val = [[1, 2, 3, 4]];
            const mut = $mol_mutable(val);
            $mol_assert_like(mut[0](a => [...a.slice(0, 2), 7, ...a.slice(2)]), [1, 2, 7, 3, 4]);
            $mol_assert_like(mut(), [[1, 2, 7, 3, 4]]);
        },
        'Deep objects'() {
            const val = { a: { x: 1 }, b: { y: 2 }, c: { z: 3 } };
            const mut = $mol_mutable(val);
            $mol_assert_equal(mut.b.y(v => -v), -2);
            $mol_assert_unique(val, mut());
            $mol_assert_equal(val.a, mut().a);
            $mol_assert_equal(val.c, mut().c);
            $mol_assert_unique(val.b, mut().b);
            $mol_assert_like(mut().b, { y: -2 });
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $hyoo_harp_to_string(query) {
        return Object.entries(query).map(([field, harp]) => {
            if (field === '+')
                return '';
            if (field === '=')
                return '';
            if (field === '!=')
                return '';
            if (!harp)
                return '';
            const harp2 = harp;
            const order = harp2['+'] === true ? '+' : harp2['+'] === false ? '-' : '';
            const filter = harp2['='] ? '=' : harp2['!='] ? '!=' : '';
            const name = encodeURIComponent(field);
            let values = (harp2['='] || harp2['!='] || []).map(([min, max]) => {
                if (max === undefined || min === max)
                    return encodeURIComponent(String(min)) + '=';
                min = (min === undefined) ? '' : encodeURIComponent(String(min));
                max = (max === undefined) ? '' : encodeURIComponent(String(max));
                return `${min}@${max}=`;
            }).join('');
            let fetch = $hyoo_harp_to_string(harp);
            if (fetch)
                fetch = `(${fetch})`;
            return `${order}${name}${filter}${values}${fetch}`;
        }).filter(Boolean).join(';');
    }
    $.$hyoo_harp_to_string = $hyoo_harp_to_string;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function check(str, query) {
        $mol_assert_like(str, $hyoo_harp_to_string(query));
        $mol_assert_like(query, $hyoo_harp_from_string(str));
    }
    $mol_test({
        'root'() {
            check('', {});
        },
        'only field'() {
            check('user%3D777', {
                'user=777': {},
            });
        },
        'primary key'() {
            check('user=jin%2C777!=', {
                user: {
                    '=': [['jin,777!']],
                },
            });
        },
        'single fetch'() {
            check('friend(age%24)', {
                friend: {
                    age$: {},
                },
            });
        },
        'fetch and primary key'() {
            check('user=jin()=(friend)', {
                'user': {
                    '=': [['jin()']],
                    friend: {},
                },
            });
        },
        'multiple fetch'() {
            check('age;friend', {
                age: {},
                friend: {},
            });
        },
        'common query string back compatible'() {
            $mol_assert_like($hyoo_harp_from_string('user=jin&age=100500'), {
                user: {
                    '=': [['jin']],
                },
                age: {
                    '=': [['100500']],
                },
            });
        },
        'common pathname back compatible'() {
            $mol_assert_like($hyoo_harp_from_string('users/jin/comments'), {
                users: {},
                jin: {},
                comments: {},
            });
        },
        'deep fetch'() {
            check('my(friend(age);name);stat', {
                my: {
                    friend: {
                        age: {},
                    },
                    name: {},
                },
                stat: {},
            });
        },
        'orders'() {
            check('+age;-name', {
                age: {
                    '+': true
                },
                name: {
                    '+': false
                },
            });
        },
        'filter types'() {
            check('sex=female=;status!=married=', {
                sex: {
                    '=': [['female']],
                },
                status: {
                    '!=': [['married']],
                },
            });
        },
        'filter ranges'() {
            check('sex=female=;age=18@25=;weight=@50=;height=150@=;hobby=paint=singing=', {
                sex: {
                    '=': [['female']],
                },
                age: {
                    '=': [['18', '25']],
                },
                weight: {
                    '=': [['', '50']],
                },
                height: {
                    '=': [['150', '']],
                },
                hobby: {
                    '=': [['paint'], ['singing']],
                },
            });
        },
        'unescaped values'() {
            $mol_assert_like($hyoo_harp_from_string('foo=jin=777=;bar=jin!=666='), {
                foo: {
                    '=': [['jin'], ['777']],
                },
                bar: {
                    '=': [['jin!'], ['666']],
                },
            });
        },
        'slicing'() {
            check('friend(_num=0@100=)', {
                friend: {
                    _num: { '=': [['0', '100']] },
                },
            });
        },
        'complex'() {
            check('pullRequest(state=closed=merged=;+repository(name;private);-updateTime;_num=0@100=)', {
                pullRequest: {
                    state: {
                        '=': [
                            ['closed'],
                            ['merged'],
                        ]
                    },
                    repository: {
                        '+': true,
                        name: {},
                        private: {},
                    },
                    updateTime: {
                        '+': false,
                    },
                    _num: {
                        '=': [['0', '100']],
                    },
                },
            });
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Word making'() {
            $mol_assert_ok($mol_spell_ru.test('пил'));
            $mol_assert_ok($mol_spell_ru.test('пила'));
            $mol_assert_ok($mol_spell_ru.test('запил'));
            $mol_assert_ok($mol_spell_ru.test('завопил'));
            $mol_assert_ok($mol_spell_ru.test('пилил'));
            $mol_assert_ok($mol_spell_ru.test('пилоел'));
            $mol_assert_ok($mol_spell_ru.test('недоперепилоперенедоела'));
        },
        'Wrong words'() {
            $mol_assert_not($mol_spell_ru.test('недперепила'));
            $mol_assert_not($mol_spell_ru.test('недоbook'));
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_test({
        'Known language'() {
            $mol_assert_ok($mol_spell_any.test('пила'));
        },
        'Unknown language'() {
            $mol_assert_not($mol_spell_any.test('пиri'));
        },
    });
})($ || ($ = {}));


//# sourceMappingURL=node.test.js.map
