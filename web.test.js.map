{"version":3,"sources":["../../../mol/test/test.test.ts","../../../mol/test/test.web.test.ts","../../../mol/jsx/jsx.test.tsx","../../../mol/range2/range2.test.ts","../../../mol/compare/deep/deep.test.tsx","../../../mol/assert/assert.test.ts","../../../mol/log3/log3.test.ts","../../../mol/func/name/name.test.ts","../../../mol/delegate/delegate.test.ts","../../../mol/object/object.test.ts","../../../mol/wire/pub/sub/sub.test.ts","../../../mol/after/mock/mock.test.ts","../../../mol/after/frame/frame.test.ts","../../../mol/wire/fiber/fiber.test.ts","../../../mol/after/timeout/timeout.test.ts","../../../mol/wire/sync/sync.test.ts","../../../mol/wire/async/async.test.ts","../../../mol/wire/solo/solo.test.ts","../../../mol/wire/plex/plex.test.ts","../../../mol/wire/probe/probe.test.ts","../../../mol/key/key.test.tsx","../../../mol/fail/log/log.test.ts","../../../mol/wire/atom/atom.test.ts","../../../mol/after/tick/tick.test.ts","../../../mol/maybe/maybe.test.ts","../../../mol/wrapper/wrapper.test.ts","../../../mol/memo/memo.test.ts","../../../mol/const/const.test.ts","../../../mol/view/view/view.test.ts","../../../mol/style/sheet/sheet.test.ts","../../../mol/state/local/local.test.ts","../../../mol/state/local/local.mock.test.ts","../../../mol/charset/decode/decode.test.ts","../../../mol/charset/encode/encode.test.ts","../../../mol/locale/locale.test.ts","../../../mol/button/button.test.ts","../../../mol/regexp/regexp.test.ts","../../../mol/dimmer/dimmer.test.ts","../../../mol/state/arg/arg.web.test.ts","../../../mol/data/setup/setup.test.ts","../../../mol/error/mix/mix.test.ts","../../../mol/data/enum/enum.test.ts","../../../mol/base64/encode/encode.test.ts","../../../mol/base64/decode/decode.test.ts","../../../mol/crypto/auditor/auditor.web.test.ts","../../../hyoo/crowd/unit/unit.test.ts","../../../mol/reconcile/reconcile.test.tsx","../../../hyoo/crowd/tokenizer/tokenizer.test.ts","../../../mol/dict/dict.test.tsx","../../../hyoo/crowd/clock/clock.test.ts","../../../hyoo/crowd/world/world.test.ts","../../../hyoo/crowd/land/land.test.ts","../../../hyoo/crowd/list/list.test.ts","../../../hyoo/crowd/text/text.test.ts","../../../hyoo/crowd/blob/blob.test.ts","../../../mol/time/duration/duration.test.ts","../../../mol/time/moment/moment.test.ts","../../../hyoo/sync/masters/masters.test.ts","../../../mol/syntax2/md/md.test.ts","../../../mol/state/session/session.test.ts","../../../mol/try/try.test.ts","../../../hyoo/marked/line/line.test.ts","../../../hyoo/marked/flow/flow.test.ts","../../../mol/si/short/short.test.ts","../../../mol/crypto/hash/hash.test.ts","../../../mol/crypto/salt/salt.ts","../../../mol/base64/ae/ae.ts","../../../mol/buffer/buffer.ts","../../../mol/crypto/key/key.ts","../../../mol/crypto/key/key.web.test.ts","../../../mol/crypto/secret/secret.test.ts","../../../mol/after/work/work.test.ts","../../../mol/db/store/store.test.ts","../../../mol/db/db.test.ts","../../../mol/db/index/index.test.ts","../../../hyoo/sync/client/client.test.ts","../../../mol/compare/text/text.test.ts","../../../mol/func/is/class/class.test.ts","../../../mol/span/span.test.ts","../../../mol/tree2/from/string/string.test.ts","../../../mol/tree2/tree2.test.ts","../../../mol/wire/field/field.test.ts","../../../mol/wire/let/let.test.ts","../../../mol/wire/set/set.test.ts","../../../mol/wire/dict/dict.test.ts","../../../mol/view/tree2/prop/parts.test.ts","../../../mol/view/tree2/class/props.test.ts","../../../mol/data/pipe/pipe.test.ts","../../../mol/tree2/js/to/text/text.test.ts","../../../mol/tree2/from/json/json.test.ts","../../../mol/tree2/to/json/json.test.ts","../../../mol/vlq/vlq.test.ts","../../../mol/tree2/text/to/sourcemap/sourcemap.test.ts","../../../mol/leb128/leb128.test.ts","../../../mol/wasm/wasm.test.ts","../../../mol/tree2/wasm/to/bin/bin.test.ts","../../../mol/view/tree2/to/locale/locale.test.ts","../../../mol/jack/jack.test.ts","../../../mol/tree2/wasm/to/bytes/bytes.ts","../../../mol/tree2/wasm/to/module/module.ts","../../../mol/diff/path/path.test.ts","../../../mol/view/tree2/to/js/test/ex/array_slot.view.tree","../../../mol/view/tree2/to/js/test/ex/simple_nan.view.tree","../../../mol/view/tree2/to/js/test/ex/structural.view.tree","../../../mol/view/tree2/to/js/test/ex/array_union.view.tree","../../../mol/view/tree2/to/js/test/ex/array_number.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_indexed.view.tree","../../../mol/view/tree2/to/js/test/ex/array_boolean.view.tree","../../../mol/view/tree2/to/js/test/ex/array_indexed.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_chaining.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_fallback.view.tree","../../../mol/view/tree2/to/js/test/ex/left_chaining.view.tree","../../../mol/view/tree2/to/js/test/ex/right_indexed.view.tree","../../../mol/view/tree2/to/js/test/ex/simple_string.view.tree","../../../localized_string","../../../mol/view/tree2/to/js/test/ex/left_read_only.view.tree","../../../mol/view/tree2/to/js/test/ex/right_hierarchy.view.tree","../../../mol/view/tree2/to/js/test/ex/right_read_only.view.tree","../../../mol/view/tree2/to/js/test/ex/structural_dict.view.tree","../../../mol/view/tree2/to/js/test/ex/array_with_types.view.tree","../../../mol/view/tree2/to/js/test/ex/array_inheritance.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_legacy_value.view.tree","../../../mol/view/tree2/to/js/test/ex/simple_typed_null.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_in_dictionary.view.tree","../../../mol/view/tree2/to/js/test/ex/right_in_left_bind.view.tree","../../../mol/view/tree2/to/js/test/ex/simple_empty_class.view.tree","../../../mol/view/tree2/to/js/test/ex/simple_two_classes.view.tree","../../../mol/view/tree2/to/js/test/ex/simple_factory_props.view.tree","../../../mol/view/tree2/to/js/test/ex/simple_default_indexed.view.tree","../../../mol/view/tree2/to/js/test/ex/structural_complex_key.view.tree","../../../mol/view/tree2/to/js/test/ex/array_constructor_tuple.view.tree","../../../mol/view/tree2/to/js/test/ex/left_second_level_index.view.tree","../../../mol/view/tree2/to/js/test/ex/structural_quoted_props.view.tree","../../../mol/view/tree2/to/js/test/ex/structural_spread_other.view.tree","../../../mol/view/tree2/to/js/test/ex/array_of_array_or_object.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_localized_in_object.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_with_default_object.view.tree","../../../mol/view/tree2/to/js/test/ex/left_in_array_and_object.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_indexed_second_level.view.tree","../../../mol/view/tree2/to/js/test/ex/array_spread_other_channel.view.tree","../../../mol/view/tree2/to/js/test/ex/structural_with_inheritance.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_localized_default_value.view.tree","../../../mol/view/tree2/to/js/test/ex/simple_mutable_and_read_only.view.tree","../../../mol/view/tree2/to/js/test/ex/structural_localized_prop_value.view.tree","../../../mol/view/tree2/to/js/test/ex/left_with_separate_default_and_comment.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_with_separate_default_in_right_part.view.tree","../../../mol/view/tree2/to/js/test/ex/bidi_doubing_right_part_with_same_default.view.tree","../../../mol/view/tree2/to/js/test/ex/klass.ts","../../../mol/view/tree2/to/js/test/ex/right_hierarchy_bar.ts","../../../mol/view/tree2/to/js/test/run.test.ts","../../../mol/view/tree2/to/js/test/js.bidi.test.ts","../../../mol/view/tree2/to/js/test/js.left.test.ts","../../../mol/view/tree2/to/js/test/js.array.test.ts","../../../mol/view/tree2/to/js/test/js.right.test.ts","../../../mol/view/tree2/to/js/test/js.simple.test.ts","../../../mol/view/tree2/to/js/test/js.structural.test.ts","../../../mol/array/chunks/chunks.test.ts","../../../mol/array/trim/trim.test.ts","../../../mol/time/interval/interval.test.ts","../../../mol/vector/vector.test.ts","../../../mol/csv/csv.test.ts","../../../mol/data/number/number.test.ts","../../../mol/data/array/array.test.ts","../../../mol/data/boolean/boolean.test.ts","../../../mol/data/const/const.test.ts","../../../mol/data/dict/dict.test.ts","../../../mol/data/string/string.test.ts","../../../mol/data/pattern/pattern.test.ts","../../../mol/data/email/email.test.ts","../../../mol/data/instance/instance.test.ts","../../../mol/data/integer/integer.test.ts","../../../mol/data/tagged/tagged.test.ts","../../../mol/data/nominal/nominal.test.ts","../../../mol/data/nullable/nullable.test.ts","../../../mol/data/optional/optional.test.ts","../../../mol/data/range/range.test.ts","../../../mol/data/record/record.test.ts","../../../mol/data/variant/variant.test.ts","../../../mol/unit/unit.test.ts","../../../mol/mutable/mutable.test.ts","../../../hyoo/harp/to/string/string.ts","../../../hyoo/harp/harp.test.ts","../../../mol/spell/ru/ru.test.ts","../../../mol/spell/any/any.test.ts"],"names":[],"mappings":"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","sourcesContent":["namespace $ {\n\n\texport function $mol_test( set : { [ name : string ] : string | ( ( context : $ )=> void ) } ) {\n\t\t\n\t\tfor( let name in set ) {\n\n\t\t\tconst code = set[ name ]\n\t\t\tconst test = ( typeof code === 'string' ) ? new Function( '' , code ) as ()=> void : code\n\t\t\t\n\t\t\t$mol_test_all.push( test )\n\t\t}\n\n\t\t$mol_test_schedule()\n\t}\n\n\texport let $mol_test_mocks = [] as Array< ( context : $ )=> void >\n\n\texport const $mol_test_all = [] as Array< ( context : $ )=> any >\n\n\texport async function $mol_test_run() {\n\n\t\tfor( var test of $mol_test_all ) {\n\n\t\t\tlet context = Object.create( $$ )\n\t\t\tfor( let mock of $mol_test_mocks ) await mock( context )\n\t\t\t\n\t\t\tconst res = test( context )\n\t\t\tif( $mol_promise_like( res ) ) {\n\t\t\t\tawait new Promise( ( done, fail )=> {\n\t\t\t\t\tres.then( done, fail )\n\t\t\t\t\tsetTimeout( ()=> fail( new Error( 'Test timeout: ' + test.name ) ), 1000 )\n\t\t\t\t} )\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t$$.$mol_log3_done({\n\t\t\tplace: '$mol_test',\n\t\t\tmessage: 'All tests passed',\n\t\t\tcount: $mol_test_all.length,\n\t\t})\n\t\t\n\t}\n\t\n\tlet scheduled = false\n\texport function $mol_test_schedule() {\n\n\t\tif( scheduled ) return\n\t\tscheduled = true\n\n\t\tsetTimeout( async ()=> {\n\t\t\t\n\t\t\tscheduled = false\n \t\t\t\n\t\t\tawait $mol_test_run()\n\t\t\t$$.$mol_test_complete()\n\t\t\t\n\t\t} , 1000 )\n\t\t\n\t}\n\n\t$mol_test_mocks.push( context => {\n\t\tlet seed = 0\n\n\t\tcontext.Math = Object.create( Math )\n\t\tcontext.Math.random = ()=> Math.sin( seed++ )\n\n\t\tconst forbidden = [ 'XMLHttpRequest' , 'fetch' ] as const\n\n\t\tfor( let api of forbidden ) {\n\t\t\tcontext[ api ] = new Proxy( function(){} as any , {\n\t\t\t\tget() {\n\t\t\t\t\t$mol_fail_hidden( new Error( `${ api } is forbidden in tests` ) )\n\t\t\t\t} ,\n\t\t\t\tapply() {\n\t\t\t\t\t$mol_fail_hidden( new Error( `${ api } is forbidden in tests` ) )\n\t\t\t\t} ,\n\t\t\t} )\n\t\t}\n\t\t\n\t} )\n\n\t$mol_test({\n\n\t\t'mocked Math.random'( $ ) {\n\t\t\tconsole.assert( $.Math.random() === 0 )\n\t\t\tconsole.assert( $.Math.random() === Math.sin(1) )\n\t\t} ,\n\n\t\t'forbidden XMLHttpRequest'( $ ) {\n\t\t\ttry {\n\t\t\t\tconsole.assert( void new $.XMLHttpRequest )\n\t\t\t} catch( error: any ) {\n\t\t\t\tconsole.assert( error.message === 'XMLHttpRequest is forbidden in tests' )\n\t\t\t}\n\t\t} ,\n\n\t\t'forbidden fetch'( $ ) {\n\t\t\ttry {\n\t\t\t\tconsole.assert( void $.fetch('') )\n\t\t\t} catch( error: any ) {\n\t\t\t\tconsole.assert( error.message === 'fetch is forbidden in tests' )\n\t\t\t}\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\t\n\texport function $mol_test_complete() {\n\t}\n\t\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'Make empty div'() {\n\t\t\t$mol_assert_equal( (<div/>).outerHTML , '<div></div>' )\n\t\t} ,\n\t\t\n\t\t'Define native field'() {\n\t\t\t\n\t\t\tconst dom = <input value='123' /> as HTMLInputElement\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<input value=\"123\">' )\n\t\t\t$mol_assert_equal( dom.value, '123' )\n\n\t\t} ,\n\t\t\n\t\t'Define classes'() {\n\t\t\t\n\t\t\tconst dom = <div class={ 'foo bar' } />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div class=\"foo bar\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define styles'() {\n\t\t\t\n\t\t\tconst dom = <div style={{ color: 'red' }} />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div style=\"color: red;\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define dataset'() {\n\t\t\t\n\t\t\tconst dom = <div dataset={{ foo: 'bar' }} />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div data-foo=\"bar\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define attributes'() {\n\t\t\t\n\t\t\tconst dom = <div lang=\"ru\" hidden />\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div lang=\"ru\" hidden=\"\"></div>' )\n\n\t\t} ,\n\t\t\n\t\t'Define child nodes'() {\n\n\t\t\tconst dom =\n\t\t\t\t<div>\n\t\t\t\t\thello\n\t\t\t\t\t<strong>world</strong>\n\t\t\t\t\t!\n\t\t\t\t</div>\n\t\t\t\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div>hello<strong>world</strong>!</div>' )\n\n\t\t} ,\n\n\t\t'Function as component'() {\n\n\t\t\tconst Button = (\n\t\t\t\tprops: { hint: string },\n\t\t\t\ttarget: ()=> string,\n\t\t\t) => {\n\t\t\t\treturn <button title={ props.hint } >{ target() }</button>\n\t\t\t}\n\n\t\t\tconst dom = <Button id=\"foo\" hint=\"click me\">{ ()=> 'hey!' }</Button>\n\n\t\t\t$mol_assert_equal( dom.outerHTML, '<button id=\"foo\" title=\"click me\" class=\"Button\">hey!</button>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Nested guid generation'() {\n\n\t\t\tconst Foo = ()=> {\n\t\t\t\treturn <div>\n\t\t\t\t\t<Bar id=\"bar\">\n\t\t\t\t\t\t<img id=\"icon\" />\n\t\t\t\t\t</Bar>\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\tconst Bar = ( props: {}, icon: Element )=> {\n\t\t\t\treturn <span>{ icon }<i id=\"label\"/></span>\n\t\t\t}\n\n\t\t\tconst dom = <Foo id=\"foo\" />\n\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div id=\"foo\" class=\"Foo\"><span id=\"foo/bar\" class=\"Foo_bar Bar\"><img id=\"foo/icon\" class=\"Foo_icon\"><i id=\"foo/bar/label\" class=\"Foo_bar_label Bar_label\"></i></span></div>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Fail on non unique ids'() {\n\n\t\t\tconst App = ()=> {\n\t\t\t\treturn <div>\n\t\t\t\t\t<span id=\"bar\" />\n\t\t\t\t\t<span id=\"bar\" />\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\t$mol_assert_fail( ()=> <App id=\"foo\" />, 'JSX already has tag with id \"foo/bar\"' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Owner based guid generationn'() {\n\n\t\t\tconst Foo = ()=> {\n\t\t\t\treturn <div>\n\t\t\t\t\t<Bar id=\"middle\" icon={ ()=> <img id=\"icon\" /> } />\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\tconst Bar = ( props: { icon: ()=> Element } )=> {\n\t\t\t\treturn <span>{ props.icon() }</span>\n\t\t\t}\n\n\t\t\tconst dom = <Foo id=\"app\" />\n\n\t\t\t$mol_assert_equal( dom.outerHTML, '<div id=\"app\" class=\"Foo\"><span id=\"app/middle\" class=\"Foo_middle Bar\"><img id=\"app/icon\" class=\"Foo_icon\"></span></div>' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Fail on same ids from different caller'() {\n\n\t\t\tconst Foo = ()=> {\n\t\t\t\treturn <div>\n\t\t\t\t\t<img id=\"icon\" />\n\t\t\t\t\t<Bar id=\"bar\" icon={ ()=> <img id=\"icon\" /> } />\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t\tconst Bar = ( props: { icon: ()=> Element } )=> {\n\t\t\t\treturn <span>{ props.icon() }</span>\n\t\t\t}\n\n\t\t\t$mol_assert_fail( ()=> <Foo id=\"foo\" />, 'JSX already has tag with id \"foo/icon\"' )\n\t\t\t\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'lazy calls'() {\n\n\t\t\tlet calls = 0\n\t\t\t\n\t\t\tconst list = $mol_range2( index => ( ++ calls , index ) , ()=> 10 )\n\n\t\t\t$mol_assert_equal( true, list instanceof Array )\n\t\t\t$mol_assert_equal( list.length , 10 )\n\n\t\t\t$mol_assert_equal( list[-1] , undefined )\n\t\t\t$mol_assert_equal( list[0] , 0 )\n\t\t\t$mol_assert_equal( list[9] , 9 )\n\t\t\t$mol_assert_equal( list[9.5] , undefined )\n\t\t\t$mol_assert_equal( list[10] , undefined )\n\n\t\t\t$mol_assert_equal( calls , 2 )\n\n\t\t} ,\n\n\t\t'infinity list'() {\n\n\t\t\tlet calls = 0\n\t\t\t\n\t\t\tconst list = $mol_range2( index => ( ++ calls , index ) )\n\n\t\t\t$mol_assert_equal( list.length , Number.POSITIVE_INFINITY )\n\n\t\t\t$mol_assert_equal( list[0] , 0 )\n\t\t\t$mol_assert_equal( list[4] , 4 )\n\t\t\t$mol_assert_equal( list[Number.MAX_SAFE_INTEGER] , Number.MAX_SAFE_INTEGER )\n\t\t\t$mol_assert_equal( list[Number.POSITIVE_INFINITY] , undefined )\n\t\t\t\n\t\t\t$mol_assert_equal( calls , 3 )\n\n\t\t} ,\n\n\t\t'stringify'() {\n\n\t\t\tconst list = $mol_range2( i => i , ()=> 5 )\n\n\t\t\t$mol_assert_equal( list.toString() , '0,1,2,3,4' )\n\t\t\t$mol_assert_equal( list.join(';') , '0;1;2;3;4' )\n\n\t\t} ,\n\n\t\t'for-of'() {\n\n\t\t\tlet log = ''\n\n\t\t\tfor( let i of $mol_range2( i => i + 1 , ()=> 5 ) ) {\n\t\t\t\tlog += i\n\t\t\t}\n\n\t\t\t$mol_assert_equal( log , '12345' )\n\n\t\t} ,\n\n\t\t'for-in'() {\n\n\t\t\tlet log = ''\n\n\t\t\tfor( let i in $mol_range2( i => i , ()=> 5 ) ) {\n\t\t\t\tlog += i\n\t\t\t}\n\n\t\t\t$mol_assert_equal( log , '01234' )\n\n\t\t} ,\n\n\t\t'forEach'() {\n\n\t\t\tlet log = ''\n\n\t\t\t$mol_range2( i => i , ()=> 5 ).forEach( i => log += i )\n\n\t\t\t$mol_assert_equal( log , '01234' )\n\n\t\t} ,\n\n\t\t'reduce'() {\n\n\t\t\tlet calls = 0\n\t\t\t\n\t\t\tconst list = $mol_range2().slice( 1 , 6 )\n\n\t\t\t$mol_assert_equal( list.reduce( ( s , v )=> s + v ) , 15 )\n\t\t\t$mol_assert_equal( list.reduce( ( s , v )=> s + v , 5 ) , 20 )\n\n\t\t} ,\n\n\t\t'lazy concat'() {\n\n\t\t\tlet calls1 = 0\n\t\t\tlet calls2 = 0\n\t\t\t\n\t\t\tconst list = $mol_range2( index => ( ++ calls1 , index ) , ()=> 5 ).concat(\n\t\t\t\t[ 0 , 1 , 2 , 3 , 4 ] ,\n\t\t\t\t$mol_range2( index => ( ++ calls2 , index ) , ()=> 5 ) ,\n\t\t\t)\n\n\t\t\t$mol_assert_equal( true, list instanceof Array )\n\t\t\t$mol_assert_equal( list.length , 15 )\n\n\t\t\t$mol_assert_equal( list[0] , 0 )\n\t\t\t$mol_assert_equal( list[4] , 4 )\n\t\t\t$mol_assert_equal( list[5] , 0 )\n\t\t\t$mol_assert_equal( list[9] , 4 )\n\t\t\t$mol_assert_equal( list[10] , 0 )\n\t\t\t$mol_assert_equal( list[14] , 4 )\n\t\t\t$mol_assert_equal( list[15] , undefined )\n\t\t\t\n\t\t\t$mol_assert_equal( calls1 , 2 )\n\t\t\t$mol_assert_equal( calls2 , 2 )\n\n\t\t} ,\n\n\t\t'lazy filter'() {\n\n\t\t\tlet calls = 0\n\t\t\t\n\t\t\tconst list = $mol_range2( index => ( ++ calls , index ) , ()=> 15 ).filter( v => v % 2 ).slice( 0 , 3 )\n\n\t\t\t$mol_assert_equal( true, list instanceof Array )\n\t\t\t$mol_assert_equal( list.length , 3 )\n\n\t\t\t$mol_assert_equal( list[0] , 1 )\n\t\t\t$mol_assert_equal( list[2] , 5 )\n\t\t\t$mol_assert_equal( list[3] , undefined )\n\t\t\t\n\t\t\t$mol_assert_equal( calls , 8 )\n\n\t\t} ,\n\n\t\t'lazy reverse'() {\n\t\t\tlet calls = 0\n\n\t\t\tconst list = $mol_range2( index => ( ++ calls , index ) , ()=> 10 ).toReversed().slice(0, 3)\n\n\t\t\t$mol_assert_equal( true, list instanceof Array )\n\t\t\t$mol_assert_equal( list.length , 3 )\n\n\t\t\t$mol_assert_equal( list[0] , 9 )\n\t\t\t$mol_assert_equal( list[2] , 7 )\n\t\t\t$mol_assert_equal( list[3] , undefined )\n\t\t\t$mol_assert_equal( calls , 2 )\n\n\t\t} ,\n\n\t\t'lazy map'() {\n\n\t\t\tlet calls1 = 0\n\t\t\tlet calls2 = 0\n\t\t\t\n\t\t\tconst source = $mol_range2( index => ( ++ calls1 , index ) , ()=> 5 )\n\t\t\tconst target = source.map(\n\t\t\t\t( item , index , self )=> {\n\t\t\t\t\t++ calls2\n\t\t\t\t\t$mol_assert_equal( source , self )\n\t\t\t\t\treturn index + 10\n\t\t\t\t} ,\n\t\t\t\t()=> 5 ,\n\t\t\t)\n\n\t\t\t$mol_assert_equal( true, target instanceof Array )\n\t\t\t$mol_assert_equal( target.length , 5 )\n\n\t\t\t$mol_assert_equal( target[0] , 10 )\n\t\t\t$mol_assert_equal( target[4] , 14 )\n\t\t\t$mol_assert_equal( target[5] , undefined )\n\t\t\t\n\t\t\t$mol_assert_equal( calls1 , 2 )\n\t\t\t$mol_assert_equal( calls2 , 2 )\n\n\t\t} ,\n\n\t\t'lazy slice'() {\n\n\t\t\tlet calls = 0\n\t\t\t\n\t\t\tconst list = $mol_range2( index => ( ++ calls , index ) , ()=> 10 ).slice( 3 , 7 )\n\n\t\t\t$mol_assert_equal( true, list instanceof Array )\n\t\t\t$mol_assert_equal( list.length , 4 )\n\n\t\t\t$mol_assert_equal( list[0] , 3 )\n\t\t\t$mol_assert_equal( list[3] , 6 )\n\t\t\t$mol_assert_equal( list[4] , undefined )\n\t\t\t\n\t\t\t$mol_assert_equal( calls , 2 )\n\n\t\t} ,\n\n\t\t'lazy some'() {\n\n\t\t\tlet calls = 0\n\t\t\t\n\t\t\t$mol_assert_equal( true, $mol_range2( index => ( ++ calls , index ) , ()=> 5 ).some( v => v >= 2 ) )\n\n\t\t\t$mol_assert_equal( calls , 3 )\n\n\t\t\t$mol_assert_equal( false, $mol_range2( i => i , ()=> 0 ).some( v => true ) )\n\t\t\t$mol_assert_equal( true, $mol_range2( i => i ).some( v => v > 5 ) )\n\t\t} ,\n\n\t\t'lazy every'() {\n\n\t\t\tlet calls = 0\n\t\t\t\n\t\t\t$mol_assert_equal( false, $mol_range2( index => ( ++ calls , index ) , ()=> 5 ).every( v => v < 2 ) )\n\n\t\t\t$mol_assert_equal( calls , 3 )\n\n\t\t\t$mol_assert_equal( true, $mol_range2( i => i , ()=> 0 ).every( v => false ) )\n\t\t\t$mol_assert_equal( false, $mol_range2( i => i ).every( v => v < 5 ) )\n\t\t} ,\n\n\t\t'lazyfy'() {\n\n\t\t\tlet calls = 0\n\t\t\t\n\t\t\tconst list = $mol_range2([ 0 , 1 , 2 , 3 , 4 , 5 ]).map( i => ( ++ calls , i + 10 ) ).slice( 2 )\n\n\t\t\t$mol_assert_equal( true, list instanceof Array )\n\t\t\t$mol_assert_equal( list.length , 4 )\n\n\t\t\t$mol_assert_equal( calls , 0 )\n\t\t\t\n\t\t\t$mol_assert_equal( list[0] , 12 )\n\t\t\t$mol_assert_equal( list[3] , 15 )\n\t\t\t$mol_assert_equal( list[4] , undefined )\n\t\t\t\n\t\t\t$mol_assert_equal( calls , 2 )\n\n\t\t} ,\n\n\t\t'prevent modification'() {\n\n\t\t\tconst list = $mol_range2( i => i , ()=> 5 )\n\n\t\t\t$mol_assert_fail( ()=> list.push( 4 ) , TypeError )\n\t\t\t$mol_assert_fail( ()=> list.pop() , TypeError )\n\t\t\t\n\t\t\t$mol_assert_fail( ()=> list.unshift( 4 ) , TypeError )\n\t\t\t$mol_assert_fail( ()=> list.shift() , TypeError )\n\t\t\t\n\t\t\t$mol_assert_fail( ()=> list.splice( 1 , 2 ) , TypeError )\n\t\t\t$mol_assert_fail( ()=> list[ 1 ] = 2 , TypeError )\n\t\t\t\n\t\t\t$mol_assert_fail( ()=> list.reverse() , TypeError )\n\t\t\t$mol_assert_fail( ()=> list.sort() , TypeError )\n\n\t\t\t$mol_assert_equal( list.toString() , '0,1,2,3,4' )\n\n\t\t}\n\n\t})\n\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\n\t$mol_test({\n\n\t\t'nulls & undefineds'() {\n\n\t\t\t$mol_assert_ok( $mol_compare_deep( null , null ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( undefined , undefined ) )\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep( undefined , null ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( {} , null ) )\n\t\t\t\n\t\t} ,\n\n\t\t'number'() {\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_compare_deep( 1 , 1 ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( Number.NaN , Number.NaN ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( 1 , 2 ) )\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_compare_deep( Object( 1 ) , Object( 1 ) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( Object( 1 ) , Object( 2 ) ) )\n\t\t\t\n\t\t} ,\n\n\t\t'POJO'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( {} , {} ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( { a : 1 } , { b : 2 } ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( { a : 1 } , { a : 2 } ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( {} , { a : undefined } ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( { a: 1, b: 2 } , { b: 2, a: 1 } ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( { a : { b : 1 } } , { a : { b : 1 } } ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( Object.create(null), Object.create(null) ) )\n\t\t} ,\n\n\t\t'Array'() {\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_compare_deep( [] , [] ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( [ 1 , [2] ] , [ 1 , [2] ] ) )\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep( [ 1 , 2 ] , [ 1 , 3 ] ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( [ 1 , 2 , ] , [ 1 , 3 , undefined ] ) )\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep( $mol_range2().slice(0,0), new Array() ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( $mol_range2(), $mol_range2() ) )\n\t\t\t\n\t\t} ,\n\n\t\t'Non POJO are different'() {\n\t\t\t\n\t\t\tclass Thing extends Object {}\n\t\t\t$mol_assert_not( $mol_compare_deep( new Thing , new Thing ) )\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep( ()=> 1 , ()=>1 ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new RangeError( 'Test error' ) , new RangeError( 'Test error' ) ) )\n\t\t\t\n\t\t} ,\n\n\t\t'POJO with symbols'() {\n\t\t\tconst sym = Symbol()\n\t\t\t$mol_assert_ok( $mol_compare_deep( { [ sym ]: true }, { [ sym ]: true } ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( { [ Symbol() ]: true }, { [ Symbol() ]: true } ) )\n\t\t} ,\n\n\t\t'same POJOs with cyclic reference'() {\n\n\t\t\tconst a = { foo : {} }\n\t\t\t;(a as any)['self'] = a\n\n\t\t\tconst b = { foo : {} }\n\t\t\t;(b as any)['self'] = b\n\n\t\t\t$mol_assert_ok( $mol_compare_deep( a , b ) )\n\n\t\t} ,\n\n\t\t'Date'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Date( 12345 ) , new Date( 12345 ) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Date( 12345 ) , new Date( 12346 ) ) )\n\t\t} ,\n\n\t\t'RegExp'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( /\\x22/mig , /\\x22/mig ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( /\\x22/mig , /\\x21/mig ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( /\\x22/mig , /\\x22/mg ) )\n\t\t} ,\n\n\t\t'Error'() {\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep( new Error( 'xxx' ) , new Error( 'xxx' ) ) )\n\n\t\t\tconst fail = ( message: string )=> new Error( message )\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_compare_deep(\n\t\t\t\t... [ 'xxx' , 'xxx' ].map( msg => new Error( msg ) ) as [ Error, Error ]\n\t\t\t) )\n\t\t\t\n\t\t\t$mol_assert_not( $mol_compare_deep(\n\t\t\t\t... [ 'xxx' , 'yyy' ].map( msg => new Error( msg ) ) as [ Error, Error ]\n\t\t\t) )\n\t\t\t\n\t\t} ,\n\n\t\t'Map'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Map , new Map ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Map([ [ 1 , [2] ] ]) , new Map([ [ 1 , [2] ] ]) ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Map([ [ [1] , 2 ] ]) , new Map([ [ [1] , 2 ] ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Map([ [ 1 , 2 ] ]) , new Map([ [ 1 , 3 ] ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Map([ [ [1] , 2 ] ]) , new Map([ [ [3] , 2 ] ]) ) )\n\t\t} ,\n\t\t\n\t\t'Set'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Set , new Set ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Set([ 1 , [2] ]) , new Set([ 1 , [2] ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Set([ 1 ]) , new Set([ 2 ]) ) )\n\t\t} ,\n\t\t\n\t\t'Uint8Array'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Uint8Array , new Uint8Array ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new Uint8Array([ 0 ]) , new Uint8Array([ 0 ]) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new Uint8Array([ 0 ]) , new Uint8Array([ 1 ]) ) )\n\t\t} ,\n\t\t\n\t\t'DataView'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new DataView( new Uint8Array().buffer ) , new DataView( new Uint8Array().buffer ) ) )\n\t\t\t$mol_assert_ok( $mol_compare_deep( new DataView( new Uint8Array([ 0 ]).buffer ) , new DataView( new Uint8Array([ 0 ]).buffer ) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new DataView( new Uint8Array([ 0 ]). buffer ) , new DataView( new Uint8Array([ 1 ]).buffer ) ) )\n\t\t} ,\n\t\t\n\t\t'Serializale'() {\n\t\t\t\n\t\t\tclass User {\n\t\t\t\t\n\t\t\t\tconstructor(\n\t\t\t\t\treadonly name: string,\n\t\t\t\t\treadonly rand = Math.random(),\n\t\t\t\t) {}\n\t\t\t\t\n\t\t\t\t[ Symbol.toPrimitive ]( mode: 'default' | 'number' | 'string' ) {\n\t\t\t\t\treturn this.name\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_compare_deep( new User( 'Jin' ), new User( 'Jin' ) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new User( 'Jin' ), new User( 'John' ) ) )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'Iterable'() {\n\t\t\t$mol_assert_ok( $mol_compare_deep( new URLSearchParams({ foo: 'bar' }), new URLSearchParams({ foo: 'bar' }) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new URLSearchParams({ foo: 'xxx' }), new URLSearchParams({ foo: 'yyy' }) ) )\n\t\t\t$mol_assert_not( $mol_compare_deep( new URLSearchParams({ foo: 'xxx', bar: 'yyy' }), new URLSearchParams({ bar: 'yyy', foo: 'xxx' }) ) )\n\t\t} ,\n\t\t\n\t})\n\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'must be false'() {\n\t\t\t$mol_assert_not( 0 )\n\t\t} ,\n\t\t\n\t\t'must be true'() {\n\t\t\t$mol_assert_ok( 1 )\n\t\t} ,\n\t\t\n\t\t'two must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'three must be equal'() {\n\t\t\t$mol_assert_equal( 2 , 2 , 2 )\n\t\t} ,\n\t\t\n\t\t'two must be unique'() {\n\t\t\t$mol_assert_unique( [ 2 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'three must be unique'() {\n\t\t\t$mol_assert_unique( [ 1 ] , [ 2 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'two must be alike'() {\n\t\t\t$mol_assert_like( [ 3 ] , [ 3 ] )\n\t\t} ,\n\t\t\n\t\t'three must be alike'() {\n\t\t\t$mol_assert_like( [ 3 ] , [ 3 ] , [ 3 ] )\n\t\t} ,\n\n\t\t'two object must be alike'() {\n\t\t\t$mol_assert_like( { a: 1 }, { a: 1 } )\n\t\t} ,\n\n\t\t'three object must be alike'() {\n\t\t\t$mol_assert_like( { a: 1 }, { a: 1 }, { a: 1 } )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_log3_come = ()=> {}\n\t\t$.$mol_log3_done = ()=> {}\n\t\t$.$mol_log3_fail = ()=> {}\n\t\t$.$mol_log3_warn = ()=> {}\n\t\t$.$mol_log3_rise = ()=> {}\n\t\t$.$mol_log3_area = ()=> ()=> {}\n\t} )\n\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'FQN of anon function'($) {\n\t\t\tconst $$ = Object.assign( $ , { $mol_func_name_test : ( ()=> ()=> {} )() } )\n\t\t\t$mol_assert_equal( $$.$mol_func_name_test.name , '' )\n\t\t\t$mol_assert_equal( $$.$mol_func_name( $$.$mol_func_name_test ) , '$mol_func_name_test' )\n\t\t\t$mol_assert_equal( $$.$mol_func_name_test.name , '$mol_func_name_test' )\n\t\t},\n\n\t})\n\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'get'() {\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> ({ foo : 777 }) )\n\t\t\t$mol_assert_equal( proxy.foo , 777 )\n\t\t},\n\n\t\t'has'() {\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> ({ foo : 777 }) )\n\t\t\t$mol_assert_equal( 'foo' in proxy , true )\n\t\t},\n\n\t\t'set'() {\n\t\t\tconst target = { foo : 777 }\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> target )\n\t\t\tproxy.foo = 123\n\t\t\t$mol_assert_equal( target.foo , 123 )\n\t\t},\n\t\t\n\t\t'getOwnPropertyDescriptor'() {\n\n\t\t\tconst proxy = $mol_delegate( {} as any , ()=> ({ foo : 777 }) )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tObject.getOwnPropertyDescriptor( proxy , 'foo' ),\n\t\t\t\t{\n\t\t\t\t\tvalue: 777,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'ownKeys'() {\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} as any ,\n\t\t\t\t()=> ({ foo : 777 , [ Symbol.toStringTag ] : 'bar' }),\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tReflect.ownKeys( proxy ),\n\t\t\t\t[ 'foo' , Symbol.toStringTag ],\n\t\t\t)\n\n\t\t},\n\n\t\t'getPrototypeOf'() {\n\n\t\t\tclass Foo {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} as any ,\n\t\t\t\t()=> new Foo,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tObject.getPrototypeOf( proxy ),\n\t\t\t\tFoo.prototype,\n\t\t\t)\n\n\t\t},\n\n\t\t'setPrototypeOf'() {\n\n\t\t\tclass Foo {}\n\t\t\tconst target = {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} ,\n\t\t\t\t()=> target,\n\t\t\t)\n\n\t\t\tObject.setPrototypeOf( proxy , Foo.prototype )\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tObject.getPrototypeOf( target ),\n\t\t\t\tFoo.prototype,\n\t\t\t)\n\n\t\t},\n\n\t\t'instanceof'() {\n\n\t\t\tclass Foo {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} ,\n\t\t\t\t()=> new Foo,\n\t\t\t)\n\n\t\t\t$mol_assert_ok( proxy instanceof Foo )\n\t\t\t$mol_assert_ok( proxy instanceof $mol_delegate )\n\n\t\t},\n\n\t\t'autobind'() {\n\n\t\t\tclass Foo {}\n\n\t\t\tconst proxy = $mol_delegate(\n\t\t\t\t{} ,\n\t\t\t\t()=> new Foo,\n\t\t\t)\n\n\t\t\t$mol_assert_ok( proxy instanceof Foo )\n\t\t\t$mol_assert_ok( proxy instanceof $mol_delegate )\n\n\t\t},\n\n\t})\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'init with overload'() {\n\t\t\tclass X extends $mol_object {\n\t\t\t\tfoo() {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = X.make({\n\t\t\t\tfoo : ()=> 2 ,\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( x.foo() , 2 )\n\t\t} ,\n\t\t\t\n\t} )\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Collect deps'() {\n\t\t\t\n\t\t\tconst pub1 = new $mol_wire_pub\n\t\t\tconst pub2 = new $mol_wire_pub\n\t\t\tconst sub = new $mol_wire_pub_sub\n\t\t\t\n\t\t\tconst bu1 = sub.track_on()\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tpub1.promote()\n\t\t\t\tpub2.promote()\n\t\t\t\tpub2.promote()\n\t\t\t\t\n\t\t\t} finally {\n\t\t\t\t\n\t\t\t\tsub.track_cut()\n\t\t\t\tsub.track_off( bu1 )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpub1.emit()\n\t\t\tpub2.emit()\n\t\t\t\n\t\t\t$mol_assert_like( sub.pub_list, [ pub1, pub2, pub2 ] )\n\t\t\t\n\t\t\tconst bu2 = sub.track_on()\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tpub1.promote()\n\t\t\t\tpub1.promote()\n\t\t\t\tpub2.promote()\n\t\t\t\t\n\t\t\t} finally {\n\t\t\t\t\n\t\t\t\tsub.track_cut()\n\t\t\t\tsub.track_off( bu2 )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tpub1.emit()\n\t\t\tpub2.emit()\n\t\t\t\n\t\t\t$mol_assert_like( sub.pub_list, [ pub1, pub1, pub2 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'cyclic detection'( $ ) {\n\t\t\t\n\t\t\tconst sub1 = new $mol_wire_pub_sub\n\t\t\tconst sub2 = new $mol_wire_pub_sub\n\t\t\t\n\t\t\tconst bu1 = sub1.track_on()\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tconst bu2 = sub2.track_on()\n\t\t\t\ttry {\n\t\t\t\t\t\n\t\t\t\t\t$mol_assert_fail( ()=> sub1.promote(), 'Circular subscription' )\n\t\t\t\t\t\n\t\t\t\t} finally {\n\t\t\t\t\t\n\t\t\t\t\tsub2.track_cut()\n\t\t\t\t\tsub2.track_off( bu2 )\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} finally {\n\t\t\t\t\n\t\t\t\tsub1.track_cut()\n\t\t\t\tsub1.track_off( bu1 )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t})\n}\n","namespace $ {\n\n\t/// @todo right orderinng\n\texport let $mol_after_mock_queue = [] as ( ()=> void )[]\n\n\texport function $mol_after_mock_warp() {\n\t\tconst queue = $mol_after_mock_queue.splice( 0 )\n\t\tfor( const task of queue ) task()\n\t}\n\n\texport class $mol_after_mock_commmon extends $mol_object2 {\n\n\t\tpromise = Promise.resolve()\n\t\tcancelled = false\n\t\tid : any\n\n\t\tconstructor( public task : ()=> void ) {\n\t\t\tsuper()\n\t\t\t$mol_after_mock_queue.push( task )\n\t\t}\n\n\t\tdestructor() {\n\t\t\tconst index = $mol_after_mock_queue.indexOf( this.task )\n\t\t\tif( index >= 0 )$mol_after_mock_queue.splice( index , 1 )\n\t\t}\n\n\t}\n\n\texport class $mol_after_mock_timeout extends $mol_after_mock_commmon {\n\n\t\tconstructor(\n\t\t\tpublic delay : number ,\n\t\t\ttask : ()=> void ,\n\t\t) {\n\t\t\tsuper( task )\n\t\t}\n\n\t}\n\t\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_after_frame = $mol_after_mock_commmon as any as typeof $mol_after_frame\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'Sync execution'() {\n\n\t\t\tclass Sync extends $mol_object2 {\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic calc( a: number, b: number ) {\n\t\t\t\t\treturn a + b\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( Sync.calc( 1, 2 ), 3 )\n\t\t\t\n\t\t},\n\n\t\tasync 'async <=> sync'() {\n\t\t\t\n\t\t\tclass SyncAsync extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic async val( a: number ) {\n\t\t\t\t\treturn a\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic sum( a: number, b: number ) {\n\t\t\t\t\tconst syn = $mol_wire_sync( this )\n\t\t\t\t\treturn syn.val( a ) + syn.val( b )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic async calc( a: number, b: number ) {\n\t\t\t\t\treturn 5 + await $mol_wire_async( this ).sum( a, b )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( await SyncAsync.calc( 1, 2 ), 8 )\n\n\t\t},\n\n\t\tasync 'Idempotence control'() {\n\n\t\t\tclass Idempotence extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic logs_idemp = 0\n\t\t\t\tstatic logs_unidemp = 0\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic log_idemp() {\n\t\t\t\t\tthis.logs_idemp += 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic log_unidemp() {\n\t\t\t\t\tthis.logs_unidemp += 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic async val( a: number ) {\n\t\t\t\t\treturn a\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic sum( a: number, b: number ) {\n\t\t\t\t\tthis.log_idemp()\n\t\t\t\t\tthis.log_unidemp()\n\t\t\t\t\tconst syn = $mol_wire_sync( this )\n\t\t\t\t\treturn syn.val( a ) + syn.val( b )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic async calc( a: number, b: number ) {\n\t\t\t\t\treturn 5 + await $mol_wire_async( this ).sum( a, b )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( await Idempotence.calc( 1, 2 ), 8 )\n\t\t\t$mol_assert_equal( Idempotence.logs_idemp, 1 )\n\t\t\t$mol_assert_equal( Idempotence.logs_unidemp, 3 )\n\n\t\t},\n\n\t\tasync 'Error handling'() {\n\t\t\t\n\t\t\tclass Handle extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic async sum( a: number, b: number ){\n\t\t\t\t\t$mol_fail( new Error( 'test error ' + ( a + b ) ) )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic check() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn $mol_wire_sync( Handle ).sum( 1, 2 )\n\t\t\t\t\t} catch( error: any ) {\n\t\t\t\t\t\tif( $mol_promise_like( error ) ) $mol_fail_hidden( error )\n\t\t\t\t\t\t$mol_assert_equal( error.message, 'test error 3' )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t\tawait $mol_wire_async( Handle ).check()\n\t\t\t\n\t\t},\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_after_timeout = $mol_after_mock_timeout as any as typeof $mol_after_timeout\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'test types'( $ ) {\n\t\t\tclass A {\n\t\t\t\tstatic a() {\n\t\t\t\t\treturn Promise.resolve('')\n\t\t\t\t}\n\n\t\t\t\tstatic b() {\n\t\t\t\t\treturn $mol_wire_sync(this).a()\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\ttype Check = $mol_type_assert<ReturnType<typeof A['b']>, string>\n\t\t},\n\t})\n\n}\n\n","namespace $ {\n\n\t$mol_test({\n\t\t'test types'( $ ) {\n\t\t\tclass A {\n\t\t\t\tstatic a() {\n\t\t\t\t\treturn ''\n\t\t\t\t}\n\t\t\t\tstatic b() {\n\t\t\t\t\treturn $mol_wire_async(this).a()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttype Check = $mol_type_assert<ReturnType<typeof A['b']>, Promise<string>>\n\t\t},\n\t\t\n\t\tasync 'Latest method calls wins'( $ ) {\n\t\t\t\n\t\t\tclass NameLogger extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\tstatic first = [] as string[]\n\t\t\t\tstatic last = [] as string[]\n\t\t\t\t\n\t\t\t\tstatic send( next: string ) {\n\t\t\t\t\t$mol_wire_sync( this.first ).push( next )\n\t\t\t\t\tthis.$.$mol_wait_timeout(0)\n\t\t\t\t\tthis.last.push( next )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tconst name = $mol_wire_async( NameLogger ).send\n\t\t\t\n\t\t\tname( 'john' )\n\t\t\tconst promise = name( 'jin' )\n\t\t\t\n\t\t\t$.$mol_after_mock_warp()\n\t\t\tawait promise\n\t\t\t\n\t\t\t$mol_assert_like( NameLogger.first, [ 'john', 'jin' ] )\n\t\t\t$mol_assert_like( NameLogger.last, [ 'jin' ] )\n\n\t\t},\n\n\t\tasync 'Latest function calls wins'( $ ) {\n\t\t\t\n\t\t\tconst first = [] as string[]\n\t\t\tconst last = [] as string[]\n\t\t\t\n\t\t\tfunction send_name( next: string ) {\n\t\t\t\t$mol_wire_sync( first ).push( next )\n\t\t\t\t$.$mol_wait_timeout(0)\n\t\t\t\tlast.push( next )\n\t\t\t}\n\t\t\t\n\t\t\tconst name = $mol_wire_async( send_name )\n\t\t\t\n\t\t\tname( 'john' )\n\t\t\tconst promise = name( 'jin' )\n\t\t\t\n\t\t\t$.$mol_after_mock_warp()\n\t\t\tawait promise\n\t\t\t\n\t\t\t$mol_assert_like( first, [ 'john', 'jin' ] )\n\t\t\t$mol_assert_like( last, [ 'jin' ] )\n\t\t\t\n\t\t},\n\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#component-states\n\t\t'Cached channel' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value( next = 1 ) {\n\t\t\t\t\treturn next + 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( App.value(), 2 )\n\n\t\t\tApp.value( 2 )\n\t\t\t$mol_assert_equal( App.value(), 3 )\n\n\t\t},\n\n\t\t'Read Pushed' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value( next = 0 ) {\n\t\t\t\t\treturn next\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( App.value( 1 ), 1 )\n\t\t\t$mol_assert_equal( App.value(), 1 )\n\n\t\t},\n\n\t\t'Mem overrides mem' ($) {\n\n\t\t\tclass Base extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value( next = 1 ) {\n\t\t\t\t\treturn next + 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tclass Middle extends Base {\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value( next?: number ) {\n\t\t\t\t\treturn super.value( next ) + 1\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t\tclass App extends Middle {\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value( next?: number ) {\n\t\t\t\t\treturn super.value( next ) * 3\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( App.value(), 9 )\n\t\t\t\n\t\t\t$mol_assert_equal( App.value( 5 ), 21 )\n\t\t\t$mol_assert_equal( App.value(), 21 )\n\n\t\t},\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-consistency\n\t\t'Auto recalculation of cached values'( $ ) {\n\t\t\t\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic xxx( next? : number ) {\n\t\t\t\t\treturn next || 1\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic yyy() {\n\t\t\t\t\treturn this.xxx() + 1\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic zzz() {\n\t\t\t\t\treturn this.yyy() + 1\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( App.yyy(), 2 )\n\t\t\t$mol_assert_equal( App.zzz(), 3 )\n\n\t\t\tApp.xxx( 5 )\n\t\t\t$mol_assert_equal( App.zzz(), 7 )\n\n\t\t},\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-reasonability\n\t\t'Skip recalculation when actually no dependency changes'( $ ) {\n\t\t\t\n\t\t\tconst log = [] as string[]\n\t\t\t\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic xxx( next? : number ) {\n\t\t\t\t\tlog.push( 'xxx' )\n\t\t\t\t\treturn next || 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic yyy() {\n\t\t\t\t\tlog.push( 'yyy' )\n\t\t\t\t\treturn [ Math.sign( this.xxx() ) ]\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic zzz() {\n\t\t\t\t\tlog.push( 'zzz' )\n\t\t\t\t\treturn this.yyy()[0] + 1\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\tApp.zzz()\n\t\t\t$mol_assert_like( log, [ 'zzz', 'yyy', 'xxx' ] )\n\t\t\t\n\t\t\tApp.xxx( 5 )\n\t\t\t$mol_assert_like( log, [ 'zzz', 'yyy', 'xxx', 'xxx' ] )\n\t\t\t\n\t\t\tApp.zzz()\n\t\t\t$mol_assert_like( log, [ 'zzz', 'yyy', 'xxx', 'xxx', 'yyy' ] )\n\n\t\t},\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#flow-auto\n\t\t'Flow: Auto'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\t\t\t\t\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic source( next = 1 ) { return next }\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic condition( next = true ) { return next }\n\t\t\t\t\n\t\t\t\tstatic counter = 0\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic result() {\n\t\t\t\t\tconst res = this.condition() ? this.source() : 0\n\t\t\t\t\treturn res + this.counter ++\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result() , 1 )\n\t\t\t$mol_assert_equal( App.counter , 1 )\n\t\t\t\n\t\t\tApp.source( 10 )\n\t\t\t$mol_assert_equal( App.result() , 11 )\n\t\t\t$mol_assert_equal( App.counter , 2 )\n\t\t\t\n\t\t\tApp.condition( false )\n\t\t\t$mol_assert_equal( App.result() , 2 )\n\t\t\t$mol_assert_equal( App.counter , 3 )\n\n\t\t\t$mol_wire_fiber.sync()\n\t\t\t$mol_assert_equal( App.source() , 1 )\n\t\t\t\n\t\t\tApp.source( 20 )\n\t\t\t$mol_assert_equal( App.result() , 2 )\n\t\t\t$mol_assert_equal( App.counter , 3 )\n\n\t\t\tApp.condition( true )\n\t\t\t$mol_assert_equal( App.result() , 23 )\n\t\t\t$mol_assert_equal( App.counter , 4 )\n\n\t\t} ,\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#dupes-equality\n\t\t'Dupes: Equality'( $ ) {\n\t\t\t\n\t\t\tlet counter = 0\n\t\t\t\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic foo( next? : { numbs: number[] } ) {\n\t\t\t\t\treturn next ?? { numbs: [ 1 ] }\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic bar() {\n\t\t\t\t\treturn { ... this.foo(), count: ++ counter }\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like( App.bar(), { numbs: [ 1 ], count: 1 } )\n\n\t\t\tApp.foo({ numbs: [ 1 ] })\n\t\t\t$mol_assert_like( App.bar(), { numbs: [ 1 ], count: 1 } )\n\t\t\t\n\t\t\tApp.foo({ numbs: [ 2 ] })\n\t\t\t$mol_assert_like( App.bar(), { numbs: [ 2 ], count: 2 } )\n\n\t\t},\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#cycle-fail\n\t\t'Cycle: Fail'( $ ) {\n\t\t\n\t\t\tclass App extends $mol_object2 {\n\t\t\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic foo() : number {\n\t\t\t\t\treturn this.bar() + 1\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic bar() : number {\n\t\t\t\t\treturn this.foo() + 1\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t\t$mol_assert_fail( ()=> App.foo(), 'Circular subscription' )\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tApp.test()\n\t\t} ,\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-stability\n\t\t// 'Update deps on push'( $ ) {\n\t\t\n\t\t// \tclass App extends $mol_object2 {\n\t\t\n\t\t// \t\tstatic $ = $\n\t\t\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic left( next = false ) {\n\t\t// \t\t\treturn next\n\t\t// \t\t}\n\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic right( next = false ) {\n\t\t// \t\t\treturn next\n\t\t// \t\t}\n\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic res( next?: boolean ) {\n\t\t// \t\t\treturn this.left( next ) && this.right()\n\t\t// \t\t}\n\t\t\n\t\t// \t}\n\t\t\t\n\t\t// \t$mol_assert_equal( App.res(), false )\n\t\t// \t$mol_assert_equal( App.res( true ), false )\n\t\t\t\n\t\t// \t$mol_assert_equal( App.right( true ), true )\n\t\t// \t$mol_assert_equal( App.res(), true )\n\t\t\t\n\t\t// } ,\n\t\t\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-stability\n\t\t'Different order of pull and push'( $ ) {\n\t\t\n\t\t\tclass App extends $mol_object2 {\n\t\t\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic store( next = 0 ) {\n\t\t\t\t\treturn next\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic fast( next?: number ) {\n\t\t\t\t\treturn this.store( next )\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic slow( next?: number ) {\n\t\t\t\t\tif( next !== undefined ) this.slow() // enforce pull before push\n\t\t\t\t\treturn this.store( next )\n\t\t\t\t}\n\t\t\n\t\t\t}\n\t\t\t\n\t\t\tApp.fast()\n\t\t\t$mol_assert_equal( App.slow( 666 ), 666 )\n\t\t\t$mol_assert_equal( App.fast(), App.slow(), 666 )\n\t\t\t\n\t\t\tApp.store( 777 )\n\t\t\t$mol_assert_equal( App.fast(), App.slow(), 777 )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-stability\n\t\t'Actions inside invariant'( $ ) {\n\t\t\n\t\t\tclass App extends $mol_object2 {\n\t\t\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic count( next = 0 ) {\n\t\t\t\t\treturn next\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic count2() {\n\t\t\t\t\treturn this.count()\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic res() {\n\t\t\t\t\tconst count = this.count2()\n\t\t\t\t\tif( !count ) this.count( count + 1 )\n\t\t\t\t\treturn count + 1\n\t\t\t\t}\n\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like( App.res(), 1 )\n\t\t\t\n\t\t\tApp.count( 5 )\n\t\t\t$mol_assert_like( App.res(), 6 )\n\n\t\t} ,\n\t\t\n\t\tasync 'Toggle with async'( $ ) {\n\t\t\n\t\t\tclass App extends $mol_object2 {\n\t\t\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic checked( next = false ) {\n\t\t\t\t\t$$.$mol_wait_timeout(0)\n\t\t\t\t\treturn next\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic toggle() {\n\t\t\t\t\tconst prev = this.checked()\n\t\t\t\t\t$mol_assert_unique( this.checked( !prev ), prev )\n\t\t\t\t\t// $mol_assert_equal( this.checked() , prev )\n\t\t\t\t}\n\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic res() {\n\t\t\t\t\treturn this.checked()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t\t\n\t\t\t\t\t$mol_assert_equal( App.res(), false )\n\t\t\t\t\t\n\t\t\t\t\tApp.toggle()\n\t\t\t\t\t$mol_assert_equal( App.res(), true )\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\n\t\t\t}\n\t\t\t\n\t\t\tawait $mol_wire_async( App ).test()\n\t\t\t\n\t\t} ,\n\n\t\t// // https://github.com/nin-jin/slides/tree/master/reactivity#wish-stability\n\t\t// 'Stable order of multiple root'( $ ) {\n\t\t\n\t\t// \tclass App extends $mol_object2 {\n\t\t\n\t\t// \t\tstatic $ = $\n\t\t\t\t\n\t\t// \t\tstatic counter = 0\n\t\t\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic left_trigger( next = 0 ) {\n\t\t// \t\t\treturn next\n\t\t// \t\t}\n\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic left_root() {\n\t\t// \t\t\tthis.left_trigger()\n\t\t// \t\t\treturn ++ this.counter\n\t\t// \t\t}\n\t\t\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic right_trigger( next = 0 ) {\n\t\t// \t\t\treturn next\n\t\t// \t\t}\n\t\t\t\t\n\t\t// \t\t@ $mol_wire_solo\n\t\t// \t\tstatic right_root() {\n\t\t// \t\t\tthis.right_trigger()\n\t\t// \t\t\treturn ++ this.counter\n\t\t// \t\t}\n\t\t\n\t\t// \t}\n\t\t\t\n\t\t// \t$mol_assert_equal( App.left_root(), 1 )\n\t\t// \t$mol_assert_equal( App.right_root(), 2 )\n\t\t\t\n\t\t// \tApp.right_trigger( 1 )\n\t\t// \tApp.left_trigger( 1 )\n\t\t\t\n\t\t// \t$mol_wire_fiber.sync()\n\t\t\t\n\t\t// \t$mol_assert_equal( App.right_root(), 4 )\n\t\t// \t$mol_assert_equal( App.left_root(), 3 )\n\n\t\t// } ,\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#error-store\n\t\t'Restore after error'( $ ) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic get $() { return $ }\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic condition( next = false ) { return next }\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic broken() {\n\t\t\t\t\t\n\t\t\t\t\tif( this.condition() ) {\n\t\t\t\t\t\t$mol_fail( new Error( 'test error' ) )\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic result() {\n\t\t\t\t\treturn this.broken()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.result() , 1 )\n\t\t\t\n\t\t\tApp.condition( true )\n\t\t\t$mol_assert_fail( ()=> App.result(), 'test error' )\n\t\t\t\n\t\t\tApp.condition( false )\n\t\t\t$mol_assert_equal( App.result() , 1 )\n\n\t\t} ,\n\t\n\t\tasync 'Wait for data'($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\tstatic async source() {\n\t\t\t\t\treturn 'Jin'\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic middle() {\n\t\t\t\t\treturn $mol_wire_sync( this ).source()\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic target() {\n\t\t\t\t\treturn this.middle()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t\t$mol_assert_equal( App.target() , 'Jin' )\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tawait $mol_wire_async( App ).test()\n\t\t},\n\n\t\t'Auto destroy on long alone'( $ ) {\n\n\t\t\tlet destroyed = false\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic showing( next = true ) {\n\t\t\t\t\treturn next\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic details() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdestructor() {\n\t\t\t\t\t\t\tdestroyed = true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic render() {\n\t\t\t\t\treturn this.showing() ? this.details() : null\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst details = App.render()\n\t\t\t$mol_assert_ok( details )\n\n\t\t\tApp.showing( false )\n\t\t\t$mol_assert_not( App.render() )\n\t\t\t\n\t\t\tApp.showing( true )\n\t\t\t$mol_assert_equal( App.render() , details )\n\t\t\t\n\t\t\t$mol_wire_fiber.sync()\n\t\t\t$mol_assert_not( destroyed )\n\t\t\t\n\t\t\tApp.showing( false )\n\t\t\t$mol_wire_fiber.sync()\n\t\t\t$mol_assert_ok( destroyed )\n\n\t\t\tApp.showing( true )\n\t\t\t$mol_assert_unique( App.render() , details )\n\t\t\t\n\t\t},\n\n\t\t// https://github.com/nin-jin/slides/tree/master/reactivity#wish-stability\n\t\tasync 'Hold pubs while wait async task'($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\tstatic counter = 0\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic resets( next?: null ): number {\n\t\t\t\t\treturn ( $mol_wire_probe( ()=> this.resets() ) ?? -1 ) + 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstatic async wait() { }\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value() {\n\t\t\t\t\treturn ++ this.counter\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic result() {\n\t\t\t\t\tif( this.resets() ) $mol_wire_sync( this ).wait()\n\t\t\t\t\treturn this.value()\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( App.result() , 1 )\n\t\t\t\n\t\t\tApp.resets( null )\n\t\t\t$mol_wire_fiber.sync()\n\t\t\t$mol_assert_equal( await $mol_wire_async( App ).result() , 1 )\n\t\t\t\n\t\t},\n\n\t\t'Owned value has js-path name' () {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic title() {\n\t\t\t\t\treturn new $mol_object2\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( `${ App.title() }` , 'App.title<>' )\n\n\t\t} ,\n\n\t\t'Unsubscribe from temp pubs on complete' ($) {\n\n\t\t\tclass Random extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic seed() {\n\t\t\t\t\treturn Math.random()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic resets( next?: null ) {\n\t\t\t\t\treturn Math.random()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic value() {\n\t\t\t\t\tthis.resets()\n\t\t\t\t\treturn this.seed()\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\tconst first = Random.value()\n\t\t\t\n\t\t\tRandom.resets( null )\n\t\t\t$mol_assert_unique( Random.value(), first )\n\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\tasync 'Error caching' ($) {\n\t\t\tconst next_cached = 123\n\n\t\t\tclass Some extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic data( id: string, next?: unknown): unknown {\n\t\t\t\t\tif (next) return next as never\n\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t$mol_wire_async(this).data(id, next_cached)\n\t\t\t\t\t}, 10)\n\n\t\t\t\t\t$mol_fail_hidden(new Promise(() => {}))\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic run() {\n\t\t\t\t\treturn this.data('1')\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst val = await $mol_wire_async(Some).run()\n\t\t\t$mol_assert_equal(val, next_cached)\n\t\t} ,\n\n\t\t'Memoize by single simple key' ($) {\n\n\t\t\tclass Team extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic user_name( user: string , next?: string ) {\n\t\t\t\t\treturn next ?? user\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic user_names() {\n\t\t\t\t\treturn [\n\t\t\t\t\t\tthis.user_name( 'jin' ),\n\t\t\t\t\t\tthis.user_name( 'john' ),\n\t\t\t\t\t]\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like( Team.user_names(), [ 'jin', 'john' ] )\n\t\t\t\n\t\t\tTeam.user_name( 'jin', 'JIN' )\n\t\t\t$mol_assert_like( Team.user_names(), [ 'JIN', 'john' ] )\n\n\t\t} ,\n\n\t\t'Memoize by single complex key' ($) {\n\n\t\t\tclass Map extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic tile( pos: [ number, number ] ) {\n\t\t\t\t\treturn new String( `/tile=${pos}` )\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t\t\n\t\t\t\t\t$mol_assert_like( this.tile([0,1]), new String( '/tile=0,1' ) )\n\t\t\t\t\t$mol_assert_equal( this.tile([0,1]), this.tile([0,1]) )\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\tMap.test()\n\t\t} ,\n\n\t\t'Owned value has js-path name' () {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic like( friend: number ) {\n\t\t\t\t\treturn new $mol_object2\n\t\t\t\t}\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic relation( [ friend, props ]: [ number, [ number ] ] ) {\n\t\t\t\t\treturn new $mol_object2\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( `${ App.like(123) }` , 'App.like<123>' )\n\t\t\t$mol_assert_equal( `${ App.relation([123,[456]]) }` , 'App.relation<[123,[456]]>' )\n\n\t\t} ,\n\n\t\t'Deep deps' ($) {\n\n\t\t\tclass Fib extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\tstatic sums = 0\n\n\t\t\t\t@ $mol_wire_plex\n\t\t\t\tstatic value( index: number , next?: number ): number {\n\t\t\t\t\tif( next ) return next\n\t\t\t\t\tif( index < 2 ) return 1\n\t\t\t\t\t++ this.sums\n\t\t\t\t\treturn this.value( index - 1 ) + this.value( index - 2 )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( Fib.value( 4 ), 5 )\n\t\t\t$mol_assert_equal( Fib.sums, 3 )\n\t\t\t\n\t\t\tFib.value( 1, 2 )\n\t\t\t$mol_assert_equal( Fib.value( 4 ), 8 )\n\t\t\t$mol_assert_equal( Fib.sums, 6 )\n\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Previous value'() {\n\n\t\t\tclass Cache extends $mol_object2 {\n\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic store( next?: Record< string, number > ): typeof next {\n\t\t\t\t\tif( !next ) return {}\n\t\t\t\t\treturn {\n\t\t\t\t\t\t... $mol_wire_probe( ()=> this.store() ) ?? {},\n\t\t\t\t\t\t... next,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like( Cache.store(), {} )\n\t\t\t\n\t\t\t$mol_assert_like( Cache.store({ foo: 666 }), { foo: 666 } )\n\t\t\t$mol_assert_like( Cache.store({ bar: 777 }), { foo: 666, bar: 777 } )\n\n\t\t} ,\n\t\t\n\t})\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\t$mol_test({\n\t\t\n\t\t'Primitives'() {\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( null ), 'null' )\n\t\t\t$mol_assert_equal( $mol_key( false ), 'false' )\n\t\t\t$mol_assert_equal( $mol_key( true ), 'true' )\n\t\t\t$mol_assert_equal( $mol_key( 0 ), '0' )\n\t\t\t$mol_assert_equal( $mol_key( 1n<<64n ), '18446744073709551616n' )\n\t\t\t$mol_assert_equal( $mol_key( '' ), '\"\"' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Array & POJO'() {\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key([ null ]), '[null]' )\n\t\t\t$mol_assert_equal( $mol_key({ foo: 0 }), '{\"foo\":0}' )\n\t\t\t$mol_assert_equal( $mol_key({ foo: [false] }), '{\"foo\":[false]}' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Uint8Array'() {\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( new Uint8Array([ 1, 2 ]) ), '[1,2]' )\n\t\t\t$mol_assert_equal( $mol_key([ new Uint8Array([ 1, 2 ]) ]), '[[1,2]]' )\n\t\t\t$mol_assert_equal( $mol_key({ foo: new Uint8Array([ 1, 2 ]) }), '{\"foo\":[1,2]}' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Function'() {\n\t\t\t\n\t\t\tconst func = ()=> {}\n\t\t\t$mol_assert_equal( $mol_key( func ), $mol_key( func ) )\n\t\t\t$mol_assert_unique( $mol_key( func ), $mol_key( ()=> {} ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Objects'() {\n\t\t\t\n\t\t\tclass User {}\n\t\t\tconst jin = new User()\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( jin ), $mol_key( jin ) )\n\t\t\t$mol_assert_unique( $mol_key( jin ), $mol_key( new User() ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Elements'() {\n\t\t\t\n\t\t\tconst foo = <div>bar</div>\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( foo ), $mol_key( foo ) )\n\t\t\t$mol_assert_unique( $mol_key( foo ), $mol_key( <div>bar</div> ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Custom JSON representation'() {\n\t\t\t\n\t\t\tclass User {\n\t\t\t\tconstructor( public name: string, public age: number ) {}\n\t\t\t\ttoJSON() { return { name: this.name } }\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( new User( 'jin', 18 ) ), '{\"name\":\"jin\"}' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Special native classes'() {\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( new Date( 'xyz' ) ), 'null' )\n\t\t\t$mol_assert_equal( $mol_key( new Date( '2001-01-02T03:04:05.678Z' ) ), '\"2001-01-02T03:04:05.678Z\"' )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_key( /./ ), '\"/./\"' )\n\t\t\t$mol_assert_equal( $mol_key( /\\./gimsu ), '\"/\\\\\\\\./gimsu\"' )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test_mocks.push( $=> $.$mol_fail_log = ()=> false )\n}\n\n","namespace $ {\n\t\n\t$mol_wire_log.active()\n\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_after_tick = $mol_after_mock_commmon as any as typeof $mol_after_tick\n\t})\n\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'all cases of using maybe'() {\n\t\t\t$mol_assert_equal( $mol_maybe( 0 )[ 0 ] , 0 )\n\t\t\t$mol_assert_equal( $mol_maybe( false )[ 0 ] , false )\n\t\t\t$mol_assert_equal( $mol_maybe( null )[ 0 ] , void 0 )\n\t\t\t$mol_assert_equal( $mol_maybe( void 0 )[ 0 ] , void 0 )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_maybe< number >( void 0 ).map( v => v.toString() )[ 0 ] , void 0 )\n\t\t\t$mol_assert_equal( $mol_maybe( 0 ).map( v => v.toString() )[ 0 ] , '0' )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'run callback' () {\n\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\t$mol_assert_equal( Plus1.run( ()=> 2 ) , 3 )\n\n\t\t} ,\n\n\t\t'wrap function' () {\n\t\t\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\t\n\t\t\tconst obj = {\n\t\t\t\tlevel : 2 ,\n\t\t\t\tpow : Plus1.func( function( this : { level : number } , a ) {\n\t\t\t\t\treturn a ** this.level\n\t\t\t\t} )\n\t\t\t}\n\n\t\t\t$mol_assert_equal( obj.pow( 2 ) , 5 )\n\n\t\t} ,\n\n\t\t'decorate field getter' () {\n\n\t\t\tclass Plus1 extends $mol_wrapper {\n\n\t\t\t\tstatic last = 0\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn Plus1.last = ( task.call( this , ... args ) || 0 ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\tclass Foo {\n\n\t\t\t\t@ Plus1.field\n\t\t\t\tstatic get two() {\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t\tstatic set two( next : number ) {}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\t\t\t\n\t\t\tFoo.two = 3\n\t\t\t$mol_assert_equal( Plus1.last , 2 )\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\n\t\t} ,\n\n\t\t'decorate instance method' () {\n\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\tclass Foo1 {\n\n\t\t\t\tlevel = 2\n\n\t\t\t\t@ Plus1.method\n\t\t\t\tpow( a : number ) {\n\t\t\t\t\treturn a ** this.level\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tconst Foo2 = Foo1\n\t\t\tconst foo = new Foo2\n\n\t\t\t$mol_assert_equal( foo.pow( 2 ) , 5 )\n\n\t\t} ,\n\n\t\t'decorate static method' () {\n\t\t\t\n\t\t\tclass Plus1 extends $mol_wrapper {\n\t\t\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> number ) {\n\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\t\t\t\t\t\treturn task.call( this , ... args ) + 1 as number\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\n\t\t\tclass Foo {\n\n\t\t\t\tstatic level = 2\n\n\t\t\t\t@ Plus1.method\n\t\t\t\tstatic pow( a : number ) {\n\t\t\t\t\treturn a ** this.level\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( Foo.pow( 2 ) , 5 )\n\n\t\t} ,\n\n\t\t'decorate class' () {\n\t\t\t\n\t\t\tclass BarInc extends $mol_wrapper {\n\n\t\t\t\tstatic wrap< This , Args extends any[] >( task : ( this : This , ... args : Args )=> Foo ) {\n\t\t\t\t\t\n\t\t\t\t\treturn function( this : This , ... args : Args ) {\n\n\t\t\t\t\t\tconst foo = task.call( this , ...args )\n\t\t\t\t\t\tfoo.bar ++\n\t\t\t\t\t\treturn foo\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\t@ BarInc.class\n\t\t\tclass Foo {\n\t\t\t\tconstructor( public bar : number ) {}\n\t\t\t}\n\n\t\t\t$mol_assert_equal( new Foo( 2 ).bar , 3 )\n\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'memoize field' () {\n\n\t\t\tclass Foo {\n\n\t\t\t\tstatic one = 1\n\n\t\t\t\t@ $mol_memo.field\n\t\t\t\tstatic get two() {\n\t\t\t\t\treturn ++ this.one\n\t\t\t\t}\n\t\t\t\tstatic set two( next : number ) {} \n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\t\t\t$mol_assert_equal( Foo.two , 2 )\n\n\t\t\tFoo.two = 3\n\t\t\t\n\t\t\t$mol_assert_equal( Foo.two , 3 )\n\t\t\t$mol_assert_equal( Foo.two , 3 )\n\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\t$mol_test( { \n\t\t\n\t\t'const returns stored value'() {\n\t\t\n\t\t\tconst foo = { bar : $mol_const( Math.random() ) }\n\t\t\t\n\t\t\t$mol_assert_equal( foo.bar() , foo.bar() )\n\t\t\t$mol_assert_equal( foo.bar() , foo.bar['()'] )\n\t\t\t\n\t\t} ,\n\n\t} )\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'id auto generation'($) {\n\t\t\t\t\n\t\t\tclass $mol_view_test_item extends $mol_view { }\n\t\t\t\n\t\t\tclass $mol_view_test_block extends $mol_view {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_mem_key\n\t\t\t\telement( id : number ) {\n\t\t\t\t\treturn new $mol_view_test_item()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tvar x = $mol_view_test_block.Root(0)\n\t\t\t\n\t\t\t$mol_assert_equal( x.dom_node().id , '$mol_view_test_block.Root(0)' )\n\t\t\t$mol_assert_equal( x.element( 0 ).dom_node().id , '$mol_view_test_block.Root(0).element(0)' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'caching ref to dom node'($) {\n\t\t\t\n\t\t\tvar x = new class extends $mol_view { }\n\t\t\tx.$ = $\n\t\t\t\n\t\t\t$mol_assert_equal( x.dom_node() , x.dom_node() )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'content render'($) {\n\t\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tsub() {\n\t\t\t\t\treturn [ 'lol' , 5 ]\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\tx.$ = $\n\t\t\t\n\t\t\tvar node = x.dom_tree()\n\t\t\t\n\t\t\t$mol_assert_equal( node.innerHTML , 'lol5' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'bem attributes generation'($) {\n\t\t\t\t\n\t\t\tclass $mol_view_test_item extends $mol_view { }\n\t\t\t\n\t\t\tclass $mol_view_test_block extends $mol_view {\n\t\t\t\t\n\t\t\t\t@ $mol_mem_key\n\t\t\t\tElement( id : number ) {\n\t\t\t\t\treturn new $mol_view_test_item()\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test_block()\n\t\t\tx.$ = $\n\t\t\t\n\t\t\t$mol_assert_equal( x.dom_node().getAttribute( 'mol_view_test_block' ) , '' )\n\t\t\t$mol_assert_equal( x.dom_node().getAttribute( 'mol_view' ) , '' )\n\t\t\t\n\t\t\t$mol_assert_equal( x.Element( 0 ).dom_node().getAttribute( 'mol_view_test_block_element' ) , '' )\n\t\t\t\n\t\t\t$mol_assert_equal( x.Element( 0 ).dom_node().getAttribute( 'mol_view_test_item' ) , '' )\n\t\t\t$mol_assert_equal( x.Element( 0 ).dom_node().getAttribute( 'mol_view' ) , '' )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'render custom attributes'($) {\n\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tattr() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'href' : '#haha' ,\n\t\t\t\t\t\t'required' : true ,\n\t\t\t\t\t\t'hidden' : false ,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\tx.$ = $\n\t\t\t\n\t\t\tvar node = x.dom_tree()\n\t\t\t\n\t\t\t$mol_assert_equal( node.getAttribute( 'href' ) , '#haha' )\n\t\t\t$mol_assert_equal( node.getAttribute( 'required' ) , 'true' )\n\t\t\t$mol_assert_equal( node.getAttribute( 'hidden' ) , null )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'render custom fields'($) {\n\t\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tfield() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'hidden' : true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\tx.$ = $\n\t\t\t\n\t\t\tvar node = x.dom_tree() as HTMLElement\n\t\t\t\n\t\t\t$mol_assert_equal( node.hidden , true )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t'attach event handlers'($) {\n\t\t\t\t\n\t\t\tvar clicked = false\n\t\t\t\n\t\t\tclass $mol_view_test extends $mol_view {\n\t\t\t\tevent() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'click' : ( next? : Event ) => this.event_click( next )\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevent_click( next? : Event ) {\n\t\t\t\t\tclicked = true\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = new $mol_view_test()\n\t\t\tx.$ = $\n\t\t\t\n\t\t\tvar node = x.dom_node() as HTMLElement\n\t\t\tnode.click()\n\t\t\t\n\t\t\t$mol_assert_ok( clicked )\n\t\t\t\n\t\t} ,\n\t\n\t} )\n}\n","namespace $ {\n\n\texport class $mol_style_sheet_test1 extends $mol_view {\n\t\tItem() { return new $mol_view }\n\t}\n\n\texport class $mol_style_sheet_test2 extends $mol_view {\n\t\tList() { return new $mol_style_sheet_test1 }\n\t}\n\n\t$mol_test({\n\n\t\t'component block styles'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tdisplay: 'block',\n\t\t\t\tzIndex: 1,\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\tdisplay: block;\\n\\tz-index: 1;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'various units'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { px , per } = $mol_style_unit\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\twidth : per(50),\n\t\t\t\theight : px(50),\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\twidth: 50%;\\n\\theight: 50px;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'various functions'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { calc } = $mol_style_func\n\t\t\tconst { px , per } = $mol_style_unit\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\twidth : calc( `${ per(100) } - ${ px(1) }` ),\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\twidth: calc(100% - 1px);\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'property groups'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { px } = $mol_style_unit\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tflex : {\n\t\t\t\t\tgrow : 5\n\t\t\t\t}\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\tflex-grow: 5;\\n}\\n' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'custom properties'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t'--isVariable': 'yes',\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\t--is-variable: yes;\\n}\\n' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'custom property groups'() {\n\t\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { px } = $mol_style_unit\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t'--variable' : {\n\t\t\t\t\ttest : px(5)\n\t\t\t\t}\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\t--variable-test: 5px;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'property shorthand'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { px } = $mol_style_unit\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tpadding : [ px(5) , 'auto' ]\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\tpadding: 5px auto;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'sequenced values'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { url } = $mol_style_func\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tbackground: {\n\t\t\t\t\timage: [ [url('foo')], [url('bar')] ],\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\tbackground-image: url(\"foo\"),url(\"bar\");\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'sequenced structs'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst { rem } = $mol_style_unit\n\t\t\tconst { hsla } = $mol_style_func\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tbox: {\n\t\t\t\t\tshadow: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinset: true,\n\t\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\t\tblur: rem(.5),\n\t\t\t\t\t\t\tspread: 0,\n\t\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinset: false,\n\t\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\t\tblur: rem(.5),\n\t\t\t\t\t\t\tspread: 0,\n\t\t\t\t\t\t\tcolor: 'blue',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test] {\\n\\tbox-shadow: inset 0 0 0.5rem 0 red,0 0 0.5rem 0 blue;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component block styles with pseudo class'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t':focus': {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tdisplay: 'block',\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test]:focus {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component block styles with pseudo element'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t'::first-line': {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tdisplay: 'block',\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test]::first-line {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component block styles with media query'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t'@media': {\n\t\t\t\t\t'print': {\n\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '@media print {\\n[mol_style_sheet_test] {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component block styles with attribute value'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {\n\t\t\t\tattr() { return {\n\t\t\t\t\tmol_theme: '$mol_theme_dark'\n\t\t\t\t} }\n\t\t\t}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t'@' : {\n\t\t\t\t\tmol_theme: {\n\t\t\t\t\t\t'$mol_theme_dark': {\n\t\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test]:where([mol_theme=\"$mol_theme_dark\"]) {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component element styles'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {\n\t\t\t\tItem() { return new $mol_view }\n\t\t\t}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\tItem : {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tdisplay: 'block',\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test_item] {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component element of element styles'() {\n\t\t\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test2 , {\n\t\t\t\tList : {\n\t\t\t\t\tItem : {\n\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test2_list_item] {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'component element styles with block attribute value'() {\n\t\t\n\t\t\tclass $mol_style_sheet_test extends $mol_view {\n\t\t\t\tItem() { return new $mol_view }\n\t\t\t\tattr() { return {\n\t\t\t\t\tmol_theme: '$mol_theme_dark'\n\t\t\t\t} }\n\t\t\t}\n\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test , {\n\t\t\t\t'@' : {\n\t\t\t\t\tmol_theme: {\n\t\t\t\t\t\t'$mol_theme_dark': {\n\t\t\t\t\t\t\tItem: {\n\t\t\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test]:where([mol_theme=\"$mol_theme_dark\"]) :where([mol_style_sheet_test_item]) {\\n\\tcolor: red;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'inner component styles by class'() {\n\t\t\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test2 , {\n\t\t\t\t$mol_style_sheet_test1 : {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tdisplay: 'block',\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test2] :where([mol_style_sheet_test1]) {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t\t'child component styles by class'() {\n\t\t\n\t\t\tconst sheet = $mol_style_sheet( $mol_style_sheet_test2 , {\n\t\t\t\t'>' : {\n\t\t\t\t\t$mol_style_sheet_test1 : {\n\t\t\t\t\t\tcolor: 'red',\n\t\t\t\t\t\tdisplay: 'block',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} )\n\n\t\t\t$mol_assert_equal( sheet , '[mol_style_sheet_test2] > :where([mol_style_sheet_test1]) {\\n\\tcolor: red;\\n\\tdisplay: block;\\n}\\n' )\n\t\t\t\n\t\t},\n\n\t})\n\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'local get set delete'() {\n\t\t\t\t\t\n\t\t\tvar key = '$mol_state_local_test:' + Math.random()\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , null )\n\t\t\t\n\t\t\t$mol_state_local.value( key , 123 )\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , 123 )\n\t\t\t\n\t\t\t$mol_state_local.value( key , null )\n\t\t\t$mol_assert_equal( $mol_state_local.value( key ) , null )\n\t\t} ,\n\t\t\n\t} )\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( context => {\n\t\tclass $mol_state_local_mock< Value > extends $mol_state_local< Value > {\n\n\t\t\tstatic state = {} as Record< string , any >\n\t\t\t\t\t\t\n\t\t\t@ $mol_mem_key\n\t\t\tstatic value< Value >(\n\t\t\t\tkey : string ,\n\t\t\t\tnext = this.state[ key ] as Value ,\n\t\t\t) {\n\t\t\t\treturn this.state[ key ] = ( next || null )\n\t\t\t}\n\n\t\t}\n\t\tcontext.$mol_state_local = $mol_state_local_mock\n\t} )\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t'decode utf8 string'() {\n\t\t\tconst str = 'Hello, ΧΨΩЫ'\n\t\t\tconst encoded = new Uint8Array( [ 72, 101, 108, 108, 111, 44, 32, 206, 167, 206, 168, 206, 169, 208, 171 ] )\n\n\t\t\t$mol_assert_equal( $mol_charset_decode(encoded), str )\n\t\t\t$mol_assert_equal( $mol_charset_decode(encoded, 'utf8'), str )\n\t\t},\n\n\t\t'decode empty string'() {\n\t\t\tconst encoded = new Uint8Array( [] )\n\n\t\t\t$mol_assert_equal( $mol_charset_decode(encoded), '' )\n\t\t},\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t'encode utf8 string'() {\n\t\t\tconst str = 'Hello, ΧΨΩЫ'\n\t\t\tconst encoded = new Uint8Array( [ 72, 101, 108, 108, 111, 44, 32, 206, 167, 206, 168, 206, 169, 208, 171 ] )\n\n\t\t\t$mol_assert_like( $mol_charset_encode(str), encoded )\n\t\t},\n\t})\n}\n","namespace $ {\n\t\n\t$mol_test_mocks.push( $ => {\n\t\tclass $mol_locale_mock extends $mol_locale {\n\t\t\t\n\t\t\t@ $mol_mem\n\t\t\tlang( next = 'en' ) { return next }\n\t\t\t\n\t\t\t@ $mol_mem_key\n\t\t\tstatic source( lang: string ) {\n\t\t\t\treturn {}\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t$.$mol_locale = $mol_locale_mock\n\t} )\n\t\n}\n","namespace $.$$ {\n\t\n\t$mol_test({\n\t\t\n\t\t'handle clicks by default'($) {\n\t\t\tlet clicked = false\n\t\t\t\n\t\t\tconst clicker = $mol_button.make({\n\t\t\t\t$,\n\t\t\t\tclick : ( event : MouseEvent )=> { clicked = true } ,\n\t\t\t})\n\t\t\t\n\t\t\tconst element = clicker.dom_tree() as HTMLButtonElement\n\t\t\t\n\t\t\tconst event = $mol_dom_context.document.createEvent( 'mouseevent' )\n\t\t\tevent.initEvent( 'click' , true , true )\n\t\t\telement.dispatchEvent( event )\n\t\t\t\n\t\t\t$mol_assert_ok( clicked )\n\t\t} ,\n\t\t\n\t\t'no handle clicks if disabled'($) {\n\t\t\tlet clicked = false\n\t\t\t\n\t\t\tconst clicker = $mol_button.make({\n\t\t\t\t$,\n\t\t\t\tclick : ( event : MouseEvent )=> { clicked = true } ,\n\t\t\t\tenabled : ()=> false ,\n\t\t\t})\n\t\t\t\n\t\t\tconst element = clicker.dom_tree() as HTMLButtonElement\n\t\t\t\n\t\t\tconst event = $mol_dom_context.document.createEvent( 'mouseevent' )\n\t\t\tevent.initEvent( 'click' , true , true )\n\t\t\telement.dispatchEvent( event )\n\t\t\t\n\t\t\t$mol_assert_not( clicked )\n\t\t} ,\n\t\t\n\t\tasync 'Store error'($) {\n\t\t\t\n\t\t\tconst clicker = $mol_button.make({\n\t\t\t\t$,\n\t\t\t\tclick : ( event : MouseEvent )=> $.$mol_fail( new Error( 'Test error' ) ),\n\t\t\t})\n\t\t\t\n\t\t\tconst event = $mol_dom_context.document.createEvent( 'mouseevent' )\n\t\t\t$mol_assert_fail( ()=> clicker.event_activate( event ), 'Test error' )\n\t\t\tawait Promise.resolve()\n\t\t\t$mol_assert_equal( clicker.status()[0].message, 'Test error' )\n\t\t\t\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'escape' () {\n\n\t\t\tconst specials = $mol_regexp.from( '.*+?^${}()|[]\\\\' )\n\t\t\t$mol_assert_equal( specials.source , '\\\\.\\\\*\\\\+\\\\?\\\\^\\\\$\\\\{\\\\}\\\\(\\\\)\\\\|\\\\[\\\\]\\\\\\\\' )\n\n\t\t},\n\n\t\t'char code' () {\n\n\t\t\tconst space = $mol_regexp.from( 32 )\n\t\t\t$mol_assert_like( ' '.match( space ) , [ ' ' ] )\n\n\t\t},\n\n\t\t'repeat fixed'() {\n\n\t\t\tconst { repeat , decimal_only: digit } = $mol_regexp\n\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\t$mol_assert_like( '#2020#'.match( year ) , [ '2020' ] )\n\n\t\t},\n\n\t\t'greedy repeat'() {\n\n\t\t\tconst { repeat , repeat_greedy , latin_only: letter } = $mol_regexp\n\n\t\t\t$mol_assert_like( 'abc'.match( repeat( letter, 1, 2 ) ) , [ 'a', 'b', 'c' ] )\n\t\t\t$mol_assert_like( 'abc'.match( repeat_greedy( letter, 1, 2 ) ) , [ 'ab', 'c' ] )\n\n\t\t},\n\n\t\t'repeat range'() {\n\n\t\t\tconst { repeat_greedy , decimal_only: digit } = $mol_regexp\n\n\t\t\tconst year = repeat_greedy( digit , 2 , 4 )\n\t\t\t\n\t\t\t$mol_assert_like( '#2#'.match( year ) , null )\n\t\t\t$mol_assert_like( '#20#'.match( year ) , [ '20' ] )\n\t\t\t$mol_assert_like( '#2020#'.match( year ) , [ '2020' ] )\n\t\t\t$mol_assert_like( '#20201#'.match( year ) , [ '2020' ] )\n\n\t\t},\n\n\t\t'repeat from'() {\n\n\t\t\tconst { repeat_greedy , latin_only: letter } = $mol_regexp\n\n\t\t\tconst name = repeat_greedy( letter , 2 )\n\n\t\t\t$mol_assert_like( '##'.match( name ) , null )\n\t\t\t$mol_assert_like( '#a#'.match( name ) , null )\n\t\t\t$mol_assert_like( '#ab#'.match( name ) , [ 'ab' ] )\n\t\t\t$mol_assert_like( '#abc#'.match( name ) , [ 'abc' ] )\n\n\t\t},\n\n\t\t'from string'() {\n\n\t\t\tconst regexp = $mol_regexp.from( '[\\\\d]' )\n\t\t\t\n\t\t\t$mol_assert_equal( regexp.source , '\\\\[\\\\\\\\d\\\\]' )\n\t\t\t$mol_assert_equal( regexp.flags , 'gsu' )\n\n\t\t},\n\n\t\t'from regexp'() {\n\t\t\t\n\t\t\tconst regexp = $mol_regexp.from( /[\\d]/i )\n\t\t\t\n\t\t\t$mol_assert_equal( regexp.source , '[\\\\d]' )\n\t\t\t$mol_assert_equal( regexp.flags , 'i' )\n\n\t\t},\n\n\t\t'split'() {\n\t\t\t\n\t\t\tconst regexp = $mol_regexp.from( ';' )\n\t\t\t\n\t\t\t$mol_assert_like( 'aaa;bbb;ccc'.split( regexp ) , [ 'aaa', ';', 'bbb', ';', 'ccc' ] )\n\t\t\t$mol_assert_like( 'aaa;;ccc'.split( regexp ) , [ 'aaa', ';', '', ';', 'ccc' ] )\n\t\t\t$mol_assert_like( 'aaa'.split( regexp ) , [ 'aaa' ] )\n\t\t\t$mol_assert_like( ''.split( regexp ) , [''] )\n\n\t\t},\n\n\t\t'test for matching'() {\n\t\t\t\n\t\t\tconst regexp = $mol_regexp.from( 'foo' )\n\t\t\t\n\t\t\t$mol_assert_like( regexp.test( '' ) , false )\n\t\t\t$mol_assert_like( regexp.test( 'fo' ) , false )\n\t\t\t$mol_assert_like( regexp.test( 'foo' ) , true )\n\t\t\t$mol_assert_like( regexp.test( 'foobar' ) , true )\n\t\t\t$mol_assert_like( regexp.test( 'barfoo' ) , true )\n\n\t\t},\n\n\t\t'case ignoring'() {\n\n\t\t\tconst xxx = $mol_regexp.from( 'x' , { ignoreCase : true } )\n\n\t\t\t$mol_assert_like( xxx.flags , 'gisu' )\n\t\t\t$mol_assert_like( xxx.exec( 'xx' )![0] , 'x' )\n\t\t\t$mol_assert_like( xxx.exec( 'XX' )![0] , 'X' )\n\n\t\t},\n\n\t\t'multiline mode'() {\n\n\t\t\tconst { end , from } = $mol_regexp\n\n\t\t\tconst xxx = from( [ 'x' , end ] , { multiline : true } )\n\n\t\t\t$mol_assert_like( xxx.exec( 'x\\ny' )![0] , 'x' )\n\t\t\t$mol_assert_like( xxx.flags , 'gmsu' )\n\n\t\t},\n\n\t\t'flags override'() {\n\n\t\t\tconst triplet = $mol_regexp.from(\n\t\t\t\t$mol_regexp.from(\n\t\t\t\t\t/.../,\n\t\t\t\t\t{ ignoreCase: true },\n\t\t\t\t),\n\t\t\t\t{ multiline: true },\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like( triplet.toString() , '/.../gmsu' )\n\n\t\t},\n\n\t\t'sequence'() {\n\n\t\t\tconst { begin , end , decimal_only: digit , repeat , from } = $mol_regexp\n\t\t\t\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\tconst dash = '-'\n\t\t\tconst month = repeat( digit , 2 , 2 )\n\t\t\tconst day = repeat( digit , 2 , 2 )\n\n\t\t\tconst date = from([ begin , year , dash , month , dash , day , end ])\n\n\t\t\t$mol_assert_like( date.exec( '2020-01-02' )![0] , '2020-01-02' )\n\n\t\t},\n\n\t\t'optional'() {\n\n\t\t\tconst name = $mol_regexp.from([ 'A', ['4'] ])\n\n\t\t\t$mol_assert_equal( 'AB'.match( name )![0] , 'A' )\n\t\t\t$mol_assert_equal( 'A4'.match( name )![0] , 'A4' )\n\n\t\t},\n\n\t\t'anon variants'() {\n\n\t\t\tconst name = $mol_regexp.from([ 'A', $mol_regexp.vary([ '4', '5' ]) ])\n\n\t\t\t$mol_assert_equal( 'AB'.match( name ) , null )\n\t\t\t$mol_assert_equal( 'A4'.match( name )![0] , 'A4' )\n\t\t\t$mol_assert_equal( 'A5'.match( name )![0] , 'A5' )\n\n\t\t},\n\n\t\t'only groups'() {\n\n\t\t\tconst regexp = $mol_regexp.from({ dog : '@' })\n\n\t\t\t$mol_assert_like( [ ... '#'.matchAll( regexp ) ][0].groups , undefined )\n\t\t\t$mol_assert_like( [ ... '@'.matchAll( regexp ) ][0].groups , { dog : '@' } )\n\n\t\t},\n\n\t\t'catch skipped'() {\n\n\t\t\tconst regexp = $mol_regexp.from(/(@)(\\d?)/g)\n\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... '[[@]]'.matchAll( regexp ) ].map( f => [ ... f ] ) ,\n\t\t\t\t[\n\t\t\t\t\t[ '[[' ],\n\t\t\t\t\t[ '@', '@' , '' ],\n\t\t\t\t\t[ ']]' ],\n\t\t\t\t]\n\t\t\t)\n\n\t\t},\n\n\t\t'enum variants'() {\n\n\t\t\tenum Sex {\n\t\t\t\tmale = 'male',\n\t\t\t\tfemale = 'female',\n\t\t\t}\n\n\t\t\tconst sexism = $mol_regexp.from( Sex )\n\n\t\t\t$mol_assert_like( [ ... ''.matchAll( sexism ) ].length, 0 )\n\t\t\t$mol_assert_like( [ ... 'trans'.matchAll( sexism ) ][0].groups, undefined )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... 'male'.matchAll( sexism ) ][0].groups,\n\t\t\t\t{ male : 'male' , female : '' },\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... 'female'.matchAll( sexism ) ][0].groups,\n\t\t\t\t{ male : '' , female : 'female' },\n\t\t\t)\n\n\t\t},\n\n\t\t'recursive only groups'() {\n\n\t\t\tenum Sex {\n\t\t\t\tmale = 'male',\n\t\t\t\tfemale = 'female',\n\t\t\t}\n\n\t\t\tconst sexism = $mol_regexp.from({ Sex })\n\n\t\t\t$mol_assert_like( [ ... ''.matchAll( sexism ) ].length , 0 )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... 'male'.matchAll( sexism ) ][0].groups,\n\t\t\t\t{ Sex : 'male' , male : 'male' , female : '' },\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... 'female'.matchAll( sexism ) ][0].groups,\n\t\t\t\t{ Sex : 'female' , male : '' , female : 'female' },\n\t\t\t)\n\n\t\t},\n\n\t\t'sequence with groups'() {\n\n\t\t\tconst { begin , end , decimal_only: digit , repeat , from } = $mol_regexp\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\tconst dash = '-'\n\t\t\tconst month = repeat( digit , 2 , 2 )\n\t\t\tconst day = repeat( digit , 2 , 2 )\n\n\t\t\tconst regexp = from([ begin , {year} , dash , {month} , dash , {day} , end ])\n\t\t\tconst found = [ ... '2020-01-02'.matchAll( regexp ) ]\n\n\t\t\t$mol_assert_like( found[0].groups , {\n\t\t\t\tyear : '2020' ,\n\t\t\t\tmonth : '01' ,\n\t\t\t\tday : '02' ,\n\t\t\t} )\n\n\t\t},\n\n\t\t'sequence with groups of mixed type'() {\n\n\t\t\tconst prefix = '/'\n\t\t\tconst postfix = '/'\n\n\t\t\tconst regexp = $mol_regexp.from([ {prefix} , /(\\w+)/ , {postfix} , /([gumi]*)/ ])\n\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... '/foo/mi'.matchAll( regexp ) ],\n\t\t\t\t[\n\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t[ \"/foo/mi\", \"/\", \"foo\", \"/\", \"mi\" ],\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgroups: {\n\t\t\t\t\t\t\t\tprefix : '/' ,\n\t\t\t\t\t\t\t\tpostfix : '/' ,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\t\tinput: \"/\",\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\t],\n\t\t\t)\n\n\t\t},\n\n\t\t'recursive sequence with groups'() {\n\n\t\t\tconst { begin , end , decimal_only: digit , repeat , from } = $mol_regexp\n\t\t\tconst year = repeat( digit , 4 , 4 )\n\t\t\tconst dash = '-'\n\t\t\tconst month = repeat( digit , 2 , 2 )\n\t\t\tconst day = repeat( digit , 2 , 2 )\n\n\t\t\tconst regexp = from([\n\t\t\t\tbegin , { date : [ {year} , dash , {month} ] } , dash , {day} , end\n\t\t\t])\n\t\t\t\n\t\t\tconst found = [ ... '2020-01-02'.matchAll( regexp ) ]\n\n\t\t\t$mol_assert_like( found[0].groups , {\n\t\t\t\tdate : '2020-01' ,\n\t\t\t\tyear : '2020' ,\n\t\t\t\tmonth : '01' ,\n\t\t\t\tday : '02' ,\n\t\t\t} )\n\n\t\t},\n\n\t\t'parse multiple'() {\n\n\t\t\tconst { decimal_only: digit , from } = $mol_regexp\n\n\t\t\tconst regexp = from({ digit })\n\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... '123'.matchAll( regexp ) ].map( f => f.groups ) ,\n\t\t\t\t[\n\t\t\t\t\t{ digit : '1' },\n\t\t\t\t\t{ digit : '2' },\n\t\t\t\t\t{ digit : '3' },\n\t\t\t\t]\n\t\t\t)\n\n\t\t},\n\n\t\t'named variants'() {\n\n\t\t\tconst { begin , or , end , from } = $mol_regexp\n\n\t\t\tconst sexism = from([\n\t\t\t\tbegin , 'sex = ' , { sex : [ 'male' , or , 'female' ] } , end\n\t\t\t])\n\n\t\t\t$mol_assert_like( [ ... 'sex = male'.matchAll( sexism ) ][0].groups , { sex : 'male' } )\n\t\t\t$mol_assert_like( [ ... 'sex = female'.matchAll( sexism ) ][0].groups , { sex : 'female' } )\n\t\t\t$mol_assert_like( [ ... 'sex = malefemale'.matchAll( sexism ) ][0].groups , undefined )\n\n\t\t},\n\n\t\t'force after'() {\n\n\t\t\tconst { latin_only: letter , force_after , from } = $mol_regexp\n\n\t\t\tconst regexp = from([ letter , force_after( '.' ) ])\n\n\t\t\t$mol_assert_like( 'x.'.match( regexp ) , [ 'x' ] )\n\t\t\t$mol_assert_like( 'x,'.match( regexp ) , null )\n\n\t\t},\n\n\t\t'forbid after'() {\n\n\t\t\tconst { latin_only: letter , forbid_after , from } = $mol_regexp\n\n\t\t\tconst regexp = from([ letter , forbid_after( '.' ) ])\n\n\t\t\t$mol_assert_like( 'x.'.match( regexp ) , null )\n\t\t\t$mol_assert_like( 'x,'.match( regexp ) , [ 'x' ] )\n\n\t\t},\n\n\t\t'char except'() {\n\n\t\t\tconst { char_except, latin_only, tab } = $mol_regexp\n\n\t\t\tconst name = char_except( latin_only, tab )\n\n\t\t\t$mol_assert_like( 'a'.match( name ) , null )\n\t\t\t$mol_assert_like( '\\t'.match( name ) , null )\n\t\t\t$mol_assert_like( '('.match( name ) , [ '(' ] )\n\n\t\t},\n\n\t\t'unicode only'() {\n\n\t\t\tconst { unicode_only, from } = $mol_regexp\n\n\t\t\tconst name = from([\n\t\t\t\tunicode_only( 'Script', 'Cyrillic' ),\n\t\t\t\tunicode_only( 'Hex_Digit' ),\n\t\t\t])\n\n\t\t\t$mol_assert_like( 'FF'.match( name ) , null )\n\t\t\t$mol_assert_like( 'ФG'.match( name ) , null )\n\t\t\t$mol_assert_like( 'ФF'.match( name ) , [ 'ФF' ] )\n\n\t\t},\n\n\t\t'generate by optional with inner group'() {\n\n\t\t\tconst { begin, end, from } = $mol_regexp\n\t\t\t\n\t\t\tconst animals = from([ begin, '#', [ '^', { dog : '@' } ], end ])\n\n\t\t\t$mol_assert_equal( animals.generate({}) , '#' )\n\t\t\t\n\t\t\t$mol_assert_equal( animals.generate({ dog: false }) , '#' )\n\t\t\t$mol_assert_equal( animals.generate({ dog: true }) , '#^@' )\n\t\t\t\n\t\t\t$mol_assert_fail( ()=> animals.generate({ dog: '$' }) , 'Wrong param: dog=$' )\n\n\t\t},\n\n\t\t'generate by optional with inner group with variants'() {\n\n\t\t\tconst { begin, end, from } = $mol_regexp\n\t\t\t\n\t\t\tconst animals = from([ begin, '#', [ '^', { animal: { dog : '@', fox: '&' } } ], end ])\n\n\t\t\t$mol_assert_equal( animals.generate({}) , '#' )\n\t\t\t\n\t\t\t$mol_assert_equal( animals.generate({ dog: true }) , '#^@' )\n\t\t\t$mol_assert_equal( animals.generate({ fox: true }) , '#^&' )\n\t\t\t\n\t\t\t$mol_assert_fail( ()=> animals.generate({ dog: '$' }) , 'Wrong param: dog=$' )\n\n\t\t},\n\t\t\n\t\t'complex example'() {\n\t\t\t\n\t\t\tconst {\n\t\t\t\tbegin, end,\n\t\t\t\tchar_only, char_range,\n\t\t\t\tlatin_only, slash_back,\n\t\t\t\trepeat_greedy, from,\n\t\t\t} = $mol_regexp\n\t\t\t\n\t\t\tconst atom_char = char_only( latin_only, \"!#$%&'*+/=?^`{|}~-\" )\n\t\t\tconst atom = repeat_greedy( atom_char, 1 )\n\t\t\tconst dot_atom = from([ atom, repeat_greedy([ '.', atom ]) ])\n\t\t\t\n\t\t\tconst name_letter = char_only(\n\t\t\t\tchar_range( 0x01, 0x08 ),\n\t\t\t\t0x0b, 0x0c,\n\t\t\t\tchar_range( 0x0e, 0x1f ),\n\t\t\t\t0x21,\n\t\t\t\tchar_range( 0x23, 0x5b ),\n\t\t\t\tchar_range( 0x5d, 0x7f ),\n\t\t\t)\n\t\t\t\n\t\t\tconst quoted_pair = from([\n\t\t\t\tslash_back,\n\t\t\t\tchar_only(\n\t\t\t\t\tchar_range( 0x01, 0x09 ),\n\t\t\t\t\t0x0b, 0x0c,\n\t\t\t\t\tchar_range( 0x0e, 0x7f ),\n\t\t\t\t)\n\t\t\t])\n\t\t\t\n\t\t\tconst name = repeat_greedy({ name_letter, quoted_pair })\n\t\t\tconst quoted_name = from([ '\"', {name}, '\"' ])\n\t\t\t\n\t\t\tconst local_part = from({ dot_atom, quoted_name })\n\t\t\tconst domain = dot_atom\n\t\t\t\n\t\t\tconst mail = from([ begin, local_part, '@', {domain}, end ])\n\t\t\t\n\t\t\t$mol_assert_equal( 'foo..bar@example.org'.match( mail ), null )\n\t\t\t$mol_assert_equal( 'foo..bar\"@example.org'.match( mail ), null )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... 'foo.bar@example.org'.matchAll( mail ) ][0].groups,\n\t\t\t\t{\n\t\t\t\t\tdot_atom: \"foo.bar\",\n\t\t\t\t\tquoted_name: \"\",\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tname_letter: \"\",\n\t\t\t\t\tquoted_pair: \"\",\n\t\t\t\t\tdomain: \"example.org\",\n\t\t\t\t}\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... '\"foo..bar\"@example.org'.matchAll( mail ) ][0].groups,\n\t\t\t\t{\n\t\t\t\t\tdot_atom: \"\",\n\t\t\t\t\tquoted_name: '\"foo..bar\"',\n\t\t\t\t\tname: \"foo..bar\",\n\t\t\t\t\tname_letter: \"r\",\n\t\t\t\t\tquoted_pair: \"\",\n\t\t\t\t\tdomain: \"example.org\",\n\t\t\t\t}\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tmail.generate({ dot_atom: 'foo.bar', domain: 'example.org' }),\n\t\t\t\t'foo.bar@example.org',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tmail.generate({ name: 'foo..bar', domain: 'example.org' }),\n\t\t\t\t'\"foo..bar\"@example.org',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_fail(\n\t\t\t\t()=> mail.generate({ dot_atom: 'foo..bar', domain: 'example.org' }),\n\t\t\t\t'Wrong param: dot_atom=foo..bar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n\n}\n","namespace $.$$ {\n\t$mol_test({\n\t\t\n\t\t'Empty needle'() {\n\t\t\t\n\t\t\tconst app = new $mol_dimmer\n\t\t\tapp.needle = ()=> '  '\n\t\t\tapp.haystack = ()=> 'foo  bar'\n\t\t\t\n\t\t\t$mol_assert_like( app.strings(), [ 'foo  bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Empty haystack'() {\n\t\t\t\n\t\t\tconst app = new $mol_dimmer\n\t\t\tapp.needle = ()=> 'foo  bar'\n\t\t\tapp.haystack = ()=> ''\n\t\t\t\n\t\t\t$mol_assert_like( app.strings(), [ '' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Not found'() {\n\t\t\t\n\t\t\tconst app = new $mol_dimmer\n\t\t\tapp.needle = ()=> 'foo'\n\t\t\tapp.haystack = ()=> ' bar '\n\t\t\t\n\t\t\t$mol_assert_like( app.strings(), [ ' bar ' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'One found'() {\n\t\t\t\n\t\t\tconst app = new $mol_dimmer\n\t\t\tapp.needle = ()=> 'foo'\n\t\t\tapp.haystack = ()=> ' barfoo '\n\t\t\t\n\t\t\t$mol_assert_like( app.strings(), [ ' bar', 'foo', ' ' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Multiple found'() {\n\t\t\t\n\t\t\tconst app = new $mol_dimmer\n\t\t\tapp.needle = ()=> 'foo'\n\t\t\tapp.haystack = ()=> ' foobarfoo foo'\n\t\t\t\n\t\t\t$mol_assert_like( app.strings(), [ ' ', 'foo', 'bar', 'foo', ' ', 'foo' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Fuzzy search'() {\n\t\t\t\n\t\t\tconst app = new $mol_dimmer\n\t\t\tapp.needle = ()=> 'foo bar'\n\t\t\tapp.haystack = ()=> ' barfoo '\n\t\t\t\n\t\t\t$mol_assert_like( app.strings(), [ ' ', 'bar', '', 'foo', ' ' ] )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( context => {\n\t\tclass $mol_state_arg_mock extends $mol_state_arg {\n\n\t\t\tstatic $ = context\n\t\t\t\t\t\t\n\t\t\t@ $mol_mem\n\t\t\tstatic href( next? : string ) { return next || '' }\n\t\n\t\t}\n\t\tcontext.$mol_state_arg = $mol_state_arg_mock\n\t} )\n\n\t$mol_test({\n\t\t\n\t\t'args as dictionary'( $ ) {\n\t\t\t\n\t\t\t$.$mol_state_arg.href( '#!foo=bar/xxx' )\n\t\t\t$mol_assert_like( $.$mol_state_arg.dict() , { foo : 'bar' , xxx : '' } )\n\n\t\t\t$.$mol_state_arg.dict({ foo : null , yyy : '' , lol : '123' })\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!yyy/lol=123' )\n\n\t\t} ,\n\n\t\t'one value from args'( $ ) {\n\t\t\t\n\t\t\t$.$mol_state_arg.href( '#!foo=bar/xxx' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.value( 'foo' ) , 'bar' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.value( 'xxx' ) , '' )\n\n\t\t\t$.$mol_state_arg.value( 'foo' , 'lol' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!foo=lol/xxx' )\n\n\t\t\t$.$mol_state_arg.value( 'foo' , '' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!foo/xxx' )\n\n\t\t\t$.$mol_state_arg.value( 'foo' , null )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!xxx' )\n\n\t\t} ,\n\n\t\t'nested args'( $ ) {\n\n\t\t\tconst base = new $.$mol_state_arg( 'nested.' )\n\n\t\t\tclass Nested extends $mol_state_arg {\n\t\t\t\tconstructor( prefix : string ) {\n\t\t\t\t\tsuper( base.prefix + prefix )\n\t\t\t\t}\n\t\t\t\tstatic value = ( key : string , next? : string )=> base.value( key , next )\n\t\t\t}\n\t\t\t\n\t\t\t$.$mol_state_arg.href( '#!foo=bar/nested.xxx=123' )\n\t\t\t$mol_assert_equal( Nested.value( 'foo' ) , null )\n\t\t\t$mol_assert_equal( Nested.value( 'xxx' ) , '123' )\n\n\t\t\tNested.value( 'foo' , 'lol' )\n\t\t\t$mol_assert_equal( $.$mol_state_arg.href().replace( /.*#/ , '#' ) , '#!foo=bar/nested.xxx=123/nested.foo=lol' )\n\n\t\t} ,\n\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'config by value'() {\n\n\t\t\tconst N = $mol_data_setup( ( a : number )=> a , 5 )\n\t\t\t\n\t\t\t$mol_assert_equal( N.config , 5 )\n\t\t\t\n\t\t\ttype record_value = $mol_type_assert<\n\t\t\t\ttypeof N.Value ,\n\t\t\t\tnumber\n\t\t\t>\n\t\t\t\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'auto name'() {\n\t\t\t\n\t\t\tclass TestError extends $mol_error_mix {}\n\t\t\tconst mix = new TestError( 'foo' )\n\t\t\t\n\t\t\t$mol_assert_equal( mix.name, 'TestError' )\n\t\t\t\n\t\t},\n\t\t\n\t\t'empty mix'() {\n\t\t\t\n\t\t\tconst mix = new $mol_error_mix( 'foo' )\n\t\t\t\n\t\t\t$mol_assert_equal( mix.message, 'foo' )\n\t\t\t$mol_assert_equal( mix.cause, [] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'simpe mix'() {\n\t\t\t\n\t\t\tconst mix = new $mol_error_mix( 'foo',\n\t\t\t\tnew Error( 'bar', { cause: 'xxx' } ),\n\t\t\t\tnew Error( 'lol', { cause: 'yyy' } ),\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal( mix.message, 'foo\\n  bar\\n  lol' )\n\t\t\t$mol_assert_equal( mix.cause, [ 'xxx', 'yyy' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'mix of mixes'() {\n\t\t\t\n\t\t\tconst mix = new $mol_error_mix( 'mix',\n\t\t\t\tnew $mol_error_mix( 'foo1',\n\t\t\t\t\tnew Error( 'bar1', { cause: 'xxx1' } ),\n\t\t\t\t\tnew Error( 'lol1', { cause: 'yyy1' } ),\n\t\t\t\t),\n\t\t\t\tnew $mol_error_mix( 'foo2',\n\t\t\t\t\tnew Error( 'bar2', { cause: 'xxx2' } ),\n\t\t\t\t\tnew Error( 'lol2', { cause: 'yyy2' } ),\n\t\t\t\t),\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal( mix.message, 'mix\\n  foo1\\n    bar1\\n    lol1\\n  foo2\\n    bar2\\n    lol2' )\n\t\t\t$mol_assert_equal( mix.cause, [ 'xxx1', 'yyy1', 'xxx2', 'yyy2' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\t'pick by class'() {\n\t\t\t\n\t\t\tconst mix = new $mol_error_mix( 'foo',\n\t\t\t\tnew RangeError( 'bar', {\n\t\t\t\t\tcause: [\n\t\t\t\t\t\tnew SyntaxError( 'xxx1' ),\n\t\t\t\t\t\tnew SyntaxError( 'xxx2' ),\n\t\t\t\t\t\tnew TypeError( 'lol0' ),\n\t\t\t\t\t],\n\t\t\t\t} ),\n\t\t\t\tnew TypeError( 'lol1', {\n\t\t\t\t\tcause: new TypeError( 'xxx3' ),\n\t\t\t\t} ),\n\t\t\t\tnew TypeError( 'lol2' ),\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal( mix.pick( RangeError )!.message, 'bar' )\n\t\t\t$mol_assert_equal( mix.pick( SyntaxError )!.message, 'xxx1' )\n\t\t\t$mol_assert_equal( mix.pick( TypeError )!.message, 'lol1' )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\n\tenum sex { male , female }\n\t\n\tenum gender {\n\t\tbisexual = 'bisexual' ,\n\t\ttrans = 'transgender' ,\n\t}\n\t\n\t// Test disabled due https://github.com/microsoft/TypeScript/issues/46112\n\t// const Sex = $mol_data_enum( 'sex' , sex )\n\t// type sex_value =  $mol_type_assert< typeof Sex.Value , sex >\n\t\n\t$mol_test({\n\t\t\n\t\t'config of enum' () {\n\t\t\t\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\n\t\t\t$mol_assert_like( Sex.config , {\n\t\t\t\tname : 'sex' ,\n\t\t\t\tdict : sex ,\n\t\t\t} )\n\t\t\t\n\t\t} ,\n\n\t\t'name of enum' () {\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\t\t\t$mol_assert_equal( Sex.config.name , 'sex' )\n\t\t} ,\n\n\t\t'Is right value of enum' () {\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\t\t\t$mol_assert_equal( Sex(0) , sex.male )\n\t\t} ,\n\n\t\t'Is wrong value of enum' () {\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\t\t\t$mol_assert_fail( ()=> Sex( 2 as any ) , `2 is not value of sex enum` )\n\t\t} ,\n\n\t\t'Is name instead of value' () {\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\t\t\t$mol_assert_fail( ()=> Sex( 'male' as any ) , `male is not value of sex enum` )\n\t\t} ,\n\n\t\t'Is common object field' () {\n\t\t\tconst Sex = $mol_data_enum( 'sex' , sex )\n\t\t\t$mol_assert_fail( ()=> Sex( '__proto__' as any ) , `__proto__ is not value of sex enum` )\n\t\t} ,\n\n\t})\n\n\n\t// Test disabled due https://github.com/microsoft/TypeScript/issues/46112\n\t// type gender_value =  $mol_type_assert< typeof Gender.Value , gender >\n\n\t$mol_test({\n\t\t\n\t\t'config of enum' () {\n\n\t\t\tconst Gender = $mol_data_enum( 'gender' , gender )\n\t\t\t\n\t\t\t$mol_assert_like( Gender.config , {\n\t\t\t\tname : 'gender' ,\n\t\t\t\tdict : gender ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'Is right value of enum' () {\n\t\t\tconst Gender = $mol_data_enum( 'gender' , gender )\n\t\t\t$mol_assert_equal( Gender( 'transgender' as any ) , gender.trans )\n\t\t} ,\n\n\t\t'Is wrong value of enum' () {\n\t\t\tconst Gender = $mol_data_enum( 'gender' , gender )\n\t\t\t$mol_assert_fail( ()=> Gender( 'xxx' as any ) , `xxx is not value of gender enum` )\n\t\t} ,\n\n\t\t'Is name instead of value' () {\n\t\t\tconst Gender = $mol_data_enum( 'gender' , gender )\n\t\t\t$mol_assert_fail( ()=> Gender( 'trans' as any ) , `trans is not value of gender enum` )\n\t\t} ,\n\n\t\t'Is common object field' () {\n\t\t\tconst Gender = $mol_data_enum( 'gender' , gender )\n\t\t\t$mol_assert_fail( ()=> Gender( '__proto__' as any ) , `__proto__ is not value of gender enum` )\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\tconst png = new Uint8Array([ 0x1a, 0x0a, 0x00, 0x49, 0x48, 0x78, 0xda ])\n\n\t$mol_test({\n\t\t'base64 encode string'() {\n\t\t\t$mol_assert_equal($mol_base64_encode('Hello, ΧΨΩЫ'), 'SGVsbG8sIM6nzqjOqdCr')\n\t\t},\n\n\t\t'base64 encode binary'() {\n\t\t\t$mol_assert_equal($mol_base64_encode(png), 'GgoASUh42g==')\n\t\t},\n\t})\n}\n","namespace $ {\n\tconst png = new Uint8Array([ 0x1a, 0x0a, 0x00, 0x49, 0x48, 0x78, 0xda ])\n\n\t$mol_test({\n\t\t'base64 decode string'() {\n\t\t\t$mol_assert_like($mol_base64_decode('SGVsbG8sIM6nzqjOqdCr'), new TextEncoder().encode('Hello, ΧΨΩЫ'))\n\t\t},\n\n\t\t'base64 decode binary'() {\n\t\t\t$mol_assert_like($mol_base64_decode('GgoASUh42g=='), png)\n\t\t},\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\tasync 'str sizes'() {\n\t\t\t\n\t\t\tconst pair = await $$.$mol_crypto_auditor_pair()\n\t\t\t\n\t\t\tconst key_public = await pair.public.serial()\n\t\t\t$mol_assert_equal( key_public.length, $mol_crypto_auditor_public.size_str )\n\t\t\t\n\t\t\tconst key_private = await pair.private.serial()\n\t\t\t$mol_assert_equal( key_private.length, $mol_crypto_auditor_private.size_str )\n\t\t\t\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\tconst sign = await pair.private.sign( data )\n\t\t\t$mol_assert_equal( sign.byteLength, $mol_crypto_auditor_sign_size )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'bin sizes'() {\n\t\t\t\n\t\t\tconst pair = await $$.$mol_crypto_auditor_pair()\n\t\t\t\n\t\t\tconst key_public = await pair.public.toArray()\n\t\t\t$mol_assert_equal( key_public.length, $mol_crypto_auditor_public.size_bin )\n\t\t\t\n\t\t\tconst key_private = await pair.private.toArray()\n\t\t\t$mol_assert_equal( key_private.length, $mol_crypto_auditor_private.size_bin )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'verify self signed with auto generated key'() {\n\t\t\t\n\t\t\tconst auditor = await $$.$mol_crypto_auditor_pair()\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\tconst sign = await auditor.private.sign( data )\n\t\t\t\n\t\t\t$mol_assert_ok( await auditor.public.verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'verify signed with str exported auto generated key'() {\n\t\t\t\n\t\t\tconst pair = await $$.$mol_crypto_auditor_pair()\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\t\n\t\t\tconst Alice = await $mol_crypto_auditor_private.from( await pair.private.serial() )\n\t\t\tconst sign = await Alice.sign( data )\n\t\t\t\n\t\t\tconst Bob = await $mol_crypto_auditor_public.from( await pair.public.serial() )\n\t\t\t$mol_assert_ok( await Bob.verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'verify signed with bin exported auto generated key'() {\n\t\t\t\n\t\t\tconst pair = await $$.$mol_crypto_auditor_pair()\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\t\n\t\t\tconst Alice = await $mol_crypto_auditor_private.from( await pair.private.toArray() )\n\t\t\tconst sign = await Alice.sign( data )\n\t\t\t\n\t\t\tconst Bob = await $mol_crypto_auditor_public.from( await pair.public.toArray() )\n\t\t\t$mol_assert_ok( await Bob.verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'take public key from private str'() {\n\t\t\t\n\t\t\tconst pair = await $$.$mol_crypto_auditor_pair()\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\t\n\t\t\tconst Alice = pair.private\n\t\t\tconst sign = await Alice.sign( data )\n\t\t\t\n\t\t\tconst Bob = await pair.private.public()\n\t\t\tconst Carol = await $mol_crypto_auditor_public.from( await pair.private.serial() )\n\t\t\t\n\t\t\t$mol_assert_ok( await Bob.verify( data, sign ) )\n\t\t\t$mol_assert_ok( await Carol.verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'take public key from private bin'() {\n\t\t\t\n\t\t\tconst pair = await $$.$mol_crypto_auditor_pair()\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\t\n\t\t\tconst Alice = pair.private\n\t\t\tconst sign = await Alice.sign( data )\n\t\t\t\n\t\t\tconst Bob = await pair.private.public()\n\t\t\tconst Carol = await $mol_crypto_auditor_public.from( await pair.private.toArray() )\n\t\t\t\n\t\t\t$mol_assert_ok( await Bob.verify( data, sign ) )\n\t\t\t$mol_assert_ok( await Carol.verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t\n\tconst common = [\n\t\t\n\t\t$mol_int62_to_string({\n\t\t\tlo: 12 << 0 | 13 << 8 | 14 << 16 | 15 << 24, // land_lo\n\t\t\thi: 13 << 0 | 14 << 8 | 15 << 16 | 16 << 24, // land_hi\n\t\t}),\n\t\t$mol_int62_to_string({\n\t\t\tlo: 2  << 0 |  3 << 8 |  4 << 16 |  5 << 24, // auth_lo\n\t\t\thi: 3  << 0 |  4 << 8 |  5 << 16 |  6 << 24, // auto_hi\n\t\t}),\n\t\t\n\t\t$mol_int62_to_string({\n\t\t\tlo: 4  << 0 |  5 << 8 |  6 << 16 |  7 << 24, // head_lo\n\t\t\thi: 5  << 0 |  6 << 8 |  7 << 16 |  8 << 24, // head_hi\n\t\t}),\n\t\t$mol_int62_to_string({\n\t\t\tlo: 10 << 0 | 11 << 8 | 12 << 16 | 13 << 24, // self_lo\n\t\t\thi: 11 << 0 | 12 << 8 | 13 << 16 | 14 << 24, // self_hi\n\t\t}),\n\t\t\n\t\t$mol_int62_to_string({\n\t\t\tlo: 6  << 0 |  7 << 8 |  8 << 16 |  9 << 24, // next_lo\n\t\t\thi: 7  << 0 |  8 << 8 |  9 << 16 | 10 << 24, // next_hi\n\t\t}),\n\t\t$mol_int62_to_string({\n\t\t\tlo: 8  << 0 |  9 << 8 | 10 << 16 | 11 << 24, // prev_lo\n\t\t\thi: 9  << 0 | 10 << 8 | 11 << 16 | 12 << 24, // prev_hi\n\t\t}),\n\t\t\n\t\t1  << 0 |  2 << 8 |  3 << 16 |  4 << 24, // time\n\t\t\n\t] as const\n\t\n\t$mol_test({\n\t\t\n\t\t'pack and unpack unit with null'( $ ) {\n\t\t\t\n\t\t\tconst source = new $hyoo_crowd_unit(\n\t\t\t\t... common,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t)\n\t\t\t\n\t\t\tconst packed = $hyoo_crowd_unit_bin.from_unit( source )\n\t\t\tconst unpacked = packed.unit()\n\t\t\t\n\t\t\tsource.bin = packed\n\t\t\t$mol_assert_like( source, unpacked )\n\t\t\t\n\t\t},\n\t\t\n\t\t'pack and unpack unit with json'( $ ) {\n\t\t\t\n\t\t\tconst source = new $hyoo_crowd_unit(\n\t\t\t\t... common,\n\t\t\t\t{ a: [ 1 ] },\n\t\t\t\tnull,\n\t\t\t)\n\t\t\t\n\t\t\tconst packed = $hyoo_crowd_unit_bin.from_unit( source )\n\t\t\tconst unpacked = packed.unit()\n\t\t\t\n\t\t\tsource.bin = packed\n\t\t\t$mol_assert_like( source, unpacked )\n\t\t\t\n\t\t},\n\t\t\n\t\t'pack and unpack unit with bin'( $ ) {\n\t\t\t\n\t\t\tconst source = new $hyoo_crowd_unit(\n\t\t\t\t... common,\n\t\t\t\tnew Uint8Array([ 1, 2, 3, 4, 5, 6, 7, 8 ]),\n\t\t\t\tnull,\n\t\t\t)\n\t\t\t\n\t\t\tconst packed = $hyoo_crowd_unit_bin.from_unit( source )\n\t\t\tconst unpacked = packed.unit()\n\t\t\t\n\t\t\tsource.bin = packed\n\t\t\t$mol_assert_like( source, unpacked )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'sign / verify'( $ ) {\n\t\t\t\n\t\t\tconst source = new $hyoo_crowd_unit(\n\t\t\t\t... common,\n\t\t\t\t{ a: [ 1 ] },\n\t\t\t\tnull,\n\t\t\t)\n\t\t\t\n\t\t\tconst packed = $hyoo_crowd_unit_bin.from_unit( source )\n\t\t\t\n\t\t\tconst key = await $.$mol_crypto_auditor_pair()\n\t\t\tpacked.sign( new Uint8Array( await key.private.sign( packed.sens() ) ) )\n\t\t\t\n\t\t\tconst sign = packed.sign()\n\t\t\t\n\t\t\t$mol_assert_ok( await key.public.verify( packed.sens(), sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","/** @jsx $mol_jsx */\n/** @jsxFrag $mol_jsx_frag */\nnamespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'same list'() {\n\t\t\t\n\t\t\tconst list = <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">b</p>\n\t\t\t\t<p data-rev=\"old\">c</p>\n\t\t\t</body>\n\t\t\t\n\t\t\t$mol_reconcile({\n\t\t\t\tprev: [ ... list.children ],\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 3,\n\t\t\t\tnext: 'abc',\n\t\t\t\tequal: ( next, prev )=> prev.textContent === next,\n\t\t\t\tdrop: ( prev, lead )=> list.removeChild( prev ),\n\t\t\t\tinsert: ( next, lead )=> list.insertBefore( <p data-rev=\"new\">{ next }</p>, lead ? lead.nextSibling : list.firstChild ),\n\t\t\t\tupdate: ( next, prev, lead )=> {\n\t\t\t\t\tprev.textContent = next\n\t\t\t\t\tprev.setAttribute( 'data-rev', 'up' )\n\t\t\t\t\treturn prev\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( list, <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">b</p>\n\t\t\t\t<p data-rev=\"old\">c</p>\n\t\t\t</body> )\n\t\t\t\n\t\t},\n\t\t\n\t\t'insert items'() {\n\t\t\t\n\t\t\tconst list = <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">b</p>\n\t\t\t\t<p data-rev=\"old\">c</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body>\n\t\t\t\n\t\t\t$mol_reconcile({\n\t\t\t\tprev: [ ... list.children ],\n\t\t\t\tfrom: 1,\n\t\t\t\tto: 3,\n\t\t\t\tnext: 'bXYc',\n\t\t\t\tequal: ( next, prev )=> prev.textContent === next,\n\t\t\t\tdrop: ( prev, lead )=> list.removeChild( prev ),\n\t\t\t\tinsert: ( next, lead )=> list.insertBefore( <p data-rev=\"new\">{ next }</p>, lead ? lead.nextSibling : list.firstChild ),\n\t\t\t\tupdate: ( next, prev, lead )=> {\n\t\t\t\t\tprev.textContent = next\n\t\t\t\t\tprev.setAttribute( 'data-rev', 'up' )\n\t\t\t\t\treturn prev\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( list, <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">b</p>\n\t\t\t\t<p data-rev=\"new\">X</p>\n\t\t\t\t<p data-rev=\"new\">Y</p>\n\t\t\t\t<p data-rev=\"old\">c</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body> )\n\t\t\t\n\t\t},\n\t\t\n\t\t'split item'() {\n\t\t\t\n\t\t\tconst list = <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">bc</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body>\n\t\t\t\n\t\t\t$mol_reconcile({\n\t\t\t\tprev: [ ... list.children ],\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 3,\n\t\t\t\tnext: 'abcd',\n\t\t\t\tequal: ( next, prev )=> prev.textContent === next,\n\t\t\t\tdrop: ( prev, lead )=> list.removeChild( prev ),\n\t\t\t\tinsert: ( next, lead )=> list.insertBefore( <p data-rev=\"new\">{ next }</p>, lead ? lead.nextSibling : list.firstChild ),\n\t\t\t\tupdate: ( next, prev, lead )=> {\n\t\t\t\t\tprev.textContent = next\n\t\t\t\t\tprev.setAttribute( 'data-rev', 'up' )\n\t\t\t\t\treturn prev\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( list, <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"new\">b</p>\n\t\t\t\t<p data-rev=\"up\">c</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body> )\n\t\t\t\n\t\t},\n\t\t\n\t\t'drop items'() {\n\t\t\t\n\t\t\tconst list = <body>\n\t\t\t\t<p data-rev=\"old\">A</p>\n\t\t\t\t<p data-rev=\"old\">B</p>\n\t\t\t\t<p data-rev=\"old\">x</p>\n\t\t\t\t<p data-rev=\"old\">y</p>\n\t\t\t\t<p data-rev=\"old\">C</p>\n\t\t\t\t<p data-rev=\"old\">D</p>\n\t\t\t</body>\n\t\t\t\n\t\t\t$mol_reconcile({\n\t\t\t\tprev: [ ... list.children ],\n\t\t\t\tfrom: 1,\n\t\t\t\tto: 5,\n\t\t\t\tnext: 'BC',\n\t\t\t\tequal: ( next, prev )=> prev.textContent === next,\n\t\t\t\tdrop: ( prev, lead )=> list.removeChild( prev ),\n\t\t\t\tinsert: ( next, lead )=> list.insertBefore( <p data-rev=\"new\">{ next }</p>, lead ? lead.nextSibling : list.firstChild ),\n\t\t\t\tupdate: ( next, prev, lead )=> {\n\t\t\t\t\tprev.textContent = next\n\t\t\t\t\tprev.setAttribute( 'data-rev', 'up' )\n\t\t\t\t\treturn prev\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( list, <body>\n\t\t\t\t<p data-rev=\"old\">A</p>\n\t\t\t\t<p data-rev=\"old\">B</p>\n\t\t\t\t<p data-rev=\"old\">C</p>\n\t\t\t\t<p data-rev=\"old\">D</p>\n\t\t\t</body> )\n\t\t\t\n\t\t},\n\t\t\n\t\t'update items'() {\n\t\t\t\n\t\t\tconst list = <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"old\">B</p>\n\t\t\t\t<p data-rev=\"old\">C</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body>\n\t\t\t\n\t\t\t$mol_reconcile({\n\t\t\t\tprev: [ ... list.children ],\n\t\t\t\tfrom: 1,\n\t\t\t\tto: 3,\n\t\t\t\tnext: 'XY',\n\t\t\t\tequal: ( next, prev )=> prev.textContent === next,\n\t\t\t\tdrop: ( prev, lead )=> list.removeChild( prev ),\n\t\t\t\tinsert: ( next, lead )=> list.insertBefore( <p data-rev=\"new\">{ next }</p>, lead ? lead.nextSibling : list.firstChild ),\n\t\t\t\tupdate: ( next, prev, lead )=> {\n\t\t\t\t\tprev.textContent = next\n\t\t\t\t\tprev.setAttribute( 'data-rev', 'up' )\n\t\t\t\t\treturn prev\n\t\t\t\t},\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( list, <body>\n\t\t\t\t<p data-rev=\"old\">a</p>\n\t\t\t\t<p data-rev=\"up\">X</p>\n\t\t\t\t<p data-rev=\"up\">Y</p>\n\t\t\t\t<p data-rev=\"old\">d</p>\n\t\t\t</body> )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'empty string'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t''.match( $hyoo_crowd_tokenizer ),\n\t\t\t\tnull,\n\t\t\t)\n\t\t},\n\t\t\n\t\t'new lines'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'\\n\\r\\n'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ '\\n', '\\r\\n' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'numbers'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'123'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ '123' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'emoji'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'😀😁'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ '😀', '😁' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'emoji with modifier'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'👩🏿👩🏿'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ '👩🏿', '👩🏿' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'combo emoji with modifier'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'👩🏿‍🤝‍🧑🏿👩🏿‍🤝‍🧑🏿'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ '👩🏿‍🤝‍🧑🏿', '👩🏿‍🤝‍🧑🏿' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'word with spaces'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'foo1  bar2'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ 'foo1', ' ', ' bar2' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'word with diactric'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'Е́е́'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ 'Е́е́' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'word with punctuation'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'foo--bar'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ 'foo', '--', 'bar' ],\n\t\t\t)\n\t\t},\n\t\t\n\t\t'CamelCase'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t'Foo1BAR2'.match( $hyoo_crowd_tokenizer ),\n\t\t\t\t[ 'Foo1', 'BAR2' ],\n\t\t\t)\n\t\t},\n\t\t\n\t})\n}\n","/** @jsx $mol_jsx */\nnamespace $ {\n\t$mol_test({\n\n\t\t'number'() {\n\t\t\tconst dict = new $mol_dict< number , number >()\n\t\t\t$mol_assert_equal( dict.get( 123 ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( 123 ) , false )\n\n\t\t\tdict.set( 123 , 321 )\n\t\t\t$mol_assert_equal( dict.get( 123 ) , 321 )\n\t\t\t$mol_assert_equal( dict.has( 123 ) , true )\n\n\t\t\tdict.delete( 123 )\n\t\t\t$mol_assert_equal( dict.get( 123 ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( 123 ) , false )\n\t\t} ,\n\n\t\t'pojo as key'() {\n\t\t\tconst dict = new $mol_dict< { foo : number } , number >()\n\t\t\t$mol_assert_equal( dict.get({ foo : 123 }) , undefined )\n\t\t\t$mol_assert_equal( dict.has({ foo : 123 }) , false )\n\n\t\t\tdict.set( { foo : 123 } , 321 )\n\t\t\t$mol_assert_equal( dict.get({ foo : 123 }) , 321 )\n\t\t\t$mol_assert_equal( dict.has({ foo : 123 }) , true )\n\n\t\t\tdict.delete({ foo : 123 })\n\t\t\t$mol_assert_equal( dict.get({ foo : 123 }) , undefined )\n\t\t\t$mol_assert_equal( dict.has({ foo : 123 }) , false )\n\t\t} ,\n\n\t\t'array as key'() {\n\t\t\tconst dict = new $mol_dict< [ number ] , number >()\n\t\t\t$mol_assert_equal( dict.get([ 123 ]) , undefined )\n\t\t\t$mol_assert_equal( dict.has([ 123 ]) , false )\n\n\t\t\tdict.set( [ 123 ] , 321 )\n\t\t\t$mol_assert_equal( dict.get([ 123 ]) , 321 )\n\t\t\t$mol_assert_equal( dict.has([ 123 ]) , true )\n\n\t\t\tdict.delete([ 123 ])\n\t\t\t$mol_assert_equal( dict.get([ 123 ]) , undefined )\n\t\t\t$mol_assert_equal( dict.has([ 123 ]) , false )\n\t\t} ,\n\n\t\t'html element as key'() {\n\t\t\tconst el = <div />\n\n\t\t\tconst dict = new $mol_dict< Element , number >()\n\t\t\t$mol_assert_equal( dict.get( el ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( el ) , false )\n\n\t\t\tdict.set( el , 321 )\n\t\t\t$mol_assert_equal( dict.get( el ) , 321 )\n\t\t\t$mol_assert_equal( dict.has( el ) , true )\n\t\t\t\n\t\t\t$mol_assert_equal( dict.get( <div/> ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( <div/> ) , false )\n\n\t\t\tdict.delete( el )\n\t\t\t$mol_assert_equal( dict.get( el ) , undefined )\n\t\t\t$mol_assert_equal( dict.has( el ) , false )\n\t\t} ,\n\n\t\t'for-of key restore'() {\n\t\t\t\n\t\t\tconst dict = new $mol_dict([[ [123] , 321 ]])\n\t\t\t\n\t\t\tconst keys = [] as number[][]\n\t\t\tconst vals = [] as number[]\n\n\t\t\tfor( const [ key , val ] of dict ) {\n\t\t\t\tkeys.push( key )\n\t\t\t\tvals.push( val )\n\t\t\t}\n\n\t\t\t$mol_assert_like( keys, [ [123] ] )\n\t\t\t$mol_assert_like( vals, [ 321 ] )\n\n\t\t} ,\n\n\t\t'method iterators key restore'() {\n\t\t\tconst dict = new $mol_dict([[ [123] , 321 ]])\n\t\t\t$mol_assert_like( [ ... dict.keys() ], [ [123] ] )\n\t\t\t$mol_assert_like( [ ... dict.values() ], [ 321 ] )\n\t\t\t$mol_assert_like( [ ... dict.entries() ], [ [ [123], 321 ] ] )\n\t\t} ,\n\n\t\t'forEach key restore'() {\n\n\t\t\tconst dict = new $mol_dict([[ [123] , 321 ]])\n\t\t\t\n\t\t\tconst keys = [] as number[][]\n\t\t\tconst vals = [] as number[]\n\n\t\t\tdict.forEach( ( val , key )=> {\n\t\t\t\tkeys.push( key )\n\t\t\t\tvals.push( val )\n\t\t\t} )\n\n\t\t\t$mol_assert_like( keys, [ [123] ] )\n\t\t\t$mol_assert_like( vals, [ 321 ] )\n\t\t\t\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'fresh'() {\n\t\t\t\n\t\t\tconst clock = new $hyoo_crowd_clock\n\t\t\tclock.see_peer( 'b_33', 1 )\n\t\t\tclock.see_peer( 'm_66', 2 )\n\t\t\t\n\t\t\t$mol_assert_ok( clock.fresh( 'm_66', 3 ) )\n\t\t\t$mol_assert_ok( clock.fresh( 'x_99', 1 ) )\n\t\t\t\n\t\t\t$mol_assert_not( clock.fresh( 'm_66', 1 ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'fork'() {\n\t\t\t\n\t\t\tconst left = new $hyoo_crowd_clock\n\t\t\tleft.see_peer( 'b_33', 1 )\n\t\t\tleft.see_peer( 'm_66', 2 )\n\t\t\t\n\t\t\tconst right = new $hyoo_crowd_clock( left )\n\t\t\t\n\t\t\t$mol_assert_equal( right.last_time, 2 )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... right ],\n\t\t\t\t[\n\t\t\t\t\t[ 'b_33', 1 ],\n\t\t\t\t\t[ 'm_66', 2 ],\n\t\t\t\t],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'generate'() {\n\t\t\t\n\t\t\tconst clock = new $hyoo_crowd_clock\n\t\t\tclock.see_peer( 'b_33', $mol_int62_min + 1 )\n\t\t\tclock.see_peer( 'm_66', $mol_int62_min + 2 )\n\t\t\t\n\t\t\tconst now = clock.now() as number\n\t\t\t\n\t\t\tconst time1 = clock.tick( 'b_33' )\n\t\t\t$mol_assert_like( time1, now )\n\t\t\t$mol_assert_like( clock.last_time, now )\n\t\t\t\n\t\t\tclock.see_peer( 'm_66', clock.now() + 10 )\n\t\t\t\n\t\t\tconst time2 = clock.tick( 'm_66' )\n\t\t\t$mol_assert_like( time2, now + 11 )\n\t\t\t$mol_assert_like( clock.last_time, now + 11 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'ahead'() {\n\t\t\t\n\t\t\tconst clock1 = new $hyoo_crowd_clock\n\t\t\tclock1.see_peer( 'b_33', 1 )\n\t\t\tclock1.see_peer( 'm_66', 2 )\n\t\t\t\n\t\t\tconst clock2 = new $hyoo_crowd_clock\n\t\t\tclock2.see_peer( 'b_33', 1 )\n\t\t\tclock2.see_peer( 'x_99', 2 )\n\t\t\t\n\t\t\tconst clock3 = new $hyoo_crowd_clock\n\t\t\tclock3.see_peer( 'b_33', 1 )\n\t\t\tclock3.see_peer( 'm_66', 2 )\n\t\t\tclock3.see_peer( 'x_99', 2 )\n\t\t\t\n\t\t\t$mol_assert_ok( clock1.ahead( clock2 ) )\n\t\t\t$mol_assert_ok( clock2.ahead( clock1 ) )\n\t\t\t\n\t\t\t$mol_assert_ok( clock3.ahead( clock1 ) )\n\t\t\t$mol_assert_ok( clock3.ahead( clock2 ) )\n\t\t\t\n\t\t\t$mol_assert_not( clock1.ahead( clock3 ) )\n\t\t\t$mol_assert_not( clock2.ahead( clock3 ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'bin'() {\n\t\t\t\n\t\t\tconst clocks1 = [ new $hyoo_crowd_clock, new $hyoo_crowd_clock ] as const\n\t\t\tclocks1[ $hyoo_crowd_unit_group.auth ].see_peer( 'b_33', 1 )\n\t\t\tclocks1[ $hyoo_crowd_unit_group.data ].see_peer( 'b_33', 2 )\n\t\t\t\n\t\t\tconst bin = $hyoo_crowd_clock_bin.from( '2_b', clocks1, 0 )\n\t\t\t\n\t\t\t$mol_assert_like( bin.land(), '2_b' )\n\t\t\t\n\t\t\tconst clocks2 = [ new $hyoo_crowd_clock, new $hyoo_crowd_clock ] as const\n\t\t\tclocks2[ $hyoo_crowd_unit_group.auth ].see_bin( bin, $hyoo_crowd_unit_group.auth )\n\t\t\tclocks2[ $hyoo_crowd_unit_group.data ].see_bin( bin, $hyoo_crowd_unit_group.data )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tclocks2.map( clock => new Map( clock ) ),\n\t\t\t\t[\n\t\t\t\t\tnew Map([\n\t\t\t\t\t\t[ 'b_33', 1 ],\n\t\t\t\t\t]),\n\t\t\t\t\tnew Map([\n\t\t\t\t\t\t[ 'b_33', 2 ],\n\t\t\t\t\t]),\n\t\t\t\t]\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\tasync 'world delta & apply'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\t\n\t\t\tconst land1 = await world1.grab()\n\t\t\tconst land2 = await world1.grab()\n\t\t\t\n\t\t\t// do changes\n\t\t\tland1.chief.as( $hyoo_crowd_list ).list([ 123, 456 ])\n\t\t\tland2.chief.as( $hyoo_crowd_list ).list([ 456, 789 ])\n\t\t\t\n\t\t\t// apply changes\n\t\t\tfor await( const batch of world1.delta() ) {\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t( await world2.apply( batch ) ).forbid,\n\t\t\t\t\tnew Map,\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tworld2.land( land1.id() ).chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\t[ 123, 456 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tworld2.land( land2.id() ).chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\t[ 456, 789 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'land delta & apply'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\t\n\t\t\tconst land = world1.land( world1.peer!.id )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland.chief.as( $hyoo_crowd_list ).list([ 123, 456 ])\n\t\t\t\n\t\t\t// apply changes\n\t\t\tconst batch = await world1.delta_batch( land )\n\t\t\t$mol_assert_like(\n\t\t\t\t( await world2.apply( batch ) ).forbid,\n\t\t\t\tnew Map,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tworld2.land( land.id() ).chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\t[ 123, 456 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'ignore changes from far future'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst land = await world1.grab()\n\t\t\t\n\t\t\t// go to future\n\t\t\tconst clock = land.clock_data\n\t\t\tclock.see_time( clock.now() + 60 * 60 * 24 * 10 )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland.chief.as( $hyoo_crowd_reg ).numb( 123 )\n\t\t\t\n\t\t\t// 1 ignored units\n\t\t\tconst batch = await world1.delta_batch( land )\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t[ 'Far future' ],\n\t\t\t)\n\t\t\t\n\t\t\t// only 3 grab units\n\t\t\t$mol_assert_like( world2.land( land.id() ).delta().length, 3 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'ignore auth as another peer'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( { ... await $hyoo_crowd_peer.generate(), id: '1_1' } )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst land = await world1.grab()\n\t\t\t\n\t\t\t// do changes\n\t\t\tland.chief.as( $hyoo_crowd_reg ).numb( 123 )\n\t\t\t\n\t\t\t// 2 ignored units\n\t\t\tconst batch = await world1.delta_batch( land )\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t[ 'Alien join key', 'No auth key' ],\n\t\t\t)\n\t\t\t\n\t\t\t// only 2 grab units\n\t\t\t$mol_assert_like( world2.land( land.id() ).delta().length, 2 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'ignore auth without key'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( { ... await $hyoo_crowd_peer.generate(), key_public_serial: [] as any } )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst land = world1.land( '1_1' )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland.chief.as( $hyoo_crowd_reg ).numb( 123 )\n\t\t\t\n\t\t\t// 2 ignored units\n\t\t\tconst batch = await world1.delta_batch( land )\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t[ 'No join key', 'Level too low' ],\n\t\t\t)\n\t\t\t\n\t\t\t// only 2 grab units\n\t\t\t$mol_assert_like( world2.land( land.id() ).delta().length, 0 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'ignore changes with wrong signs'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst land = await world1.grab()\n\t\t\t\n\t\t\t// 2 ignored units\n\t\t\tconst batch = await world1.delta_batch( land )\n\t\t\tbatch[152] = ~batch[152] // break sign\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t[ 'Wrong join sign', 'Level too low' ],\n\t\t\t)\n\t\t\t\n\t\t\t// no applied units \n\t\t\t$mol_assert_like( world2.land( land.id() ).delta().length, 0 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'ignore update auth except auth removing'() {\n\t\t\t\n\t\t\tconst peer = await $hyoo_crowd_peer.generate()\n\t\t\tconst world1 = new $hyoo_crowd_world( peer )\n\t\t\tconst world2 = new $hyoo_crowd_world( peer )\n\t\t\t\n\t\t\tconst land1 = await world1.grab()\n\t\t\tconst land2 = world2.land( land1.id() )\n\t\t\tland2.clock_auth.tick( peer.id )\n\t\t\tland2.clock_data.tick( peer.id )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland1.chief.as( $hyoo_crowd_reg ).numb( 123 )\n\t\t\tland2.chief.as( $hyoo_crowd_reg ).numb( 234 )\n\t\t\t\n\t\t\tconst batch = await world1.delta_batch( land1 )\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t[],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like( land2.delta().length, 5 )\n\t\t\t\n\t\t\tland1.chief.as( $hyoo_crowd_reg ).numb( 345 )\n\t\t\tland1.leave()\n\t\t\t\n\t\t\tconst batch2 = await world1.delta_batch( land1 )\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... ( await world2.apply( batch2 ) ).forbid.values() ],\n\t\t\t\t[ 'No auth key' ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tland2.chief.as( $hyoo_crowd_reg ).numb(),\n\t\t\t\t123,\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'levels'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\t\n\t\t\tconst peer = await $hyoo_crowd_peer.generate()\n\t\t\t\n\t\t\tconst land1 = await world1.grab() // +3 units\n\t\t\tconst land2 = world2.land( land1.id() )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland1.chief.sub( 'foo', $hyoo_crowd_reg ).numb( 123 ) // +1 unit\n\t\t\t\n\t\t\tfor await( const batch of world1.delta() ) {\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[],\n\t\t\t\t)\n\t\t\t}\n\t\t\t\n\t\t\tland2.chief.sub( 'foo', $hyoo_crowd_reg ).numb( 234 ) // 1 unit update +1 unit\n\t\t\tland2.chief.sub( 'bar', $hyoo_crowd_reg ).numb( 234 ) // +1 unit\n\t\t\tland2.level( peer.id, $hyoo_crowd_peer_level.law ) // ingnored\n\t\t\t\n\t\t\t$mol_assert_like( land1.delta().length, 4 )\n\t\t\t\n\t\t\tlevel_get: {\n\t\t\t\t\n\t\t\t\tconst batch = await world2.delta_batch( land2 )\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[ 'Level too low', 'Level too low' ],\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 5 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 123 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 0 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.get )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlevel_add: {\n\t\t\t\t\n\t\t\t\tland1.level( land2.peer().id, $hyoo_crowd_peer_level.add ) // +1 unit\n\t\t\t\t\n\t\t\t\tconst batch = await world2.delta_batch( land2 )\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[ 'Level too low' ],\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 7 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 123 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.get )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlevel_mod: {\n\t\t\t\t\n\t\t\t\tland1.level( land2.peer().id, $hyoo_crowd_peer_level.mod )\n\t\t\t\t\n\t\t\t\tconst batch = await world2.delta_batch( land2 )\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[],\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 7 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.get )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlevel_law: {\n\t\t\t\t\n\t\t\t\tland1.level( land2.peer().id, $hyoo_crowd_peer_level.law )\n\t\t\t\t\n\t\t\t\tfor await( const batch of world1.delta() ) {\n\t\t\t\t\t$mol_assert_like(\n\t\t\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t\t[],\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tland2.level( peer.id, $hyoo_crowd_peer_level.law ) // +1 unit\n\t\t\t\t\n\t\t\t\tconst batch = await world2.delta_batch( land2 )\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[],\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 8 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.law )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'default level'() {\n\t\t\t\n\t\t\tconst world1 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\tconst world2 = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\t\t\n\t\t\tconst peer = await $hyoo_crowd_peer.generate()\n\t\t\t\n\t\t\tconst land1 = await world1.grab()\n\t\t\tconst land2 = world2.land( land1.id() )\n\t\t\t\n\t\t\t// do changes\n\t\t\tland1.chief.sub( 'foo', $hyoo_crowd_reg ).numb( 123 )\n\t\t\t\n\t\t\tconst batch = await world1.delta_batch( land1 )\n\t\t\t$mol_assert_like(\n\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t[],\n\t\t\t)\n\t\t\t\n\t\t\tland2.chief.sub( 'foo', $hyoo_crowd_reg ).numb( 234 )\n\t\t\tland2.chief.sub( 'bar', $hyoo_crowd_reg ).numb( 234 )\n\t\t\tland2.level( peer.id, $hyoo_crowd_peer_level.law ) \n\t\t\t\n\t\t\t$mol_assert_like( land1.delta().length, 4 )\n\t\t\t\n\t\t\tlevel_add: {\n\t\t\t\t\n\t\t\t\tland1.level_base( $hyoo_crowd_peer_level.add )\n\t\t\t\t\n\t\t\t\tconst batch = await world2.delta_batch( land2 )\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[ 'Level too low' ],\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 7 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 123 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.add )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlevel_mod: {\n\t\t\t\t\n\t\t\t\tland1.level_base( $hyoo_crowd_peer_level.mod )\n\t\t\t\t\n\t\t\t\tconst batch = await world2.delta_batch( land2 )\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[ ],\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 7 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.mod )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlevel_law: {\n\t\t\t\t\n\t\t\t\tland1.level_base( $hyoo_crowd_peer_level.law )\n\t\t\t\t\n\t\t\t\tfor await( const batch of world1.delta() ) {\n\t\t\t\t\t$mol_assert_like(\n\t\t\t\t\t\t[ ... ( await world2.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t\t[],\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tland2.level( peer.id, $hyoo_crowd_peer_level.law ) //ingnored\n\t\t\t\t\n\t\t\t\tconst batch = await world2.delta_batch( land2 )\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\t[ ... ( await world1.apply( batch ) ).forbid.values() ],\n\t\t\t\t\t[],\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\t$mol_assert_like( land1.delta().length, 7 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'foo', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.chief.sub( 'bar', $hyoo_crowd_reg ).numb(), 234 )\n\t\t\t\t$mol_assert_like( land1.level( peer.id ), $hyoo_crowd_peer_level.law )\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t\n\tasync function make_land() {\n\t\tconst world = new $hyoo_crowd_world( await $hyoo_crowd_peer.generate() )\n\t\treturn world.grab()\n\t}\n\t\n\t$mol_test({\n\t\t\n\t\tasync 'Join & Leave'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t$mol_assert_like( store.peers(), [ store.id(), store.peer_id() ] )\n\t\t\t$mol_assert_like( store.residents(), [] )\n\t\t\t\n\t\t\tconst peer = await $hyoo_crowd_peer.generate()\n\t\t\t\n\t\t\tstore.join()\n\t\t\t$mol_assert_like( store.peers(), [ store.id(), store.peer_id() ] )\n\t\t\t$mol_assert_like( store.residents(), [ store.peer_id() ] )\n\t\t\t\n\t\t\tstore.level( peer.id, $hyoo_crowd_peer_level.add )\n\t\t\t$mol_assert_like( store.peers(), [ store.id(), store.peer_id(), peer.id ] )\n\t\t\t$mol_assert_like( store.residents(), [ store.peer_id() ] )\n\t\t\t\n\t\t\tstore.leave()\n\t\t\t$mol_assert_like( store.peers(), [ store.id(), store.peer_id(), peer.id ] )\n\t\t\t$mol_assert_like( store.residents(), [] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Default state'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), null )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).bool(), false )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).numb(), 0 )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).str(), '' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [] )\n\t\t\t$mol_assert_like( store.delta().length, 2 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Return default state'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tconst reg = store.chief.as( $hyoo_crowd_reg )\n\t\t\tconst list = store.chief.as( $hyoo_crowd_list )\n\t\t\tconst text = store.chief.as( $hyoo_crowd_text )\n\t\t\t\n\t\t\t$mol_assert_like( reg.bool( false ), false )\n\t\t\t$mol_assert_like( reg.str( '' ), '' )\n\t\t\t$mol_assert_like( reg.numb( 0 ), 0 )\n\t\t\t$mol_assert_like( text.str( '' ), '' )\n\t\t\t$mol_assert_like( reg.value( null ), null )\n\t\t\t$mol_assert_like( list.list(), [] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Serial changes'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tObject.assign( store.peer(), { key_public_serial: null } )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), null )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [] )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).bool(), false )\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).bool( true )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), true )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ true ] )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).numb(), 1 )\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).numb( 1 )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), 1 )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 1 ] )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).str(), '1' )\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).str( 'x' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), 'x' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'x' ] )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).value( null )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), null )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [] )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta().map( unit => unit.data ).slice(1),\n\t\t\t\t[ 3, null ]\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Name spaces'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.sub( 'foo', $hyoo_crowd_struct ).sub( 'bar', $hyoo_crowd_reg ).numb( 111 )\n\t\t\tstore.chief.sub( 'foo', $hyoo_crowd_struct ).sub( 'ton', $hyoo_crowd_reg ).numb( 222 )\n\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [] )\n\t\t\t$mol_assert_like( store.chief.sub( 'foo', $hyoo_crowd_list ).list(), [] )\n\t\t\t$mol_assert_like( store.chief.sub( 'foo', $hyoo_crowd_struct ).sub( 'bar', $hyoo_crowd_list ).list(), [ 111 ] )\n\t\t\t$mol_assert_like( store.chief.sub( 'foo', $hyoo_crowd_struct ).sub( 'ton', $hyoo_crowd_list ).list(), [ 222 ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Name spaces merging'() {\n\t\t\t\n\t\t\tconst left = await make_land()\n\t\t\tleft.chief.sub( 'foo', $hyoo_crowd_list ).list([ 111 ])\n\t\t\t\n\t\t\tconst right = await make_land()\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.chief.sub( 'foo', $hyoo_crowd_list ).list([ 222 ])\n\t\t\t\n\t\t\tconst left_delta = left.delta()\n\t\t\tconst right_delta = right.delta()\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.sub( 'foo', $hyoo_crowd_list ).list(),\n\t\t\t\tright.chief.sub( 'foo', $hyoo_crowd_list ).list(),\n\t\t\t\t[ 222, 111 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Ignore same changes'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).str( 'foo' )\n\t\t\tconst time = store.clock_data.last_time\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_reg ).str( 'foo' )\n\t\t\tstore.chief.as( $hyoo_crowd_list ).list( [ 'foo' ] )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta().map( unit => unit.time ).slice(2),\n\t\t\t\t[ time+2, time ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Serial insert values'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert([ 'foo' ])\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert([ 'bar' ])\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foo', 'bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Concurent insert values'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert( [ 'foo' ], 0 )\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert( [ 'bar' ], 0 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'bar', 'foo' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert value between others'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert([ 'foo' ])\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert([ 'bar' ])\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert( [ 'lol' ], 1 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foo', 'lol', 'bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert value inside other'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).insert([ 'foo' ])\n\t\t\tstore.chief.nodes( $hyoo_crowd_list )[0].insert([ 'bar' ])\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foo' ] )\n\t\t\t$mol_assert_like( store.chief.nodes( $hyoo_crowd_list )[0].list(), [ 'bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert before removed before changed'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tconst node = store.chief.as( $hyoo_crowd_list )\n\t\t\t\n\t\t\tnode.list([ 'foo', 'bar' ])\n\t\t\tnode.list([ 'xxx', 'foo', 'bar' ])\n\t\t\tnode.list([ 'xxx', 'bars' ])\n\t\t\t\n\t\t\t$mol_assert_like( node.list(), [ 'xxx', 'bars' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Move existen Unit'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'FooBarLol' )\n\t\t\tstore.chief.as( $hyoo_crowd_list ).move( 0, 2 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'BarFooLol' )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Many moves'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tconst text = store.chief.as( $hyoo_crowd_text )\n\t\t\tconst list = store.chief.as( $hyoo_crowd_list )\n\t\t\t\n\t\t\ttext.str( 'FooBarLol' )\n\t\t\tlist.move( 2, 1 )\n\t\t\tlist.move( 2, 1 )\n\t\t\tlist.move( 0, 3 )\n\t\t\tlist.move( 2, 1 )\n\t\t\t\n\t\t\t$mol_assert_like( text.str(), 'BarFooLol' )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Separated sublists'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tconst text = store.chief.as( $hyoo_crowd_text )\n\t\t\tconst list = store.chief.as( $hyoo_crowd_list )\n\t\t\t\n\t\t\ttext.str( 'AaBbCcDdEeFf' )\n\t\t\t\n\t\t\tlist.move( 3, 5 )\n\t\t\tlist.move( 3, 5 )\n\t\t\tlist.move( 5, 4 )\n\t\t\t\n\t\t\tlist.move( 0, 2 )\n\t\t\tlist.move( 0, 2 )\n\t\t\tlist.move( 2, 1 )\n\t\t\t\n\t\t\t$mol_assert_like( text.str(), 'AaCcBbDdFfEe' )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Deltas for different versions'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tObject.assign( store.peer(), { key_public_serial: null } )\n\t\t\t\n\t\t\tstore.clock_data.see_time( store.clock_data.now() + 60 )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).list( [ 'foo', 'bar', 'lol' ] )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta([\n\t\t\t\t\tnew $hyoo_crowd_clock,\n\t\t\t\t\tnew $hyoo_crowd_clock([\n\t\t\t\t\t\t[ store.peer().id, store.clock_data.last_time - 3 ],\n\t\t\t\t\t])\n\t\t\t\t]).map( unit => unit.data ).slice(2),\n\t\t\t\t[ 'foo', 'bar', 'lol' ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta([\n\t\t\t\t\tnew $hyoo_crowd_clock,\n\t\t\t\t\tnew $hyoo_crowd_clock([\n\t\t\t\t\t\t[ store.peer().id, store.clock_data.last_time - 2 ],\n\t\t\t\t\t])\n\t\t\t\t]).map( unit => unit.data ).slice(2),\n\t\t\t\t[ 'bar', 'lol' ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta([\n\t\t\t\t\tnew $hyoo_crowd_clock,\n\t\t\t\t\tnew $hyoo_crowd_clock([\n\t\t\t\t\t\t[ store.peer().id, store.clock_data.last_time - 1 ],\n\t\t\t\t\t])\n\t\t\t\t]).map( unit => unit.data ).slice(2),\n\t\t\t\t[ 'lol' ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.delta([\n\t\t\t\t\tnew $hyoo_crowd_clock,\n\t\t\t\t\tnew $hyoo_crowd_clock([\n\t\t\t\t\t\t[ store.peer().id, store.clock_data.last_time ],\n\t\t\t\t\t])\n\t\t\t\t]).slice(2),\n\t\t\t\t[],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Delete without subtree and ignore inserted into deleted'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo' )\n\t\t\t\n\t\t\tconst b2 = store.chief.nodes( $hyoo_crowd_text )[0]\n\t\t\tb2.str( 'bar' )\n\t\t\t\n\t\t\tconst b3 = b2.nodes( $hyoo_crowd_text )[0]\n\t\t\tb3.str( 'lol' )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), 'foo' )\n\t\t\t$mol_assert_like( b2.as( $hyoo_crowd_reg ).value(), 'bar' )\n\t\t\t$mol_assert_like( b3.as( $hyoo_crowd_reg ).value(), 'lol' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).cut( 0 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_reg ).value(), null )\n\t\t\t$mol_assert_like( b2.as( $hyoo_crowd_reg ).value(), 'bar' )\n\t\t\t$mol_assert_like( b3.as( $hyoo_crowd_reg ).value(), 'lol' )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Put/get list'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [] )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_list ).list( [ 'foo', 'bar', 'foo' ] )\n\t\t\tconst first = store.chief.nodes( $hyoo_crowd_list )[0]\n\t\t\tfirst.list( [  'bar', 'foo', 'bar' ] )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foo', 'bar', 'foo' ] )\n\t\t\t$mol_assert_like( first.list(), [ 'bar', 'foo', 'bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Put/get text'() {\n\t\t\t\n\t\t\tconst store1 = await make_land()\n\t\t\t\n\t\t\tstore1.chief.as( $hyoo_crowd_text ).str( 'foo bar foo' )\n\t\t\t$mol_assert_like( store1.chief.as( $hyoo_crowd_text ).str(), 'foo bar foo' )\n\t\t\t$mol_assert_like( store1.chief.as( $hyoo_crowd_list ).list(), [ 'foo', ' bar', ' foo' ] )\n\t\t\t\n\t\t\tconst store2 = store1.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tstore2.chief.as( $hyoo_crowd_text ).str( 'barFFFoo  bar' )\n\t\t\t$mol_assert_like( store2.chief.as( $hyoo_crowd_text ).str(), 'barFFFoo  bar' )\n\t\t\t$mol_assert_like( store2.chief.as( $hyoo_crowd_list ).list(), [ 'bar', 'FFFoo', ' ', ' bar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Text modifications'() {\n\t\t\t\n\t\t\tconst store1 = await make_land()\n\t\t\tstore1.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\t\n\t\t\tconst store2 = store1.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tstore2.chief.as( $hyoo_crowd_text ).str( 'foo  bar' )\n\t\t\t$mol_assert_like(\n\t\t\t\tstore1.chief.units().map( unit => unit.self ),\n\t\t\t\t[\n\t\t\t\t\tstore2.chief.units()[0].self,\n\t\t\t\t\tstore2.chief.units()[2].self,\n\t\t\t\t],\n\t\t\t)\n\t\t\t\n\t\t\tconst store3 = store2.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tstore3.chief.as( $hyoo_crowd_text ).str( 'foo ton bar' )\n\t\t\t$mol_assert_like(\n\t\t\t\tstore2.chief.units().map( unit => unit.self ),\n\t\t\t\t[\n\t\t\t\t\tstore3.chief.units()[0].self,\n\t\t\t\t\tstore3.chief.units()[1].self,\n\t\t\t\t\tstore3.chief.units()[2].self,\n\t\t\t\t],\n\t\t\t)\n\t\t\t\n\t\t\tconst store4 = store3.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tstore4.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\t$mol_assert_like(\n\t\t\t\t[\n\t\t\t\t\tstore3.chief.units()[0].self,\n\t\t\t\t\tstore3.chief.units()[2].self,\n\t\t\t\t],\n\t\t\t\tstore4.chief.units().map( unit => unit.self ),\n\t\t\t)\n\t\t\t\n\t\t\tconst store5 = store3.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tstore5.chief.as( $hyoo_crowd_text ).str( 'foo ' )\n\t\t\t$mol_assert_like(\n\t\t\t\t[\n\t\t\t\t\tstore4.chief.units()[0].self,\n\t\t\t\t\tstore4.chief.units()[1].self,\n\t\t\t\t],\n\t\t\t\tstore5.chief.units().map( unit => unit.self ),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Change sequences'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), '' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'foo' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'foo bar' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo lol bar' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'foo lol bar' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'lol bar' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'lol bar' )\n\t\t\t\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_text ).str(), 'foo bar' )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Merge different sequences'() {\n\t\t\t\n\t\t\tconst left = await make_land()\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'foo bar.' )\n\t\t\t\n\t\t\tconst right = await make_land()\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.chief.as( $hyoo_crowd_text ).str( 'xxx yyy.' )\n\t\t\t\n\t\t\tconst left_delta = left.delta()\n\t\t\tconst right_delta = right.delta()\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'xxx yyy.foo bar.',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Merge different insertions to same place of same sequence'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'foo xxx bar' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.chief.as( $hyoo_crowd_text ).str( 'foo yyy bar' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'foo yyy xxx bar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert after moved'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'FooBarZak' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'FooXxxBarZak' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.insert( right.chief.units()[0], '0_0', 2 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'BarFooXxxZak',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert before moved left'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'fooBarZak' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'FooXxxBarZak' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.insert( right.chief.units()[1], '0_0', 0 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'BarFooXxxZak',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert before moved right'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'FooBarZakPew' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'FooXxxBarZakPew' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.insert( right.chief.units()[1], '0_0', 4 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'FooZakXxxPewBar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert after removed'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'FooBar' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'FooXxxBar' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.chief.as( $hyoo_crowd_text ).str( 'Bar' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'XxxBar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert after removed out'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.node( '1_1', $hyoo_crowd_text ).str( 'FooBarZak' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.node( '1_1', $hyoo_crowd_text ).str( 'FooBarXxxZak' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.insert( right.node( '1_1', $hyoo_crowd_node ).units()[1], '2_2', 0 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.node( '1_1', $hyoo_crowd_text ).str(),\n\t\t\t\tright.node( '1_1', $hyoo_crowd_text ).str(),\n\t\t\t\t'FooZakXxx',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.node( '2_2', $hyoo_crowd_text ).str(),\n\t\t\t\tleft.node( '2_2', $hyoo_crowd_text ).str(),\n\t\t\t\t'Bar',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert before changed'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'XxxYyyZzz' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'XxxFooYyyZzz' )\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.chief.as( $hyoo_crowd_text ).str( 'XxxBarZzz' )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'XxxBarFooZzz',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Insert between moved'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_list ).list([ 111, 222, 333, 444, 555, 666 ])\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tleft.chief.as( $hyoo_crowd_list ).list([ 111, 222, 777, 333, 444, 555, 666 ])\n\t\t\t\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\tright.insert( right.chief.units()[1], '0_0', 5 )\n\t\t\tright.insert( right.chief.units()[1], '0_0', 5 )\n\t\t\t\n\t\t\tconst left_delta = left.delta( base.clocks )\n\t\t\tconst right_delta = right.delta( base.clocks )\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\t\n\t\t\t$mol_assert_like(\n\t\t\t\tleft.chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\tright.chief.as( $hyoo_crowd_list ).list(),\n\t\t\t\t[ 111, 444, 555, 222, 333, 777, 666 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Merge text changes'() {\n\t\t\t\n\t\t\tconst base = await make_land()\n\t\t\tbase.chief.as( $hyoo_crowd_text ).str( 'Hello World and fun!' )\n\t\t\t\n\t\t\tconst left = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tconst right = base.fork( await $hyoo_crowd_peer.generate() )\n\t\t\tright.clock_data.tick( right.peer().id )\n\t\t\t\n\t\t\tleft.chief.as( $hyoo_crowd_text ).str( 'Hello Alice and fun!' )\n\t\t\tright.chief.as( $hyoo_crowd_text ).str( 'Bye World and fun!' )\n\t\t\t\n\t\t\tconst left_delta = left.delta()\n\t\t\tconst right_delta = right.delta()\n\t\t\t\n\t\t\tleft.apply( right_delta )\n\t\t\tright.apply( left_delta )\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tleft.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\tright.chief.as( $hyoo_crowd_text ).str(),\n\t\t\t\t'Bye Alice and fun!',\n\t\t\t)\n\n\t\t},\n\t\t\n\t\tasync 'Write into token'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foobar' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'xyz', 3 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'fooxyzbar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write into token with split'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foobar' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'XYZ', 2, 4 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'fo', 'XYZar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write over few tokens'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'xxx foo bar yyy' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'X Y Z', 6, 9 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'xxx', ' fo', 'X', ' Y', ' Zar', ' yyy' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write whole token'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'xxxFoo yyy' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'bar', 3, 7 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'xxxbaryyy' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write whole text'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'xxx', 0, 7 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'xxx' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write at the end'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'bar' )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foobar' ] )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'Write between tokens'() {\n\t\t\t\n\t\t\tconst store = await make_land()\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'foo bar' )\n\t\t\tstore.chief.as( $hyoo_crowd_text ).write( 'xxx', 4 )\n\t\t\t\n\t\t\t$mol_assert_like( store.chief.as( $hyoo_crowd_list ).list(), [ 'foo', ' xxxbar' ] )\n\t\t\t\n\t\t},\n\n\t})\n}\n","namespace $ {\n\t\n\tasync function make_land( id = '1_1' as $mol_int62_string ) {\n\t\treturn $hyoo_crowd_land.make({\n\t\t\tid: $mol_const( id ),\n\t\t\tpeer: $mol_const( await $hyoo_crowd_peer.generate() ),\n\t\t})\n\t}\n\t\n\t$mol_test({\n\t\t\n\t\tasync 'list add & insert & drop'() {\n\t\t\t\n\t\t\tconst land = await make_land()\n\t\t\tconst node = land.chief.as( $hyoo_crowd_list )\n\t\t\t\n\t\t\tnode.list([ 1, 2 ])\n\t\t\t$mol_assert_like( node.list(), [ 1, 2 ] )\n\t\t\t\n\t\t\tnode.add( 3 )\n\t\t\t$mol_assert_like( node.list(), [ 1, 2, 3 ] )\n\t\t\t\n\t\t\tnode.add( 3 )\n\t\t\t$mol_assert_like( node.list(), [ 1, 2, 3 ] )\n\t\t\t\n\t\t\tnode.insert([ 2 ])\n\t\t\t$mol_assert_like( node.list(), [ 1, 2, 3, 2 ] )\n\t\t\t\n\t\t\tnode.insert( [ 2 ], 0 )\n\t\t\t$mol_assert_like( node.list(), [ 2, 1, 2, 3, 2 ] )\n\t\t\t\n\t\t\tnode.drop( 2 )\n\t\t\t$mol_assert_like( node.list(), [ 1, 3 ] )\n\t\t\t\n\t\t\tnode.drop( 2 )\n\t\t\t$mol_assert_like( node.list(), [ 1, 3 ] )\n\t\t\t\n\t\t},\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\tasync 'string: Offset <=> Point'() {\n\t\t\t\n\t\t\tconst store = $hyoo_crowd_land.make({})\n\t\t\tstore.chief.as( $hyoo_crowd_text ).str( 'fooBar' )\n\t\t\tconst [ first, second ] = store.chief.units()\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.point_by_offset( 0 ),\n\t\t\t\t[ first.self, 0 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ first.self, 0 ]),\n\t\t\t\t[ first.self, 0 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.point_by_offset( 3 ),\n\t\t\t\t[ first.self, 3 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ first.self, 3 ]),\n\t\t\t\t[ first.self, 3 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ first.self, 5 ]),\n\t\t\t\t[ first.self, 5 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.point_by_offset( 5 ),\n\t\t\t\t[ second.self, 2 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ second.self, 2 ]),\n\t\t\t\t[ second.self, 5 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.point_by_offset( 6 ),\n\t\t\t\t[ second.self, 3 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ second.self, 3 ]),\n\t\t\t\t[ second.self, 6 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.point_by_offset( 7 ),\n\t\t\t\t[ '0_0', 1 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text )\n\t\t\t\t\t.offset_by_point([ '0_0', 1 ]),\n\t\t\t\t[ '0_0', 7 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\tasync 'text: Offset <=> Point'() {\n\t\t\t\n\t\t\tconst store = $hyoo_crowd_land.make({})\n\t\t\tstore.chief.as( $hyoo_crowd_text ).text( 'foo bar\\n666 777' )\n\t\t\tconst [ first, second ] = store.chief.nodes( $hyoo_crowd_text )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text ).point_by_offset( 0 ),\n\t\t\t\t[ first.units()[0].self, 0 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text ).offset_by_point([ first.units()[0].self, 0 ]),\n\t\t\t\t[ first.units()[0].self, 0 ],\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text ).point_by_offset( 8 ),\n\t\t\t\t[ first.units()[2].self, 1 ],\n\t\t\t)\n\t\t\t$mol_assert_like(\n\t\t\t\tstore.chief.as( $hyoo_crowd_text ).offset_by_point([ first.units()[2].self, 1 ]),\n\t\t\t\t[ first.units()[2].self, 8 ],\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t})\n}\n","namespace $ {\n\t\n\tasync function make_land( id = '1_1' as $mol_int62_string ) {\n\t\treturn $hyoo_crowd_land.make({\n\t\t\tid: $mol_const( id ),\n\t\t\tpeer: $mol_const( await $hyoo_crowd_peer.generate() ),\n\t\t})\n\t}\n\t\n\t$mol_test({\n\t\t\n\t\tasync 'save and load buffers'() {\n\t\t\t\n\t\t\tconst land = await make_land()\n\t\t\tconst node = land.chief.as( $hyoo_crowd_blob )\n\t\t\t\n\t\t\tconst source = new Uint8Array( 2**15 + 1 )\n\t\t\tsource[ 2**15 + 1 ] = 255 \n\t\t\t\n\t\t\tnode.buffer( source )\n\t\t\t\n\t\t\t$mol_assert_like( node.list().length, 2 )\n\t\t\t$mol_assert_like(\n\t\t\t\tnode.buffer(),\n\t\t\t\tsource,\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'save and load blobs'() {\n\t\t\t\n\t\t\tconst land = await make_land()\n\t\t\tconst node = land.chief.as( $hyoo_crowd_blob )\n\t\t\t\t\n\t\t\tconst source = new Uint8Array( 2**15 + 1 )\n\t\t\tsource[ 2**15 + 1 ] = 255 \n\t\t\t\n\t\t\tawait $mol_wire_async( node ).blob(\n\t\t\t\tnew $mol_blob( [source], { type: 'test/test' } )\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like( 'test/test', node.blob().type )\n\t\t\t$mol_assert_like( source, new Uint8Array( await node.blob().arrayBuffer() ) )\n\t\t\t\n\t\t},\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'parse and serial'() {\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'P42.1Y' ).toString() , 'P42.1YT' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'P42.1M' ).toString() , 'P42.1MT' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'P42.1D' ).toString() , 'P42.1DT' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'PT42.1h' ).toString() , 'PT42.1H' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'PT42.1m' ).toString() , 'PT42.1M' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'PT42.1s' ).toString() , 'PT42.1S' )\n\t\t\t$mol_assert_equal( new $mol_time_duration( 'P1Y2M3DT4h5m6.7s' ).toString() , 'P1Y2M3DT4H5M6.7S' )\n\t\t} ,\n\t\t\n\t\t'format typed'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_duration( 'P1Y2M3DT4h5m6s' ).toString( 'P#Y#M#DT#h#m#s' ) ,\n\t\t\t\t'P1Y2M3DT4H5M6S'\n\t\t\t)\n\t\t} ,\n\t\n\t\t'comparison'() {\n\t\t\tconst iso = 'P1Y1M1DT1h1m1s'\n\t\t\t$mol_assert_like( new $mol_time_duration( iso ), new $mol_time_duration( iso ) )\n\t\t},\n\t\t\n\t} )\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'parse and serial'() {\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014' ).toString() , '2014' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01' ).toString() , '2014-01' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02' ).toString() , '2014-01-02' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03' ).toString() , '2014-01-02T03' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04' ).toString() , '2014-01-02T03:04' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04:05' ).toString() , '2014-01-02T03:04:05' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04:05.006' ).toString() , '2014-01-02T03:04:05.006' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04:05.006Z' ).toString() , '2014-01-02T03:04:05.006+00:00' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04:05.006+07:00' ).toString() , '2014-01-02T03:04:05.006+07:00' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04:05+07:08' ).toString() , '2014-01-02T03:04:05+07:08' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02T03:04+07:08' ).toString() , '2014-01-02T03:04+07:08' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( 'T03:04+07:08' ).toString() , 'T03:04+07:08' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( 'T03:04:05' ).toString() , 'T03:04:05' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( 'T03:04' ).toString() , 'T03:04' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( 'T03' ).toString() , 'T03' )\n\t\t} ,\n\t\t\n\t\t'format simple'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_moment( '2014-01-02T01:02:03.000000' ).toString( 'AD YY-M-D h:m:s' ) ,\n\t\t\t\t'21 14-1-2 1:2:3'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'format padded'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_moment( '2014-01-02T01:02:03.000' ).toString( 'YYYY-MM-DD hh:mm:ss' ) ,\n\t\t\t\t'2014-01-02 01:02:03'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'format time zone'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_moment( '2014-01-02T01:02:03+05:00' ).toString( 'Z' ) ,\n\t\t\t\t'+05:00'\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'format names'() {\n\t\t\t$mol_assert_ok(\n\t\t\t\tnew $mol_time_moment( '2014-01-02T01:02:03.000' ).toString( 'Month Mon | WeekDay WD' )\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'shifting'() {\n\t\t\t$mol_assert_equal( new $mol_time_moment( 'T15:54:58.243+03:00' ).shift( {} ).toString() , 'T15:54:58.243+03:00' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02' ).shift( 'P1Y' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02' ).shift( 'P12M' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02' ).shift( 'P365D' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01-02' ).shift( 'PT8760h' ).toString() , '2015-01-02' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01' ).shift( 'PT8760h' ).toString() , '2015-01' )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2014-01' ).shift( 'PT-8760h' ).toString() , '2013-01' )\n\t\t} ,\n\t\t\n\t\t'normalization'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_moment({ year: 2015, month: 6, day: 34 }).normal.toString() ,\n\t\t\t\t'2015-08-04'\n\t\t\t)\n\t\t} , \n\t\n\t\t'iso week day'() {\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2017-09-17' ).weekday , $mol_time_moment_weekdays.sunday )\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2017-09-18' ).weekday , $mol_time_moment_weekdays.monday )\n\t\t} ,\n\t\t\n\t\t'change offset'() {\n\t\t\t$mol_assert_equal( new $mol_time_moment( '2021-04-10 +03:00' ).toOffset( 'Z' ).toString(), '2021-04-09T21:00:00+00:00' )\n\t\t} ,\n\t\t\n\t\t'comparison'() {\n\t\t\tconst iso = '2021-01-02T03:04:05.678+09:10'\n\t\t\t$mol_assert_like( new $mol_time_moment( iso ), new $mol_time_moment( iso ) )\n\t\t},\n\n\t} )\n}\n","namespace $ {\n\t$.$hyoo_sync_masters = [\n\t\t`localhost:9090`,\n\t\t$mol_dom_context.document.location.origin.replace( /^\\w+:\\/\\// , '' ),\n\t]\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'$mol_syntax2_md_flow'() {\n\t\t\t\n\t\t\tconst check = ( input : string , right : [ string , string , string[] , number ][] )=> {\n\t\t\t\tconst tokens = [] as typeof right\n\t\t\t\t$mol_syntax2_md_flow.tokenize( input , ( ... token )=> tokens.push( token ) )\n\t\t\t\t$mol_assert_like( tokens , right ) \n\t\t\t}\n\n\t\t\tcheck( 'Hello,\\nWorld..\\r\\n\\r\\n\\nof Love!' , [\n\t\t\t\t[ 'block' , 'Hello,\\n' , [ 'Hello,', '\\n' ] , 0 ] ,\n\t\t\t\t[ 'block' , 'World..\\r\\n\\r\\n\\n' , [ 'World..' , '\\r\\n\\r\\n\\n' ] , 7 ] ,\n\t\t\t\t[ 'block' , 'of Love!' , [ 'of Love!' , '' ] , 19 ] ,\n\t\t\t] )\n\t\t\t\n\t\t\tcheck( '# Header1\\n\\nHello!\\n\\n## Header2' , [\n\t\t\t\t[ 'header' , '# Header1\\n\\n' , [ '#' , ' ' , 'Header1' , '\\n\\n' ] , 0 ] ,\n\t\t\t\t[ 'block' , 'Hello!\\n\\n' , [ 'Hello!' , '\\n\\n' ] , 11 ] ,\n\t\t\t\t[ 'header' , '## Header2' , [ '##' , ' ' , 'Header2' , '' ] , 19 ] ,\n\t\t\t] )\n\t\t\t\n\t\t\tcheck( '```\\nstart()\\n```\\n\\n```jam.js\\nrestart()\\n```\\n\\nHello!\\n\\n```\\nstop()\\n```' , [\n\t\t\t\t[ 'code' , '```\\nstart()\\n```\\n\\n' , [ '```' , '' , 'start()\\n' , '```' , '\\n\\n' ] , 0 ] ,\n\t\t\t\t[ 'code' , '```jam.js\\nrestart()\\n```\\n\\n' , [ '```' , 'jam.js' , 'restart()\\n' , '```' , '\\n\\n' ] , 17 ] ,\n\t\t\t\t[ 'block' , 'Hello!\\n\\n' , [ 'Hello!' , '\\n\\n' ] , 42 ] ,\n\t\t\t\t[ 'code' , '```\\nstop()\\n```' , [ '```' , '' , 'stop()\\n' , '```' , '' ] , 50 ] ,\n\t\t\t] )\n\t\t\t\n\t\t\tcheck( '| header1 | header2\\n|----|----\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n' , [\n\t\t\t\t[ 'table' , '| header1 | header2\\n|----|----\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n\\n' , [ '| header1 | header2\\n|----|----\\n| Cell11 | Cell12\\n| Cell21 | Cell22\\n' , '\\n' ] , 0 ] ,\n\t\t\t\t[ 'table' , '| Cell11 | Cell12\\n| Cell21 | Cell22\\n' , [ '| Cell11 | Cell12\\n| Cell21 | Cell22\\n' , '' ] , 68 ] ,\n\t\t\t] )\n\t\t\t\n\t\t} ,\n\t\t\n\t})\n}\n","namespace $ {\n\t\n\t$mol_test({\n\t\t\n\t\t'null by default' () {\n\t\t\tconst key = String( Math.random() )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_state_session.value( key ) , null )\n\t\t} ,\n\t\t\n\t\t'storing' () {\n\t\t\tconst key = String( Math.random() )\n\t\t\t\n\t\t\t$mol_state_session.value( key , '$mol_state_session_test' )\n\t\t\t$mol_assert_equal( $mol_state_session.value( key ) , '$mol_state_session_test' )\n\t\t\t\n\t\t\t$mol_state_session.value( key , null )\n\t\t\t$mol_assert_equal( $mol_state_session.value( key ) , null )\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'return result without errors'() {\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_try( ()=> false ) , false )\n\t\t\t\n\t\t} ,\n\t\t\n\t\t//'return error if thrown'() {\n\t\t//\t\n\t\t//\tconst error = new Error( '$mol_try test error' )\n\t\t//\t$mol_assert_equal( $mol_try( ()=> { throw error } ) , error )\n\t\t//\t\n\t\t//} ,\n\t\t\n\t})\t\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'strong'() {\n\t\t\tconst res = [ ... '**text**'.matchAll( $hyoo_marked_line ) ][0].groups!\n\t\t\t$mol_assert_equal( res.strong, '**text**' )\n\t\t\t$mol_assert_equal( res.marker, '**' )\n\t\t\t$mol_assert_equal( res.content, 'text' )\n\t\t},\n\t\t\n\t\t'emphasis'() {\n\t\t\tconst res = [ ... '//text//'.matchAll( $hyoo_marked_line ) ][0].groups!\n\t\t\t$mol_assert_equal( res.emphasis, '//text//' )\n\t\t\t$mol_assert_equal( res.marker, '//' )\n\t\t\t$mol_assert_equal( res.content, 'text' )\n\t\t},\n\t\t\n\t\t'insertion'() {\n\t\t\tconst res = [ ... '++text++'.matchAll( $hyoo_marked_line ) ][0].groups!\n\t\t\t$mol_assert_equal( res.insertion, '++text++' )\n\t\t\t$mol_assert_equal( res.marker, '++' )\n\t\t\t$mol_assert_equal( res.content, 'text' )\n\t\t},\n\t\t\n\t\t'deletion'() {\n\t\t\tconst res = [ ... '--text--'.matchAll( $hyoo_marked_line ) ][0].groups!\n\t\t\t$mol_assert_equal( res.deletion, '--text--' )\n\t\t\t$mol_assert_equal( res.marker, '--' )\n\t\t\t$mol_assert_equal( res.content, 'text' )\n\t\t},\n\t\t\n\t\t'code'() {\n\t\t\tconst res = [ ... ';;text;;'.matchAll( $hyoo_marked_line ) ][0].groups!\n\t\t\t$mol_assert_equal( res.code, ';;text;;' )\n\t\t\t$mol_assert_equal( res.marker, ';;' )\n\t\t\t$mol_assert_equal( res.content, 'text' )\n\t\t},\n\t\t\n\t\t'nested simple'() {\n\t\t\tconst res = [ ... '**//foo//bar**'.matchAll( $hyoo_marked_line ) ][0].groups!\n\t\t\t$mol_assert_equal( res.strong, '**//foo//bar**' )\n\t\t\t$mol_assert_equal( res.marker, '**' )\n\t\t\t$mol_assert_equal( res.content, '//foo//bar' )\n\t\t},\n\n\t\t'nested simple overlap'() {\n\t\t\tconst res = [ ... '**//foo**bar//'.matchAll( $hyoo_marked_line ) ]\n\t\t\t$mol_assert_equal( res[0].groups!.strong, '**//foo**' )\n\t\t\t$mol_assert_equal( res[0].groups!.marker, '**' )\n\t\t\t$mol_assert_equal( res[0].groups!.content, '//foo' )\n\t\t\t$mol_assert_equal( res[1][0], 'bar//' )\n\t\t},\n\n\t\t'link'() {\n\t\t\tconst res = [ ... '\\\\\\\\text\\\\url\\\\\\\\'.matchAll( $hyoo_marked_line ) ][0].groups!\n\t\t\t$mol_assert_equal( res.link, '\\\\\\\\text\\\\url\\\\\\\\' )\n\t\t\t$mol_assert_equal( res.marker, '\\\\\\\\' )\n\t\t\t$mol_assert_equal( res.content, 'text' )\n\t\t\t$mol_assert_equal( res.uri, 'url' )\n\t\t},\n\t\t\n\t\t'embed'() {\n\t\t\tconst res = [ ... '\"\"text\\\\url\"\"' .matchAll( $hyoo_marked_line ) ][0].groups!\n\t\t\t$mol_assert_equal( res.embed, '\"\"text\\\\url\"\"' )\n\t\t\t$mol_assert_equal( res.marker, '\"\"' )\n\t\t\t$mol_assert_equal( res.content, 'text' )\n\t\t\t$mol_assert_equal( res.uri, 'url' )\n\t\t},\n\t\t\n\t\t'link with embed'() {\n\t\t\tconst res = [ ... '\\\\\\\\\"\"text\\\\url1\"\"\\\\url2\\\\\\\\'.matchAll( $hyoo_marked_line ) ][0].groups!\n\t\t\t$mol_assert_equal( res.link, '\\\\\\\\\"\"text\\\\url1\"\"\\\\url2\\\\\\\\' )\n\t\t\t$mol_assert_equal( res.marker, '\\\\\\\\' )\n\t\t\t$mol_assert_equal( res.content, '\"\"text\\\\url1\"\"' )\n\t\t\t$mol_assert_equal( res.uri, 'url2' )\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'header level 1'() {\n\t\t\t\n\t\t\tconst res = [ ... `= text\\n`.matchAll( $hyoo_marked_flow ) ][0].groups!\n\n\t\t\t$mol_assert_equal( res.header, '= text\\n' )\n\t\t\t$mol_assert_equal( res.marker, '=' )\n\t\t\t$mol_assert_equal( res.content, 'text' )\n\t\t\t\n\t\t},\n\n\t\t'header level 6'() {\n\t\t\t\n\t\t\tconst res = [ ... `====== text\\n`.matchAll( $hyoo_marked_flow ) ][0].groups!\n\n\t\t\t$mol_assert_equal( res.header, '====== text\\n' )\n\t\t\t$mol_assert_equal( res.marker, '======' )\n\t\t\t$mol_assert_equal( res.content, 'text' )\n\t\t\t\n\t\t},\n\n\t\t'header level too many'() {\n\t\t\t\n\t\t\tconst res = [ ... `======= text\\n`.matchAll( $hyoo_marked_flow ) ][0].groups!\n\n\t\t\t$mol_assert_equal( res.paragraph, '======= text\\n' )\n\t\t\t$mol_assert_equal( res.content, '======= text' )\n\t\t\t\n\t\t},\n\n\t\t'different blocks'() {\n\t\t\t\n\t\t\tconst text = `\n\t\t\t\t= header\n\t\t\t\tparagraph\n\t\t\t\t= header\n\t\t\t`.replace( /^\\t+/gm, '' )\n\n\t\t\tconst res = [ ... text.matchAll( $hyoo_marked_flow ) ]\n\t\t\t\n\t\t\t$mol_assert_equal( res[0].groups!.paragraph, '\\n' )\n\t\t\t$mol_assert_equal( res[0].groups!.content, '' )\n\n\t\t\t$mol_assert_equal( res[1].groups!.header, '= header\\n' )\n\t\t\t$mol_assert_equal( res[1].groups!.marker, '=' )\n\t\t\t$mol_assert_equal( res[1].groups!.content, 'header' )\n\t\t\t\n\t\t\t$mol_assert_equal( res[2].groups!.paragraph, 'paragraph\\n' )\n\t\t\t$mol_assert_equal( res[2].groups!.content, 'paragraph' )\n\t\t\t\n\t\t\t$mol_assert_equal( res[3].groups!.header, '= header\\n' )\n\t\t\t$mol_assert_equal( res[3].groups!.marker, '=' )\n\t\t\t$mol_assert_equal( res[3].groups!.content, 'header' )\n\t\t\t\n\t\t},\n\n\t\t'plain list'() {\n\t\t\t\n\t\t\tconst text = `\n\t\t\t\t- foo\n\t\t\t\t- bar\n\t\t\t`.slice(1).replace( /^\\t+/gm, '' )\n\n\t\t\tconst res = [ ... text.matchAll( $hyoo_marked_flow ) ][0].groups!\n\t\t\t\n\t\t\t$mol_assert_equal( res.list, '- foo\\n- bar\\n' )\n\t\t\t\n\t\t},\n\n\t\t'nested lists'() {\n\t\t\t\n\t\t\tconst text = `\n\t\t\t\t- foo\n\t\t\t\t  + bar\n\t\t\t\t- lol\n\t\t\t`.slice(1).replace( /^\\t+/gm, '' )\n\n\t\t\tconst res = [ ... text.matchAll( $hyoo_marked_flow ) ][0].groups!\n\t\t\t\n\t\t\t$mol_assert_equal( res.list, '- foo\\n  + bar\\n- lol\\n' )\n\t\t\t\n\t\t},\n\n\t\t'quote'() {\n\t\t\t\n\t\t\tconst text = `\n\t\t\t\t\" foo\n\t\t\t\t\" bar\n\t\t\t`.slice(1).replace( /^\\t+/gm, '' )\n\n\t\t\tconst res = [ ... text.matchAll( $hyoo_marked_flow ) ][0].groups!\n\t\t\t\n\t\t\t$mol_assert_equal( res.quote, '\" foo\\n\" bar\\n' )\n\t\t\t\n\t\t},\n\n\t\t'quote in list'() {\n\t\t\t\n\t\t\tconst text = `\n\t\t\t\t- foo\n\t\t\t\t  \" bar\n\t\t\t\t- lol\n\t\t\t`.slice(1).replace( /^\\t+/gm, '' )\n\n\t\t\tconst res = [ ... text.matchAll( $hyoo_marked_flow ) ][0].groups!\n\t\t\t\n\t\t\t$mol_assert_equal( res.list, '- foo\\n  \" bar\\n- lol\\n' )\n\t\t\t\n\t\t},\n\n\t\t'table'() {\n\t\t\t\n\t\t\tconst text = `\n\t\t\t\t! foo\n\t\t\t\t  ! bar\n\t\t\t\t! lol\n\t\t\t\t  ! 777\n\t\t\t`.slice(1).replace( /^\\t+/gm, '' )\n\n\t\t\tconst res = [ ... text.matchAll( $hyoo_marked_flow ) ][0].groups!\n\t\t\t\n\t\t\t$mol_assert_equal( res.table, '! foo\\n  ! bar\\n! lol\\n  ! 777\\n' )\n\t\t\t\n\t\t},\n\n\t\t'script'() {\n\t\t\t\n\t\t\tconst text = `\n\t\t\t    foo\n\t\t\t  ++bar\n\t\t\t  --lol\n\t\t\t  **777\n\t\t\t`.slice(1).replace( /^\\t+/gm, '' )\n\n\t\t\tconst res = [ ... text.matchAll( $hyoo_marked_flow ) ][0].groups!\n\t\t\t\n\t\t\t$mol_assert_equal( res.script, '    foo\\n  ++bar\\n  --lol\\n  **777\\n' )\n\t\t\t\n\t\t},\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Special'() {\n\t\t\t$mol_assert_equal( $mol_si_short( 0 ), '0' )\n\t\t\t$mol_assert_equal( $mol_si_short( 1/0 ), '∞' )\n\t\t\t$mol_assert_equal( $mol_si_short( -1/0 ), '-∞' )\n\t\t\t$mol_assert_equal( $mol_si_short( 0/0 ), '∅' )\n\t\t},\n\t\t\n\t\t'M'() {\n\t\t\t$mol_assert_equal( $mol_si_short( 0 ), '0' )\n\t\t\t$mol_assert_equal( $mol_si_short( 0.999500 ), '1.00' )\n\t\t\t$mol_assert_equal( $mol_si_short( -0.999600 ), '-1.00' )\n\t\t\t$mol_assert_equal( $mol_si_short( 999.4 ), '999' )\n\t\t\t$mol_assert_equal( $mol_si_short( -999.4 ), '-999' )\n\t\t},\n\t\t\n\t\t'L'() {\n\t\t\t$mol_assert_equal( $mol_si_short( 999.5 ), '1.00k' )\n\t\t\t$mol_assert_equal( $mol_si_short( -999.5 ), '-1.00k' )\n\t\t\t$mol_assert_equal( $mol_si_short( 999_400 ), '999k' )\n\t\t\t$mol_assert_equal( $mol_si_short( -999_400 ), '-999k' )\n\t\t},\n\t\t\n\t\t'XL'() {\n\t\t\t$mol_assert_equal( $mol_si_short( 999_500 ), '1.00M' )\n\t\t\t$mol_assert_equal( $mol_si_short( -999_600 ), '-1.00M' )\n\t\t\t$mol_assert_equal( $mol_si_short( 999_400_000 ), '999M' )\n\t\t\t$mol_assert_equal( $mol_si_short( -999_400_000 ), '-999M' )\n\t\t},\n\t\t\n\t\t'S'() {\n\t\t\t$mol_assert_equal( $mol_si_short( 0.999400 ), '999m' )\n\t\t\t$mol_assert_equal( $mol_si_short( -0.999400 ), '-999m' )\n\t\t\t$mol_assert_equal( $mol_si_short( 0.000_999_500 ), '1.00m' )\n\t\t\t$mol_assert_equal( $mol_si_short( -0.000_999_500 ), '-1.00m' )\n\t\t},\n\t\t\n\t\t'XS'() {\n\t\t\t$mol_assert_equal( $mol_si_short( 0.000_999_400 ), '999µ' )\n\t\t\t$mol_assert_equal( $mol_si_short( -0.000_999_400 ), '-999µ' )\n\t\t\t$mol_assert_equal( $mol_si_short( 0.000_000_999_600 ), '1.00µ' )\n\t\t\t$mol_assert_equal( $mol_si_short( -0.000_000_999_600 ), '-1.00µ' )\n\t\t},\n\t\t\n\t\t'With unit'() {\n\t\t\t$mol_assert_equal( $mol_si_short( 0, 's' ), '0 s' )\n\t\t\t$mol_assert_equal( $mol_si_short( 1/0, 's' ), '∞ s' )\n\t\t\t$mol_assert_equal( $mol_si_short( 0/0, 's' ), '∅ s' )\n\t\t\t$mol_assert_equal( $mol_si_short( 123, 'Hz' ), '123 Hz' )\n\t\t\t$mol_assert_equal( $mol_si_short( 1234, 'g' ), '1.23 kg' )\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'empty hash'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t$mol_crypto_hash( new Uint8Array([]) ),\n\t\t\t\tnew Uint8Array([ 218, 57, 163, 238, 94, 107, 75, 13, 50, 85, 191, 239, 149, 96, 24, 144, 175, 216, 7, 9 ]),\n\t\t\t)\n\t\t},\n\t\t\n\t\t'three bytes hash'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t$mol_crypto_hash( new Uint8Array([ 255, 254, 253 ]) ),\n\t\t\t\tnew Uint8Array([ 240, 150, 38, 243, 255, 128, 96, 0, 72, 215, 207, 228, 19, 149, 113, 52, 2, 125, 27, 77 ]),\n\t\t\t)\n\t\t},\n\t\t\n\t\t'six bytes hash'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t$mol_crypto_hash( new Uint8Array([ 0, 255, 10, 250, 32, 128 ]) ),\n\t\t\t\tnew Uint8Array([ 23, 25, 155, 181, 46, 200, 221, 83, 254, 0, 166, 68, 91, 255, 67, 140, 114, 88, 218, 155 ]),\n\t\t\t)\n\t\t},\n\t\t\n\t\t'seven bytes hash'() {\n\t\t\t$mol_assert_like(\n\t\t\t\t$mol_crypto_hash( new Uint8Array([ 1, 2, 3, 4, 5, 6, 7 ]) ),\n\t\t\t\tnew Uint8Array([ 140, 31, 40, 252, 47, 72, 194, 113, 214, 196, 152, 240, 242, 73, 205, 222, 54, 92, 84, 197 ]),\n\t\t\t)\n\t\t},\n\t\t\n\t\t// async 'reference'() {\n\t\t// \tconst data = new Uint8Array([255,254,253])\n\t\t// \tconst left = $mol_crypto_hash(data)\n\t\t// \tconst right = new Uint8Array(await $mol_crypto_native.digest('SHA-1', data))\n\t\t// \tconsole.log( left, right, $mol_compare_deep( left, right ) )\n\t\t// },\n\t\t\n\t})\n}\n","namespace $ {\n\t\n\t/** 16 byte */\n\texport function $mol_crypto_salt() {\n\t\treturn $mol_crypto_native.getRandomValues(\n\t\t\tnew Uint8Array( 16 )\n\t\t)\n\t}\n\t\n}\n","namespace $ {\n\t\n\texport function $mol_base64_ae_encode( buffer: Uint8Array ) {\n\t\treturn $mol_base64_encode( buffer ).replace( /\\+/g, 'æ' ).replace( /\\//g, 'Æ' ).replace( /=/g, '' )\n\t}\n\t\n\texport function $mol_base64_ae_decode( str: string ) {\n\t\treturn $mol_base64_decode( str.replace( /æ/g, '+' ).replace( /Æ/g, '/' ) )\n\t}\n\t\n}\n","namespace $ {\n\texport class $mol_buffer extends DataView {\n\t\t\n\t\tstatic from< This extends typeof $mol_buffer >( this: This, array: number | string | ArrayBufferView ) {\n\t\t\tif( typeof array === 'number' ) array = new Uint8Array( array )\n\t\t\tif( typeof array === 'string' ) array = $mol_base64_ae_decode( array )\n\t\t\treturn new this( array.buffer, array.byteOffset, array.byteLength ) as InstanceType< This >\n\t\t}\n\t\t\n\t\tstatic toString() {\n\t\t\treturn $$.$mol_func_name( this )\n\t\t}\n\n\t\tgetUint48( offset: number, LE = false ) {\n\t\t\tif( offset % 4 ) {\n\t\t\t\treturn this.getUint16( offset, LE ) + this.getUint32( offset + 2, LE ) * 2**16\n\t\t\t} else {\n\t\t\t\treturn this.getUint32( offset, LE ) + this.getUint16( offset + 4, LE ) * 2**32\n\t\t\t}\n\t\t}\n\t\t\n\t\tsetUint48( offset: number, value: number, LE = false ) {\n\t\t\tif( offset % 4 ) {\n\t\t\t\tthis.setUint16( offset, value & ( (1<<16) - 1 ), LE )\n\t\t\t\tthis.setUint32( offset + 2, ( value / 2**16 )|0, LE )\n\t\t\t} else {\n\t\t\t\tthis.setUint32( offset, value |0, LE )\n\t\t\t\tthis.setUint16( offset + 4, ( value / 2**32 )|0, LE )\n\t\t\t}\n\t\t}\n\t\t\n\t\tint8( offset: number, next?: number ) {\n\t\t\tif( next === undefined ) return this.getInt8( offset )\n\t\t\tif( next >= -(2**7) && next < 2**7 ) return this.setInt8( offset, next ), next\n\t\t\t$mol_fail( new Error( `Wrong int8 value ${ next }` ) )\n\t\t}\n\t\t\n\t\tuint8( offset: number, next?: number ) {\n\t\t\tif( next === undefined ) return this.getUint8( offset )\n\t\t\tif( next >= 0 && next < 2**8 ) return this.setUint8( offset, next ), next\n\t\t\t$mol_fail( new Error( `Wrong uint8 value ${ next }` ) )\n\t\t}\n\t\t\n\t\tint16( offset: number, next?: number ) {\n\t\t\tif( next === undefined ) return this.getInt16( offset, !!'LE' )\n\t\t\tif( next >= -(2**15) && next < 2**15 ) return this.setInt16( offset, next, !!'LE' ), next\n\t\t\t$mol_fail( new Error( `Wrong int16 value ${ next }` ) )\n\t\t}\n\t\t\n\t\tuint16( offset: number, next?: number ) {\n\t\t\tif( next === undefined ) return this.getUint16( offset, !!'LE' )\n\t\t\tif( next >= 0 && next < 2**16 ) return this.setUint16( offset, next, !!'LE' ), next\n\t\t\t$mol_fail( new Error( `Wrong uint16 value ${ next }` ) )\n\t\t}\n\t\t\n\t\tint32( offset: number, next?: number ) {\n\t\t\tif( next === undefined ) return this.getInt32( offset, !!'LE' )\n\t\t\tif( next >= -(2**31) && next < 2**31 ) return this.setInt32( offset, next, !!'LE' ), next\n\t\t\t$mol_fail( new Error( `Wrong int32 value ${ next }` ) )\n\t\t}\n\t\n\t\tuint32( offset: number, next?: number ) {\n\t\t\tif( next === undefined ) return this.getUint32( offset, !!'LE' )\n\t\t\tif( next >= 0 && next < 2**32 ) return this.setUint32( offset, next, !!'LE' ), next\n\t\t\t$mol_fail( new Error( `Wrong uint32 value ${ next }` ) )\n\t\t}\n\t\t\n\t\tuint48( offset: number, next?: number ) {\n\t\t\tif( next === undefined ) return this.getUint48( offset, !!'LE' )\n\t\t\tif( next >= 0 && next < 2**48 ) return this.setUint48( offset, next, !!'LE' ), next\n\t\t\t$mol_fail( new Error( `Wrong uint48 value ${ next }` ) )\n\t\t}\n\t\t\n\t\tint64( offset: number, next?: bigint ) {\n\t\t\tif( next === undefined ) return this.getBigInt64( offset, !!'LE' )\n\t\t\tif( next >= -(2**63) && next < 2**63 ) return this.setBigInt64( offset, next, !!'LE' ), next\n\t\t\t$mol_fail( new Error( `Wrong int64 value ${ next }` ) )\n\t\t}\n\t\t\n\t\tuint64( offset: number, next?: bigint ) {\n\t\t\tif( next === undefined ) return this.getBigUint64( offset, !!'LE' )\n\t\t\tif( next >= 0 && next < 2**64 ) return this.setBigUint64( offset, next, !!'LE' ), next\n\t\t\t$mol_fail( new Error( `Wrong uint64 value ${ next }` ) )\n\t\t}\n\t\t\n\t\tfloat32( offset: number, next?: number ) {\n\t\t\tif( next !== undefined ) this.setFloat32( offset, next, !!'LE' )\n\t\t\treturn this.getFloat32( offset, !!'LE' )\n\t\t}\n\t\t\n\t\tfloat64( offset: number, next?: number ) {\n\t\t\tif( next !== undefined ) this.setFloat64( offset, next, !!'LE' )\n\t\t\treturn this.getFloat64( offset, !!'LE' )\n\t\t}\n\t\t\n\t\tasArray() {\n\t\t\treturn new Uint8Array( this.buffer, this.byteOffset, this.byteLength )\n\t\t}\n\t\t\n\t\ttoString() {\n\t\t\treturn $mol_base64_ae_encode( this.asArray() )\n\t\t}\n\t\t\n\t}\n}\n","namespace $ {\n\t\n\tconst algorithm = {\n\t\tname: 'ECDSA',\n\t\thash: 'SHA-256',\n\t\tnamedCurve: \"P-256\",\n\t}\n\t\n\texport class $mol_crypto_key extends $mol_buffer {\n\t\t\n\t\tstatic from< This extends typeof $mol_crypto_key >( this: This, serial: number | string | ArrayBufferView ) {\n\t\t\t\n\t\t\tif( typeof serial === 'string' ) {\n\t\t\t\tserial = new Uint8Array([\n\t\t\t\t\t... $mol_base64_url_decode( serial.slice( 0, 43 ) ),\n\t\t\t\t\t... $mol_base64_url_decode( serial.slice( 43, 86 ) ),\n\t\t\t\t\t... $mol_base64_url_decode( serial.slice( 86, 129 ) ),\n\t\t\t\t])\n\t\t\t}\n\t\t\t\n\t\t\treturn super.from( serial ) as InstanceType< This >\n\t\t}\n\t\t\n\t\tasArray() {\n\t\t\treturn new Uint8Array( this.buffer, this.byteOffset, this.byteLength )\n\t\t}\n\t\t\n\t\t@ $mol_memo.method\n\t\ttoString() {\n\t\t\tconst arr = this.asArray()\n\t\t\treturn $mol_base64_url_encode( arr.subarray( 0, 32 ) )\n\t\t\t\t+ $mol_base64_url_encode( arr.subarray( 32, 64 ) )\n\t\t\t\t+ $mol_base64_url_encode( arr.subarray( 64 ) )\n\t\t}\n\t\t\n\t}\n\t\n\texport class $mol_crypto_key_public extends $mol_crypto_key {\n\t\t\n\t\tstatic size_str = 86\n\t\tstatic size_bin = 64\n\t\t\n\t\t@ $mol_memo.method\n\t\tasync native() {\n\t\t\tconst str = this.toString()\n\t\t\treturn $mol_crypto_native.subtle.importKey(\n\t\t\t\t'jwk',\n\t\t\t\t{\n\t\t\t\t\tcrv: \"P-256\",\n\t\t\t\t\text: true,\n\t\t\t\t\tkey_ops: [ 'verify' ],\n\t\t\t\t\tkty: \"EC\",\n\t\t\t\t\tx: str.slice( 0, 43 ),\n\t\t\t\t\ty: str.slice( 43, 86 ),\n\t\t\t\t},\n\t\t\t\talgorithm,\n\t\t\t\ttrue,\n\t\t\t\t[ 'verify' ],\n\t\t\t)\n\t\t}\n\t\t\n\t\tasync verify( data: BufferSource, sign: BufferSource ) {\n\t\t\treturn await $mol_crypto_native.subtle.verify(\n\t\t\t\talgorithm,\n\t\t\t\tawait this.native(),\n\t\t\t\tsign,\n\t\t\t\tdata,\n\t\t\t)\n\t\t}\n\t\t\n\t}\n\t\n\texport class $mol_crypto_key_private extends $mol_crypto_key {\n\t\t\n\t\tstatic size_str = 129\n\t\tstatic size_bin = 96\n\t\tstatic size_sign = 64\n\t\t\n\t\tstatic async generate() {\n\t\t\t\n\t\t\tconst pair = await $mol_crypto_native.subtle.generateKey(\n\t\t\t\talgorithm,\n\t\t\t\ttrue,\n\t\t\t\t[ 'sign', 'verify' ]\n\t\t\t)\n\t\t\t\n\t\t\tconst { x, y, d } = await $mol_crypto_native.subtle.exportKey( 'jwk', pair.privateKey )\n\t\t\treturn this.from( x + y! + d! )\n\t\t\t\n\t\t}\n\t\t\n\t\t@ $mol_memo.method\n\t\tasync native() {\n\t\t\tconst str = this.toString()\n\t\t\treturn await $mol_crypto_native.subtle.importKey(\n\t\t\t\t'jwk',\n\t\t\t\t{\n\t\t\t\t\tcrv: \"P-256\",\n\t\t\t\t\text: true,\n\t\t\t\t\tkey_ops: [ 'sign' ],\n\t\t\t\t\tkty: \"EC\",\n\t\t\t\t\tx: str.slice( 0, 43 ),\n\t\t\t\t\ty: str.slice( 43, 86 ),\n\t\t\t\t\td: str.slice( 86, 129 ),\n\t\t\t\t},\n\t\t\t\talgorithm,\n\t\t\t\ttrue,\n\t\t\t\t[ 'sign' ],\n\t\t\t)\n\t\t}\n\t\t\n\t\t@ $mol_memo.method\n\t\tpublic() {\n\t\t\treturn new $mol_crypto_key_public( this.buffer, this.byteOffset, this.byteOffset + 64 )\n\t\t}\n\t\t\n\t\tasync sign( data: BufferSource ) {\n\t\t\treturn await $mol_crypto_native.subtle.sign(\n\t\t\t\talgorithm,\n\t\t\t\tawait this.native(),\n\t\t\t\tdata\n\t\t\t)\n\t\t}\n\t\t\n\t}\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\tasync 'str & bin sizes'() {\n\t\t\t\n\t\t\tconst key_private = await $$.$mol_crypto_key_private.generate()\n\t\t\tconst key_public = key_private.public()\n\t\t\t\n\t\t\t$mol_assert_equal( key_private.toString().length, $mol_crypto_key_private.size_str )\n\t\t\t$mol_assert_equal( key_public.toString().length, $mol_crypto_key_public.size_str )\n\t\t\t\n\t\t\t$mol_assert_equal( key_private.asArray().length, $mol_crypto_key_private.size_bin )\n\t\t\t$mol_assert_equal( key_public.asArray().length, $mol_crypto_key_public.size_bin )\n\t\t\t\n\t\t\tconst data = new Uint8Array([ 1, 2, 3 ])\n\t\t\tconst sign = await key_private.sign( data )\n\t\t\t$mol_assert_equal( sign.byteLength, $mol_crypto_key_private.size_sign )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'verify self signed with auto generated key'() {\n\t\t\t\n\t\t\tconst Alice = await $$.$mol_crypto_key_private.generate()\n\t\t\tconst data = new Uint8Array([ 1, 2, 3 ])\n\t\t\tconst sign = await Alice.sign( data )\n\t\t\t\n\t\t\t$mol_assert_ok( await Alice.public().verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'verify signed with str exported auto generated key'() {\n\t\t\t\n\t\t\tconst Alice = await $$.$mol_crypto_key_private.generate()\n\t\t\tconst data = new Uint8Array([ 1, 2, 3 ])\n\t\t\t\n\t\t\tconst Bella = $mol_crypto_key_private.from( Alice.toString() )\n\t\t\tconst sign = await Bella.sign( data )\n\t\t\t\n\t\t\tconst Catie = $mol_crypto_key_public.from( Alice.public().toString() )\n\t\t\t$mol_assert_ok( await Catie.verify( data, sign ) )\n\t\t\t\n\t\t\tconst Diana = $mol_crypto_key_public.from( Alice.toString() )\n\t\t\t$mol_assert_ok( await Diana.verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'verify signed with bin exported auto generated key'() {\n\t\t\t\n\t\t\tconst Alice = await $$.$mol_crypto_key_private.generate()\n\t\t\tconst data = new Uint8Array([ 1, 2, 3 ])\n\t\t\t\n\t\t\tconst Bella = $mol_crypto_key_private.from( Alice.asArray() )\n\t\t\tconst sign = await Bella.sign( data )\n\t\t\t\n\t\t\tconst Catie = $mol_crypto_key_public.from( Alice.public().asArray() )\n\t\t\t$mol_assert_ok( await Catie.verify( data, sign ) )\n\t\t\t\n\t\t\tconst Diana = $mol_crypto_key_public.from( Alice.asArray() )\n\t\t\t$mol_assert_ok( await Diana.verify( data, sign ) )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\tasync 'sizes'() {\n\t\t\t\n\t\t\tconst cipher = await $mol_crypto_secret.generate()\n\t\t\t\n\t\t\tconst key = await cipher.serial()\n\t\t\t$mol_assert_equal( key.byteLength, $mol_crypto_secret.size )\n\t\t\t\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\tconst salt = $mol_crypto_salt()\n\t\t\t\n\t\t\tconst closed = await cipher.encrypt( data, salt )\n\t\t\t$mol_assert_equal( closed.byteLength, 16 )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'decrypt self encrypted with auto generated key'() {\n\t\t\t\n\t\t\tconst cipher = await $mol_crypto_secret.generate()\n\t\t\t\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\tconst salt = $mol_crypto_salt()\n\t\t\t\n\t\t\tconst closed = await cipher.encrypt( data, salt )\n\t\t\tconst opened = await cipher.decrypt( closed, salt )\n\t\t\t\n\t\t\t$mol_assert_like( data, new Uint8Array( opened ) )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'decrypt encrypted with exported auto generated key'() {\n\t\t\t\n\t\t\tconst data = new Uint8Array([1,2,3])\n\t\t\tconst salt = $mol_crypto_salt()\n\t\t\t\n\t\t\tconst Alice = await $mol_crypto_secret.generate()\n\t\t\tconst closed = await Alice.encrypt( data, salt )\n\t\t\t\n\t\t\tconst Bob = await $mol_crypto_secret.from( await Alice.serial() )\n\t\t\tconst opened = await Bob.decrypt( closed, salt )\n\t\t\t\n\t\t\t$mol_assert_like( data, new Uint8Array( opened ) )\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'derivation from public & private keys'() {\n\t\t\t\n\t\t\tconst A = await $mol_crypto_key_private.generate()\n\t\t\tconst B = await $mol_crypto_key_private.generate()\n\t\t\t\n\t\t\tconst AK = await $mol_crypto_secret.derive( A.toString(), B.public().toString() )\n\t\t\tconst BK = await $mol_crypto_secret.derive( B.toString(), A.public().toString() )\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tnew Uint8Array( await AK.serial() ),\n\t\t\t\tnew Uint8Array( await BK.serial() ),\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\n\t$mol_test_mocks.push( $ => {\n\t\t$.$mol_after_work = $mol_after_mock_timeout as any as typeof $mol_after_work\n\t})\n\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\tasync 'put, get, drop, count records and clear store'() {\n\t\t\t\n\t\t\tconst db = await $$.$mol_db<{\n\t\t\t\tletters: { Key: number, Doc: string, Indexes: {} }\n\t\t\t}>( '$mol_db_test',\n\t\t\t\tmig => mig.store_make( 'letters' )\n\t\t\t)\n\t\t\tconst trans = db.change( 'letters' )\n\t\t\t\n\t\t\ttry {\n\t\t\t\n\t\t\t\tconst { letters } = trans.stores\n\t\t\t\t\n\t\t\t\t$mol_assert_like( await letters.get(1), undefined )\n\t\t\t\t$mol_assert_like( await letters.get(2), undefined )\n\t\t\t\t$mol_assert_like( await letters.count(), 0 )\n\t\t\t\t\n\t\t\t\tawait letters.put( 'a' )\n\t\t\t\tawait letters.put( 'b', 1 )\n\t\t\t\tawait letters.put( 'c', 2 )\n\t\t\t\t\n\t\t\t\t$mol_assert_like( await letters.get(1), 'b' )\n\t\t\t\t$mol_assert_like( await letters.get(2), 'c' )\n\t\t\t\t$mol_assert_like( await letters.count(), 2 )\n\t\t\t\t\n\t\t\t\tawait letters.drop( 1 )\n\t\t\t\t\n\t\t\t\t$mol_assert_like( await letters.get(1), undefined )\n\t\t\t\t$mol_assert_like( await letters.count(), 1 )\n\t\t\t\t\n\t\t\t\tawait letters.clear()\n\t\t\t\t$mol_assert_like( await letters.count(), 0 )\n\t\t\t\n\t\t\t} finally {\n\t\t\t\t\n\t\t\t\ttrans.abort()\n\t\t\t\tdb.kill()\n\t\t\t\t\n\t\t\t}\n\n\t\t},\n\t\t\n\t\tasync 'select by query'() {\n\t\t\t\n\t\t\tconst db = await $$.$mol_db<{\n\t\t\t\tletters: { Key: number, Doc: string, Indexes: {} }\n\t\t\t}>( '$mol_db_test',\n\t\t\t\tmig => mig.store_make( 'letters' )\n\t\t\t)\n\t\t\tconst trans = db.change( 'letters' )\n\t\t\t\n\t\t\ttry {\n\t\t\t\n\t\t\t\tconst { letters } = trans.stores\n\t\t\t\t\n\t\t\t\tawait letters.put( 'a' )\n\t\t\t\tawait letters.put( 'b' )\n\t\t\t\tawait letters.put( 'c' )\n\t\t\t\tawait letters.put( 'd' )\n\t\t\t\t\n\t\t\t\t$mol_assert_like( await letters.select(), [ 'a', 'b', 'c', 'd' ] )\n\t\t\t\t$mol_assert_like( await letters.select( null, 2 ), [ 'a', 'b' ] )\n\t\t\t\t$mol_assert_like( await letters.select( $mol_dom_context.IDBKeyRange.bound( 2, 3 ) ), [ 'b', 'c' ] )\n\t\t\t\t\n\t\t\t} finally {\n\t\t\t\t\n\t\t\t\ttrans.abort()\n\t\t\t\tdb.kill()\n\t\t\t\t\n\t\t\t}\n\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\tasync 'take and drop db'() {\n\t\t\tconst db = await $$.$mol_db( '$mol_db_test' )\n\t\t\tawait db.kill()\n\t\t},\n\t\t\n\t\tasync 'make and drop store in separate migrations'() {\n\t\t\t\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tconst db1 = await $$.$mol_db( '$mol_db_test',\n\t\t\t\t\tmig => mig.store_make( 'temp' ),\n\t\t\t\t)\n\t\t\t\tdb1.destructor()\n\t\t\t\t\n\t\t\t\t$mol_assert_like( db1.stores, [ 'temp' ] )\n\t\t\t\t$mol_assert_like( db1.version, 2 )\n\t\t\t\t\n\t\t\t\tconst db2 = await $$.$mol_db( '$mol_db_test',\n\t\t\t\t\tmig => mig.store_make( 'temp' ),\n\t\t\t\t\tmig => mig.store_drop( 'temp' ),\n\t\t\t\t)\n\t\t\t\tdb2.destructor()\n\t\t\t\t\n\t\t\t\t$mol_assert_like( db2.stores, [] )\n\t\t\t\t$mol_assert_like( db2.version, 3 )\n\t\t\t\n\t\t\t} finally {\n\t\t\t\t\n\t\t\t\tconst db0 = await $$.$mol_db( '$mol_db_test' )\n\t\t\t\tawait db0.kill()\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\tasync 'unique index'() {\n\t\t\t\n\t\t\tconst db = await $$.$mol_db<{\n\t\t\t\tusers: {\n\t\t\t\t\tKey: string\n\t\t\t\t\tDoc: { name: string }\n\t\t\t\t\tIndexes: {\n\t\t\t\t\t\tnames: [ string ]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}>( '$mol_db_test',\n\t\t\t\tmig => mig.store_make( 'users' ),\n\t\t\t\tmig => mig.stores.users.index_make( 'names', [ 'name' ], !!'unique' ),\n\t\t\t)\n\t\t\tconst trans = db.change( 'users' )\n\t\t\t\n\t\t\ttry {\n\t\t\t\n\t\t\t\tconst { users } = trans.stores\n\t\t\t\tawait users.put( { name: 'Jin' }, 'jin' )\n\t\t\t\tawait users.put( { name: 'John' }, 'john' )\n\t\t\t\tawait users.put( { name: 'Bin' }, 'bin' )\n\n\t\t\t\tconst { names } = users.indexes\n\t\t\t\t$mol_assert_like( await names.get([ 'Jin' ]), { name: 'Jin' } )\n\t\t\t\t$mol_assert_like( await names.get([ 'John' ]), { name: 'John' } )\n\t\t\t\t$mol_assert_like( await names.count(), 3 )\n\t\t\t\t\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\tawait names.select( $mol_dom_context.IDBKeyRange.bound( [ 'J' ], [ 'J\\uFFFF' ] ) ),\n\t\t\t\t\t[ { name: 'Jin' }, { name: 'John' } ],\n\t\t\t\t)\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tawait users.put( { name: 'Jin' }, 'jin2' )\n\t\t\t\t\t$mol_fail( new Error( 'Exception expected' ) )\n\t\t\t\t} catch( error: any ) {\n\t\t\t\t\t$mol_assert_unique( error.message, 'Exception expected' )\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} finally {\n\t\t\t\ttrans.abort()\n\t\t\t\tawait db.kill()\n\t\t\t}\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'multi path index'() {\n\t\t\t\n\t\t\tconst db = await $$.$mol_db<{\n\t\t\t\tusers: {\n\t\t\t\t\tKey: string\n\t\t\t\t\tDoc: { first: string, last: string }\n\t\t\t\t\tIndexes: {\n\t\t\t\t\t\tnames: [ string, string ]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}>( '$mol_db_test',\n\t\t\t\tmig => mig.store_make( 'users' ),\n\t\t\t\tmig => mig.stores.users.index_make( 'names', [ 'first', 'last' ] ),\n\t\t\t)\n\t\t\tconst trans = db.change( 'users' )\n\t\t\t\n\t\t\ttry {\n\t\t\t\n\t\t\t\tconst { users } = trans.stores\n\t\t\t\tawait users.put( { first: 'Jin', last: 'Johnson' }, 'jin' )\n\t\t\t\tawait users.put( { first: 'John', last: 'Jinson' }, 'john' )\n\t\t\t\tawait users.put( { first: 'Bond', last: 'James' }, '007' )\n\t\t\t\t\n\t\t\t\tconst { names } = users.indexes\n\t\t\t\t$mol_assert_like( await names.get([ 'Jin', 'Johnson' ]), { first: 'Jin', last: 'Johnson' } )\n\t\t\t\t$mol_assert_like( await names.get([ 'John', 'Jinson' ]), { first: 'John', last: 'Jinson' } )\n\t\t\t\t$mol_assert_like( await names.count(), 3 )\n\t\t\t\t\n\t\t\t\t$mol_assert_like(\n\t\t\t\t\tawait names.select( $mol_dom_context.IDBKeyRange.bound( [ 'Jin', 'Johnson' ], [ 'John', 'Jinson' ] ) ),\n\t\t\t\t\t[ { first: 'Jin', last: 'Johnson' }, { first: 'John', last: 'Jinson' } ],\n\t\t\t\t)\n\t\t\t\t\n\t\t\t} finally {\n\t\t\t\ttrans.abort()\n\t\t\t\tawait db.kill()\n\t\t\t}\n\t\t\t\n\t\t},\n\t\t\n\t\tasync 'multiple indexes'() {\n\t\t\t\n\t\t\tconst db = await $$.$mol_db<{\n\t\t\t\tusers: {\n\t\t\t\t\tKey: string\n\t\t\t\t\tDoc: { name: string, age: number }\n\t\t\t\t\tIndexes: {\n\t\t\t\t\t\tnames: [ string ]\n\t\t\t\t\t\tages: [ number ]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}>( '$mol_db_test',\n\t\t\t\tmig => mig.store_make( 'users' ),\n\t\t\t\tmig => mig.stores.users.index_make( 'names', [ 'name' ], !!'unique' ),\n\t\t\t\tmig => mig.stores.users.index_make( 'ages', [ 'age' ] ),\n\t\t\t)\n\t\t\tconst trans = db.change( 'users' )\n\t\t\t\n\t\t\ttry {\n\t\t\t\n\t\t\t\tconst { users } = trans.stores\n\t\t\t\tawait users.put( { name: 'Jin', age: 18 }, 'jin' )\n\t\t\t\tawait users.put( { name: 'John', age: 18 }, 'john' )\n\t\t\t\t\n\t\t\t\tconst { names, ages } = users.indexes\n\t\t\t\t\n\t\t\t\t$mol_assert_like( await names.select([ 'Jin' ]), [{ name: 'Jin', age: 18 }] )\n\t\t\t\t$mol_assert_like( await names.select([ 'John' ]), [{ name: 'John', age: 18 }] )\n\t\t\t\t$mol_assert_like( await names.count(), 2 )\n\t\t\t\t\n\t\t\t\t$mol_assert_like( await ages.select([ 18 ]), [ { name: 'Jin', age: 18 }, { name: 'John', age: 18 } ] )\n\t\t\t\t$mol_assert_like( await ages.count(), 2 )\n\t\t\t\t\n\t\t\t} finally {\n\t\t\t\ttrans.abort()\n\t\t\t\tawait db.kill()\n\t\t\t}\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test_mocks.push( $ => {\n\t\t$.$hyoo_sync_client = class extends $hyoo_sync_yard<never> {\n\t\t\tland_init( land: $hyoo_crowd_land ) {}\n\t\t} as any\n\t} )\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'simple sort'() {\n\t\t\tconst list = [ 'abc' , 'ac' , 'ab' ]\n\t\t\tlist.sort( $mol_compare_text() )\n\t\t\t$mol_assert_equal( `${ list }` , 'ab,abc,ac' )\n\t\t} ,\n\n\t\t'sort ignoring spaces around'() {\n\t\t\tconst list = [ ' a' , '\\tb' , ' b' ]\n\t\t\tlist.sort( $mol_compare_text() )\n\t\t\t$mol_assert_equal( `${ list }` , ' a,\\tb, b' )\n\t\t} ,\n\n\t\t'sort ignoring letter case'() {\n\t\t\tconst list = [ 'A' , 'B' , 'a' ]\n\t\t\tlist.sort( $mol_compare_text() )\n\t\t\t$mol_assert_equal( `${ list }` , 'A,a,B' )\n\t\t} ,\n\n\t\t'sort with custom serializer'() {\n\t\t\tconst list = [ 'abc' , 'ab' , 'ac' ]\n\t\t\tlist.sort( $mol_compare_text( str => str.split('').reverse().join('') ) )\n\t\t\t$mol_assert_equal( `${ list }` , 'ab,ac,abc' )\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'function'() {\n\t\t\t$mol_assert_not( $mol_func_is_class( function() {} ) )\n\t\t},\n\t\t\n\t\t'generator'() {\n\t\t\t$mol_assert_not( $mol_func_is_class( function*(){} ) )\n\t\t},\n\n\t\t'async'() {\n\t\t\t$mol_assert_not( $mol_func_is_class( async function(){} ) )\n\t\t},\n\n\t\t'arrow'() {\n\t\t\t$mol_assert_not( $mol_func_is_class( ()=> null ) )\n\t\t},\n\n\t\t'named class'() {\n\t\t\t$mol_assert_ok( $mol_func_is_class( class Foo {} ) )\n\t\t},\n\n\t\t'unnamed class'() {\n\t\t\t$mol_assert_ok( $mol_func_is_class( class {} ) )\n\t\t},\n\n\t})\n}\n","namespace $ {\n\t$mol_test( {\n\t\t'span for same uri'( $ ) {\n\t\t\tconst span = new $mol_span('test.ts', '', 1, 3, 4)\n\t\t\tconst child = span.span(4, 5, 8)\n\n\t\t\t$mol_assert_equal(child.uri, 'test.ts')\n\t\t\t$mol_assert_equal(child.row, 4)\n\t\t\t$mol_assert_equal(child.col, 5)\n\t\t\t$mol_assert_equal(child.length, 8)\n\t\t},\n\n\t\t'span after of given position'( $ ) {\n\t\t\tconst span = new $mol_span('test.ts', '', 1, 3, 4)\n\t\t\tconst child = span.after(11)\n\n\t\t\t$mol_assert_equal(child.uri, 'test.ts')\n\t\t\t$mol_assert_equal(child.row, 1)\n\t\t\t$mol_assert_equal(child.col, 7)\n\t\t\t$mol_assert_equal(child.length, 11)\n\t\t},\n\n\t\t'slice span - regular'( $ ) {\n\t\t\tconst span = new $mol_span('test.ts', '', 1, 3, 5)\n\t\t\tconst child = span.slice(1, 4)\n\n\t\t\t$mol_assert_equal(child.row, 1)\n\t\t\t$mol_assert_equal(child.col, 4)\n\t\t\t$mol_assert_equal(child.length, 3)\n\n\t\t\tconst child2 = span.slice(2, 2)\n\n\t\t\t$mol_assert_equal(child2.col, 5)\n\t\t\t$mol_assert_equal(child2.length, 0)\n\t\t},\n\n\t\t'slice span - negative'( $ ) {\n\t\t\tconst span = new $mol_span('test.ts', '', 1, 3, 5)\n\t\t\tconst child = span.slice(-3, -1)\n\n\t\t\t$mol_assert_equal(child.row, 1)\n\t\t\t$mol_assert_equal(child.col, 5)\n\t\t\t$mol_assert_equal(child.length, 2)\n\t\t},\n\n\t\t'slice span - out of range'( $ ) {\n\t\t\tconst span = new $mol_span('test.ts', '', 1, 3, 5)\n\n\t\t\t$mol_assert_fail( ()=> span.slice(-1, 3), `End value '3' can't be less than begin value (test.ts#1:3/5)` )\n\t\t\t$mol_assert_fail( ()=> span.slice(1, 6), `End value '6' out of range (test.ts#1:3/5)` )\n\t\t\t$mol_assert_fail( ()=> span.slice(1, 10), `End value '10' out of range (test.ts#1:3/5)` )\n\t\t},\n\n\t\t'error handling'( $ ) {\n\t\t\tconst span = new $mol_span('test.ts', '', 1, 3, 4)\n\t\t\tconst error = span.error('Some error')\n\n\t\t\t$mol_assert_equal(error.message, 'Some error (test.ts#1:3/4)')\n\t\t}\n\n\t} )\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'tree parsing'( $ ) {\n\t\t\t\n\t\t\t$mol_assert_equal( $.$mol_tree2_from_string( \"foo\\nbar\\n\" ).kids.length , 2 )\n\t\t\t$mol_assert_equal( $.$mol_tree2_from_string( \"foo\\nbar\\n\" ).kids[ 1 ].type , \"bar\" )\n\t\t\t$mol_assert_equal( $.$mol_tree2_from_string( \"foo\\n\\n\\n\" ).kids.length , 1 )\n\t\t\t\n\t\t\t$mol_assert_equal( $.$mol_tree2_from_string( \"=foo\\n\\\\bar\\n\" ).kids.length , 2 )\n\t\t\t$mol_assert_equal( $.$mol_tree2_from_string( \"=foo\\n\\\\bar\\n\" ).kids[ 1 ].value , \"bar\" )\n\t\t\t\n\t\t\t$mol_assert_equal( $.$mol_tree2_from_string( \"foo bar \\\\pol\\n\" ).kids[ 0 ].kids[ 0 ].kids[ 0 ].value , \"pol\" )\n\t\t\t$mol_assert_equal( $.$mol_tree2_from_string( \"foo bar\\n\\t\\\\pol\\n\\t\\\\men\\n\" ).kids[ 0 ].kids[ 0 ].kids[ 1 ].value , \"men\" )\n\t\t\t\n\t\t\t$mol_assert_equal( $.$mol_tree2_from_string( 'foo bar \\\\text\\n' ).toString() , 'foo bar \\\\text\\n' )\n\t\t} ,\n\n\t\t'Too many tabs'( $ ) {\n\n\t\t\tconst tree = `\n\t\t\t\tfoo\n\t\t\t\t\t\tbar\n\t\t\t`\n\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$.$mol_tree2_from_string( tree , 'test' )\n\t\t\t}, 'Too many tabs\\ntest#3:1/6\\n!!!!!!\\n\\t\\t\\t\\t\\t\\tbar' )\n\n\t\t},\n\n\t\t'Too few tabs'( $ ) {\n\n\t\t\tconst tree = `\n\t\t\t\t\tfoo\n\t\t\t\tbar\n\t\t\t`\n\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$.$mol_tree2_from_string( tree , 'test' )\n\t\t\t}, 'Too few tabs\\ntest#3:1/4\\n!!!!\\n\\t\\t\\t\\tbar' )\n\n\t\t},\n\n\t\t'Wrong nodes separator at start'( $ ) {\n\n\t\t\tconst tree = `foo\\n \\tbar\\n`\n\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$.$mol_tree2_from_string( tree , 'test' )\n\t\t\t}, 'Wrong nodes separator\\ntest#2:1/2\\n!!\\n \\tbar' )\n\n\t\t},\n\n\t\t'Wrong nodes separator in the middle'( $ ) {\n\n\t\t\tconst tree = `foo  bar\\n`\n\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$.$mol_tree2_from_string( tree , 'test' )\n\t\t\t}, 'Wrong nodes separator\\ntest#1:5/1\\n    !\\nfoo  bar' )\n\n\t\t},\n\n\t\t'Unexpected EOF, LF required'( $ ) {\n\n\t\t\tconst tree = `\tfoo`\n\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$.$mol_tree2_from_string( tree , 'test' )\n\t\t\t}, 'Unexpected EOF, LF required\\ntest#1:5/1\\n\t   !\\n\tfoo' )\n\n\t\t},\n\n\t\t'Errors skip and collect'( $ ) {\n\n\t\t\tconst tree = `foo  bar`\n\t\t\tconst errors = [] as string[]\n\n\t\t\tconst $$ = $.$mol_ambient({\n\t\t\t\t$mol_fail: ( error: any ) => {\n\t\t\t\t\terrors.push( error.message )\n\t\t\t\t\treturn null as never\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tconst res = $$.$mol_tree2_from_string( tree , 'test' )\n\n\t\t\t$mol_assert_like( errors, [\n\t\t\t\t'Wrong nodes separator\\ntest#1:5/1\\n    !\\nfoo  bar',\n\t\t\t\t'Unexpected EOF, LF required\\ntest#1:9/1\\n        !\\nfoo  bar',\n\t\t\t] )\n\n\t\t\t$mol_assert_equal( res.toString(), 'foo bar\\n' )\n\n\t\t},\n\n\t} )\t\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'inserting'($) {\n\t\t\t$mol_assert_equal(\n\t\t\t\t$.$mol_tree2_from_string( 'a b c d\\n' )\n\t\t\t\t\t.insert( $mol_tree2.struct('x') , 'a' , 'b' , 'c' )\n\t\t\t\t\t.toString(),\n\t\t\t\t'a b x\\n',\n\t\t\t)\n\t\t\t$mol_assert_equal(\n\t\t\t\t$.$mol_tree2_from_string( 'a b\\n' )\n\t\t\t\t\t.insert( $mol_tree2.struct('x') , 'a' , 'b' , 'c' , 'd' )\n\t\t\t\t\t.toString(),\n\t\t\t\t'a b c x\\n',\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\t$.$mol_tree2_from_string( 'a b c d\\n' )\n\t\t\t\t\t.insert( $mol_tree2.struct('x') , 0 , 0 , 0 )\n\t\t\t\t\t.toString(),\n\t\t\t\t'a b x\\n',\n\t\t\t)\n\t\t\t$mol_assert_equal(\n\t\t\t\t$.$mol_tree2_from_string( 'a b\\n' )\n\t\t\t\t\t.insert( $mol_tree2.struct('x') , 0 , 0 , 0 , 0 )\n\t\t\t\t\t.toString(),\n\t\t\t\t'a b \\\\\\n\\tx\\n'\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\t$.$mol_tree2_from_string( 'a b c d\\n' )\n\t\t\t\t\t.insert( $mol_tree2.struct('x') , null , null , null )\n\t\t\t\t\t.toString(),\n\t\t\t\t'a b x\\n',\n\t\t\t)\n\t\t\t$mol_assert_equal(\n\t\t\t\t$.$mol_tree2_from_string( 'a b\\n' )\n\t\t\t\t\t.insert( $mol_tree2.struct('x') , null , null , null , null )\n\t\t\t\t\t.toString(),\n\t\t\t\t'a b \\\\\\n\\tx\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'deleting'($) {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\t$.$mol_tree2_from_string( 'a b c d\\n' )\n\t\t\t\t\t.insert( null , 'a' , 'b' , 'c' )\n\t\t\t\t\t.toString(),\n\t\t\t\t'a b\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\t$.$mol_tree2_from_string( 'a b c d\\n' )\n\t\t\t\t\t.insert( null , 0, 0, 0 )\n\t\t\t\t\t.toString(),\n\t\t\t\t'a b\\n',\n\t\t\t)\n\t\t\t\n\t\t} ,\n\n\t\t'hack'($) {\n\n\t\t\tconst res = $.$mol_tree2_from_string( `foo bar xxx\\n` )\n\t\t\t.hack({\n\t\t\t\t'bar' : ( input , belt )=> [ input.struct( '777' , input.hack( belt ) ) ] ,\n\t\t\t})\n\n\t\t\t$mol_assert_equal( res.toString() , 'foo 777 xxx\\n' )\n\n\t\t} ,\n\n\t} )\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Cached field' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\t\n\t\t\t\t@ $mol_wire_field\n\t\t\t\tstatic low = 1\n\t\t\t\t\n\t\t\t\t@ $mol_wire_field\n\t\t\t\tstatic get high() {\n\t\t\t\t\treturn this.low + 1\n\t\t\t\t}\n\t\t\t\tstatic set high( next: number ) {\n\t\t\t\t\tthis.low = next - 1\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@ $mol_wire_method\n\t\t\t\tstatic test() {\n\t\t\t\t\t\n\t\t\t\t\t$mol_assert_equal( App.high , 2 )\n\t\t\n\t\t\t\t\tApp.high = 3\n\t\t\t\t\t$mol_assert_equal( App.high , 3 )\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t\n\t\t\tApp.test()\n\t\t},\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'define as methods'() {\n\t\t\t\n\t\t\tconst { foo, bar, lol } = $mol_wire_let({\n\t\t\t\tfoo( next = 1 ) { return next },\n\t\t\t\tbar() { return this.foo() + 1 },\n\t\t\t\tlol( next?: number ) { return this.foo( next ) },\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( foo(), 1 )\n\t\t\t$mol_assert_equal( bar(), 2 )\n\t\t\t\n\t\t\t$mol_assert_equal( foo(5), 5 )\n\t\t\t$mol_assert_equal( bar(), 6 )\n\t\t\t\n\t\t\t$mol_assert_equal( lol(10), 10 )\n\t\t\t$mol_assert_equal( bar(), 11 )\n\t\t\t\n\t\t},\n\t\t\n\t\t'define as closures'() {\n\t\t\t\n\t\t\tconst { foo, bar, lol } = $mol_wire_let({\n\t\t\t\tfoo: ( next = 1 )=> next,\n\t\t\t\tbar: ()=> foo() + 1,\n\t\t\t\tlol: ( next?: number )=> foo( next ),\n\t\t\t})\n\t\t\t\n\t\t\t$mol_assert_equal( foo(), 1 )\n\t\t\t$mol_assert_equal( bar(), 2 )\n\t\t\t\n\t\t\t$mol_assert_equal( foo(5), 5 )\n\t\t\t$mol_assert_equal( bar(), 6 )\n\t\t\t\n\t\t\t$mol_assert_equal( lol(10), 10 )\n\t\t\t$mol_assert_equal( bar(), 11 )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n\n\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Watch one value' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\tstatic set = new $mol_wire_set< number >()\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic lucky() {\n\t\t\t\t\treturn this.set.has( 777 )\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.lucky(), false )\n\n\t\t\tApp.set.add( 666 )\n\t\t\t$mol_assert_equal( App.lucky(), false )\n\n\t\t\tApp.set.add( 777 )\n\t\t\t$mol_assert_equal( App.lucky(), true )\n\n\t\t\tApp.set.delete( 777 )\n\t\t\t$mol_assert_equal( App.lucky(), false )\n\n\t\t},\n\n\t\t'Watch item channel' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\tstatic set = new $mol_wire_set< number >()\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic lucky() {\n\t\t\t\t\treturn this.set.item( 777 )\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.lucky(), false )\n\n\t\t\tApp.set.item( 666, true )\n\t\t\t$mol_assert_equal( App.lucky(), false )\n\n\t\t\tApp.set.item( 777, true )\n\t\t\t$mol_assert_equal( App.lucky(), true )\n\n\t\t\tApp.set.item( 777, false )\n\t\t\t$mol_assert_equal( App.lucky(), false )\n\n\t\t},\n\n\t\t'Watch size' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\tstatic set = new $mol_wire_set< number >()\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic size() {\n\t\t\t\t\treturn this.set.size\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.size(), 0 )\n\n\t\t\tApp.set.add( 666 )\n\t\t\t$mol_assert_equal( App.size(), 1 )\n\n\t\t\tApp.set.add( 777 )\n\t\t\t$mol_assert_equal( App.size(), 2 )\n\n\t\t\tApp.set.delete( 777 )\n\t\t\t$mol_assert_equal( App.size(), 1 )\n\n\t\t},\n\n\t\t'Watch for-of' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\tstatic set = new $mol_wire_set< number >()\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic sum() {\n\t\t\t\t\tlet res = 0\n\t\t\t\t\tfor( const val of this.set ) {\n\t\t\t\t\t\tres += val\n\t\t\t\t\t}\n\t\t\t\t\treturn res\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.sum(), 0 )\n\n\t\t\tApp.set.add( 111 )\n\t\t\t$mol_assert_equal( App.sum(), 111 )\n\n\t\t\tApp.set.add( 222 )\n\t\t\t$mol_assert_equal( App.sum(), 333 )\n\n\t\t\tApp.set.delete( 111 )\n\t\t\t$mol_assert_equal( App.sum(), 222 )\n\n\t\t},\n\n\t\t'Watch forEach' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\tstatic set = new $mol_wire_set< number >()\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic sum() {\n\t\t\t\t\tlet res = 0\n\t\t\t\t\tthis.set.forEach( val => res += val )\n\t\t\t\t\treturn res\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.sum(), 0 )\n\n\t\t\tApp.set.add( 111 )\n\t\t\t$mol_assert_equal( App.sum(), 111 )\n\n\t\t\tApp.set.add( 222 )\n\t\t\t$mol_assert_equal( App.sum(), 333 )\n\n\t\t\tApp.set.delete( 111 )\n\t\t\t$mol_assert_equal( App.sum(), 222 )\n\t\t\t\n\t\t},\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Watch one value' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\tstatic dict = new $mol_wire_dict< number, number >()\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic lucky() {\n\t\t\t\t\treturn this.dict.get( 777 )\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.lucky(), undefined )\n\n\t\t\tApp.dict.set( 666, 6666 )\n\t\t\t$mol_assert_equal( App.lucky(), undefined )\n\n\t\t\tApp.dict.set( 777, 7777 )\n\t\t\t$mol_assert_equal( App.lucky(), 7777 )\n\n\t\t\tApp.dict.delete( 777 )\n\t\t\t$mol_assert_equal( App.lucky(), undefined )\n\n\t\t},\n\n\t\t'Watch item channel' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\tstatic dict = new $mol_wire_dict< number, number >()\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic lucky() {\n\t\t\t\t\treturn this.dict.item( 777 )\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.lucky(), null )\n\n\t\t\tApp.dict.item( 666, 6666 )\n\t\t\t$mol_assert_equal( App.lucky(), null )\n\n\t\t\tApp.dict.item( 777, 7777 )\n\t\t\t$mol_assert_equal( App.lucky(), 7777 )\n\n\t\t\tApp.dict.item( 777, null )\n\t\t\t$mol_assert_equal( App.lucky(), null )\n\n\t\t},\n\n\t\t'Watch size' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\tstatic dict = new $mol_wire_dict< number, number >()\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic size() {\n\t\t\t\t\treturn this.dict.size\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_equal( App.size(), 0 )\n\n\t\t\tApp.dict.set( 666, 6666 )\n\t\t\t$mol_assert_equal( App.size(), 1 )\n\n\t\t\tApp.dict.set( 777, 7777 )\n\t\t\t$mol_assert_equal( App.size(), 2 )\n\n\t\t\tApp.dict.delete( 777 )\n\t\t\t$mol_assert_equal( App.size(), 1 )\n\n\t\t},\n\n\t\t'Watch for-of' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\tstatic dict = new $mol_wire_dict< number, number >()\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic sum() {\n\t\t\t\t\tlet keys = 0\n\t\t\t\t\tlet vals = 0\n\t\t\t\t\tfor( const [ key, val ] of this.dict ) {\n\t\t\t\t\t\tkeys += key\n\t\t\t\t\t\tvals += val\n\t\t\t\t\t}\n\t\t\t\t\treturn [ keys, vals ]\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_like( App.sum(), [ 0, 0 ] )\n\n\t\t\tApp.dict.set( 111, 1111 )\n\t\t\t$mol_assert_like( App.sum(), [ 111, 1111 ] )\n\n\t\t\tApp.dict.set( 222, 2222 )\n\t\t\t$mol_assert_like( App.sum(), [ 333, 3333 ] )\n\n\t\t\tApp.dict.delete( 111 )\n\t\t\t$mol_assert_like( App.sum(), [ 222, 2222 ] )\n\n\t\t},\n\n\t\t'Watch forEach' ($) {\n\n\t\t\tclass App extends $mol_object2 {\n\n\t\t\t\tstatic $ = $\n\t\t\t\tstatic dict = new $mol_wire_dict< number, number >()\n\t\t\t\t\n\t\t\t\t@ $mol_wire_solo\n\t\t\t\tstatic sum() {\n\t\t\t\t\tlet keys = 0\n\t\t\t\t\tlet vals = 0\n\t\t\t\t\tthis.dict.forEach( ( val, key )=> {\n\t\t\t\t\t\tkeys += key\n\t\t\t\t\t\tvals += val\n\t\t\t\t\t} )\n\t\t\t\t\treturn [ keys, vals ]\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$mol_assert_like( App.sum(), [ 0, 0 ] )\n\n\t\t\tApp.dict.set( 111, 1111 )\n\t\t\t$mol_assert_like( App.sum(), [ 111, 1111 ] )\n\n\t\t\tApp.dict.set( 222, 2222 )\n\t\t\t$mol_assert_like( App.sum(), [ 333, 3333 ] )\n\n\t\t\tApp.dict.delete( 111 )\n\t\t\t$mol_assert_like( App.sum(), [ 222, 2222 ] )\n\t\t\t\n\t\t},\n\n\t})\n}\n","namespace $ {\n\tfunction get_parts(str: string) {\n\t\treturn $$.$mol_view_tree2_prop_parts($mol_tree2.struct(str))\n\t}\n\n\t$mol_test({\n\t\t'wrong order'($) {\n\t\t\t$mol_assert_fail(() => {\n\t\t\t\tget_parts('some_bla?*')\n\t\t\t}, 'Required prop like some*? at `?#1:1/0`')\n\t\t},\n\n\t\t'empty'($) {\n\t\t\t$mol_assert_fail(() => {\n\t\t\t\tget_parts('')\n\t\t\t}, 'Required prop like some*? at `?#1:1/0`')\n\t\t},\n\n\t\t'prop in upper case'($) {\n\t\t\tconst parts = get_parts('Close_icon')\n\t\t\t$mol_assert_equal(parts.name, 'Close_icon')\n\t\t\t$mol_assert_equal(parts.key, '')\n\t\t\t$mol_assert_equal(parts.next, '')\n\t\t},\n\n\t\t'prop with index'($) {\n\t\t\tconst parts = get_parts('some_bla*')\n\t\t\t$mol_assert_equal(parts.name, 'some_bla')\n\t\t\t$mol_assert_equal(parts.key, '*')\n\t\t\t$mol_assert_equal(parts.next, '')\n\t\t},\n\n\t\t'prop with index and value'($) {\n\t\t\tconst parts = get_parts('some_bla*?')\n\t\t\t$mol_assert_equal(parts.name, 'some_bla')\n\t\t\t$mol_assert_equal(parts.key, '*')\n\t\t\t$mol_assert_equal(parts.next, '?')\n\t\t},\n\n\t\t'legacy indexed'($) {\n\t\t\tconst parts = get_parts('Some*default')\n\t\t\t$mol_assert_equal(parts.name, 'Some')\n\t\t\t$mol_assert_equal(parts.key, '*default')\n\t\t\t$mol_assert_equal(parts.next, '')\n\t\t},\n\n\t\t'legacy indexed value'($) {\n\t\t\tconst parts = get_parts('Some*k?v')\n\t\t\t$mol_assert_equal(parts.name, 'Some')\n\t\t\t$mol_assert_equal(parts.key, '*k')\n\t\t\t$mol_assert_equal(parts.next, '?')\n\t\t}\n\t})\n}\n","namespace $.$$ {\n\tconst d = '$'\n\tconst file_name = '/mol/view/tree2/class/props.test.ts'\n\n\tfunction normalize($: $, src: string, dest?: string) {\n\t\tconst mod = $.$mol_tree2_from_string( src, file_name )\n\t\tconst input = $.$mol_view_tree2_class_props(mod.kids[0]).join('')\n\t\tconst output = dest ? $$.$mol_tree2_from_string(dest, 'reference').toString() : ''\n\t\treturn { input, output }\n\t}\n\n\t$mol_test({\n\t\t'dupes merge'($) {\n\t\t\tconst src = `\n\t\t\t\t${d}my_test ${d}my_super\n\t\t\t\t\tquery? \\\\\n\t\t\t\t\tQuery $mol_string\n\t\t\t\t\t\tvalue? <=> query? \\\\\n\t\t\t\t\tSuggest_label ${d}mol_dimmer\n\t\t\t\t\t\tneedle <= query? \\\\\n\t\t\t\t\t\tkey * escape? <=> clear? null\n\t\t\t\t\tClear ${d}mol_button_minor\n\t\t\t\t\t\tclick?event <=> clear?event null\n\t\t\t`\n\n\t\t\tconst dest = `\n\t\t\t\tquery? \\\\\n\t\t\t\tclear?event null\n\t\t\t\tQuery $mol_string value? <=> query?\n\t\t\t\tSuggest_label $mol_dimmer\n\t\t\t\t\tneedle <= query?\n\t\t\t\t\tkey * escape? <=> clear?\n\t\t\t\tClear $mol_button_minor click?event <=> clear?event\n\t\t\t`\n\t\t\tconst res = normalize($, src, dest)\n\t\t\t$mol_assert_equal(res.input, res.output)\n\t\t},\n\n\t\t'left and bidi common'($) {\n\t\t\tconst src = `\n\t\t\t\t${d}my_test ${d}my_super\n\t\t\t\t\ttitle @ \\\\title\n\t\t\t\t\tsub2 /\n\t\t\t\t\t\t<= Close_icon ${d}mol_icon_cross\n\t\t\t\t\tsub /\n\t\t\t\t\t\t<= Title ${d}mol_view\n\t\t\t\t\t\t\tsub /\n\t\t\t\t\t\t\t\t<= title\n\t\t\t\t\t\t<= Close ${d}mol_button\n\t\t\t\t\t\t\ttitle \\\\close\n\t\t\t\t\t\t\tclick?event <=> close?event null\n\t\t\t`\n\t\t\t\n\t\t\tconst dest = `\n\t\t\t\tClose_icon ${d}mol_icon_cross\n\t\t\t\tTitle ${d}mol_view sub / <= title\n\t\t\t\tclose?event null\n\t\t\t\tClose ${d}mol_button\n\t\t\t\t\ttitle \\\\close\n\t\t\t\t\tclick?event <=> close?event\n\t\t\t\ttitle @ \\\\title\n\t\t\t\tsub2 / <= Close_icon\n\t\t\t\tsub /\n\t\t\t\t\t<= Title\n\t\t\t\t\t<= Close\n\t\t\t`\n\t\t\n\t\t\tconst res = normalize($, src, dest)\n\t\t\t$mol_assert_equal(res.input, res.output)\n\t\t},\n\n\t\t'right bind levels'($) {\n\t\t\tconst src = `\n\t\t\t\t${d}my_test ${d}my_super\n\t\t\t\t\tDog ${d}mol_view_tree2_class_test_dog\n\t\t\t\t\t\tMouth => Dog_mouth\n\t\t\t\t\t\t\tanimation => dog_animation\n\t\t\t\t\tplugins /\n\t\t\t\t\t\t<= Human* ${d}mol_view_tree2_class_test_human\n\t\t\t\t\t\t\tMouth => Human_mouth\n\t\t\t\t\t\t\t\tanimation => human_animation\n\t\t\t\t\t\t\t\t\ttext => human_text\n\t\t\t`\n\n\t\t\tconst dest = `\n\t\t\t\tDog_mouth = Dog Mouth\n\t\t\t\tdog_animation = Dog_mouth animation\n\t\t\t\tHuman_mouth = Human* Mouth\n\t\t\t\thuman_animation = Human_mouth animation\n\t\t\t\thuman_text = human_animation text\n\t\t\t\tHuman* $mol_view_tree2_class_test_human Mouth => Human_mouth animation => human_animation text => human_text\n\t\t\t\tDog $mol_view_tree2_class_test_dog Mouth => Dog_mouth animation => dog_animation\n\t\t\t\tplugins / <= Human*\n\t\t\t`\n\n\t\t\tconst res = normalize($, src, dest)\n\t\t\t$mol_assert_equal(res.input, res.output)\n\t\t},\n\n\t\t'good right bind dupes'($) {\n\t\t\tconst src = `\n\t\t\t\t${d}my_test ${d}my_super\n\t\t\t\t\tSuggest_label ${d}mol_dimmer\n\t\t\t\t\t\tclear? => clear?\n\t\t\t\t\tClear ${d}mol_button_minor\n\t\t\t\t\t\tclick?e <=> clear?e\n\t\t\t`\n\n\t\t\tconst dest = `\n\t\t\t\tclear? = Suggest_label clear?\n\t\t\t\tSuggest_label $mol_dimmer clear? => clear?\n\t\t\t\tClear $mol_button_minor click?e <=> clear?e\n\t\t\t`\n\n\t\t\tconst res = normalize($, src, dest)\n\t\t\t$mol_assert_equal(res.input, res.output)\n\t\t},\n\n\t\t'conflicting right bind dupes'($) {\n\t\t\tconst src = `\n\t\t\t\t${d}my_test ${d}my_super\n\t\t\t\t\tSuggest_label ${d}mol_dimmer\n\t\t\t\t\t\tclear => clear\n\t\t\t\t\tClear ${d}mol_button_minor\n\t\t\t\t\t\tclick?event <=> clear?event null\n\t\t\t`\n\n\t\t\t$mol_assert_fail(\n\t\t\t\t() => normalize($, src).input,\n\t\t\t\t`Need an equal default values at \\`/mol/view/tree2/class/props.test.ts#4:16/5\\` vs \\`/mol/view/tree2/class/props.test.ts#6:23/11\\`\n<=>\n/mol/view/tree2/class/props.test.ts#6:19/3\nclick?event\n/mol/view/tree2/class/props.test.ts#6:7/11\n$mol_button_minor\n/mol/view/tree2/class/props.test.ts#5:12/17\nClear\n/mol/view/tree2/class/props.test.ts#5:6/5`\n\t\t\t)\n\t\t},\n\t})\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t// @todo enable on strict\n\t\t// 'no functions'() {\n\t\t\t\n\t\t// \tconst stringify = $mol_data_pipe()\n\t\t\t\n\t\t// \ttype Type = $mol_type_assert<\n\t\t// \t\ttypeof stringify,\n\t\t// \t\t( input : never )=> never\n\t\t// \t>\n\t\n\t\t// },\n\n\t\t'single function'() {\n\t\t\t\n\t\t\tconst stringify = $mol_data_pipe(\n\t\t\t\t( input : number )=> input.toString() ,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal( stringify( 5 ) , '5' )\n\t\t\t\n\t\t},\n\n\t\t'two functions'() {\n\n\t\t\tconst isLong = $mol_data_pipe(\n\t\t\t\t( input : number )=> input.toString() ,\n\t\t\t\t( input : string )=> input.length > 2  ,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal( isLong( 5.0 ) , false )\n\t\t\t$mol_assert_equal( isLong( 5.1 ) , true )\n\t\t\t\n\t\t},\n\n\t\t'three functions'() {\n\n\t\t\tconst pattern = $mol_data_pipe(\n\t\t\t\t( input : number )=> input.toString() ,\n\t\t\t\t( input : string )=> new RegExp( input )  ,\n\t\t\t\t( input : RegExp )=> input.toString()  ,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal( pattern( 5 ) , '/5/' )\n\t\t\t\n\t\t},\n\n\t\t'classes'() {\n\n\t\t\tclass Box {\n\t\t\t\tconstructor( public value : string ) {}\n\t\t\t}\n\n\t\t\tconst boxify = $mol_data_pipe(\n\t\t\t\t( input : number )=> input.toString() ,\n\t\t\t\tBox\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_ok( boxify( 5 ) instanceof Box )\n\t\t\t$mol_assert_like( boxify( 5 ).value, '5' )\n\t\t\t\n\t\t},\n\n\t})\n\n}\n","namespace $ {\n\n\tconst convert = $mol_data_pipe(\n\t\t$mol_tree2_from_string,\n\t\t$mol_tree2_js_to_text,\n\t\t$mol_tree2_text_to_string,\n\t)\n\n\t$mol_test({\n\n\t\t'boolean'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\ttrue\n\t\t\t\t`),\n\t\t\t\t'true\\n',\n\t\t\t)\n\t\t},\n\t\t\n\t\t'number'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t1.2\n\t\t\t\t`),\n\t\t\t\t'1.2\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t1e+2\n\t\t\t\t`),\n\t\t\t\t'1e+2\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t-Infinity\n\t\t\t\t`),\n\t\t\t\t'-Infinity\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tNaN\n\t\t\t\t`),\n\t\t\t\t'NaN\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'variable'() {\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\ta\n\t\t\t\t`),\n\t\t\t\t'a\\n',\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t$\n\t\t\t\t`),\n\t\t\t\t'$\\n',\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\ta0\n\t\t\t\t`),\n\t\t\t\t'a0\\n',\n\t\t\t)\n\n\t\t},\n\t\t\n\t\t'string'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t\\\\\n\t\t\t\t\t\t\\\\foo\n\t\t\t\t\t\t\\\\bar\n\t\t\t\t`),\n\t\t\t\t'\"foo\\\\nbar\"\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t\\`\\`\n\t\t\t\t\t\t\\\\foo\n\t\t\t\t\t\tbar\n\t\t\t\t`),\n\t\t\t\t'`foo${bar}`\\n',\n\t\t\t)\n\n\t\t},\n\n\t\t'wrong name'() {\n\t\t\t$mol_assert_fail(\n\t\t\t\t()=> convert(`\n\t\t\t\t\tfoo+bar\n\t\t\t\t`),\n\t\t\t\t'Wrong node type\\nfoo+bar\\n?#2:6/7',\n\t\t\t)\n\t\t},\n\n\t\t'array'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t[,]\n\t\t\t\t`),\n\t\t\t\t'[]\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t[,]\n\t\t\t\t\t\t1\n\t\t\t\t\t\t2\n\t\t\t\t`),\n\t\t\t\t'[1, 2]\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'last'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t(,)\n\t\t\t\t\t\t1\n\t\t\t\t\t\t2\n\t\t\t\t`),\n\t\t\t\t'(1, 2)\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'scope'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t{;}\n\t\t\t\t\t\t1\n\t\t\t\t\t\t2\n\t\t\t\t`),\n\t\t\t\t'{\\n\\t1;\\n\\t2;\\n}\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'object'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t{,}\n\t\t\t\t`),\n\t\t\t\t'{}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t{,}\n\t\t\t\t\t\tfoo\n\t\t\t\t\t\tbar\n\t\t\t\t`),\n\t\t\t\t'{foo, bar}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t{,}\n\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\\\\foo\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t:\n\t\t\t\t\t\t\tbar\n\t\t\t\t\t\t\t2\n\t\t\t\t`),\n\t\t\t\t'{\"foo\": 1, [bar]: 2}\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'regexp'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t/./\n\t\t\t\t\t\t.source \\\\foo\\\\n\n\t\t\t\t\t\t.multiline\n\t\t\t\t\t\t.ignoreCase\n\t\t\t\t\t\t.global\n\t\t\t\t`),\n\t\t\t\t'/foo\\\\\\\\n/mig\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'unary'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tvoid yield* yield await ~ ! - + 1\n\t\t\t\t`),\n\t\t\t\t'void yield* yield await ~!-+1\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'binary'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t(+)\n\t\t\t\t\t\t1\n\t\t\t\t\t\t2\n\t\t\t\t\t\t3\n\t\t\t\t`),\n\t\t\t\t'(\\n\\t1 + \\n\\t2 + \\n\\t3\\n)\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t@++ foo\n\t\t\t\t`),\n\t\t\t\t'foo++\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'chain'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t()\n\t\t\t\t\t\tfoo\n\t\t\t\t\t\t[] \\\\bar\n\t\t\t\t\t\t[] 1\n\t\t\t\t`),\n\t\t\t\t'(foo.bar[1])\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t()\n\t\t\t\t\t\tfoo\n\t\t\t\t\t\t[] 1\n\t\t\t\t\t\t(,)\n\t\t\t\t`),\n\t\t\t\t'(foo[1]())\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t()\n\t\t\t\t\t\t[,] 0\n\t\t\t\t\t\t[] 1\n\t\t\t\t\t\t(,)\n\t\t\t\t\t\t\t2\n\t\t\t\t\t\t\t3\n\t\t\t\t`),\n\t\t\t\t'([0][1](2, 3))\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'function'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t=>\n\t\t\t\t\t\t(,)\n\t\t\t\t\t\t1\n\t\t\t\t`),\n\t\t\t\t'() => 1\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tasync=>\n\t\t\t\t\t\t(,)\n\t\t\t\t\t\t1\n\t\t\t\t`),\n\t\t\t\t'async () => 1\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tfunction\n\t\t\t\t\t\tfoo\n\t\t\t\t\t\t(,)\n\t\t\t\t\t\t{;}\n\t\t\t\t`),\n\t\t\t\t'function foo(){}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tfunction\n\t\t\t\t\t\t(,) foo\n\t\t\t\t\t\t{;} debugger\n\t\t\t\t`),\n\t\t\t\t'function (foo){\\n\\tdebugger;\\n}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tfunction*\n\t\t\t\t\t\t(,)\n\t\t\t\t\t\t{;}\n\t\t\t\t`),\n\t\t\t\t'function* (){}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tasync\n\t\t\t\t\t\t(,)\n\t\t\t\t\t\t{;}\n\t\t\t\t`),\n\t\t\t\t'async function (){}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tasync*\n\t\t\t\t\t\t(,) foo\n\t\t\t\t\t\t{;} debugger\n\t\t\t\t`),\n\t\t\t\t'async function* (foo){\\n\\tdebugger;\\n}\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'class'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tclass\n\t\t\t\t\t\tFoo\n\t\t\t\t\t\t{}\n\t\t\t\t`),\n\t\t\t\t'class Foo {}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tclass\n\t\t\t\t\t\tFoo\n\t\t\t\t\t\textends Bar\n\t\t\t\t\t\t{}\n\t\t\t\t`),\n\t\t\t\t'class Foo extends Bar {}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tclass {}\n\t\t\t\t\t\t.\n\t\t\t\t\t\t\t\\\\foo\n\t\t\t\t\t\t\t(,)\n\t\t\t\t\t\t\t{;}\n\t\t\t\t`),\n\t\t\t\t'class {\\n\\tfoo(){}\\n}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tclass {}\n\t\t\t\t\t\tstatic\n\t\t\t\t\t\t\t\\\\foo\n\t\t\t\t\t\t\t(,)\n\t\t\t\t\t\t\t{;}\n\t\t\t\t`),\n\t\t\t\t'class {\\n\\tstatic [\"foo\"](){}\\n}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tclass {}\n\t\t\t\t\t\tget\n\t\t\t\t\t\t\t\\\\foo\n\t\t\t\t\t\t\t(,)\n\t\t\t\t\t\t\t{;}\n\t\t\t\t`),\n\t\t\t\t'class {\\n\\tget [\"foo\"](){}\\n}\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tclass {}\n\t\t\t\t\t\tset\n\t\t\t\t\t\t\t\\\\foo\n\t\t\t\t\t\t\t(,) bar\n\t\t\t\t\t\t\t{;}\n\t\t\t\t`),\n\t\t\t\t'class {\\n\\tset [\"foo\"](bar){}\\n}\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'if'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t?:\n\t\t\t\t\t\t1\n\t\t\t\t\t\t2\n\t\t\t\t\t\t3\n\t\t\t\t`),\n\t\t\t\t'1 ? 2 : 3\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tif\n\t\t\t\t\t\t() 1\n\t\t\t\t\t\t{;} 2\n\t\t\t\t`),\n\t\t\t\t'if(1) {\\n\\t2;\\n}\\n',\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tif\n\t\t\t\t\t\t() 1\n\t\t\t\t\t\t{;} 2\n\t\t\t\t\t\t{;} 3\n\t\t\t\t`),\n\t\t\t\t'if(1) {\\n\\t2;\\n}else{\\n\\t3;\\n}\\n',\n\t\t\t)\n\n\t\t},\n\n\t\t'assign'() {\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t=\n\t\t\t\t\t\tfoo\n\t\t\t\t\t\tbar\n\t\t\t\t`),\n\t\t\t\t'foo = bar\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t=\n\t\t\t\t\t\t[,]\n\t\t\t\t\t\t\tfoo\n\t\t\t\t\t\t\tbar\n\t\t\t\t\t\t[,]\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t2\n\t\t\t\t`),\n\t\t\t\t'[foo, bar] = [1, 2]\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tlet foo\n\t\t\t\t`),\n\t\t\t\t'let foo\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\tlet\n\t\t\t\t\t\tfoo\n\t\t\t\t\t\tbar\n\t\t\t\t`),\n\t\t\t\t'let foo = bar\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tconvert(`\n\t\t\t\t\t+=\n\t\t\t\t\t\tfoo\n\t\t\t\t\t\tbar\n\t\t\t\t`),\n\t\t\t\t'foo += bar\\n',\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t})\n\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'fromJSON'() {\n\t\t\t$mol_assert_equal( $mol_tree2_from_json([]).toString() , '/\\n' )\n\t\t\t$mol_assert_equal( $mol_tree2_from_json([ false , true ]).toString() , '/\\n\\tfalse\\n\\ttrue\\n' )\n\t\t\t$mol_assert_equal( $mol_tree2_from_json([ 0 , 1 , 2.3 ]).toString() , '/\\n\\t0\\n\\t1\\n\\t2.3\\n' )\n\t\t\t$mol_assert_equal( $mol_tree2_from_json( new Uint16Array([ 1, 10, 256 ]) ).toString() , '\\\\\\x01\\x00\\n\\\\\\x00\\x00\\x01\\n' )\n\t\t\t$mol_assert_equal( $mol_tree2_from_json([ '' , 'foo' , 'bar\\nbaz' ]).toString() , '/\\n\\t\\\\\\n\\t\\\\foo\\n\\t\\\\\\n\\t\\t\\\\bar\\n\\t\\t\\\\baz\\n' )\n\t\t\t$mol_assert_equal( $mol_tree2_from_json({ 'foo' : false , 'bar\\nbaz' : 'lol' }).toString() , '*\\n\\tfoo false\\n\\t\\\\\\n\\t\\t\\\\bar\\n\\t\\t\\\\baz\\n\\t\\t\\\\lol\\n' )\n\t\t} ,\n\t\t\n\t} )\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'atoms'($) {\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"null\\n\" ).kids[0] ) , null )\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"true\\n\" ).kids[0] ) , true )\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"false\\n\" ).kids[0] ) , false )\n\t\t},\n\t\t\n\t\t'numbers'($) {\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"1\\n\" ).kids[0] ) , 1 )\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"1.2\\n\" ).kids[0] ) , 1.2 )\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"1.2e+2\\n\" ).kids[0] ) , 120 )\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"NaN\\n\" ).kids[0] ) , Number.NaN )\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"+Infinity\\n\" ).kids[0] ) , Number.POSITIVE_INFINITY )\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"-Infinity\\n\" ).kids[0] ) , Number.NEGATIVE_INFINITY )\n\t\t},\n\t\t\n\t\t'string'($) {\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"\\\\foo\\n\" ).kids[0] ) , 'foo' )\n\t\t\t$mol_assert_equal( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"\\\\\\n\\t\\\\foo\\n\\t\\\\bar\\n\" ).kids[0] ) , 'foo\\nbar' )\n\t\t},\n\t\t\n\t\t'array'($) {\n\t\t\t$mol_assert_like( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"/\\n\" ).kids[0] ) , [] )\n\t\t\t$mol_assert_like( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"/\\n\\t\\\\foo\\n\\t\\\\bar\\n\" ).kids[0] ) , [ 'foo', 'bar' ] )\n\t\t\t$mol_assert_like( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"/\\n\\t- \\\\foo\\n\\t\\\\bar\\n\" ).kids[0] ) , [ 'bar' ] )\n\t\t},\n\t\t\n\t\t'object'($) {\n\t\t\t$mol_assert_like( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"*\\n\" ).kids[0] ) , {} )\n\t\t\t$mol_assert_like( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"*\\n\\t\\\\foo\\n\\t\\t\\\\bar\\n\" ).kids[0] ) , { foo: 'bar' } )\n\t\t\t$mol_assert_like( $.$mol_tree2_to_json( $.$mol_tree2_from_string( \"*\\n\\t\\\\\\n\\t\\t\\\\foo\\n\\t\\t\\\\bar\\n\\t\\t\\\\lol\\n\" ).kids[0] ) , { 'foo\\nbar': 'lol' } )\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'min'() {\n\t\t\t$mol_assert_equal( $mol_vlq_encode( Number.MIN_SAFE_INTEGER ), '//////H' )\n\t\t},\n\n\t\t'negative'() {\n\t\t\t$mol_assert_equal( $mol_vlq_encode( -1 ), 'D' )\n\t\t},\n\n\t\t'zero'() {\n\t\t\t$mol_assert_equal( $mol_vlq_encode( 0 ), 'A' )\n\t\t},\n\n\t\t'binom'() {\n\t\t\t$mol_assert_equal( $mol_vlq_encode( 67 ), 'mE' )\n\t\t},\n\n\t\t'max'() {\n\t\t\t$mol_assert_equal( $mol_vlq_encode( Number.MAX_SAFE_INTEGER ), '+/////H' )\n\t\t},\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t'sample source mapped lang'( $ ) {\n\n\t\t\tconst source = {\n\t\t\t\tscript1: `1@\\n2`,\n\t\t\t\tscript2: `***`\n\t\t\t}\n\n\t\t\tconst span = {\n\t\t\t\tscript1: $mol_span.entire( 'script1', source.script1 ),\n\t\t\t\tscript2: $mol_span.entire( 'script2', source.script2 ),\n\t\t\t}\n\n\t\t\tconst tree = $mol_tree2.list([\n\t\t\t\t$mol_tree2.struct( 'line', [\n\t\t\t\t\t$mol_tree2.data( '\"use strict\";', [], span.script1.after() ),\n\t\t\t\t\t$mol_tree2.data( 'console.log(11);', [], span.script1.slice( 0, 1 ) ),\n\t\t\t\t\t$mol_tree2.data( 'console.log(21);', [], span.script2 ),\n\t\t\t\t\t$mol_tree2.data( 'console.log(12);', [], span.script1.span( 2, 1, 1 ) ),\n\t\t\t\t], span.script1 ),\n\t\t\t], span.script1 )\n\n\t\t\t$mol_assert_like(\n\t\t\t\t$.$mol_tree2_text_to_string( tree ),\n\t\t\t\t'\"use strict\";console.log(11);console.log(21);console.log(12);\\n',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t$.$mol_tree2_text_to_sourcemap( tree ),\n\t\t\t\t{\n\t\t\t\t\t\"version\": 3,\n\t\t\t\t\t\"sources\": [\n\t\t\t\t\t\t\"script1\",\n\t\t\t\t\t\t\"script2\"\n\t\t\t\t\t],\n\t\t\t\t\t\"sourcesContent\": [ source.script1, source.script2 ],\n\t\t\t\t\t\"mappings\": \"AAAA,AAAI,aAAJ,gBCAA,gBDCA;\"\n\t\t\t\t}\n\t\t\t)\n\n\t\t}\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'$mol_leb128'() {\n\t\t\t$mol_assert_like( $mol_leb128_encode( 0 ) , new Uint8Array([ 0 ]) )\n\t\t\t$mol_assert_like( $mol_leb128_encode( 624485 ) , new Uint8Array([ 0xE5 , 0x8E , 0x26 ]) )\n\t\t\t$mol_assert_equal( $mol_leb128_decode( new Uint8Array([ 0xE5 , 0x8E , 0x26 ]) ) , 624485 )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'hello world'() {\n\n\t\t\tconst buffer = new Uint8Array( [0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,146,128,128,128,0,2,6,109,101,109,111,114,121,2,0,5,104,101,108,108,111,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,16,11,11,146,128,128,128,0,1,0,65,16,11,12,72,101,108,108,111,32,87,111,114,108,100,0] )\n\t\t\tconst wasm = new $mol_wasm_module( buffer ).instance()\n\t\t\tconst hello = wasm.get( 'hello' ) as ()=> number\n\t\t\t$mol_assert_equal( wasm.string( hello() , 11 ) , 'Hello World' )\n\n\t\t},\n\n\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'module'($) {\n\n\t\t\tconst code = $.$mol_tree2_from_string(``)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tnew Uint8Array( $.$mol_tree2_wasm_to_module( code ).buffer ) ,\n\t\t\t\tnew Uint8Array([ 0 , 0x61 , 0x73 , 0x6d , 0x1 , 0 , 0 , 0 ]) ,\n\t\t\t)\n\n\t\t} ,\n\n\t\t'custom section'($) {\n\n\t\t\tconst code = $.$mol_tree2_from_string(`\n\t\t\t\tcustom xxx\n\t\t\t`)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tnew Uint8Array( $.$mol_tree2_wasm_to_module( code ).buffer ) ,\n\t\t\t\tnew Uint8Array([\n\t\t\t\t\t0 , 0x61 , 0x73 , 0x6d , 0x1 , 0 , 0 , 0 , 0 ,\n\t\t\t\t\t0x4 , 0x3, 0x78, 0x78, 0x78\n\t\t\t\t]) ,\n\t\t\t)\n\n\t\t} ,\n\n\t\t'type section with value types'($) {\n\n\t\t\tconst code = $.$mol_tree2_from_string(`\n\t\t\t\ttype xxx\n\t\t\t\t\t=> i32\n\t\t\t\t\t=> i64\n\t\t\t\t\t=> f32\n\t\t\t\t\t<= f64\n\t\t\t`)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tnew Uint8Array( $.$mol_tree2_wasm_to_module( code ).buffer ) ,\n\t\t\t\tnew Uint8Array([\n\t\t\t\t\t0, 0x61, 0x73, 0x6d, 0x01, 0, 0, 0,\n\t\t\t\t\t0x01, 0x08, 0x01, 0x60, 0x03, 0x7f, 0x7e, 0x7d, 0x01, 0x7c\n\t\t\t\t]) ,\n\t\t\t)\n\n\t\t} ,\n\n\t\t'import section'($) {\n\n\t\t\tconst code = $.$mol_tree2_from_string(`\n\t\t\t\ttype nothing\n\t\t\t\timport foo.bar func nothing\n\t\t\t`)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tnew Uint8Array( $.$mol_tree2_wasm_to_module( code ).buffer ) ,\n\t\t\t\tnew Uint8Array([\n\t\t\t\t\t0, 0x61, 0x73, 0x6d, 0x01, 0, 0, 0, \n\t\t\t\t\t0x01, 0x04, 0x01, 0x60, 0, 0,\n\t\t\t\t\t0x02, 0x0b, 0x01, 0x03, 0x66, 0x6f, 0x6f, 0x03, 0x62, 0x61, 0x72, 0, 0\n\t\t\t\t]) ,\n\t\t\t)\n\n\t\t} ,\n\n\t\t'export imported identity'($) {\n\n\t\t\tconst code = $.$mol_tree2_from_string(`\n\t\t\t\ttype identity\n\t\t\t\t\t=> i32\n\t\t\t\t\t<= i32\n\t\t\t\timport foo.bar func identity\n\t\t\t\texport xxx.yyy func identity\n\t\t\t`)\n\t\t\t\n\t\t\tconst instance = $.$mol_tree2_wasm_to_module( code ).instance({ foo: { bar: ( a: number )=> a } })\n\t\t\tconst identity = instance.get( 'xxx.yyy' ) as ( val: number )=> number\n\t\t\t\n\t\t\t$mol_assert_like( identity( 123 ), 123 )\n\n\t\t} ,\n\n\t\t'export internal identity'($) {\n\n\t\t\tconst code = $.$mol_tree2_from_string(`\n\t\t\t\ttype identity\n\t\t\t\t\t=> i32\n\t\t\t\t\t<= i32\n\t\t\t\tfunc identity local.get 0\n\t\t\t\texport id func identity\n\t\t\t`)\n\t\t\t\n\t\t\tconst instance = $.$mol_tree2_wasm_to_module( code ).instance()\n\t\t\tconst identity = instance.get( 'id' ) as ( val: number )=> number\n\t\t\t\n\t\t\t$mol_assert_like( identity( 123 ), 123 )\n\n\t\t} ,\n\n\t\t'export increase'($) {\n\n\t\t\tconst code = $.$mol_tree2_from_string(`\n\t\t\t\ttype inc32\n\t\t\t\t\t=> i32\n\t\t\t\t\t<= i32\n\t\t\t\tfunc inc32\n\t\t\t\t\tlocal.get 0\n\t\t\t\t\ti32.const 1\n\t\t\t\t\ti32.add\n\t\t\t\texport increase func inc32\n\t\t\t`)\n\t\t\t\n\t\t\tconst instance = $.$mol_tree2_wasm_to_module( code ).instance()\n\t\t\tconst inc = instance.get( 'increase' ) as ( a: number )=> number\n\t\t\t\n\t\t\t$mol_assert_like( inc( 2 ), 3 )\n\n\t\t} ,\n\n\t\t'export function that returns pair'($) {\n\n\t\t\tconst code = $.$mol_tree2_from_string(`\n\t\t\t\ttype pair\n\t\t\t\t\t<= i32\n\t\t\t\t\t<= i32\n\t\t\t\tfunc pair\n\t\t\t\t\ti32.const 1\n\t\t\t\t\ti32.const 2\n\t\t\t\texport pair func pair\n\t\t\t`)\n\t\t\t\n\t\t\tconst instance = $.$mol_tree2_wasm_to_module( code ).instance()\n\t\t\tconst pair = instance.get( 'pair' ) as ()=> [ number, number ]\n\t\t\t\n\t\t\t$mol_assert_like( pair(), [ 1, 2 ] )\n\n\t\t} ,\n\n\t})\n\n}\n","namespace $ {\n\n\tconst run = $mol_data_pipe(\n\t\t$mol_tree2_from_string.bind($$),\n\t\t$mol_view_tree2_to_locale.bind($$)\n\t)\n\n\t$mol_test({\n\t\t'Locale simple'( $ ) {\n\t\t\tconst locales = run(`\n\t\t\t\tFoo Object\n\t\t\t\t\tlocalized @ \\\\bla\n\t\t\t`)\n\t\t\t$mol_assert_equal(locales['Foo_localized'], 'bla')\n\t\t},\n\n\t\t'Locale structural'( $ ) {\n\t\t\tconst locales = run(`\n\t\t\t\tFoo Object\n\t\t\t\t\tbar *\n\t\t\t\t\t\tloc @ \\\\v1\n\t\t\t\t\t\tbaz *\n\t\t\t\t\t\t\tloc2 @ \\\\v2\n\t\t\t`)\n\t\t\t$mol_assert_equal(locales['Foo_bar_loc'], 'v1')\n\t\t\t$mol_assert_equal(locales['Foo_bar_baz_loc2'], 'v2')\n\t\t},\n\n\t\t'Locale factory'( $ ) {\n\t\t\tconst locales = run(`\n\t\t\t\tBar Object\n\t\t\t\t\tloc \\\\v0\n\t\t\t\tFoo Object\n\t\t\t\t\tbutton Bar\n\t\t\t\t\t\tloc @ \\\\v1\n\t\t\t`)\n\t\t\t$mol_assert_equal(locales['Foo_button_loc'], 'v1')\n\t\t},\n\n\t\t'Locale bidi bind localized'( $ ) {\n\t\t\tconst locales = run(`\n\t\t\t\tFoo Object\n\t\t\t\t\ta? <=> b? @ \\\\v1\n\t\t\t`)\n\t\t\t$mol_assert_equal(locales['Foo_b'], 'v1')\n\t\t},\n\n\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'test'( $ ) {\n\n\t\t\tconst root: $mol_tree2_belt<{}> = {\n\t\t\t\t... $mol_jack,\n\t\t\t\t'foo': input=> [ input.struct( 'FOO' ) ],\n\t\t\t\t'FOO': input=> [ input.struct( 'FAIL' ) ],\n\t\t\t}\n\n\t\t\t$mol_assert_like(\n\n\t\t\t\t$.$mol_tree2_from_string( `\n\t\t\t\t\ttest\n\t\t\t\t\t\tcase foo\n\t\t\t\t\t\tcase tree FOO\n\t\t\t\t` )\n\t\t\t\t.hack( root )\n\t\t\t\t.toString() ,\n\n\t\t\t\t$.$mol_tree2_from_string( `\n\t\t\t\t\ttest\n\t\t\t\t\t\tcase foo\n\t\t\t\t\t\tcase tree FOO\n\t\t\t\t` )\n\t\t\t\t.toString() ,\n\n\t\t\t)\n\n\t\t\t$mol_assert_fail(\n\t\t\t\t()=> $.$mol_tree2_from_string( `\n\t\t\t\t\ttest\n\t\t\t\t\t\tcase \\\\foo\n\t\t\t\t\t\tcase \\\\bar\n\t\t\t\t` ).hack( root ),\n\t\t\t\t'args[0] ≠ args[1]\\n\\\\foo\\n\\n---\\n\\\\bar\\n\\ntest\\n?#2:6/4'\n\t\t\t)\n\n\t\t} ,\n\n\t\t'jack test'( $ ) {\n\n\t\t\tconst tests = $.$mol_tree2_from_string(`\n\t\t\t\ttest\n\t\t\t\t\tname \\\\commented code\n\t\t\t\t\tcase\n\t\t\t\t\t\tone\n\t\t\t\t\t\tno two\n\t\t\t\t\tcase tree\n\t\t\t\t\t\tONE\n\t\t\t\ttest\n\t\t\t\t\tname \\\\name of struct node as value node\n\t\t\t\t\tcase type\n\t\t\t\t\t\tone\n\t\t\t\t\t\t\\\\one\n\t\t\t\t\tcase tree\n\t\t\t\t\t\t\\\\ONE\n\t\t\t\t\t\t\\\\\n\t\t\t\ttest\n\t\t\t\t\tname \\\\kids of struct node\n\t\t\t\t\tcase kids tree one two\n\t\t\t\t\tcase tree two\n\t\t\t\ttest\n\t\t\t\t\tname \\\\first element of list\n\t\t\t\t\tcase head\n\t\t\t\t\t\tone\n\t\t\t\t\t\ttwo\n\t\t\t\t\t\tthree\n\t\t\t\t\tcase tree ONE\n\t\t\t\ttest\n\t\t\t\t\tname \\\\list without first element\n\t\t\t\t\tcase headless\n\t\t\t\t\t\tone\n\t\t\t\t\t\ttwo\n\t\t\t\t\t\tthree\n\t\t\t\t\tcase tree\n\t\t\t\t\t\tTWO\n\t\t\t\t\t\tTHREE\n\t\t\t\ttest\n\t\t\t\t\tname \\\\reversed list\n\t\t\t\t\tcase reversed\n\t\t\t\t\t\tone\n\t\t\t\t\t\ttwo\n\t\t\t\t\t\tthree\n\t\t\t\t\tcase tree\n\t\t\t\t\t\tTHREE\n\t\t\t\t\t\tTWO\n\t\t\t\t\t\tONE\n\t\t\t\ttest\n\t\t\t\t\tname \\\\quote tree\n\t\t\t\t\tname \\\\make tree node by type, value and sub list\n\t\t\t\t\tcase tree head\n\t\t\t\t\t\t\\\\\n\t\t\t\t\t\t\\\\one\n\t\t\t\t\t\t\t\\\\two\n\t\t\t\t\t\tthree\n\t\t\t\t\tcase struct\n\t\t\t\t\t\t\\\\head\n\t\t\t\t\t\tstruct \\\\\n\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t\\\\one\n\t\t\t\t\t\t\t\\\\two\n\t\t\t\t\t\tstruct \\\\three\n\t\t\t\ttest\n\t\t\t\t\tname \\\\evaluated jack code\n\t\t\t\t\tcase jack head\n\t\t\t\t\t\tone\n\t\t\t\t\t\ttwo\n\t\t\t\t\t\tthree\n\t\t\t\t\tcase tree ONE\n\t\t\t\ttest\n\t\t\t\t\tname \\\\define and use custom simple macro\n\t\t\t\t\tcase jack\n\t\t\t\t\t\thack PI float 3.14\n\t\t\t\t\t\thack pi PI\n\t\t\t\t\t\tpi\n\t\t\t\t\tcase float 3.14\n\t\t\t\ttest\n\t\t\t\t\tname \\\\define and use custom macro with arguments\n\t\t\t\t\tcase jack\n\t\t\t\t\t\thack tail head reversed from\n\t\t\t\t\t\ttail\n\t\t\t\t\t\t\tone\n\t\t\t\t\t\t\ttwo\n\t\t\t\t\t\t\tthree\n\t\t\t\t\tcase tree THREE\n\t\t\t`)\n\t\t\t\n\t\t\tconst res = tests.hack({\n\n\t\t\t\t... $mol_jack.meta ,\n\t\t\t\t\n\t\t\t\t// Should processed\n\t\t\t\t'one' : input => [ input.struct( 'ONE' ) ] ,\n\t\t\t\t'two' : input => [ input.struct( 'TWO' ) ] ,\n\t\t\t\t'three' : input => [ input.struct( 'THREE' ) ] ,\n\t\t\t\t\n\t\t\t\t// Shouldn't processed\n\t\t\t\t'ONE' : input => [ input.struct( 'XXX' ) ] ,\n\t\t\t\t'TWO' : input => [ input.struct( 'XXX' ) ] ,\n\t\t\t\t'THREE' : input => [ input.struct( 'XXX' ) ] ,\n\n\t\t\t})\n\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\n\texport let $mol_tree2_wasm_to_bytes = $mol_data_pipe(\n\t\t$mol_tree2_wasm_to_bin ,\n\t\t$mol_tree2_bin_to_bytes ,\n\t)\n\n}\n","namespace $ {\n\n\texport let $mol_tree2_wasm_to_module = $mol_data_pipe(\n\t\t$mol_tree2_wasm_to_bytes ,\n\t\t$mol_wasm_module ,\n\t)\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'equal paths' () {\n\n\t\t\tconst diff = $mol_diff_path( [1,2,3,4] , [1,2,3,4] , [1,2,3,4] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [1,2,3,4] , \n\t\t\t\tsuffix : [ [] , [] , [] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'different suffix' () {\n\n\t\t\tconst diff = $mol_diff_path( [1,2,3,4] , [1,2,3,5] , [1,2,5,4] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [1,2] , \n\t\t\t\tsuffix : [ [3,4] , [3,5] , [5,4] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'one contains other' () {\n\t\t\t\n\t\t\tconst diff = $mol_diff_path( [1,2,3,4] , [1,2] , [1,2,3] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [1,2] , \n\t\t\t\tsuffix : [ [3,4] , [] , [3] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t\t'fully different' () {\n\n\t\t\tconst diff = $mol_diff_path( [1,2] , [3,4] , [5,6] )\n\t\t\t\n\t\t\t$mol_assert_like( diff , {\n\t\t\t\tprefix : [] , \n\t\t\t\tsuffix : [ [1,2] , [3,4] , [5,6] ] ,\n\t\t\t} )\n\n\t\t} ,\n\n\t})\n\n}\n","$mol_view_tree2_to_js_test_ex_array_slot_foo $mol_object\n\tfoot /string|number|boolean\n\t\t1\n\t\ttrue\n\t\t\\foot1\n\t\t^ insert /\n\t\t\t2\n\t\t\t3\n\t\t\t<= ins1 \\ins1\n\t\t\t^ sub_ins /number\n\t\t\t\t<= sub_ins1 1\n\t\t\t<= ins2 \\ins2\n\t\t<= foot2 \\foot2\n\n","$mol_view_tree2_to_js_test_ex_simple_nan_foo $mol_object\n\ta NaN\n\tb +NaN\n\tc -NaN\n\td +Infinity\n\te -Infinity\n\tf Infinity\n\n","$mol_view_tree2_to_js_test_ex_structural_foo $mol_object\n\tbar *\n\t\talpha 1\n\t\tbeta *\n\t\txxx <= lol 2\n","$mol_view_tree2_to_js_test_ex_array_union_foo $mol_object\n\tbar /$mol_view_tree2_to_js_test_ex_klass_tuple_type\n\t\t\\a\n\t\t<= foo \\c\n\t\t\\b\n","$mol_view_tree2_to_js_test_ex_array_number_foo $mol_object\n\tbar /\n\t\t-NaN\n\t\t-Infinity\n\t\t+Infinity\n\t\t0\n","$mol_view_tree2_to_js_test_ex_bidi_indexed_foo $mol_object\n\tindexed*? <=> owner*? null\n","$mol_view_tree2_to_js_test_ex_array_boolean_foo $mol_object\n\tbar /boolean\n\t\tfalse\n\t\ttrue\n","$mol_view_tree2_to_js_test_ex_array_indexed_foo $mol_object\n\ttags* /string\n\t\t<= tag1* \\t1\n\t\t^ slot* /\n\t\t\t<= tag2* \\t2\n","$mol_view_tree2_to_js_test_ex_bidi_chaining_foo $mol_object\n\ta? <=> b? <=> c? null\n","$mol_view_tree2_to_js_test_ex_bidi_fallback_foo $mol_object\n\tbar1? <=> bar2? 1\n","$mol_view_tree2_to_js_test_ex_left_chaining_foo $mol_object\n\ta <= b <= c? <= d? 0\n","$mol_view_tree2_to_js_test_ex_right_indexed_foo $mol_object\n\ta? *\n\t\tsome 123\n$mol_view_tree2_to_js_test_ex_right_indexed_bar $mol_object\n\tCls* $mol_view_tree2_to_js_test_ex_right_indexed_foo\n\t\ta => b*\n","$mol_view_tree2_to_js_test_ex_simple_string_foo $mol_object\n\thardcoded \\\n\t\t\\First\n\t\t\\Second\n\tlocalized @ \\bla\n","\n\t\t()\n\t\t\tthis\n\t\t\t[] \\$\n\t\t\t[] \\$mol_locale\n\t\t\t[] \\text\n\t\t\t(,) #key\n\t","$mol_view_tree2_to_js_test_ex_left_read_only_foo $mol_object\n\tbar1 <= bar2? 1\n","$mol_view_tree2_to_js_test_ex_right_hierarchy_foo $mol_object\n\tIndexed* $mol_view_tree2_to_js_test_ex_right_hierarchy_bar\n\t\ttitle? => indexed_title*?\n\t\tid <= indexed_id* 0\n\tprj $mol_view_tree2_to_js_test_ex_right_hierarchy_bar\n\t\tdomain* => prj_domain*\n\t\t\tuser => prj_user*\n\t\t\t\tid => prj_user_id*\n","$mol_view_tree2_to_js_test_ex_right_read_only_foo $mol_object\n\ta*? null\n$mol_view_tree2_to_js_test_ex_right_read_only_bar $mol_object\n\tObj $mol_view_tree2_to_js_test_ex_right_read_only_foo\n\t\ta*? => b*?\n","$mol_view_tree2_to_js_test_ex_structural_dict_foo $mol_object\n\tbar *\n\t\talpha 1\n\t\tbeta \\a\n","$mol_view_tree2_to_js_test_ex_array_with_types_foo $mol_object\n\tarr /readonly(number)[]\n","$mol_view_tree2_to_js_test_ex_array_inheritance_foo $mol_object\n\tarr /\n\t\t\\v1\n$mol_view_tree2_to_js_test_ex_array_inheritance_bar $mol_view_tree2_to_js_test_ex_array_inheritance_foo\n\tarr /\n\t\t\\v3\n\t\t^\n\t\t\\v4\n","$mol_view_tree2_to_js_test_ex_bidi_legacy_value_foo $mol_object\n\ta?v <=> b?v 1\n","$mol_view_tree2_to_js_test_ex_simple_typed_null_foo $mol_object\n\ta null string|number\n","$mol_view_tree2_to_js_test_ex_bidi_in_dictionary_foo $mol_object\n\tevent *\n\t\tclick? <=> run? null\n","$mol_view_tree2_to_js_test_ex_right_in_left_foo $mol_object\n\ta null\n$mol_view_tree2_to_js_test_ex_right_in_left_bar $mol_object\n\tfoo <= Cls $mol_view_tree2_to_js_test_ex_right_in_left_foo\n\t\ta => b\n\tpages /\n\t\t<= Menu $mol_page\n\t\t\tTitle => Menu_title\n","$mol_view_tree2_to_js_test_ex_simple_empty_class_foo $mol_object\n","$mol_view_tree2_to_js_test_ex_simple_two_classes_foo $mol_object\n\tstr \\some\n$mol_view_tree2_to_js_test_ex_simple_two_classes_bar $mol_view_tree2_to_js_test_ex_simple_two_classes_foo\n\tstr \\some2\n","$mol_view_tree2_to_js_test_ex_simple_factory_props_bar $mol_object\n\tsub /number\n\tloc \\v2\n\tdeep * loc @ \\v2\n\tsome false\n\n$mol_view_tree2_to_js_test_ex_simple_factory_props_foo $mol_object\n\tbutton $mol_view_tree2_to_js_test_ex_simple_factory_props_bar\n\t\tsome true\n\t\tloc @ \\v1\n\t\tdeep * loc @ \\v1\n\t\tsub /\n\t\t\t1\n","$mol_view_tree2_to_js_test_ex_simple_default_indexed_foo $mol_object\n\ta_b*? 0\n\tlegacy*k?v 0\n","$mol_view_tree2_to_js_test_ex_structural_complex_key_foo $mol_object\n\tdictionary *\n\t\t\\raw data key\n\t\t\t\\1\n\t\t\\key2\n\t\t\t\\2\n\t\tkey3\n\t\t\t\\3\n","$mol_view_tree2_to_js_test_ex_array_constructor_tuple_foo $mol_object\n\tblobs /\n\t\t<= text_blob? $mol_view_tree2_to_js_test_ex_klass_tuple<string> /\n\t\t\t/string\n\t\t\t\t<= text \\123\n\t\t\t* type \\text/plain\n","$mol_view_tree2_to_js_test_ex_left_second_level_index_bar $mol_object\n\tlocalized \\\n\n$mol_view_tree2_to_js_test_ex_left_second_level_index_foo $mol_object\n\tcls* <= owner*? $mol_view_tree2_to_js_test_ex_left_second_level_index_bar\n\t\tlocalized <= some*? @ \\v1\n","$mol_view_tree2_to_js_test_ex_structural_quoted_props_foo $mol_object\n\tbar *\n\t\t$a 1\n\t\tb-t *\n","$mol_view_tree2_to_js_test_ex_structural_spread_other_foo $mol_object\n\ttest *\n\t\taaa 123\n\tfield *\n\t\tbbb 321\n\t\t^ test\n","$mol_view_tree2_to_js_test_ex_array_of_array_or_object_foo $mol_object\n\tcomplex /\n\t\t\\1\n\t\t/\n\t\t\ttrue\n\t\t/\n\t\t\t\\1\n\t\t\t21\n\t\t*number|string\n\t\t\ta 1\n\t\t\tstr \\some\n","$mol_view_tree2_to_js_test_ex_bidi_localized_in_object_foo $mol_object\n\tobj *\n\t\tloc? <=> outer? @ \\test1\n","$mol_view_tree2_to_js_test_ex_bidi_with_default_object_foo $mol_object\n\tclass? <=> owner? $mol_object\n","$mol_view_tree2_to_js_test_ex_left_in_array_and_object_bar $mol_object\n\trows /\n$mol_view_tree2_to_js_test_ex_left_in_array_and_object_foo $mol_object\n\tobj *\n\t\tprop <= Obj\n\tarr /\n\t\t<= Obj $mol_view_tree2_to_js_test_ex_left_in_array_and_object_bar\n\t\t\trows <= content /\n","$mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_bar $mol_object\n\texpanded \\\n$mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_foo $mol_object\n\tindexed*? $mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_bar\n\t\texpanded <=> owner*? \\w\n","$mol_view_tree2_to_js_test_ex_array_spread_other_bar $mol_object\n\tsup /\n\t\t\\v1\n\tarr /\n\t\t\\v2\n\t\t^ sup\n","$mol_view_tree2_to_js_test_ex_structural_with_inheritance_foo $mol_object\n\tfield *\n\t\txxx 123\n\t\txxy \\test\n\n$mol_view_tree2_to_js_test_ex_structural_with_inheritance_bar $mol_view_tree2_to_js_test_ex_structural_with_inheritance_foo\n\tfield *\n\t\tyyy 234\n\t\t^\n\t\tzzz 345\n","$mol_view_tree2_to_js_test_ex_bidi_localized_default_value_foo $mol_object\n\ta? <=> b? @ \\some1\n","$mol_view_tree2_to_js_test_ex_simple_mutable_and_read_only_foo $mol_object\n\treadonly null\n\tmutable? null\n","$mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo $mol_object\n\tbar *\n\t\tloc @ \\\\v1\n\t\tbaz *\n\t\t\tloc2 @ \\\\v2\n","$mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_bar $mol_object\n\trows /\n$mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_foo $mol_object\n\tcontent 123\n\tObj $mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_bar\n\t\trows / <= content - 321\n","$mol_view_tree2_to_js_test_ex_bidi_with_separate_default_in_right_part_foo $mol_object\n\tb? false\n\ta? <=> b?\n","$mol_view_tree2_to_js_test_ex_bidi_doubing_right_part_with_same_default_foo $mol_object\n\ta? <=> b? false\n\tc? <=> b? false\n","namespace $ {\n\texport type $mol_view_tree2_to_js_test_ex_klass_tuple_type = 'a' | 'b' | 'c'\n\n\texport class $mol_view_tree2_to_js_test_ex_klass_tuple<V = string> extends $mol_object {\n\t\tconstructor(readonly tuple: readonly string[] = [], readonly some?: { type: V }) {\n\t\t\tsuper()\n\t\t}\n\t}\n}\n","namespace $ {\n\texport class $mol_view_tree2_to_js_test_ex_right_hierarchy_bar extends $mol_object {\n\t\t@ $mol_mem\n\t\ttitle(next?: number) {\n\t\t\treturn 123 + (next ?? 0)\n\t\t}\n\t\tid() {\n\t\t\treturn 0\n\t\t}\n\n\t\t@ $mol_mem_key\n\t\tdomain(id: number) {\n\t\t\treturn {\n\t\t\t\tuser() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid() {\n\t\t\t\t\t\t\treturn 1 + id\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","namespace $ {\n\n\tconst str2js = (function (this: $, data: string, url: string) {\n\t\tconst tree = this.$mol_tree2_from_string(data, url)\n\t\tconst js_tree = this.$mol_view_tree2_to_js(tree)\n\t\tconst js_text = this.$mol_tree2_js_to_text(js_tree)\n\t\tconst js_str = this.$mol_tree2_text_to_string_mapped_js(js_text)\n\t\treturn js_str\n\t}).bind($ as typeof $$)\n\n\texport function $mol_view_tree2_to_js_test_run( tree: string ): any {\n\t\tclass $mol_view_mock extends $mol_object {}\n\t\tconst $ = { $mol_object: $mol_view_mock }\n\t\t;( $mol_view_mock as any )[$mol_ambient_ref] = $\n\n\t\tconst src_uri = `.view.tree`\n\t\tconst js = str2js( tree, src_uri )\n\n\t\teval( js )\n\t\treturn $\n\t}\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t'Bidi bind fallback'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_fallback_foo\n\t\t\tconst foo = _foo.make({ })\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.bar1(),\n\t\t\t\tfoo.bar2(),\n\t\t\t\t1,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.bar2( 2 ),\n\t\t\t\tfoo.bar1(),\n\t\t\t\t2,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.bar1( 1 ),\n\t\t\t\tfoo.bar1(),\n\t\t\t\t1,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.bar1( 1 ),\n\t\t\t\tfoo.bar2(),\n\t\t\t\t1,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.bar2( 3 ),\n\t\t\t\tfoo.bar2(),\n\t\t\t\tfoo.bar1(),\n\t\t\t\t3,\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'Bidi bind legacy value'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_legacy_value_foo\n\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.a(),\n\t\t\t\tfoo.b(),\n\t\t\t\t1,\n\t\t\t)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.b( 2 ),\n\t\t\t\tfoo.a(),\n\t\t\t\t2,\n\t\t\t)\n\t\t},\n\t\t\n\t\t'Bidi bind in dictionary'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_in_dictionary_foo\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t_foo.make({ $ }).event().click({}),\n\t\t\t\t{},\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'Bidi bind chaining'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_chaining_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.c(),\n\t\t\t\tfoo.b(),\n\t\t\t\tfoo.a()\n\t\t\t)\n\t\t},\n\n\t\t'Bidi bind indexed'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_indexed_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\tfoo.owner(1, 'a')\n\t\t\tfoo.owner(2, 'b'),\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.owner(1),\n\t\t\t\tfoo.indexed(1),\n\t\t\t\t'a'\n\t\t\t)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.owner(1, 'a2'),\n\t\t\t\tfoo.indexed(1),\n\t\t\t\t'a2'\n\t\t\t)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.owner(2),\n\t\t\t\tfoo.indexed(2),\n\t\t\t\t'b'\n\t\t\t)\n\t\t},\n\n\t\t'Bidi bind indexed second level'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_foo\n\t\t\tconst _bar = $mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_bar\n\t\t\t_foo.$.$mol_view_tree2_to_js_test_ex_bidi_indexed_second_level_bar = _bar\n\n\t\t\tconst foo = _foo.make({ $ })\n\n\n\t\t\tfoo.owner(1, 'a')\n\t\t\tfoo.owner(2, 'b')\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.owner(1),\n\t\t\t\tfoo.indexed(1).expanded(),\n\t\t\t\t'a'\n\t\t\t)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.owner(2),\n\t\t\t\tfoo.indexed(2).expanded(),\n\t\t\t\t'b'\n\t\t\t)\n\t\t},\n\n\t\t'Bidi bind doubing right part with same default'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_doubing_right_part_with_same_default_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.b(),\n\t\t\t\tfoo.c(),\n\t\t\t\tfoo.a(),\n\t\t\t\tfalse\n\t\t\t)\n\t\t},\n\n\t\t'Bidi bind with separate default in right part'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_with_separate_default_in_right_part_foo\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.b(),\n\t\t\t\tfoo.a()\n\t\t\t)\n\t\t},\n\n\t\t'Bidi bind index from outer scope throws error'( $ ) {\n\t\t\t$mol_assert_fail(() => {\n\t\t\t\t$mol_view_tree2_to_js_test_run(`\n\t\t\t\t\tFoo $mol_view\n\t\t\t\t\t\ta!? $mol_view\n\t\t\t\t\t\t\texpanded <=> cell_test_expanded!? null\n\t\t\t\t`)\n\t\t\t}, `Required prop like some*? at \\`.view.tree#4:21/20\\`\n<=>\n.view.tree#4:17/3\nexpanded\n.view.tree#4:8/8\n$mol_view\n.view.tree#3:11/9\na!?\n.view.tree#3:7/3` )\n\t\t},\n\n\t\t'Bidi bind with default object'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_with_default_object_foo\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\tconst view = new $mol_object\n\t\t\tfoo.owner(view)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.owner(),\n\t\t\t\tfoo.class(),\n\t\t\t\tview\n\t\t\t)\n\t\t},\n\t\t\n\t\t'Bidi bind localized default value'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_localized_default_value_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.b(),\n\t\t\t\tfoo.a(),\n\t\t\t\t`$mol_view_tree2_to_js_test_ex_bidi_localized_default_value_foo_b`,\n\t\t\t)\n\t\t\n\t\t},\n\n\t\t'Bidi bind localized in object'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_bidi_localized_in_object_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.obj().loc(),\n\t\t\t\tfoo.outer(),\n\t\t\t\t`$mol_view_tree2_to_js_test_ex_bidi_localized_in_object_foo_outer`\n\t\t\t)\n\t\t},\n\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'Left bind read only'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_left_read_only_foo\n\t\t\t\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.bar1(),\n\t\t\t\t// @ts-ignore\n\t\t\t\tfoo.bar1( 2 ),\n\t\t\t\tfoo.bar1(),\n\t\t\t\tfoo.bar2(),\n\t\t\t\t1,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.bar2( 2 ),\n\t\t\t\tfoo.bar1(),\n\t\t\t\t2,\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'Left bind second level index'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_left_second_level_index_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_ok(foo.owner(1) instanceof $mol_object)\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.some(1),\n\t\t\t\tfoo.some(1),\n\t\t\t\t`$mol_view_tree2_to_js_test_ex_left_second_level_index_foo_some`\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.owner(1),\n\t\t\t\tfoo.cls(1),\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.owner(1).localized(),\n\t\t\t\tfoo.some(1),\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.cls(2),\n\t\t\t\tfoo.owner(2),\n\t\t\t)\n\t\t},\n\n\t\t'Left bind in array and object'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_left_in_array_and_object_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.obj().prop,\n\t\t\t\tfoo.arr()[0],\n\t\t\t\tfoo.Obj()\n\t\t\t)\n\t\t},\n\n\t\t'Left bind with separate default and comment'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_left_with_separate_default_and_comment_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.Obj().rows(),\n\t\t\t\t[ 123 ]\n\t\t\t)\n\t\t},\n\n\t\t'Left bind chaining'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_left_chaining_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.d(),\n\t\t\t\tfoo.c(),\n\t\t\t\tfoo.b(),\n\t\t\t\tfoo.a(),\n\t\t\t\t0\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.d(1),\n\t\t\t\tfoo.c(),\n\t\t\t\tfoo.b(),\n\t\t\t\tfoo.a(),\n\t\t\t\t1\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\t// @ts-ignore\n\t\t\t\tfoo.a(2),\n\t\t\t\t// @ts-ignore\n\t\t\t\tfoo.b(2),\n\t\t\t\tfoo.c(),\n\t\t\t\tfoo.d(),\n\t\t\t\t1\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.c(2),\n\t\t\t\tfoo.b(),\n\t\t\t\tfoo.a(),\n\t\t\t\t2\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.d(1),\n\t\t\t\t1,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.d(3),\n\t\t\t\tfoo.c(),\n\t\t\t\tfoo.b(),\n\t\t\t\tfoo.a(),\n\t\t\t\t3\n\t\t\t)\n\t\t\t\n\t\t},\n\n\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'Array boolean'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_array_boolean_foo\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\ttype assert_sub = $mol_type_assert<ReturnType<typeof foo['bar']>, readonly boolean[]>\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.bar(),\n\t\t\t\t[ false, true ],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Array number'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_array_number_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\ttype a1 = $mol_type_assert<ReturnType<typeof foo['bar']>, any /* readonly number[] */ >\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.bar(),\n\t\t\t\t[\n\t\t\t\t\tNumber.NaN,\n\t\t\t\t\tNumber.NEGATIVE_INFINITY,\n\t\t\t\t\tNumber.POSITIVE_INFINITY,\n\t\t\t\t\t0,\n\t\t\t\t],\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Array with types'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_array_with_types_foo\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\ttype assert_arr = $mol_type_assert<ReturnType<typeof foo['arr']>, readonly( readonly(number)[] )[]>\n\t\t\t$mol_assert_like(foo.arr(), [])\n\n\t\t},\n\n\t\t'Array of array or object'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_array_of_array_or_object_foo\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\t// type a1 = $mol_type_assert<\n\t\t\t// \tReturnType<typeof foo.complex>,\n\t\t\t// \treadonly (readonly(number | string)[] | Record<string, number | string>)[]\n\t\t\t// >\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.complex(),\n\t\t\t\t[ '1', [ true ], [ '1', 21 ], { a: 1, str: 'some' } ]\n\t\t\t)\n\n\t\t},\n\n\t\t'Array inheritance'( $ ) {\n\t\t\tconst _bar = $mol_view_tree2_to_js_test_ex_array_inheritance_bar\n\n\t\t\t$mol_assert_like(_bar.make({ $ }).arr(), ['v3', 'v1', 'v4' ])\n\n\t\t},\n\n\t\t'Array spread other'( $ ) {\n\t\t\tconst _bar = $mol_view_tree2_to_js_test_ex_array_spread_other_bar\n\t\t\tconst bar = _bar.make({ $ })\n\n\t\t\t$mol_assert_like(bar.arr(), ['v2', 'v1' ])\n\t\t\t$mol_assert_like(bar.arr()[1], bar.sup()[0])\n\n\t\t},\n\n\t\t'Array slot' ($) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_array_slot_foo\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\ttype assert_foot = $mol_type_assert<ReturnType<typeof foo['foot']>, readonly(string | number | boolean)[]>\n\t\t\t$mol_assert_like(foo.foot(), [ 1, true, 'foot1', 2, 3, 'ins1', 1, 'ins2', 'foot2' ])\n\t\t},\n\n\t\t'Array indexed' ($) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_array_indexed_foo\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\ttype assert_tag = $mol_type_assert<Parameters<typeof foo['tags']>[0], any>\n\t\t\ttype assert_slot = $mol_type_assert<Parameters<typeof foo['slot']>[0], any>\n\t\t\ttype assert_tag1 = $mol_type_assert<Parameters<typeof foo['tag1']>[0], any>\n\t\t\ttype assert_tag2 = $mol_type_assert<Parameters<typeof foo['tag2']>[0], any>\n\t\t\t$mol_assert_like(foo.tags(1), [ 't1', 't2' ])\n\t\t\t$mol_assert_like(foo.slot(1), [ 't2' ])\n\t\t},\n\n\t\t'Array union' ($) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_array_union_foo\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\ttype assert_tag = $mol_type_assert<ReturnType<typeof foo['bar']>[number], $mol_view_tree2_to_js_test_ex_klass_tuple_type>\n\t\t\t$mol_assert_like(foo.bar(), [ 'a', 'c', 'b' ])\n\t\t},\n\n\t\t'Array constructor tuple'($) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_array_constructor_tuple_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\ttype a0 = $mol_type_assert<\n\t\t\t\tReturnType<typeof foo['text_blob']>,\n\t\t\t\t$mol_view_tree2_to_js_test_ex_klass_tuple\n\t\t\t>\n\n\t\t\ttype a1 = $mol_type_assert<\n\t\t\t\tReturnType<typeof foo['blobs']>,\n\t\t\t\treadonly any[]\n\t\t\t\t// readonly $mol_view_tree2_to_js_test_ex_klass_tuple[]\n\t\t\t>\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.text_blob().tuple,\n\t\t\t\t[ '123' ]\n\t\t\t)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.blobs(),\n\t\t\t\t[\n\t\t\t\t\tfoo.text_blob(),\n\t\t\t\t]\n\t\t\t)\n\t\t},\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'Right bind read only'( $ ) {\n\t\t\tconst _bar = $mol_view_tree2_to_js_test_ex_right_read_only_bar\n\t\t\t\n\t\t\tconst bar = _bar.make({ $: _bar.$ })\n\n\t\t\t$mol_assert_like(\n\t\t\t\tbar.Obj().a(1),\n\t\t\t\tbar.b(1)\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'Right bind in left bind'( $ ) {\n\t\t\tconst _bar = $mol_view_tree2_to_js_test_ex_right_in_left_bar\n\t\t\t\n\t\t\tconst bar = _bar.make({ $: _bar.$ })\n\n\t\t\t$mol_assert_like(\n\t\t\t\tbar.foo(),\n\t\t\t\tbar.Cls(),\n\t\t\t)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tbar.foo().a(),\n\t\t\t\tbar.Cls().a(),\n\t\t\t\tbar.b()\n\t\t\t)\n\t\t},\n\n\t\t'Right bind indexed'( $ ) {\n\t\t\tconst _bar = $mol_view_tree2_to_js_test_ex_right_indexed_bar\n\t\t\t\n\t\t\tconst bar = _bar.make({ $: _bar.$ })\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tbar.Cls(1).a(),\n\t\t\t\tbar.b(1),\n\t\t\t)\n\n\t\t\t$mol_assert_like(\n\t\t\t\tbar.b(1),\n\t\t\t\t{ some: 123 }\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tbar.Cls(1).a() === bar.b(2),\n\t\t\t\tfalse,\n\t\t\t)\n\t\t},\n\n\t\t'Right hierarchy'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_right_hierarchy_foo\n\t\t\tconst foo = _foo.make({ $: _foo.$ })\n\t\t\ttype prj_user_id_assert = $mol_type_assert<ReturnType<typeof foo['prj_user_id']>, number >\n\t\t\ttype prj_domain_assert = $mol_type_assert<ReturnType<typeof foo['prj_domain']>, {\n\t\t\t\tuser: () => { id: () => number }\n\t\t\t} >\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.prj_user_id(1),\n\t\t\t\t2\n\t\t\t)\n\t\t},\n\n\t\t'Right mixed args'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_right_hierarchy_foo\n\t\t\tconst foo = _foo.make({ $: _foo.$ })\n\t\t\tfoo.indexed_id = id => id + 25\n\n\t\t\t$mol_assert_like( foo.indexed_title(1), 123 )\n\t\t\t$mol_assert_like( foo.Indexed(0).id(), 25 )\n\t\t\t$mol_assert_like( foo.Indexed(1).id(), 26 )\n\t\t\t$mol_assert_like( foo.indexed_title(0, 2), 125 )\n\t\t}\n\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'simple empty class'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_simple_empty_class_foo\n\t\t\t\n\t\t\t$mol_assert_ok(_foo.make({ $ }) instanceof _foo)\n\t\t},\n\n\t\t'simple mutable and read only channels'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_simple_mutable_and_read_only_foo\n\t\t\t\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\ttype assert_ro = $mol_type_assert<ReturnType<typeof foo['readonly']>, any>\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.readonly(),\n\t\t\t\t// @ts-ignore\n\t\t\t\tfoo.readonly( 1 ),\n\t\t\t\tfoo.readonly(),\n\t\t\t\tnull,\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.mutable(),\n\t\t\t\tnull,\n\t\t\t)\n\t\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.mutable(2),\n\t\t\t\tfoo.mutable(),\n\t\t\t\t2,\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'simple string channel'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_simple_string_foo\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\t_foo.make({ $ }).hardcoded(),\n\t\t\t\t'First\\nSecond',\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\t_foo.make({ $ }).localized(),\n\t\t\t\t`$mol_view_tree2_to_js_test_ex_simple_string_foo_localized`,\n\t\t\t)\n\t\t},\n\t\t\n\t\t'simple default indexed channel'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_simple_default_indexed_foo\n\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.a_b(0, 1),\n\t\t\t\tfoo.a_b(0),\n\t\t\t\t1\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.legacy(0, 1),\n\t\t\t\tfoo.legacy(0),\n\t\t\t\t1\n\t\t\t)\n\t\t},\n\n\t\t'simple throw if cyrillic name'( $ ) {\n\t\t\t$mol_assert_fail(() => {\n\t\t\t\t$mol_view_tree2_to_js_test_run(`\n\t\t\t\t\tFoo $mol_object\n\t\t\t\t\t\tsub / <= Чlose_icon $mol_object\n\t\t\t\t`)\n\t\t\t}, `Required prop like some*? at \\`.view.tree#3:16/10\\`\n<=\n.view.tree#3:13/2\n/\n.view.tree#3:11/1\nsub\n.view.tree#3:7/3`)\n\t\t},\n\n\t\t'simple empty legacy indexed channel throws error'( $ ) {\n\t\t\t$mol_assert_fail(() => {\n\t\t\t\t$mol_view_tree2_to_js_test_run(`\n\t\t\t\t\tFoo $mol_object\n\t\t\t\t\t\ta!? null\n\t\t\t\t`)\n\t\t\t}, 'Required prop like some*? at `.view.tree#3:7/3`' )\n\n\t\t\t$mol_assert_fail(() => {\n\t\t\t\t$mol_view_tree2_to_js_test_run(`\n\t\t\t\t\tFoo $mol_object\n\t\t\t\t\t\tb! 1\n\t\t\t\t`)\n\t\t\t}, 'Required prop like some*? at `.view.tree#3:7/2`' )\n\t\t},\n\n\t\t'simple two classes'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_simple_two_classes_foo\n\t\t\tconst _bar = $mol_view_tree2_to_js_test_ex_simple_two_classes_bar\n\t\t\tconst a = _foo.make( { $ })\n\t\t\tconst b = _bar.make( { $ })\n\n\t\t\t$mol_assert_ok(b instanceof _foo)\n\t\t\t$mol_assert_ok(b instanceof _bar)\n\n\t\t\t$mol_assert_equal( a.str(), 'some')\n\t\t\t$mol_assert_equal( b.str(), 'some2')\n\t\t},\n\n\t\t'simple commented node'( $ ) {\n\t\t\tconst { Foo } = $mol_view_tree2_to_js_test_run(`\n\t\t\t\t- Foo $mol_object\n\t\t\t\t\ta!? $mol_object\n\t\t\t\t\t\texpanded <=> cell_test_expanded!? null\n\t\t\t`)\n\t\t\t$mol_assert_ok(Foo === undefined)\n\t\t},\n\n\t\t'simple factory props'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_simple_factory_props_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_ok(typeof foo.button().sub === 'function')\n\n\t\t\t$mol_assert_ok(typeof foo.button().some === 'function')\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.button().loc(),\n\t\t\t\t`$mol_view_tree2_to_js_test_ex_simple_factory_props_foo_button_loc`\n\t\t\t)\n\t\t\t\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.button().deep().loc,\n\t\t\t\t`$mol_view_tree2_to_js_test_ex_simple_factory_props_foo_button_deep_loc`\n\t\t\t)\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.button().sub()[0],\n\t\t\t\t1\n\t\t\t)\n\t\t},\n\n\t\t'simple nan' ($) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_simple_nan_foo\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\ttype assert_a = $mol_type_assert<ReturnType<typeof foo['a']>, number>\n\t\t\ttype assert_d = $mol_type_assert<ReturnType<typeof foo['d']>, number>\n\t\t\ttype assert_f = $mol_type_assert<ReturnType<typeof foo['f']>, number>\n\t\t\t$mol_assert_equal(foo.a(), foo.b(), foo.c(), NaN)\n\t\t\t$mol_assert_equal(foo.d(), Infinity)\n\t\t\t$mol_assert_equal(foo.e(), -Infinity)\n\t\t\t$mol_assert_equal(foo.f(), Infinity)\n\t\t},\n\n\t\t'simple typed null'($) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_simple_typed_null_foo\n\t\t\tconst foo = _foo.make({ $ })\n\t\t\ttype a1 = $mol_type_assert<ReturnType<typeof foo.a>, string | number | null>\n\n\t\t\t$mol_assert_equal(\n\t\t\t\tfoo.a(),\n\t\t\t\tnull\n\t\t\t)\n\t\t},\n\n\t\t'extra char' ($) {\n\t\t\t$mol_assert_fail(() => {\n\t\t\t\t$mol_view_tree2_to_js_test_run(`\n\t\t\t\t\tFoo $mol_object\n\t\t\t\t\t\titem_чount 50\n\t\t\t\t`)\n\t\t\t}, 'Required prop like some*? at `.view.tree#3:7/10`')\n\t\t},\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\t\t\n\t\t'Structural channel'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_structural_foo\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t_foo.make({ $ }).bar(),\n\t\t\t\t{\n\t\t\t\t\talpha: 1,\n\t\t\t\t\tbeta: {},\n\t\t\t\t\txxx: 2,\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Structural dict'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_structural_dict_foo\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t_foo.make({ $ }).bar(),\n\t\t\t\t{\n\t\t\t\t\talpha: 1,\n\t\t\t\t\tbeta: 'a',\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'Structural channel with inheritance'( $ ) {\n\t\t\tconst _bar = $mol_view_tree2_to_js_test_ex_structural_with_inheritance_bar\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t_bar.make({ $ }).field(),\n\t\t\t\t{\n\t\t\t\t\tyyy: 234,\n\t\t\t\t\txxx: 123,\n\t\t\t\t\txxy: 'test',\n\t\t\t\t\tzzz: 345,\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'Structural channel spread other'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_structural_spread_other_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\ttype a1 = $mol_type_assert<\n\t\t\t\tReturnType<typeof foo.field>,\n\t\t\t\t{\n\t\t\t\t\taaa: number\n\t\t\t\t} & {\n\t\t\t\t\tbbb: number\n\t\t\t\t}\n\t\t\t>\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.field(),\n\t\t\t\t{\n\t\t\t\t\tbbb: 321,\n\t\t\t\t\taaa: 123,\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'Structural channel localized prop value'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.bar(),\n\t\t\t\t{\n\t\t\t\t\t'loc': `$mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo_bar_loc`,\n\t\t\t\t\t'baz': { 'loc2': `$mol_view_tree2_to_js_test_ex_structural_localized_prop_value_foo_bar_baz_loc2` }\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'Structural channel quoted props'( $ ) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_structural_quoted_props_foo\n\n\t\t\t$mol_assert_like(\n\t\t\t\t_foo.make({ $ }).bar(),\n\t\t\t\t{\n\t\t\t\t\t'$a': 1,\n\t\t\t\t\t'b-t': {},\n\t\t\t\t},\n\t\t\t)\n\t\t\t\n\t\t},\n\n\t\t'Structural complex key'($) {\n\t\t\tconst _foo = $mol_view_tree2_to_js_test_ex_structural_complex_key_foo\n\t\t\tconst foo = _foo.make({ $ })\n\n\t\t\t$mol_assert_like(\n\t\t\t\tfoo.dictionary(),\n\t\t\t\t{\n\t\t\t\t\t'raw data key': '1',\n\t\t\t\t\t'key2': '2',\n\t\t\t\t\t'key3': '3'\n\t\t\t\t},\n\t\t\t)\n\t\t}\n\n\t})\n\t\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'empty array'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t$mol_array_chunks( [], ()=> true ),\n\t\t\t\t[],\n\t\t\t)\n\n\t\t},\n\n\t\t'one chunk'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t$mol_array_chunks( [ 1, 2, 3, 4, 5 ], ()=> false ),\n\t\t\t\t[ [ 1, 2, 3, 4, 5 ] ],\n\t\t\t)\n\n\t\t},\n\n\t\t'last empty chunk'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t$mol_array_chunks( [ 1, 2, 3, 4, 5 ], (_,i)=> i === 4 ),\n\t\t\t\t[ [ 1, 2, 3, 4, 5 ] ],\n\t\t\t)\n\n\t\t},\n\n\t\t'chunk for every item'() {\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t$mol_array_chunks( [ 1, 2, 3, 4, 5 ], ()=> true ),\n\t\t\t\t[ [1], [2], [3], [4], [5] ],\n\t\t\t)\n\n\t\t},\n\n\t})\n\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'trim array'() {\n\n\t\t\tconst array = [ undefined , null , 0, false , null , undefined , undefined ]\n\t\t\tconst correct = [ undefined , null , 0, false , null ]\n\t\t\t\n\t\t\t$mol_array_trim( array )\n\t\t\t\n\t\t\t$mol_assert_like( array , correct )\n\n\t\t}\n\n\t})\n\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'triplets'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_interval( '2015-01-01/P1M' ).end.toString() ,\n\t\t\t\t'2015-02-01'\n\t\t\t)\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_interval( 'P1M/2015-02-01' ).start.toString() ,\n\t\t\t\t'2015-01-01'\n\t\t\t)\n\t\t\t$mol_assert_equal(\n\t\t\t\tnew $mol_time_interval( '2015-01-01/2015-02-01' ).duration.toString() ,\n\t\t\t\t'PT2678400S'\n\t\t\t)\n\t\t},\n\t\t\n\t\t'comparison'() {\n\t\t\tconst iso = '2021-01-02/2022-03-04'\n\t\t\t$mol_assert_like( new $mol_time_interval( iso ), new $mol_time_interval( iso ) )\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Vector limiting'() {\n\n\t\t\tlet point = new $mol_vector_3d( 7 , 10 , 13 )\n\t\t\tconst res = point.limited( [ [ 1 , 5 ] , [ 15 , 20 ] , [ 5 , 10 ] ] as const )\n\n\t\t\t$mol_assert_equal( res.x , 5 )\n\t\t\t$mol_assert_equal( res.y , 15 )\n\t\t\t$mol_assert_equal( res.z , 10 )\n\n\t\t} ,\n\n\t\t'Vector adding scalar'() {\n\n\t\t\tlet point = new $mol_vector_3d( 1 , 2 , 3 )\n\t\t\tlet res = point.added0( 5 )\n\n\t\t\t$mol_assert_equal( res.x , 6 )\n\t\t\t$mol_assert_equal( res.y , 7 )\n\t\t\t$mol_assert_equal( res.z , 8 )\n\n\t\t} ,\n\n\t\t'Vector adding vector'() {\n\n\t\t\tlet point = new $mol_vector_3d( 1 , 2 , 3 )\n\t\t\tlet res = point.added1( [ 5 , 10 , 15 ] as const )\n\n\t\t\t$mol_assert_equal( res.x , 6 )\n\t\t\t$mol_assert_equal( res.y , 12 )\n\t\t\t$mol_assert_equal( res.z , 18 )\n\n\t\t} ,\n\n\t\t'Vector multiplying scalar'() {\n\n\t\t\tlet point = new $mol_vector_3d( 2 , 3 , 4 )\n\t\t\tlet res = point.multed0( -1 )\n\n\t\t\t$mol_assert_equal( res.x , -2 )\n\t\t\t$mol_assert_equal( res.y , -3 )\n\t\t\t$mol_assert_equal( res.z , -4 )\n\n\t\t} ,\n\n\t\t'Vector multiplying vector'() {\n\n\t\t\tlet point = new $mol_vector_3d( 2 , 3 , 4 )\n\t\t\tlet res = point.multed1( [ 5 , 2 , -2 ] as const )\n\n\t\t\t$mol_assert_equal( res.x , 10 )\n\t\t\t$mol_assert_equal( res.y , 6 )\n\t\t\t$mol_assert_equal( res.z , -8 )\n\n\t\t} ,\n\n\t\t'Matrix adding matrix'() {\n\n\t\t\tlet matrix = new $mol_vector_matrix<2,3>( ...[ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ] as const )\n\t\t\tlet res = matrix.added2( [ [ 10 , 20 ] , [ 30 , 40 ] , [ 50 , 60 ] ] as const )\n\n\t\t\t$mol_assert_equal( res[0][0] , 11 )\n\t\t\t$mol_assert_equal( res[0][1] , 22 )\n\t\t\t$mol_assert_equal( res[1][0] , 33 )\n\t\t\t$mol_assert_equal( res[1][1] , 44 )\n\t\t\t$mol_assert_equal( res[2][0] , 55 )\n\t\t\t$mol_assert_equal( res[2][1] , 66 )\n\n\t\t} ,\n\n\t\t'Matrix multiplying matrix'() {\n\n\t\t\tlet matrix = new $mol_vector_matrix<2,3>( ...[ [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] as const )\n\t\t\tlet res = matrix.multed2( [ [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] as const )\n\n\t\t\t$mol_assert_equal( res[0][0] , 4 )\n\t\t\t$mol_assert_equal( res[0][1] , 9 )\n\t\t\t$mol_assert_equal( res[1][0] , 16 )\n\t\t\t$mol_assert_equal( res[1][1] , 25 )\n\t\t\t$mol_assert_equal( res[2][0] , 36 )\n\t\t\t$mol_assert_equal( res[2][1] , 49 )\n\n\t\t} ,\n\n\t\t'Range expanding'() {\n\n\t\t\tlet range = $mol_vector_range_full.inversed\n\t\t\t\n\t\t\tconst expanded = range.expanded0( 10 ).expanded0( 5 )\n\n\t\t\t$mol_assert_like( [ ... expanded ] , [ 5 , 10 ] )\n\n\t\t} ,\n\n\t\t'Vector of range expanding by vector'() {\n\n\t\t\tlet dimensions = new $mol_vector_2d( $mol_vector_range_full.inversed , $mol_vector_range_full.inversed )\n\t\t\t\n\t\t\tconst expanded = dimensions.expanded1( [ 1 , 7 ] as const ).expanded1( [ 3 , 5 ] as const )\n\n\t\t\t$mol_assert_like( [ ... expanded.x ] , [ 1 , 3 ] )\n\t\t\t$mol_assert_like( [ ... expanded.y ] , [ 5 , 7 ] )\n\n\t\t} ,\n\n\t\t'Vector of range expanding by vector of range'() {\n\n\t\t\tlet dimensions = new $mol_vector_2d( $mol_vector_range_full.inversed , $mol_vector_range_full.inversed )\n\t\t\t\n\t\t\tconst expanded = dimensions\n\t\t\t.expanded2( [ [ 1 , 3 ] , [ 7 , 9 ] ] as const )\n\t\t\t.expanded2( [ [ 2 , 4 ] , [ 6 , 8 ] ] as const )\n\n\t\t\t$mol_assert_like( [ ... expanded.x ] , [ 1 , 4 ] )\n\t\t\t$mol_assert_like( [ ... expanded.y ] , [ 6 , 9 ] )\n\n\t\t} ,\n\n\t\t'Vector of infinity range expanding by vector of range'() {\n\n\t\t\tlet dimensions = new $mol_vector_2d( $mol_vector_range_full.inversed , $mol_vector_range_full.inversed )\n\t\t\tconst next = new $mol_vector_2d( $mol_vector_range_full.inversed , $mol_vector_range_full.inversed )\n\t\t\t\n\t\t\tconst expanded = next\n\t\t\t\t.expanded2( dimensions )\n\n\t\t\t$mol_assert_like( [ ... expanded.x ] , [ Infinity , -Infinity ] )\n\t\t\t$mol_assert_like( [ ... expanded.y ] , [ Infinity , -Infinity ] )\n\n\t\t} ,\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'serial & parse'() {\n\t\t\t\n\t\t\tconst data = [\n\t\t\t\t{ foo: '123', bar: '456' },\n\t\t\t\t{ foo: 'x\"xx', bar: 'y\"y\"y' },\n\t\t\t]\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t$mol_csv_parse( $mol_csv_serial( data ) ),\n\t\t\t\tdata\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t\t'parse & serial'() {\n\t\t\t\n\t\t\tconst csv = 'foo,bar\\n\"123\",\"456\"\\n\"x\"\"xx\",\"y\"\"y\"\"y\"'\n\t\t\t\n\t\t\t$mol_assert_like(\n\t\t\t\t$mol_csv_serial( $mol_csv_parse( csv ) ),\n\t\t\t\tcsv\n\t\t\t)\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is number' () {\n\t\t\t$mol_data_number( 0 )\n\t\t} ,\n\n\t\t'Is not number' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_number( 'x' as any )\n\t\t\t} , 'x is not a number' )\n\t\t} ,\n\n\t\t'Is object number' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_number( new Number( '' ) as any )\n\t\t\t} , '0 is not a number' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is empty array' () {\n\t\t\t$mol_data_array( $mol_data_number )( [] )\n\t\t} ,\n\n\t\t'Is array' () {\n\t\t\t$mol_data_array( $mol_data_number )( [ 1 , 2 ] )\n\t\t} ,\n\n\t\t'Is not array' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_array( $mol_data_number )( { [0] : 1 , length : 1 , map : ()=> {} } as any as number[] )\n\t\t\t} , '[object Object] is not an array' )\n\t\t} ,\n\n\t\t'Has wrong item' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_array( $mol_data_number )( [ 1 , '1' as any as number ] )\n\t\t\t} , '[1] 1 is not a number' )\n\t\t} ,\n\n\t\t'Has wrong deep item' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_array( $mol_data_array( $mol_data_number ) )( [ [] , [ 0 , 0 , false ] ] as any )\n\t\t\t} , '[1] [2] false is not a number' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is boolean - true' () {\n\t\t\t$mol_data_boolean( true )\n\t\t} ,\n\n\t\t'Is boolean - false' () {\n\t\t\t$mol_data_boolean( false )\n\t\t} ,\n\n\t\t'Is not boolean' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_boolean( 'x' as any )\n\t\t\t} , 'x is not a boolean' )\n\t\t} ,\n\n\t\t'Is object boolean' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_boolean( new Boolean( '' ) as any )\n\t\t\t} , 'false is not a boolean' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'is same number' () {\n\t\t\tconst Nan = $mol_data_const( Number.NaN )\n\t\t\tNan( Number.NaN )\n\t\t} ,\n\n\t\t'is equal object' () {\n\t\t\tconst Tags = $mol_data_const({ tags: [ 'deep', 'equals' ] })\n\t\t\tTags({ tags: [ 'deep', 'equals' ] })\n\t\t} ,\n\n\t\t'is different number' () {\n\t\t\tconst Five = $mol_data_const( 5 )\n\t\t\t$mol_assert_fail( ()=> Five( 6 as any ) , '6 is not 5' )\n\t\t} ,\n\n\t\t'is different object' () {\n\t\t\tconst Tags = $mol_data_const({ tags: [ 'deep', 'equals' ] })\n\t\t\t$mol_assert_fail(\n\t\t\t\t()=> Tags({ tags: [ 'shallow', 'equals' ] }),\n\t\t\t\t`{\"tags\":[\"shallow\",\"equals\"]} is not {\"tags\":[\"deep\",\"equals\"]}`,\n\t\t\t)\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is empty dict' () {\n\t\t\t$mol_data_dict( $mol_data_number )( {} )\n\t\t} ,\n\n\t\t'Is dict' () {\n\t\t\t$mol_data_dict( $mol_data_number )({ foo : 123 })\n\t\t} ,\n\n\t\t'Is not dict' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_dict( $mol_data_number )( [ 123 ] as any )\n\t\t\t} , '123 is not an Object' )\n\t\t} ,\n\n\t\t'Has wrong item' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_dict( $mol_data_number )({ foo : 1 , bar : '1' as any as number })\n\t\t\t} , '[\"bar\"] 1 is not a number' )\n\t\t} ,\n\n\t\t'Has wrong deep item' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_dict( $mol_data_dict( $mol_data_number ) )( { foo : { bar : false as any as number } } )\n\t\t\t} , '[\"foo\"] [\"bar\"] false is not a number' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is string' () {\n\t\t\t$mol_data_string( '' )\n\t\t} ,\n\n\t\t'Is not string' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_string( 0 as any )\n\t\t\t} , '0 is not a string' )\n\t\t} ,\n\n\t\t'Is object string' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_string( new String( 'x' ) as any )\n\t\t\t} , 'x is not a string' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is fit' () {\n\t\t\t$mol_data_pattern( /^-$/ )( '-' )\n\t\t} ,\n\n\t\t'Is not fit' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_pattern( /^-$/ )( '+' )\n\t\t\t} , '+ is not a /^-$/' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is email' () {\n\t\t\t$mol_data_email( 'foo@bar' )\n\t\t} ,\n\n\t\t'Has not host' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_email( 'foo@' )\n\t\t\t} , 'foo@ is not a /.+@.+/' )\n\t\t} ,\n\n\t\t'Has not name' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_email( '@bar' )\n\t\t\t} , '@bar is not a /.+@.+/' )\n\t\t} ,\n\n\t\t'Has not @' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_email( 'foo.bar' )\n\t\t\t} , 'foo.bar is not a /.+@.+/' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is same class' () {\n\t\t\t$mol_data_instance( Date )( new Date )\n\t\t} ,\n\n\t\t'Is sub class' () {\n\t\t\t$mol_data_instance( Object )( new Date )\n\t\t} ,\n\n\t\t'Is super class' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_instance( Date )( new Object as any )\n\t\t\t} , '[object Object] is not a Date' )\n\t\t} ,\n\n\t\t'Is another class' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_instance( Date )( new Array as any )\n\t\t\t} , ' is not a Date' )\n\t\t} ,\n\n\t\t'Is not object' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_instance( Date )( null as any )\n\t\t\t} , 'null is not a Date' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is integer' () {\n\t\t\t$mol_data_integer( 0 )\n\t\t} ,\n\n\t\t'Is float' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_integer( 1.1 )\n\t\t\t} , '1.1 is not an integer' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'tagged typing' () {\n\n\t\t\tconst { Weight, Length } = $mol_data_tagged({\n\t\t\t\tWeight: $mol_data_integer,\n\t\t\t\tLength: $mol_data_integer,\n\t\t\t})\n\t\t\t\n\t\t\tLength( 20 ) // Validate\n\t\t\tlet len = Length( 10 ) // Inferred type\n\t\t\t\n\t\t\tlen = 20 as typeof Length.Value // Explicit type\n\t\t\tlet num: number = len // Implicit cast\n\t\t\tlen = Length( Weight( 20 ) ) // Explicit cast\n\t\t\t\n\t\t\t// len = 20 // Compile time error\n\t\t\t// len = Weight( 20 ) // Compile time error\n\t\t\t// len = Length( 20.1 ) // Run time error\n\t\t\t\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Nominal typing' () {\n\n\t\t\tconst Weight = $mol_data_nominal({ Weight : $mol_data_integer })\n\t\t\tconst Length = $mol_data_nominal({ Length : $mol_data_integer })\n\t\t\t\n\t\t\tlet len = Length( 10 )\n\t\t\tlen = Length( 20 ) // Validate\n\t\t\t\n\t\t\tlen = 20 // Implicit Cast\n\t\t\tlet num: number = len // Implicit Cast\n\t\t\tlen = Weight( 20 ) as typeof Length.Value // Explicit Cast\n\t\t\t\n\t\t\t// len = Weight( 20 ) // Compile time error\n\t\t\t// len = Length( 20.1 ) // Run time error\n\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is null' () {\n\t\t\t$mol_data_nullable( $mol_data_number )( null )\n\t\t} ,\n\n\t\t'Is not null' () {\n\t\t\t$mol_data_nullable( $mol_data_number )( 0 )\n\t\t} ,\n\n\t\t'Is undefined' () {\n\t\t\t$mol_assert_fail( ()=> {\n\n\t\t\t\tconst Type = $mol_data_nullable( $mol_data_number )\n\t\t\t\tType( undefined as any )\n\n\t\t\t} , 'undefined is not a number' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t\n\tconst Age = $mol_data_optional( $mol_data_number )\n\tconst Age_or_zero = $mol_data_optional( $mol_data_number, ()=> 0 )\n\t\n\ttype result_type_of_optional = $mol_type_assert<\n\t\ttypeof Age.Value,\n\t\tnumber | undefined\n\t>\n\t\n\ttype result_type_of_fallbacked = $mol_type_assert<\n\t\ttypeof Age_or_zero.Value,\n\t\tnumber\n\t>\n\t\n\t$mol_test({\n\n\t\t'Is not present'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tAge( undefined ),\n\t\t\t\tundefined,\n\t\t\t)\n\t\t} ,\n\n\t\t'Is present'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tAge( 0 ),\n\t\t\t\t0,\n\t\t\t)\n\t\t} ,\n\n\t\t'Fallbacked'() {\n\t\t\t$mol_assert_equal(\n\t\t\t\tAge_or_zero( undefined ),\n\t\t\t\t0,\n\t\t\t)\n\t\t} ,\n\n\t\t'Is null'() {\n\t\t\t$mol_assert_fail(\n\t\t\t\t()=> Age( null as any ),\n\t\t\t\t'null is not a number',\n\t\t\t)\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Closed number range' () {\n\t\t\t\n\t\t\tconst Pos = $mol_data_range( 0, 1 )\n\t\t\t\n\t\t\tPos( Number.EPSILON )\n\t\t\t\n\t\t\t$mol_assert_fail( ()=> Pos( 1 ), '1 is out range (0,1)' )\n\t\t\t$mol_assert_fail( ()=> Pos( 0 ), '0 is out range (0,1)' )\n\t\t\t$mol_assert_fail( ()=> Pos( Number.POSITIVE_INFINITY ), 'Infinity is out range (0,1)' )\n\t\t\t$mol_assert_fail( ()=> Pos( Number.NEGATIVE_INFINITY ), '-Infinity is out range (0,1)' )\n\t\t\t$mol_assert_fail( ()=> Pos( NaN ), 'NaN is out range (0,1)' )\n\t\t\t\n\t\t} ,\n\n\t\t'Open number range' () {\n\t\t\t\n\t\t\tconst Pos = $mol_data_range( 0, Number.POSITIVE_INFINITY )\n\t\t\t\n\t\t\tPos( Number.EPSILON )\n\t\t\tPos( Number.MAX_VALUE )\n\t\t\t\n\t\t\t$mol_assert_fail( ()=> Pos( 0 ), '0 is out range (0,Infinity)' )\n\t\t\t$mol_assert_fail( ()=> Pos( Number.POSITIVE_INFINITY ), 'Infinity is out range (0,Infinity)' )\n\t\t\t$mol_assert_fail( ()=> Pos( Number.NEGATIVE_INFINITY ), '-Infinity is out range (0,Infinity)' )\n\t\t\t$mol_assert_fail( ()=> Pos( NaN ), 'NaN is out range (0,Infinity)' )\n\t\t\t\n\t\t} ,\n\n\t\t'String range' () {\n\t\t\t\n\t\t\tconst Code = $mol_data_range( 'A', 'B' )\n\t\t\t\n\t\t\tCode( 'Aa' )\n\t\t\tCode( 'AZ' )\n\t\t\t\n\t\t\t$mol_assert_fail( ()=> Code( 'A' ), 'A is out range (A,B)' )\n\t\t\t$mol_assert_fail( ()=> Code( 'B' ), 'B is out range (A,B)' )\n\t\t\t\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\n\t$mol_test({\n\n\t\t'Fit to record' () {\n\t\t\tconst User = $mol_data_record({ age : $mol_data_number })\n\t\t\tUser({ age : 0 })\n\t\t} ,\n\n\t\t'Extends record' () {\n\t\t\tconst User = $mol_data_record({ age : $mol_data_number })\n\t\t\tUser( { age : 0 , name : 'Jin' } as any )\n\t\t} ,\n\n\t\t// 'Recursive record' () {\n\n\t\t// \tconst User = $mol_data_record({\n\t\t// \t\tname : $mol_data_string ,\n\t\t// \t\tget kids() { return $mol_data_array( User ) } ,\n\t\t// \t})\n\n\t\t// \tUser({\n\t\t// \t\tname : 'Jin' ,\n\t\t// \t\tkids : [\n\t\t// \t\t\t{\n\t\t// \t\t\t\tname : 'John' ,\n\t\t// \t\t\t\tkids : [] ,\n\t\t// \t\t\t}\n\t\t// \t\t] ,\n\t\t// \t})\n\t\t\n\t\t// } ,\n\n\t\t'Shrinks record' () {\n\t\t\t$mol_assert_fail( ()=> {\n\n\t\t\t\tconst User = $mol_data_record({ age : $mol_data_number , name : $mol_data_string })\n\t\t\t\tUser( { age : 0 } as any )\n\n\t\t\t} , '[\"name\"] undefined is not a string' )\n\t\t} ,\n\n\t\t'Shrinks deep record' () {\n\t\t\t$mol_assert_fail( ()=> {\n\n\t\t\t\tconst User = $mol_data_record({ wife : $mol_data_record({ age : $mol_data_number }) })\n\t\t\t\tUser( { wife : { } } as any )\n\n\t\t\t} , '[\"wife\"] [\"age\"] undefined is not a number' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\n\t\t'Is first' () {\n\t\t\t$mol_data_variant( $mol_data_number , $mol_data_string )( 0 )\n\t\t} ,\n\n\t\t'Is second' () {\n\t\t\t$mol_data_variant( $mol_data_number , $mol_data_string )( '' )\n\t\t} ,\n\n\t\t'Is false' () {\n\t\t\t$mol_assert_fail( ()=> {\n\t\t\t\t$mol_data_variant( $mol_data_number , $mol_data_string )( false as any )\n\t\t\t} , 'false is not any of variants\\n  false is not a number\\n  false is not a string' )\n\t\t} ,\n\n\t})\n}\n","namespace $ {\n\t$mol_test( {\n\t\t\n\t\t'convertion to primitives'() {\n\t\t\t\n\t\t\tvar unit = new $mol_unit_money_usd( 5 )\n\t\t\t\n\t\t\t$mol_assert_equal( unit.valueOf() , 5 )\n\t\t\t$mol_assert_equal( ( unit as any ) * 2 , 10 )\n\t\t\t$mol_assert_equal( unit + '' , '$5' )\n\t\t\t$mol_assert_equal( `${unit}` , '$5' )\n\t\t\t\n\t\t\t$mol_assert_equal( unit.toString() , '$5' )\n\t\t\t$mol_assert_equal( String( unit ) , '$5' )\n\t\t} ,\n\t\t\n\t\t'arithmetic'() {\n\t\t\t\t\n\t\t\tvar usd1 = new $mol_unit_money_usd( 2 )\n\t\t\tvar usd2 = new $mol_unit_money_usd( 3 )\n\t\t\tvar rur = new $mol_unit_money_rur( 2 )\n\t\t\t\n\t\t\t$mol_assert_equal( $mol_unit.summ( usd1 , usd2 ).toString() , '$5' )\n\t\t\t$mol_assert_equal( usd1.mult( 2 ).toString() , '$4' )\n\t\t} ,\n\t\n\t} )\n}\n","namespace $ {\r\n\t$mol_test({\r\n\t\t\r\n\t\t'Wrap & unwrap'() {\r\n\t\t\t\r\n\t\t\tconst val = [1]\r\n\t\t\tconst mut = $mol_mutable( val )\r\n\t\t\t\r\n\t\t\t$mol_assert_equal( val, mut() )\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\t'Deep array'() {\r\n\t\t\t\r\n\t\t\tconst val = [ [1], [2], [3] ]\r\n\t\t\tconst mut = $mol_mutable( val )\r\n\t\t\t\r\n\t\t\t$mol_assert_equal( mut[1][0]( v => -v ), -2 )\r\n\t\t\t\r\n\t\t\t$mol_assert_unique( val, mut() )\r\n\t\t\t\r\n\t\t\t$mol_assert_equal( val[0], mut()[0] )\r\n\t\t\t$mol_assert_equal( val[2], mut()[2] )\r\n\t\t\t\r\n\t\t\t$mol_assert_unique( val[1], mut()[1] )\r\n\t\t\t$mol_assert_like( mut()[1], [-2] )\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\t'Array insert'() {\r\n\t\t\t\r\n\t\t\tconst val = [[ 1, 2, 3, 4 ]]\r\n\t\t\tconst mut = $mol_mutable( val )\r\n\t\t\t\r\n\t\t\t$mol_assert_like(\r\n\t\t\t\tmut[0]( a => [ ... a.slice( 0, 2 ), 7, ... a.slice( 2 ) ] ),\r\n\t\t\t\t[ 1, 2, 7, 3, 4 ],\r\n\t\t\t)\r\n\t\t\t\r\n\t\t\t$mol_assert_like(\r\n\t\t\t\tmut(),\r\n\t\t\t\t[[ 1, 2, 7, 3, 4 ]],\r\n\t\t\t)\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\t'Deep objects'() {\r\n\t\t\t\r\n\t\t\tconst val = { a: { x: 1 }, b: { y: 2 }, c: { z: 3 } }\r\n\t\t\tconst mut = $mol_mutable( val )\r\n\t\t\t\r\n\t\t\t$mol_assert_equal( mut.b.y( v => -v ), -2 )\r\n\t\t\t\r\n\t\t\t$mol_assert_unique( val, mut() )\r\n\t\t\t\r\n\t\t\t$mol_assert_equal( val.a, mut().a )\r\n\t\t\t$mol_assert_equal( val.c, mut().c )\r\n\t\t\t\r\n\t\t\t$mol_assert_unique( val.b, mut().b )\r\n\t\t\t$mol_assert_like( mut().b, { y: -2 } )\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t})\r\n}","namespace $ {\n\t\n\texport function $hyoo_harp_to_string< Query extends $hyoo_harp_query >( query: Query ): string {\n\n\t\treturn Object.entries( query ).map( ([ field, harp ])=> {\n\t\t\t\n\t\t\tif( field === '+' ) return ''\n\t\t\tif( field === '=' ) return ''\n\t\t\tif( field === '!=' ) return ''\n\t\t\tif( !harp ) return ''\n\t\t\t\n\t\t\tconst harp2 = harp as $hyoo_harp_query<any>\n\t\t\t\n\t\t\tconst order = harp2['+'] === true ? '+' : harp2['+'] === false ? '-' : ''\n\t\t\tconst filter = harp2['='] ? '=' : harp2['!='] ? '!=' : ''\n\t\t\tconst name = encodeURIComponent( field )\n\t\t\t\n\t\t\tlet values = ( ( harp2['='] || harp2['!='] || [] ) as unknown[][] ).map( ([ min , max ]) => {\n\n\t\t\t\tif( max === undefined || min === max ) return encodeURIComponent( String( min ) ) + '='\n\t\t\t\t\n\t\t\t\tmin = ( min === undefined ) ? '' : encodeURIComponent( String( min ) )\n\t\t\t\tmax = ( max === undefined ) ? '' : encodeURIComponent( String( max ) )\n\t\t\t\t\n\t\t\t\treturn `${ min }@${ max }=`\n\n\t\t\t} ).join( '' )\n\t\t\t\n\t\t\tlet fetch = $hyoo_harp_to_string( harp as $hyoo_harp_query )\n\t\t\tif( fetch ) fetch = `(${fetch})`\n\n\t\t\treturn `${order}${name}${filter}${values}${fetch}`\n\t\t\t\n\t\t}).filter( Boolean ).join( ';' )\n\n\t}\n\n}\n","namespace $ {\n\t\n\tfunction check< Query extends $hyoo_harp_query<any> >( str: string, query: Query ) {\n\t\t$mol_assert_like( str, $hyoo_harp_to_string( query ) )\n\t\t$mol_assert_like( query, $hyoo_harp_from_string( str ) )\n\t}\n\t\n\t$mol_test({\n\n\t\t'root' () {\n\t\t\tcheck( '', {} )\n\t\t} ,\n\n\t\t'only field' () {\n\t\t\tcheck(\n\t\t\t\t'user%3D777',\n\t\t\t\t{\n\t\t\t\t\t'user=777': {},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'primary key' () {\n\t\t\tcheck(\n\t\t\t\t'user=jin%2C777!=',\n\t\t\t\t{\n\t\t\t\t\tuser: {\n\t\t\t\t\t\t'=': [[ 'jin,777!' ]],\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'single fetch' () {\n\t\t\tcheck(\n\t\t\t\t'friend(age%24)',\n\t\t\t\t{\n\t\t\t\t\tfriend: {\n\t\t\t\t\t\tage$: {},\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'fetch and primary key' () {\n\t\t\tcheck(\n\t\t\t\t'user=jin()=(friend)',\n\t\t\t\t{\n\t\t\t\t\t'user': {\n\t\t\t\t\t\t'=': [[ 'jin()' ]],\n\t\t\t\t\t\tfriend: {},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'multiple fetch' () {\n\t\t\tcheck(\n\t\t\t\t'age;friend',\n\t\t\t\t{\n\t\t\t\t\tage: {},\n\t\t\t\t\tfriend: {},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'common query string back compatible' () {\n\t\t\t$mol_assert_like(\n\t\t\t\t$hyoo_harp_from_string( 'user=jin&age=100500' ),\n\t\t\t\t{\n\t\t\t\t\tuser: {\n\t\t\t\t\t\t'=': [[ 'jin' ]],\n\t\t\t\t\t},\n\t\t\t\t\tage: {\n\t\t\t\t\t\t'=': [[ '100500' ]],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'common pathname back compatible' () {\n\t\t\t$mol_assert_like(\n\t\t\t\t$hyoo_harp_from_string( 'users/jin/comments' ),\n\t\t\t\t{\n\t\t\t\t\tusers: {},\n\t\t\t\t\tjin: {},\n\t\t\t\t\tcomments: {},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'deep fetch' () {\n\t\t\tcheck(\n\t\t\t\t'my(friend(age);name);stat',\n\t\t\t\t{\n\t\t\t\t\tmy: {\n\t\t\t\t\t\tfriend: {\n\t\t\t\t\t\t\tage: {},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname: {},\n\t\t\t\t\t},\n\t\t\t\t\tstat: {},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'orders' () {\n\t\t\tcheck(\n\t\t\t\t'+age;-name',\n\t\t\t\t{\n\t\t\t\t\tage: {\n\t\t\t\t\t\t'+': true\n\t\t\t\t\t},\n\t\t\t\t\tname: {\n\t\t\t\t\t\t'+': false\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'filter types' () {\n\t\t\tcheck(\n\t\t\t\t'sex=female=;status!=married=',\n\t\t\t\t{\n\t\t\t\t\tsex: {\n\t\t\t\t\t\t'=': [[ 'female' ]],\n\t\t\t\t\t},\n\t\t\t\t\tstatus: {\n\t\t\t\t\t\t'!=': [[ 'married' ]],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'filter ranges' () {\n\t\t\tcheck(\n\t\t\t\t'sex=female=;age=18@25=;weight=@50=;height=150@=;hobby=paint=singing=',\n\t\t\t\t{\n\t\t\t\t\tsex: {\n\t\t\t\t\t\t'=': [[ 'female' ]],\n\t\t\t\t\t},\n\t\t\t\t\tage: {\n\t\t\t\t\t\t'=': [[ '18', '25' ]],\n\t\t\t\t\t},\n\t\t\t\t\tweight: {\n\t\t\t\t\t\t'=': [[ '', '50' ]],\n\t\t\t\t\t},\n\t\t\t\t\theight: {\n\t\t\t\t\t\t'=': [[ '150', '' ]],\n\t\t\t\t\t},\n\t\t\t\t\thobby: {\n\t\t\t\t\t\t'=': [ ['paint'], ['singing'] ],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'unescaped values' () {\n\t\t\t$mol_assert_like(\n\t\t\t\t$hyoo_harp_from_string( 'foo=jin=777=;bar=jin!=666=' ),\n\t\t\t\t{\n\t\t\t\t\tfoo: {\n\t\t\t\t\t\t'=': [ ['jin'], ['777'] ],\n\t\t\t\t\t},\n\t\t\t\t\tbar: {\n\t\t\t\t\t\t'=': [ ['jin!'], ['666'] ],\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'slicing' () {\n\t\t\tcheck(\n\t\t\t\t'friend(_num=0@100=)',\n\t\t\t\t{\n\t\t\t\t\tfriend: {\n\t\t\t\t\t\t_num: { '=': [[ '0', '100' ]] },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t\t'complex' () {\n\t\t\tcheck(\n\t\t\t\t'pullRequest(state=closed=merged=;+repository(name;private);-updateTime;_num=0@100=)',\n\t\t\t\t{\n\t\t\t\t\tpullRequest: {\n\t\t\t\t\t\tstate: {\n\t\t\t\t\t\t\t'=': [\n\t\t\t\t\t\t\t\t['closed'],\n\t\t\t\t\t\t\t\t['merged'],\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\trepository: {\n\t\t\t\t\t\t\t'+': true,\n\t\t\t\t\t\t\tname: {},\n\t\t\t\t\t\t\tprivate: {},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupdateTime: {\n\t\t\t\t\t\t\t'+': false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t_num: {\n\t\t\t\t\t\t\t'=': [[ '0', '100' ]],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t} ,\n\t\t\n\t})\n\t\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Word making'() {\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_spell_ru.test( 'пил' ) )\n\t\t\t$mol_assert_ok( $mol_spell_ru.test( 'пила' ) )\n\t\t\t$mol_assert_ok( $mol_spell_ru.test( 'запил' ) )\n\t\t\t$mol_assert_ok( $mol_spell_ru.test( 'завопил' ) )\n\t\t\t$mol_assert_ok( $mol_spell_ru.test( 'пилил' ) )\n\t\t\t$mol_assert_ok( $mol_spell_ru.test( 'пилоел' ) )\n\t\t\t$mol_assert_ok( $mol_spell_ru.test( 'недоперепилоперенедоела' ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Wrong words'() {\n\t\t\t\n\t\t\t$mol_assert_not( $mol_spell_ru.test( 'недперепила' ) )\n\t\t\t$mol_assert_not( $mol_spell_ru.test( 'недоbook' ) )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n","namespace $ {\n\t$mol_test({\n\t\t\n\t\t'Known language'() {\n\t\t\t\n\t\t\t$mol_assert_ok( $mol_spell_any.test( 'пила' ) )\n\t\t\t\n\t\t},\n\t\t\n\t\t'Unknown language'() {\n\t\t\t\n\t\t\t$mol_assert_not( $mol_spell_any.test( 'пиri' ) )\n\t\t\t\n\t\t},\n\t\t\n\t})\n}\n"]}